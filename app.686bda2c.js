// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/object-assign/index.js":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};
},{}],"node_modules/prop-types/lib/ReactPropTypesSecret.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],"node_modules/prop-types/checkPropTypes.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var printWarning = function () {};

if ("development" !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("development" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */


checkPropTypes.resetWarningCache = function () {
  if ("development" !== 'production') {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;
},{"./lib/ReactPropTypesSecret":"node_modules/prop-types/lib/ReactPropTypesSecret.js"}],"node_modules/react/cjs/react.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes'); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    /**
     * Keeps track of the current dispatcher.
     */


    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */

    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }
    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName = void 0; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
      var propName = void 0; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps = void 0;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }

              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }

              return context.Consumer;
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }

    function lazy(ctor) {
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
      {
        // In production, this would just set it on the object.
        var defaultProps = void 0;
        var propTypes = void 0;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }
      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;
      return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }

    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }

    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }

    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }

    function useEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, inputs);
    }

    function useLayoutEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, inputs);
    }

    function useCallback(callback, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, inputs);
    }

    function useMemo(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, inputs);
    }

    function useImperativeHandle(ref, create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, inputs);
    }

    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    var propTypesMisspellWarningShown = void 0;
    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var type = element.type;

      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }

      var name = getComponentName(type);
      var propTypes = void 0;

      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
      // Inner props are checked in the reconciler.
      type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type; // Legacy hook: remove it

      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    } // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


    var enableStableConcurrentModeAPIs = false;
    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,
      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,
      useCallback: useCallback,
      useContext: useContext,
      useEffect: useEffect,
      useImperativeHandle: useImperativeHandle,
      useDebugValue: useDebugValue,
      useLayoutEffect: useLayoutEffect,
      useMemo: useMemo,
      useReducer: useReducer,
      useRef: useRef,
      useState: useState,
      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    }; // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.

    if (enableStableConcurrentModeAPIs) {
      React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      React.Profiler = REACT_PROFILER_TYPE;
      React.unstable_ConcurrentMode = undefined;
      React.unstable_Profiler = undefined;
    }

    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3.default || React$3;
    module.exports = react;
  })();
}
},{"object-assign":"node_modules/object-assign/index.js","prop-types/checkPropTypes":"node_modules/prop-types/checkPropTypes.js"}],"node_modules/react/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}
},{"./cjs/react.development.js":"node_modules/react/cjs/react.development.js"}],"node_modules/scheduler/cjs/scheduler.development.js":[function(require,module,exports) {
var global = arguments[3];
/** @license React v0.13.6
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var enableSchedulerDebugging = false;
    /* eslint-disable no-var */
    // TODO: Use symbols?

    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111

    var maxSigned31BitInt = 1073741823; // Times out immediately

    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.

    var firstCallbackNode = null;
    var currentDidTimeout = false; // Pausing the scheduler is useful for debugging.

    var isSchedulerPaused = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.

    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      } // Schedule the host callback using the earliest expiration in the list.


      var expirationTime = firstCallbackNode.expirationTime;

      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }

      requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.

      var next = firstCallbackNode.next;

      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;

      try {
        continuationCallback = callback();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      } // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.


      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        }; // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.

        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;

          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }

            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if ( // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;

        try {
          do {
            flushFirstCallback();
          } while ( // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;

          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      // Exit right away if we're currently paused
      if (enableSchedulerDebugging && isSchedulerPaused) {
        return;
      }

      isExecutingCallback = true;
      var previousDidTimeout = currentDidTimeout;
      currentDidTimeout = didTimeout;

      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
            // TODO Wrap in feature flag
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();

            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));

              continue;
            }

            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              if (enableSchedulerDebugging && isSchedulerPaused) {
                break;
              }

              flushFirstCallback();
            } while (firstCallbackNode !== null && !shouldYieldToHost());
          }
        }
      } finally {
        isExecutingCallback = false;
        currentDidTimeout = previousDidTimeout;

        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        } // Before exiting, flush all the immediate work that was scheduled.


        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;

        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_next(eventHandler) {
      var priorityLevel = void 0;

      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;

        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();
      var expirationTime;

      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;

          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;

          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;

          case LowPriority:
            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
            break;

          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      }; // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.

      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;

        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }

          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_pauseExecution() {
      isSchedulerPaused = true;
    }

    function unstable_continueExecution() {
      isSchedulerPaused = false;

      if (firstCallbackNode !== null) {
        ensureHostCallbackIsScheduled();
      }
    }

    function unstable_getFirstCallbackNode() {
      return firstCallbackNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;

      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }

        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    function unstable_shouldYield() {
      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    } // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.


    var localDate = Date; // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088

    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.

    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.

    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;

    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;

      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;
    var globalValue = null;

    if (typeof window !== 'undefined') {
      globalValue = window;
    } else if (typeof global !== 'undefined') {
      globalValue = global;
    }

    if (globalValue && globalValue._schedMock) {
      // Dynamic injection, only for testing purposes.
      var globalImpl = globalValue._schedMock;
      requestHostCallback = globalImpl[0];
      cancelHostCallback = globalImpl[1];
      shouldYieldToHost = globalImpl[2];
      exports.unstable_now = globalImpl[3];
    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;

      var _flushCallback = function (didTimeout) {
        if (_callback !== null) {
          try {
            _callback(didTimeout);
          } finally {
            _callback = null;
          }
        }
      };

      requestHostCallback = function (cb, ms) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0, false);
        }
      };

      cancelHostCallback = function () {
        _callback = null;
      };

      shouldYieldToHost = function () {
        return false;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }

        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;
      var isAnimationFrameScheduled = false;
      var isFlushingHostCallback = false;
      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.

      var previousFrameTime = 33;
      var activeFrameTime = 33;

      shouldYieldToHost = function () {
        return frameDeadline <= exports.unstable_now();
      }; // We use the postMessage trick to defer idle work until after the repaint.


      var channel = new MessageChannel();
      var port = channel.port2;

      channel.port1.onmessage = function (event) {
        isMessageEventScheduled = false;
        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;
        var currentTime = exports.unstable_now();
        var didTimeout = false;

        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            } // Exit without invoking the callback.


            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;

          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };

      var animationTick = function (rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          } // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.


          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }

        frameDeadline = rafTime + activeFrameTime;

        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          port.postMessage(undefined);
        }
      };

      requestHostCallback = function (callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;

        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          port.postMessage(undefined);
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function () {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_next = unstable_next;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  })();
}
},{}],"node_modules/scheduler/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  module.exports = require('./cjs/scheduler.development.js');
}
},{"./cjs/scheduler.development.js":"node_modules/scheduler/cjs/scheduler.development.js"}],"node_modules/scheduler/cjs/scheduler-tracing.development.js":[function(require,module,exports) {
/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.

    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.

      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--; // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;

      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      } // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.


      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true; // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.

            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;

    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
},{}],"node_modules/scheduler/tracing.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/scheduler-tracing.production.min.js');
} else {
  module.exports = require('./cjs/scheduler-tracing.development.js');
}
},{"./cjs/scheduler-tracing.development.js":"node_modules/scheduler/cjs/scheduler-tracing.development.js"}],"node_modules/react-dom/cjs/react-dom.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var React = require('react');

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes');

    var scheduler = require('scheduler');

    var tracing = require('scheduler/tracing');
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.


    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // unintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
          var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.

          var didError = true; // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.

          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688

          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.

          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.

            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          } // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.


          var error = void 0; // Use this to track whether the error event is ever called.

          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }

            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {// Ignore.
                }
              }
            }
          } // Create a fake event type.


          var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.

          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }

            this.onError(error);
          } // Remove our event listeners


          window.removeEventListener('error', handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.

    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.

    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */


    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        var error = clearCaughtError();

        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */


    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }
    /**
     * Injectable ordering of event plugins.
     */


    var eventPluginOrder = null;
    /**
     * Injectable mapping from names to event plugin modules.
     */

    var namesToPlugins = {};
    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */

    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }

      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;

        if (plugins[pluginIndex]) {
          continue;
        }

        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;

        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }
    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */


    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      eventNameDispatchConfigs[eventName] = dispatchConfig;
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }

        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }

      return false;
    }
    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */


    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }
    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */

    /**
     * Ordered list of injected plugins.
     */


    var plugins = [];
    /**
     * Mapping from event name to dispatch config
     */

    var eventNameDispatchConfigs = {};
    /**
     * Mapping from registration name to plugin module
     */

    var registrationNameModules = {};
    /**
     * Mapping from registration name to event name
     */

    var registrationNameDependencies = {};
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */

    var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */

    function injectEventPluginOrder(injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0; // Clone the ordering so it cannot be dynamically mutated.

      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */


    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;

      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }

        var pluginModule = injectedNamesToPlugins[pluginName];

        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }

      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
      };
    }
    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */

    function executeDispatch(event, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */


    function executeDispatchesInOrder(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          } // Listeners and Instances are two parallel arrays that are always in sync.


          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, dispatchListeners, dispatchInstances);
      }

      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }
    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */


    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      } // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).


      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }

        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }
    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */


    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }
    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */


    var eventQueue = null;
    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */

    var executeDispatchesAndRelease = function (event) {
      if (event) {
        executeDispatchesInOrder(event);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));

        default:
          return false;
      }
    }
    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */

    /**
     * Methods for injecting dependencies.
     */


    var injection = {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: injectEventPluginsByName
    };
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */

    function getListener(inst, registrationName) {
      var listener = void 0; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon

      var stateNode = inst.stateNode;

      if (!stateNode) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }

      var props = getFiberCurrentPropsFromNode(stateNode);

      if (!props) {
        // Work in progress.
        return null;
      }

      listener = props[registrationName];

      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }

      !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
      return listener;
    }
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */


    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;

      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];

        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }

      return events;
    }

    function runEventsInBatch(events) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      } // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.


      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0; // This would be a good time to rethrow if any of the event handlers threw.

      rethrowCaughtError();
    }

    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events);
    }

    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class

    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */


    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      while (!node[internalInstanceKey]) {
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var inst = node[internalInstanceKey];

      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }

      return null;
    }
    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */


    function getInstanceFromNode$1(node) {
      var inst = node[internalInstanceKey];

      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else {
          return null;
        }
      }

      return null;
    }
    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */


    function getNodeFromInstance$1(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      } // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.


      invariant(false, 'getNodeFromInstance: Invalid argument.');
    }

    function getFiberCurrentPropsFromNode$1(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps(node, props) {
      node[internalEventHandlersKey] = props;
    }

    function getParent(inst) {
      do {
        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        // That is depending on if we want nested subtrees (layers) to bubble
        // events to their parent. We could also go through parentNode on the
        // host node but that wouldn't work for React Native and doesn't let us
        // do the portal feature.
      } while (inst && inst.tag !== HostComponent);

      if (inst) {
        return inst;
      }

      return null;
    }
    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */


    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;

      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }

      var depthB = 0;

      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      } // If A is deeper, crawl up.


      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      } // If B is deeper, crawl up.


      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      } // Walk in lockstep until we find a match.


      var depth = depthA;

      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }

        instA = getParent(instA);
        instB = getParent(instB);
      }

      return null;
    }
    /**
     * Return if A is an ancestor of B.
     */

    /**
     * Return the parent instance of the passed-in instance.
     */

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */


    function traverseTwoPhase(inst, fn, arg) {
      var path = [];

      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }

      var i = void 0;

      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }

      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */


    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];

      while (true) {
        if (!from) {
          break;
        }

        if (from === common) {
          break;
        }

        var alternate = from.alternate;

        if (alternate !== null && alternate === common) {
          break;
        }

        pathFrom.push(from);
        from = getParent(from);
      }

      var pathTo = [];

      while (true) {
        if (!to) {
          break;
        }

        if (to === common) {
          break;
        }

        var _alternate = to.alternate;

        if (_alternate !== null && _alternate === common) {
          break;
        }

        pathTo.push(to);
        to = getParent(to);
      }

      for (var i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }

      for (var _i = pathTo.length; _i-- > 0;) {
        fn(pathTo[_i], 'captured', argTo);
      }
    }
    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */


    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }
    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */


    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);

      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */


    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }
    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */


    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }
    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */


    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)

    function unsafeCastStringToDOMTopLevelType(topLevelType) {
      return topLevelType;
    }

    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
      return topLevelType;
    }
    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */


    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
     * A list of event names to a configurable list of vendor prefixes.
     */


    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
     * Event names that have already been detected and prefixed (if applicable).
     */

    var prefixedEventNames = {};
    /**
     * Element to check for prefixes on.
     */

    var style = {};
    /**
     * Bootstrap if a DOM exists.
     */

    if (canUseDOM) {
      style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.

      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      } // Same as above


      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */


    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return eventName;
    }
    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */


    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

    function getRawEventName(topLevelType) {
      return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */


    var root = null;
    var startText = null;
    var fallbackText = null;

    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }

    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }

    function getData() {
      if (fallbackText) {
        return fallbackText;
      }

      var start = void 0;
      var startValue = startText;
      var startLength = startValue.length;
      var end = void 0;
      var endValue = getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;

      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }

    function getText() {
      if ('value' in root) {
        return root.value;
      }

      return root.textContent;
    }
    /* eslint valid-typeof: 0 */


    var EVENT_POOL_SIZE = 10;
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: function () {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */


    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      var Interface = this.constructor.Interface;

      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }

        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];

        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function () {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = functionThatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }

        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
          Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;
    /**
     * Helper to reduce boilerplate when creating subclasses.
     */

    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function () {};

      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }

      _assign(prototype, Class.prototype);

      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);
    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */

    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;

      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }

      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
      event.destructor();

      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */


    var SyntheticCompositionEvent = SyntheticEvent.extend({
      data: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */

    var SyntheticInputEvent = SyntheticEvent.extend({
      data: null
    });
    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;

    if (canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    } // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.


    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.

    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      }
    }; // Track whether we've ever handled a keypress on the space key.

    var hasSpaceKeypress = false;
    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */

    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */


    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case TOP_COMPOSITION_START:
          return eventTypes.compositionStart;

        case TOP_COMPOSITION_END:
          return eventTypes.compositionEnd;

        case TOP_COMPOSITION_UPDATE:
          return eventTypes.compositionUpdate;
      }
    }
    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_KEY_UP:
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

        case TOP_KEY_DOWN:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;

        case TOP_KEY_PRESS:
        case TOP_MOUSE_DOWN:
        case TOP_BLUR:
          // Events are not possible without cancelling IME.
          return true;

        default:
          return false;
      }
    }
    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */


    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;

      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }

      return null;
    }
    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.


    var isComposing = false;
    /**
     * @return {?object} A SyntheticCompositionEvent.
     */

    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType = void 0;
      var fallbackData = void 0;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);

        if (customData !== null) {
          event.data = customData;
        }
      }

      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */


    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_COMPOSITION_END:
          return getDataFromCustomEvent(nativeEvent);

        case TOP_KEY_PRESS:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;

          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case TOP_TEXT_INPUT:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.

          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */


    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }

        return null;
      }

      switch (topLevelType) {
        case TOP_PASTE:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;

        case TOP_KEY_PRESS:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }

          return null;

        case TOP_COMPOSITION_END:
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

        default:
          return null;
      }
    }
    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */


    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars = void 0;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      } // If no characters are being inserted, no BeforeInput event should
      // be fired.


      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
      event.data = chars;
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */


    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        if (composition === null) {
          return beforeInput;
        }

        if (beforeInput === null) {
          return composition;
        }

        return [composition, beforeInput];
      }
    }; // Use to restore controlled state after a change event has fired.

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        // Unmounted
        return;
      }

      !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }

    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    } // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults


    var _batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var _interactiveUpdatesImpl = function (fn, a, b) {
      return fn(a, b);
    };

    var _flushInteractiveUpdatesImpl = function () {};

    var isBatching = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isBatching) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }

      isBatching = true;

      try {
        return _batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isBatching = false;
        var controlledComponentsHavePendingUpdates = needsStateRestore();

        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          _flushInteractiveUpdatesImpl();

          restoreStateIfNeeded();
        }
      }
    }

    function interactiveUpdates(fn, a, b) {
      return _interactiveUpdatesImpl(fn, a, b);
    }

    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
      _batchedUpdatesImpl = batchedUpdatesImpl;
      _interactiveUpdatesImpl = interactiveUpdatesImpl;
      _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */


    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }
    /**
     * HTML nodeType values that represent the type of the node
     */


    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html


      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */


    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      return isSupported;
    }

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';

      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)

      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }

      var get = descriptor.get,
          set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      }); // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768

      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    function track(node) {
      if (getTracker(node)) {
        return;
      } // TODO: Once it's just Fiber we can move this to node._wrapperState


      node._valueTracker = trackValueOnNode(node);
    }

    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }

      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
      // that trying again will succeed

      if (!tracker) {
        return true;
      }

      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);

      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }

      return false;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.

    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
      ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
      };
    }

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.


    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case HostRoot:
        case HostPortal:
        case HostText:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
          return '';

        default:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner.type);
          }

          return describeComponentFrame(name, source, ownerName);
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);

      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }

        var owner = current._debugOwner;

        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        } // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.


        return getStackByFiberInDevAndProd(current);
      }
      return '';
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning; // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.

    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.

    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.

    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.

    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.

    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.

    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.

    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */

    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */

    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }

      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }

      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }

      illegalAttributeNameCache[attributeName] = true;
      {
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }

      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }

      switch (typeof value) {
        case 'function': // $FlowIssue symbol is perfectly valid here

        case 'symbol':
          // eslint-disable-line
          return true;

        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }

        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }

      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;

          case OVERLOADED_BOOLEAN:
            return value === false;

          case NUMERIC:
            return isNaN(value);

          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }

      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.


    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

    ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.

    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).

    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.

    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML boolean attributes.

    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.

    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.

    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be positive numbers.

    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be numbers.

    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;

    var capitalize = function (token) {
      return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.


    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null);
    } // attributeNamespace
    ); // String SVG attributes with the xlink namespace.

    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink');
    }); // String SVG attributes with the xml namespace.

    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace');
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.

    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */

    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;

          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);

              if (value === '') {
                return true;
              }

              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }

              if (value === '' + expected) {
                return expected;
              }

              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }

            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            } // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.


            stringValue = node.getAttribute(attributeName);
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */


    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }

        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }

        var value = node.getAttribute(name);

        if (value === '' + expected) {
          return expected;
        }

        return value;
      }
    }
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */


    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);

      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }

      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      } // If the prop isn't in the special list, treat it as a simple attribute.


      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;

          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }

        return;
      }

      var mustUseProperty = propertyInfo.mustUseProperty;

      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;

        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }

        return;
      } // The rest are treated as attributes with special cases.


      var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;

      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue = void 0;

        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          attributeValue = '' + value;
        }

        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    } // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.


    function toString(value) {
      return '' + value;
    }

    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;

        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }

    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };
    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      var propTypes = {
        value: function (props, propName, componentName) {
          if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      };
      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */

      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
      };
    }
    var enableUserTimingAPI = true; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:

    var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.

    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

    var warnAboutDeprecatedLifecycles = false; // Gather advanced timing metrics for Profiler subtrees.

    var enableProfilerTimer = true; // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.

    var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var enableStableConcurrentModeAPIs = false;
    var warnAboutShorthandPropertyCollision = false; // TODO: direct imports like some-package/src/* are bad. Fix me.

    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */


    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;

      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });

      return hostProps;
    }

    function initWrapperState(element, props) {
      {
        ReactControlledValuePropTypes.checkPropTypes('input', props);

        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }

    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;

      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }

    function updateWrapper(element, props) {
      var node = element;
      {
        var _controlled = isControlled(props);

        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
          warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnUncontrolledToControlled = true;
        }

        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
          warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;

      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the value attribute, React only assigns a new value
        // whenever the defaultValue React prop has changed. When not present,
        // React does nothing
        if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      } else {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the attribute is directly
        // controllable from the defaultValue React property. It needs to be
        // updated as new props come in.
        if (props.defaultChecked == null) {
          node.removeAttribute('checked');
        } else {
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }

    function postMountWrapper(element, props, isHydrating) {
      var node = element; // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.

      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872

        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }

        var _initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.


        if (!isHydrating) {
          if (disableInputAttributeSyncing) {
            var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
            // directly to the React prop. Only assign it if it exists.

            if (value != null) {
              // Always assign on buttons so that it is possible to assign an
              // empty string to clear button text.
              //
              // Otherwise, do not re-assign the value property if is empty. This
              // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
              // prematurely marking required inputs as invalid. Equality is compared
              // to the current value in case the browser provided value is not an
              // empty string.
              if (isButton || value !== node.value) {
                node.value = toString(value);
              }
            }
          } else {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            if (_initialValue !== node.value) {
              node.value = _initialValue;
            }
          }
        }

        if (disableInputAttributeSyncing) {
          // When not syncing the value attribute, assign the value attribute
          // directly from the defaultValue React property (when present)
          var defaultValue = getToStringValue(props.defaultValue);

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        } else {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = _initialValue;
        }
      } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.


      var name = node.name;

      if (name !== '') {
        node.name = '';
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the checked property
        // never gets assigned. It must be manually set. We don't want
        // to do this when hydrating so that existing user input isn't
        // modified
        if (!isHydrating) {
          updateChecked(element, props);
        } // Only assign the checked attribute if it is defined. This saves
        // a DOM write when controlling the checked attribute isn't needed
        // (text inputs, submit/reset)


        if (props.hasOwnProperty('defaultChecked')) {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }

      if (name !== '') {
        node.name = name;
      }
    }

    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }

    function updateNamedCousins(rootNode, props) {
      var name = props.name;

      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        } // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.


        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];

          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          } // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.


          var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0; // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set

          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.

          updateWrapper(otherNode, otherProps);
        }
      }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253


    function setDefaultValue(node, type, value) {
      if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || node.ownerDocument.activeElement !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change'; // Flag this event loop as needing state restore.

      enqueueStateRestore(target);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */


    var activeElement = null;
    var activeElementInst = null;
    /**
     * SECTION: handle `change` event
     */

    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.

      batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      runEventsInBatch(event);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance$1(targetInst);

      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CHANGE) {
        return targetInst;
      }
    }
    /**
     * SECTION: handle `input` event
     */


    var isInputEventSupported = false;

    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */


    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */


    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }

      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */


    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }

      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === TOP_FOCUS) {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === TOP_BLUR) {
        stopWatchingForValueChange();
      }
    } // For IE8 and IE9.


    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
     * SECTION: handle `click` event
     */


    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CLICK) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(node) {
      var state = node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      if (!disableInputAttributeSyncing) {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */


    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,
      _isInputEventSupported: isInputEventSupported,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
        var getTargetInstFunc = void 0,
            handleEventFunc = void 0;

        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);

          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        } // When blurring, set the value attribute for number inputs


        if (topLevelType === TOP_BLUR) {
          handleControlledInputBlur(targetNode);
        }
      }
    };
    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */

    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
    var SyntheticUIEvent = SyntheticEvent.extend({
      view: null,
      detail: null
    });
    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.

    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;

      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }

      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var previousScreenX = 0;
    var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticMouseEvent = SyntheticUIEvent.extend({
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      },
      movementX: function (event) {
        if ('movementX' in event) {
          return event.movementX;
        }

        var screenX = previousScreenX;
        previousScreenX = event.screenX;

        if (!isMovementXSet) {
          isMovementXSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenX - screenX : 0;
      },
      movementY: function (event) {
        if ('movementY' in event) {
          return event.movementY;
        }

        var screenY = previousScreenY;
        previousScreenY = event.screenY;

        if (!isMovementYSet) {
          isMovementYSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenY - screenY : 0;
      }
    });
    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */

    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
      pointerId: null,
      width: null,
      height: null,
      pressure: null,
      tangentialPressure: null,
      tiltX: null,
      tiltY: null,
      twist: null,
      pointerType: null,
      isPrimary: null
    });
    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      pointerEnter: {
        registrationName: 'onPointerEnter',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      },
      pointerLeave: {
        registrationName: 'onPointerLeave',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      }
    };
    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

        if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return null;
        }

        var win = void 0;

        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;

          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from = void 0;
        var to = void 0;

        if (isOutEvent) {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var eventInterface = void 0,
            leaveEventType = void 0,
            enterEventType = void 0,
            eventTypePrefix = void 0;

        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
          eventInterface = SyntheticMouseEvent;
          leaveEventType = eventTypes$2.mouseLeave;
          enterEventType = eventTypes$2.mouseEnter;
          eventTypePrefix = 'mouse';
        } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
          eventInterface = SyntheticPointerEvent;
          leaveEventType = eventTypes$2.pointerLeave;
          enterEventType = eventTypes$2.pointerEnter;
          eventTypePrefix = 'pointer';
        }

        var fromNode = from == null ? win : getNodeFromInstance$1(from);
        var toNode = to == null ? win : getNodeFromInstance$1(to);
        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
        leave.type = eventTypePrefix + 'leave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
        enter.type = eventTypePrefix + 'enter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;
        accumulateEnterLeaveDispatches(leave, enter, from, to);
        return [leave, enter];
      }
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
      ;
    }

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      } // Test for A's keys different from B.


      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }
    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */


    function get(key) {
      return key._reactInternalFiber;
    }

    function has(key) {
      return key._reactInternalFiber !== undefined;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    } // Don't change these two values. They're used by React Dev Tools.


    var NoEffect =
    /*              */
    0;
    var PerformedWork =
    /*         */
    1; // You can change the rest (and add more).

    var Placement =
    /*             */
    2;
    var Update =
    /*                */
    4;
    var PlacementAndUpdate =
    /*    */
    6;
    var Deletion =
    /*              */
    8;
    var ContentReset =
    /*          */
    16;
    var Callback =
    /*              */
    32;
    var DidCapture =
    /*            */
    64;
    var Ref =
    /*                   */
    128;
    var Snapshot =
    /*              */
    256;
    var Passive =
    /*               */
    512; // Passive & Update & Callback & Ref & Snapshot

    var LifecycleEffectMask =
    /*   */
    932; // Union of all host effects

    var HostEffectMask =
    /*        */
    1023;
    var Incomplete =
    /*            */
    1024;
    var ShouldCapture =
    /*         */
    2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node.return) {
          node = node.return;

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node.return) {
          node = node.return;
        }
      }

      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      } // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.


      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;

        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      } // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.


      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a.return;
        var parentB = parentA ? parentA.alternate : null;

        if (!parentA || !parentB) {
          // We're at the root.
          break;
        } // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.


        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          } // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.


          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      } // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.


      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      } // Otherwise B has to be current branch.


      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function addEventCaptureListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, true);
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */


    var SyntheticAnimationEvent = SyntheticEvent.extend({
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */

    var SyntheticClipboardEvent = SyntheticEvent.extend({
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    });
    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticFocusEvent = SyntheticUIEvent.extend({
      relatedTarget: null
    });
    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

    function getEventCharCode(nativeEvent) {
      var charCode = void 0;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.


      if (charCode === 10) {
        charCode = 13;
      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.


      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }
    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */


    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */

    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

        if (key !== 'Unidentified') {
          return key;
        }
      } // Browser does not implement `key`, polyfill as much of it as we can.


      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.

        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }

      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }

      return '';
    }
    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */


    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      }
    });
    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticDragEvent = SyntheticMouseEvent.extend({
      dataTransfer: null
    });
    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */

    var SyntheticTouchEvent = SyntheticUIEvent.extend({
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */

    var SyntheticTransitionEvent = SyntheticEvent.extend({
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },
      deltaZ: null,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    });
    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */

    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};

    function addEventTypeNameToConfig(_ref, isInteractive) {
      var topEvent = _ref[0],
          event = _ref[1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        isInteractive: isInteractive
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    }

    interactiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, false);
    }); // Only used in DEV for exhaustiveness validation.

    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,
      isInteractiveTopLevelEventType: function (topLevelType) {
        var config = topLevelEventsToDispatchConfig[topLevelType];
        return config !== undefined && config.isInteractive === true;
      },
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

        if (!dispatchConfig) {
          return null;
        }

        var EventConstructor = void 0;

        switch (topLevelType) {
          case TOP_KEY_PRESS:
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }

          /* falls through */

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            EventConstructor = SyntheticKeyboardEvent;
            break;

          case TOP_BLUR:
          case TOP_FOCUS:
            EventConstructor = SyntheticFocusEvent;
            break;

          case TOP_CLICK:
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }

          /* falls through */

          case TOP_AUX_CLICK:
          case TOP_DOUBLE_CLICK:
          case TOP_MOUSE_DOWN:
          case TOP_MOUSE_MOVE:
          case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

          /* falls through */

          case TOP_MOUSE_OUT:
          case TOP_MOUSE_OVER:
          case TOP_CONTEXT_MENU:
            EventConstructor = SyntheticMouseEvent;
            break;

          case TOP_DRAG:
          case TOP_DRAG_END:
          case TOP_DRAG_ENTER:
          case TOP_DRAG_EXIT:
          case TOP_DRAG_LEAVE:
          case TOP_DRAG_OVER:
          case TOP_DRAG_START:
          case TOP_DROP:
            EventConstructor = SyntheticDragEvent;
            break;

          case TOP_TOUCH_CANCEL:
          case TOP_TOUCH_END:
          case TOP_TOUCH_MOVE:
          case TOP_TOUCH_START:
            EventConstructor = SyntheticTouchEvent;
            break;

          case TOP_ANIMATION_END:
          case TOP_ANIMATION_ITERATION:
          case TOP_ANIMATION_START:
            EventConstructor = SyntheticAnimationEvent;
            break;

          case TOP_TRANSITION_END:
            EventConstructor = SyntheticTransitionEvent;
            break;

          case TOP_SCROLL:
            EventConstructor = SyntheticUIEvent;
            break;

          case TOP_WHEEL:
            EventConstructor = SyntheticWheelEvent;
            break;

          case TOP_COPY:
          case TOP_CUT:
          case TOP_PASTE:
            EventConstructor = SyntheticClipboardEvent;
            break;

          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE:
          case TOP_POINTER_CANCEL:
          case TOP_POINTER_DOWN:
          case TOP_POINTER_MOVE:
          case TOP_POINTER_OUT:
          case TOP_POINTER_OVER:
          case TOP_POINTER_UP:
            EventConstructor = SyntheticPointerEvent;
            break;

          default:
            {
              if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
              }
            } // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0

            EventConstructor = SyntheticEvent;
            break;
        }

        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */

    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      while (inst.return) {
        inst = inst.return;
      }

      if (inst.tag !== HostRoot) {
        // This can happen if we're in a detached tree.
        return null;
      }

      return inst.stateNode.containerInfo;
    } // Used to store ancestor hierarchy in top level callback


    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }

      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;

      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevel(bookKeeping) {
      var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.

      var ancestor = targetInst;

      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }

        var root = findRootContainerNode(ancestor);

        if (!root) {
          break;
        }

        bookKeeping.ancestors.push(ancestor);
        ancestor = getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    } // TODO: can we stop exporting these?


    var _enabled = true;

    function setEnabled(enabled) {
      _enabled = !!enabled;
    }

    function isEnabled() {
      return _enabled;
    }
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapBubbledEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventBubbleListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapCapturedEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventCaptureListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
      interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }

    function dispatchEvent(topLevelType, nativeEvent) {
      if (!_enabled) {
        return;
      }

      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);

      if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }

      var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        batchedUpdates(handleTopLevel, bookKeeping);
      } finally {
        releaseTopLevelCallbackBookKeeping(bookKeeping);
      }
    }
    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */


    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;
    /**
     * To ensure no conflicts with other potential React instances on the page
     */

    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }

      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */


    function listenTo(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          switch (dependency) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;

            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
              // but this ensures we mark both as attached rather than just one.

              isListening[TOP_BLUR] = true;
              isListening[TOP_FOCUS] = true;
              break;

            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(dependency))) {
                trapCapturedEvent(dependency, mountAt);
              }

              break;

            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              // We listen to them on the target DOM elements.
              // Some of them bubble so we don't want them to fire twice.
              break;

            default:
              // By default, listen on the top level to all non-media events.
              // Media events don't bubble so adding the listener wouldn't do anything.
              var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;

              if (!isMediaEvent) {
                trapBubbledEvent(dependency, mountAt);
              }

              break;
          }

          isListening[dependency] = true;
        }
      }
    }

    function isListeningToAllDependencies(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          return false;
        }
      }

      return true;
    }

    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);

      if (typeof doc === 'undefined') {
        return null;
      }

      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */


    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }

      return node;
    }
    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */


    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }

        node = node.parentNode;
      }
    }
    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */


    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */


    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

      try {
        /* eslint-disable no-unused-expressions */
        anchorNode.nodeType;
        focusNode.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */


    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;

      outer: while (true) {
        var next = null;

        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }

          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }

          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }

          if ((next = node.firstChild) === null) {
            break;
          } // Moving from `node` to its first child `next`.


          parentNode = node;
          node = next;
        }

        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }

          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }

          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }

          if ((next = node.nextSibling) !== null) {
            break;
          }

          node = parentNode;
          parentNode = node.parentNode;
        } // Moving from `node` to its next sibling `next`.


        node = next;
      }

      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }

      return {
        start: start,
        end: end
      };
    }
    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */


    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)

      if (!win.getSelection) {
        return;
      }

      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.

      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }

        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }

    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }

    function isSameOriginFrame(iframe) {
      try {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute.
        // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
        // iframe.contentDocument.defaultView;
        // A safety way is to access one of the cross origin properties: Window or Location
        // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
        // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
        return typeof iframe.contentWindow.location.href === 'string';
      } catch (err) {
        return false;
      }
    }

    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();

      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }

        element = getActiveElement(win.document);
      }

      return element;
    }
    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */


    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }

    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
      };
    }
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */


    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;

      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        } // Focusing a node can change the scroll position, which is undesirable


        var ancestors = [];
        var ancestor = priorFocusedElem;

        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }

        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }

        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */


    function getSelection$1(input) {
      var selection = void 0;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }

      return selection || {
        start: 0,
        end: 0
      };
    }
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */


    function setSelection(input, offsets) {
      var start = offsets.start,
          end = offsets.end;

      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }

    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
      }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */

    function getSelection(node) {
      if ('selectionStart' in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */


    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */


    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);

      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return null;
      } // Only fire when selection has actually changed.


      var currentSelection = getSelection(activeElement$1);

      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;
        accumulateTwoPhaseDispatches(syntheticEvent);
        return syntheticEvent;
      }

      return null;
    }
    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */


    var SelectEventPlugin = {
      eventTypes: eventTypes$3,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
        // not extract events. See #3639.

        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case TOP_FOCUS:
            if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }

            break;

          case TOP_BLUR:
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.

          case TOP_MOUSE_DOWN:
            mouseDown = true;
            break;

          case TOP_CONTEXT_MENU:
          case TOP_MOUSE_UP:
          case TOP_DRAG_END:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.

          case TOP_SELECTION_CHANGE:
            if (skipSelectionChangeEvent) {
              break;
            }

          // falls through

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */

    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */

    injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;

    function flattenChildren(children) {
      var content = ''; // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).

      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }

        content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
      });
      return content;
    }
    /**
     * Implements an <option> host component that warns when `selected` is set.
     */


    function validateProps(element, props) {
      {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }

            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }

            if (typeof child.type !== 'string') {
              return;
            }

            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
          });
        } // TODO: Remove support for `selected` in <option>.


        if (props.selected != null && !didWarnSelectedSetOnOption) {
          warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }

    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }

    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);

      var content = flattenChildren(props.children);

      if (content) {
        hostProps.children = content;
      }

      return hostProps;
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnValueDefaultValue$1 = void 0;
    {
      didWarnValueDefaultValue$1 = false;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }

      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];
    /**
     * Validation function for `value` and `defaultValue`.
     */

    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes.checkPropTypes('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];

        if (props[propName] == null) {
          continue;
        }

        var isArray = Array.isArray(props[propName]);

        if (props.multiple && !isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};

        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }

        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }

          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));

        var defaultSelected = null;

        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;

            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }

            return;
          }

          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }

        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */


    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }

    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }

    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }

    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }

    function restoreControlledState$2(element, props) {
      var node = element;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }

    var didWarnValDefaultVal = false;
    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

    function getHostProps$3(element, props) {
      var node = element;
      !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0; // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.

      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });

      return hostProps;
    }

    function initWrapperState$2(element, props) {
      var node = element;
      {
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value; // Only bother fetching default value if we're going to use it

      if (initialValue == null) {
        var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

        var children = props.children;

        if (children != null) {
          {
            warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;

          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }

          defaultValue = children;
        }

        if (defaultValue == null) {
          defaultValue = '';
        }

        initialValue = defaultValue;
      }

      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }

    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);

      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

        if (newValue !== node.value) {
          node.value = newValue;
        }

        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }

    function postMountWrapper$3(element, props) {
      var node = element; // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.

      var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

      if (textContent === node._wrapperState.initialValue) {
        node.value = textContent;
      }
    }

    function restoreControlledState$3(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }

    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE$1,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.

    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;

        case 'math':
          return MATH_NAMESPACE;

        default:
          return HTML_NAMESPACE$1;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }

      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE$1;
      } // By default, pass namespace below.


      return parentNamespace;
    }
    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */


    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    }; // SVG temp container for IE lacking innerHTML


    var reusableSVGContainer = void 0;
    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */

    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;

        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }

        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });
    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }

      node.textContent = text;
    }; // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js


    var shorthandToLonghand = {
      animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
      background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
      backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
      border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
      borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
      borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
      borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
      borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
      borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
      borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
      borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
      borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
      borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
      borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
      borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
      columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
      columns: ['columnCount', 'columnWidth'],
      flex: ['flexBasis', 'flexGrow', 'flexShrink'],
      flexFlow: ['flexDirection', 'flexWrap'],
      font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
      fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
      gap: ['columnGap', 'rowGap'],
      grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
      gridColumn: ['gridColumnEnd', 'gridColumnStart'],
      gridColumnGap: ['columnGap'],
      gridGap: ['columnGap', 'rowGap'],
      gridRow: ['gridRowEnd', 'gridRowStart'],
      gridRowGap: ['rowGap'],
      gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
      margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
      marker: ['markerEnd', 'markerMid', 'markerStart'],
      mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
      maskPosition: ['maskPositionX', 'maskPositionY'],
      outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
      overflow: ['overflowX', 'overflowY'],
      padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
      placeContent: ['alignContent', 'justifyContent'],
      placeItems: ['alignItems', 'justifyItems'],
      placeSelf: ['alignSelf', 'justifySelf'],
      textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
      textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
      transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
      wordWrap: ['overflowWrap']
    };
    /**
     * CSS properties which accept numbers but are not in units of "px".
     */

    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */

    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */


    var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.

    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */

    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';

      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */

    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var warnValidStyle = function () {};

    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
     * Operations for dealing with CSS properties.
     */

    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */

    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';

        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }

          var styleValue = styles[styleName];

          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + hyphenateStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }

        return serialized || null;
      }
    }
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */


    function setValueForStyles(node, styles) {
      var style = node.style;

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

        if (styleName === 'float') {
          styleName = 'cssFloat';
        }

        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }

    function isValueEmpty(value) {
      return value == null || typeof value === 'boolean' || value === '';
    }
    /**
     * Given {color: 'red', overflow: 'hidden'} returns {
     *   color: 'color',
     *   overflowX: 'overflow',
     *   overflowY: 'overflow',
     * }. This can be read as "the overflowY property was set by the overflow
     * shorthand". That is, the values are the property that each was derived from.
     */


    function expandShorthandMap(styles) {
      var expanded = {};

      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];

        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }

      return expanded;
    }
    /**
     * When mixing shorthand and longhand property names, we warn during updates if
     * we expect an incorrect result to occur. In particular, we warn for:
     *
     * Updating a shorthand property (longhand gets overwritten):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
     *   becomes .style.font = 'baz'
     * Removing a shorthand property (longhand gets lost too):
     *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
     *   becomes .style.font = ''
     * Removing a longhand property (should revert to shorthand; doesn't):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
     *   becomes .style.fontVariant = ''
     */


    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      if (!warnAboutShorthandPropertyCollision) {
        return;
      }

      if (!nextStyles) {
        return;
      }

      var expandedUpdates = expandShorthandMap(styleUpdates);
      var expandedStyles = expandShorthandMap(nextStyles);
      var warnedAbout = {};

      for (var key in expandedUpdates) {
        var originalKey = expandedUpdates[key];
        var correctOriginalKey = expandedStyles[key];

        if (correctOriginalKey && originalKey !== correctOriginalKey) {
          var warningKey = originalKey + ',' + correctOriginalKey;

          if (warnedAbout[warningKey]) {
            continue;
          }

          warnedAbout[warningKey] = true;
          warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
        }
      }
    } // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.


    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

    }; // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags); // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.


    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    {
      ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      } // Note the use of `==` which checks for null or undefined.


      if (voidElementTags[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
      }

      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }

      {
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }

      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;

        default:
          return true;
      }
    } // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.


    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (correctName == null) {
          warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== correctName) {
          warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== standardName) {
          warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);

        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;

        if (type === 'select' && props.multiple) {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }

    var validateProperty$1 = function () {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        } // We can't rely on the event system being injected on the server.


        if (canUseEventSystem) {
          if (registrationNameModules.hasOwnProperty(name)) {
            return true;
          }

          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

          if (registrationName != null) {
            warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }

          if (EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Let the ARIA attribute hook validate ARIA attributes


        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];

          if (standardName !== name) {
            warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props


        if (isReserved) {
          return true;
        } // Warn when a known attribute is a bad type


        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop


        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, canUseEventSystem) {
      var unknownProps = [];

      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (unknownProps.length === 1) {
        warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    };

    function validateProperties$2(type, props, canUseEventSystem) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnUnknownProperties(type, props, canUseEventSystem);
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    {
      warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };

      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props,
        /* canUseEventSystem */
        true);
      }; // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807


      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.

      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };

      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

        if (normalizedServerText === normalizedClientText) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };

      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

        if (normalizedServerValue === normalizedClientValue) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };

      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
      };

      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      }; // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.


      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    function noop() {}

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }

    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = nextProps[propKey];

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          } // Relies on `updateStylesByID` not mutating `styleUpdates`.

          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;

          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';

            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
          // We could have excluded it in the property list instead of
          // adding a special case here, but then it wouldn't be emitted
          // on server rendering (but we *do* want to emit it in SSR).
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];

        if (propKey === STYLE$1) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }

    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag = void 0; // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.

      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement = void 0;
      var namespaceURI = parentNamespace;

      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }

      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.

          !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
        }

        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
          // This is guaranteed to yield a script element.

          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
          // attributes on `select`s needs to be added before `option`s are inserted.
          // This prevents:
          // - a bug where the `select` does not scroll to the correct option because singular
          //  `select` elements automatically pick the first item #13222
          // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
          // See https://github.com/facebook/react/issues/13222
          // and https://github.com/facebook/react/issues/14239

          if (type === 'select') {
            var node = domElement;

            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
              // it is possible that no option is selected.
              //
              // This is only necessary when a select in "single selection mode".
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }

      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }

    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }

    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      var props = void 0;

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          props = rawProps;
          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          props = rawProps;
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          props = rawProps;
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          props = rawProps;
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        default:
          props = rawProps;
      }

      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;

        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;

        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }
    } // Calculate the diff between the two objects.


    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps = void 0;
      var nextProps = void 0;

      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;

        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;

          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      assertValidProps(tag, nextProps);
      var propKey = void 0;
      var styleName = void 0;
      var styleUpdates = null;

      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          var lastStyle = lastProps[propKey];

          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the whitelist in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }

      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;

        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }

          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = '';
              }
            } // Update styles that changed since `lastProp`.


            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }

              updatePayload.push(propKey, styleUpdates);
            }

            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          var lastHtml = lastProp ? lastProp[HTML] : undefined;

          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
            }
          } else {// TODO: It might be too late to clear this if we have children
            // inserted already.
          }
        } else if (propKey === CHILDREN) {
          if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }

          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the whitelist during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }

      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
        }
        (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
      }

      return updatePayload;
    } // Apply the diff.


    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }

      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.

      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;

        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;

        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }

    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();

        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }

        return possibleStandardNames[lowerCasedName] || null;
      }
      return null;
    }

    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag = void 0;
      var extraAttributeNames = void 0;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;
      }

      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;

        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();

          switch (name) {
            // Built-in SSR attribute is whitelisted
            case 'data-reactroot':
              break;
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.

            case 'value':
              break;

            case 'checked':
              break;

            case 'selected':
              break;

            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;

      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = rawProps[propKey];

        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);

          if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);

            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');

              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);

            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;

            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;

              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }

              if (ownNamespace === HTML_NAMESPACE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);

                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                  extraAttributeNames.delete(standardName);
                } // $FlowFixMe - Should be inferred as not undefined.


                extraAttributeNames.delete(propKey);
              }

              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }

            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }

      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;

        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      return updatePayload;
    }

    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }

    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }

    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }

    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }

        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }

    function restoreControlledState$1(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;

        case 'textarea':
          restoreControlledState$3(domElement, props);
          return;

        case 'select':
          restoreControlledState$2(domElement, props);
          return;
      }
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var validateDOMNesting = function () {};

    var updatedAncestorInfo = function () {};

    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

      var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

        var info = {
          tag: tag
        };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }

        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        } // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }

        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }

        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }

        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }

        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }

        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }

        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };
      /**
       * Returns whether
       */


      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';

          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but

          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

          case 'html':
            return tag === 'head' || tag === 'body';

          case '#document':
            return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };
      /**
       * Returns whether
       */


      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      var didWarn = {};

      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;

        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

        if (didWarn[warnKey]) {
          return;
        }

        didWarn[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';

        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';

          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }

          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };
    } // Renderers that don't support persistence
    // can re-export everything from this module.

    function shim() {
      invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    } // Persistence (when unsupported)


    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneUnhiddenInstance = shim;
    var createHiddenTextInstance = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
      SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var STYLE = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }

      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      var type = void 0;
      var namespace = void 0;
      var nodeType = rootContainerInstance.nodeType;

      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }

        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }

      {
        var validatedTag = type.toLowerCase();

        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);

        return {
          namespace: namespace,
          ancestorInfo: _ancestorInfo
        };
      }
      return namespace;
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;

        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);

        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);

        return {
          namespace: _namespace,
          ancestorInfo: _ancestorInfo2
        };
      }
      var parentNamespace = parentHostContext;
      return getChildNamespace(parentNamespace, type);
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      setEnabled(false);
    }

    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      selectionInformation = null;
      setEnabled(eventsEnabled);
      eventsEnabled = null;
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace = void 0;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);

        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }

        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }

    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;

        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }

    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }

    function shouldDeprioritizeSubtree(type, props) {
      return !!props.hidden;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }

    var isPrimaryRenderer = true; // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.

    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var schedulePassiveEffects = scheduler.unstable_scheduleCallback;
    var cancelPassiveEffects = scheduler.unstable_cancelCallback; // -------------------
    //     Mutation
    // -------------------

    var supportsMutation = true;

    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }

    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }

    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }

    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function appendChildToContainer(container, child) {
      var parentNode = void 0;

      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      } // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918


      var reactRootContainer = container._reactRootContainer;

      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }

    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }

    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }

    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }

    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance; // Delete all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);

        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = nextNode;
      } while (node); // TODO: Warn, we didn't find the end comment boundary.

    }

    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      } else {// Document nodes should never contain suspense boundaries.
      }
    }

    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      instance.style.display = 'none';
    }

    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }

    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }

    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    } // -------------------
    //     Hydration
    // -------------------


    var supportsHydration = true;

    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      } // This has now been refined to an element node.


      return instance;
    }

    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a text node.


      return instance;
    }

    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a suspense node.


      return instance;
    }

    function getNextHydratableSibling(instance) {
      var node = instance.nextSibling; // Skip non-hydratable nodes.

      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
        node = node.nextSibling;
      }

      return node;
    }

    function getFirstHydratableChild(parentInstance) {
      var next = parentInstance.firstChild; // Skip non-hydratable nodes.

      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
        next = next.nextSibling;
      }

      return next;
    }

    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
      // get attached.

      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }

    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }

    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = node.nextSibling;
      } // TODO: Warn, we didn't find the end comment boundary.


      return null;
    }

    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }

    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }

    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    }

    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }

    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    }

    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }

    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {// TODO: warnForInsertedHydratedSuspense(parentInstance);
      }
    } // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.


    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).

    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.

    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.

    var labelsInCurrentCommit = new Set();

    var formatMarkName = function (markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function (label, warning) {
      var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning ? ' Warning: ' + warning : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function (markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function (markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function (label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {} // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.
      // Clear marks immediately to avoid growing buffer.


      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function (label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function (componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function (fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function (fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function () {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function () {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber.return;
      }
    };

    var resumeTimersRecursively = function (fiber) {
      if (fiber.return !== null) {
        resumeTimersRecursively(fiber.return);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function () {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire, expirationTime) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, this is the fiber to unwind from.


        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.


        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.

        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy.type) || 'Unknown';
            warning = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = 'There were cascading updates';
        }

        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = 'Caused by a cascading update in earlier commit';
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    var valueStack = [];
    var fiberStack = void 0;
    {
      fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    function checkThatStackIsEmpty() {
      {
        if (index !== -1) {
          warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
        }
      }
    }

    function resetStackAfterFatalErrorInDev() {
      {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
      }
    }

    var warnedAboutMissingGetChildContext = void 0;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    } // A cursor to the current merged context object on the stack.

    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.

    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyContextObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.

      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextProvider(type) {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }

    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        setCurrentPhase(null);
      }

      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
      }
      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var node = fiber;

      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;

          case ClassComponent:
            {
              var Component = node.type;

              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }
        }

        node = node.return;
      } while (node !== null);

      invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (true && !hasLoggedError) {
            hasLoggedError = true;
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        } // DevTools exists, even though it doesn't support Fiber.

        return true;
      }

      try {
        var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
      } // DevTools exists


      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111


    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1; // 1 unit of expiration time represents 10ms.

    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }

    function expirationTimeToMs(expirationTime) {
      return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    } // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.


    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    {
      hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.

        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    } // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.

    var debugCounter = void 0;
    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null; // Fiber

      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.contextDependencies = null;
      this.mode = mode; // Effects

      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;
      this.alternate = null;

      if (enableProfilerTimer) {
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).

        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        this._debugHookTypes = null;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.


    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }

    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;

        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }

        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }

      return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.


    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps; // We already have an alternate.
        // Reset the effect tag.

        workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        if (enableProfilerTimer) {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }

      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.contextDependencies = current.contextDependencies; // These will be overridden during the parent's reconciliation

      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      if (enableProfilerTimer) {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      return workInProgress;
    }

    function createHostRootFiber(isConcurrent) {
      var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

      if (enableProfilerTimer && isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, expirationTime) {
      var fiber = void 0;
      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

      var resolvedType = type;

      if (typeof type === 'function') {
        if (shouldConstruct(type)) {
          fiberTag = ClassComponent;
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

          case REACT_CONCURRENT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);

          case REACT_STRICT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);

          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;

                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    break getTag;

                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;

                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }

              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }

                var ownerName = owner ? getComponentName(owner.type) : null;

                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(Mode, pendingProps, key, mode); // TODO: The Mode fiber shouldn't have a type. It has a tag.

      var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

      var type = REACT_SUSPENSE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoContext); // TODO: These should not need a type.

      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.


    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
      } // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.


      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.contextDependencies = source.contextDependencies;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;

      if (enableProfilerTimer) {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }

      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    } // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(isConcurrent);
      var root = void 0;

      if (enableSchedulerTracing) {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          pingCache: null,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null,
          interactionThreadID: tracing.unstable_getThreadID(),
          memoizedInteractions: new Set(),
          pendingInteractionMap: new Map()
        };
      } else {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pingCache: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
      }

      uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,
      // Is to avoid needing :any casts everywhere interaction tracing fields are used.
      // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
      // $FlowFixMe Remove this :any cast and replace it with something better.

      return root;
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
      discardPendingWarnings: function () {},
      flushPendingDeprecationWarnings: function () {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordDeprecationWarnings: function (fiber, instance) {},
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {}
    };
    {
      var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
      };
      var pendingComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUnsafeLifecycleWarnings = new Map();
      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

      var didWarnAboutDeprecatedLifecycles = new Set();
      var didWarnAboutUnsafeLifecycles = new Set();
      var didWarnAboutLegacyContext = new Set();

      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
          var lifecyclesWarningMessages = [];
          Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
            var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

            if (lifecycleWarnings.length > 0) {
              var componentNames = new Set();
              lifecycleWarnings.forEach(function (fiber) {
                componentNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              var formatted = lifecycle.replace('UNSAFE_', '');
              var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
              var sortedComponentNames = setToSortedString(componentNames);
              lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
            }
          });

          if (lifecyclesWarningMessages.length > 0) {
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
          }
        });
        pendingUnsafeLifecycleWarnings = new Map();
      };

      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;

        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }

          node = node.return;
        }

        return maybeStrictRoot;
      };

      ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
        if (pendingComponentWillMountWarnings.length > 0) {
          var uniqueNames = new Set();
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
          pendingComponentWillMountWarnings = [];
        }

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          var _uniqueNames = new Set();

          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            _uniqueNames.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames = setToSortedString(_uniqueNames);

          lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
          pendingComponentWillReceivePropsWarnings = [];
        }

        if (pendingComponentWillUpdateWarnings.length > 0) {
          var _uniqueNames2 = new Set();

          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            _uniqueNames2.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames2 = setToSortedString(_uniqueNames2);

          lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
          pendingComponentWillUpdateWarnings = [];
        }
      };

      ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
          return;
        } // Don't warn about react-lifecycles-compat polyfilled components.


        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.


        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        var warningsForRoot = void 0;

        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
          warningsForRoot = {
            UNSAFE_componentWillMount: [],
            UNSAFE_componentWillReceiveProps: [],
            UNSAFE_componentWillUpdate: []
          };
          pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else {
          warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        }

        var unsafeLifecycles = [];

        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillMount');
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        }

        if (unsafeLifecycles.length > 0) {
          unsafeLifecycles.forEach(function (lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
          });
        }
      };

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.


        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }

          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
          warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
        });
      };
    } // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.

    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation; // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.

    function markPendingPriorityLevel(root, expirationTime) {
      // If there's a gap between completing a failed root and retrying it,
      // additional updates may be scheduled. Clear `didError`, in case the update
      // is sufficient to fix the error.
      root.didError = false; // Update the latest and earliest pending times

      var earliestPendingTime = root.earliestPendingTime;

      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime < expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;

          if (latestPendingTime > expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }

      findNextExpirationTimeToWorkOn(expirationTime, root);
    }

    function markCommittedPriorityLevels(root, earliestRemainingTime) {
      root.didError = false;

      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime < root.latestPingedTime) {
        root.latestPingedTime = NoWork;
      } // Let's see if the previous latest known pending level was just flushed.


      var latestPendingTime = root.latestPendingTime;

      if (latestPendingTime !== NoWork) {
        if (latestPendingTime > earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;

          if (earliestPendingTime > earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      } // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestRemainingTime < latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a
        // pending level.

        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime > earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      } // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.


      findNextExpirationTimeToWorkOn(NoWork, root);
    }

    function hasLowerPriorityWork(root, erroredExpirationTime) {
      var latestPendingTime = root.latestPendingTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var latestPingedTime = root.latestPingedTime;
      return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }

    function isPriorityLevelSuspended(root, expirationTime) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }

    function markSuspendedPriorityLevel(root, suspendedTime) {
      root.didError = false;
      clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.

      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;

      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      } // Finally, update the known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime < suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime > suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }

      findNextExpirationTimeToWorkOn(suspendedTime, root);
    }

    function markPingedPriorityLevel(root, pingedTime) {
      root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work
      // is thrown out and not reused during the restarted render. One way to
      // invalidate the progressed work is to restart at expirationTime + 1.

      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
        root.latestPingedTime = pingedTime;
      }

      findNextExpirationTimeToWorkOn(pingedTime, root);
    }

    function clearPing(root, completedTime) {
      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime >= completedTime) {
        root.latestPingedTime = NoWork;
      }
    }

    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
      var earliestExpirationTime = renderExpirationTime;
      var earliestPendingTime = root.earliestPendingTime;
      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestPendingTime > earliestExpirationTime) {
        earliestExpirationTime = earliestPendingTime;
      }

      if (earliestSuspendedTime > earliestExpirationTime) {
        earliestExpirationTime = earliestSuspendedTime;
      }

      return earliestExpirationTime;
    }

    function didExpireAtExpirationTime(root, currentTime) {
      var expirationTime = root.expirationTime;

      if (expirationTime !== NoWork && currentTime <= expirationTime) {
        // The root has expired. Flush all work up to the current time.
        root.nextExpirationTimeToWorkOn = currentTime;
      }
    }

    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest
      // pinged time.

      var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work
      // that's lower priority than what we just completed.

      if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
        // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
      }

      var expirationTime = nextExpirationTimeToWorkOn;

      if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
        // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
      }

      root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
      root.expirationTime = expirationTime;
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);

        var defaultProps = Component.defaultProps;

        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }

        return props;
      }

      return baseProps;
    }

    function readLazyComponentType(lazyComponent) {
      var status = lazyComponent._status;
      var result = lazyComponent._result;

      switch (status) {
        case Resolved:
          {
            var Component = result;
            return Component;
          }

        case Rejected:
          {
            var error = result;
            throw error;
          }

        case Pending:
          {
            var thenable = result;
            throw thenable;
          }

        default:
          {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;

            var _thenable = ctor();

            _thenable.then(function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            }); // Handle synchronous thenables.


            switch (lazyComponent._status) {
              case Resolved:
                return lazyComponent._result;

              case Rejected:
                throw lazyComponent._result;
            }

            lazyComponent._result = _thenable;
            throw _thenable;
          }
      }
    }

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.

    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback$1 = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }

        var key = callerName + '_' + callback;

        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';

          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      }; // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.


      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
      } // Merge the partial state and the previous state.

      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
      // base state.

      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'setState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'replaceState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'forceUpdate');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;

      if (typeof instance.shouldComponentUpdate === 'function') {
        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        stopPhaseTimer();
        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
        }
        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);
          warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }

        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }

        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
        var _state = instance.state;

        if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
          warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        }

        if (typeof instance.getChildContext === 'function') {
          !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = null;
      var contextType = ctor.contextType;
      {
        if ('contextType' in ctor) {
          var isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = '';

            if (contextType === undefined) {
              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
            } else if (typeof contextType !== 'object') {
              addendum = ' However, it is set to a ' + typeof contextType + '.';
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = ' Did you accidentally pass the Context.Provider instead?';
            } else if (contextType._context !== undefined) {
              // <Context.Consumer>
              addendum = ' Did you accidentally pass the Context.Consumer instead?';
            } else {
              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
            }

            warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
          }
        }
      }

      if (typeof contextType === 'object' && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      } // Instantiate twice to help detect side-effects.


      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          new ctor(props, context); // eslint-disable-line no-new
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.


        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }

          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }

          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }

          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';

            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
            }
          }
        }
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.

      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      var oldState = instance.state;

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, 'componentWillReceiveProps');

      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }

      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';

          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    } // Invokes the mount life-cycles on a previously never rendered instance.


    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      var contextType = ctor.contextType;

      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }

      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
        }
      }
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      } // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.


      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
        // process them now.

        updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillMount');

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.


    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillUpdate');

          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.effectTag |= Update;
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;

    var warnForMissingKey = function (child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefInStrictMode = {};
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;
        var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
      };
    }
    var isArray = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          if (returnFiber.mode & StrictMode) {
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (!didWarnAboutStringRefInStrictMode[componentName]) {
              warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
              didWarnAboutStringRefInStrictMode[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
            inst = ownerFiber.stateNode;
          }

          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }

          var ref = function (value) {
            var refs = inst.refs;

            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.


    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        } // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.


        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        } // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.


        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }

        var current$$1 = newFiber.alternate;

        if (current$$1 !== null) {
          var oldIndex = current$$1.index;

          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && current$$1.elementType === element.type) {
          // Move based on index
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created.return = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                _created2.return = returnFiber;
                return _created2;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

            _created3.return = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }
      /**
       * Warns if there is a duplicate or missing key
       */


      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== 'string') {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from both ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (!_newFiber) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
            didWarnAboutGenerators = true;
          } // Warn about using Maps as children


          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          } // First, validate keys.
          // We'll get a different iterator later for the main pass.


          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        } // The existing first child is not a text node so we need to create one
        // and delete the existing ones.


        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.


      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        } // Handle object types


        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough

            case FunctionComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        } // Remaining cases are all treated as empty.


        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild.return = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild.return = workInProgress;
      }

      newChild.sibling = null;
    }

    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.

      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.

      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

      if (context === nextContext) {
        return;
      } // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.


      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var NoEffect$1 =
    /*             */
    0;
    var UnmountSnapshot =
    /*      */
    2;
    var UnmountMutation =
    /*      */
    4;
    var MountMutation =
    /*        */
    8;
    var UnmountLayout =
    /*        */
    16;
    var MountLayout =
    /*          */
    32;
    var MountPassive =
    /*         */
    64;
    var UnmountPassive =
    /*       */
    128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    {
      didWarnAboutMismatchedHooksForComponent = new Set();
    } // These are set right before calling the component.

    var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.

    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.

    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
    // end of the current pass. We can't store these updates on the normal queue,
    // because if the work is aborted, they should be discarded. Because this is
    // a relatively rare case, we also don't want to add an additional field to
    // either the hook or queue object types. So we store them in a lazily create
    // map of queue -> render-phase updates, which are discarded once the component
    // completes without re-rendering.
    // Whether an update was scheduled during the currently executing render pass.

    var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

    var renderPhaseUpdates = null; // Counter to prevent infinite loops.

    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.

    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;

    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }

    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;

          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }

    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);

        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);

          if (hookTypesDev !== null) {
            var table = '';
            var secondColumnStart = 30;

            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + '. ' + oldHookName; // Extra space so second column lines up
              // lol @ IE not supporting String#repeat

              while (row.length < secondColumnStart) {
                row += ' ';
              }

              row += newHookName + '\n';
              table += row;
            }

            warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
          }
        }
      }
    }

    function throwInvalidHookError() {
      invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (prevDeps === null) {
        {
          warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }

      {
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) {
          warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
        }
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (is(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
      renderExpirationTime = nextRenderExpirationTime;
      currentlyRenderingFiber$1 = workInProgress;
      nextCurrentHook = current !== null ? current.memoizedState : null;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
      } // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;
      // remainingExpirationTime = NoWork;
      // componentUpdateQueue = null;
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;
      // sideEffectTag = 0;
      // TODO Warn if no hooks are used at all during mount, then some are used during update.
      // Currently we will identify the update render as a mount because nextCurrentHook === null.
      // This is tricky because it's valid for certain types of components (e.g. React.lazy)
      // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
      // Non-stateful hooks (e.g. context) don't get added to memoizedState,
      // so nextCurrentHook would be null during updates and mounts.

      {
        if (nextCurrentHook !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          // This dispatcher handles an edge case where a component is updating,
          // but no stateful hooks have been used.
          // We want to match the production code behavior (which will use HooksDispatcherOnMount),
          // but with the extra DEV validation to ensure hooks ordering hasn't changed.
          // This dispatcher does that.
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, refOrContext);

      if (didScheduleRenderPhaseUpdate) {
        do {
          didScheduleRenderPhaseUpdate = false;
          numberOfReRenders += 1; // Start over from the beginning of the list

          nextCurrentHook = current !== null ? current.memoizedState : null;
          nextWorkInProgressHook = firstWorkInProgressHook;
          currentHook = null;
          workInProgressHook = null;
          componentUpdateQueue = null;
          {
            // Also validate hook order for cascading updates.
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          children = Component(props, refOrContext);
        } while (didScheduleRenderPhaseUpdate);

        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      } // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.


      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      var renderedWork = currentlyRenderingFiber$1;
      renderedWork.memoizedState = firstWorkInProgressHook;
      renderedWork.expirationTime = remainingExpirationTime;
      renderedWork.updateQueue = componentUpdateQueue;
      renderedWork.effectTag |= sideEffectTag;
      {
        renderedWork._debugHookTypes = hookTypesDev;
      } // This check uses currentHook so that it works the same in DEV and prod bundles.
      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0; // These were reset above
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;

      !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;
      return children;
    }

    function bailoutHooks(current, workInProgress, expirationTime) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.effectTag &= ~(Passive | Update);

      if (current.expirationTime <= expirationTime) {
        current.expirationTime = NoWork;
      }
    }

    function resetHooks() {
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
      // It's also called inside mountIndeterminateComponent if we determine the
      // component is a module-style component.

      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0;
      didScheduleRenderPhaseUpdate = false;
      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        queue: null,
        baseUpdate: null,
        next: null
      };

      if (workInProgressHook === null) {
        // This is the first hook in the list
        firstWorkInProgressHook = workInProgressHook = hook;
      } else {
        // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
      }

      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      // This function is used both for updates and for re-renders triggered by a
      // render phase update. It assumes there is either a current hook we can
      // clone, or a work-in-progress hook from a previous render pass that we can
      // use as a base. When we reach the end of the base list, we must switch to
      // the dispatcher used for mounts.
      if (nextWorkInProgressHook !== null) {
        // There's already a work-in-progress. Reuse it.
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
        nextCurrentHook = currentHook !== null ? currentHook.next : null;
      } else {
        // Clone from the current hook.
        !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          queue: currentHook.queue,
          baseUpdate: currentHook.baseUpdate,
          next: null
        };

        if (workInProgressHook === null) {
          // This is the first hook in the list.
          workInProgressHook = firstWorkInProgressHook = newHook;
        } else {
          // Append to the end of the list.
          workInProgressHook = workInProgressHook.next = newHook;
        }

        nextCurrentHook = currentHook.next;
      }

      return workInProgressHook;
    }

    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }

    function basicStateReducer(state, action) {
      return typeof action === 'function' ? action(state) : action;
    }

    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState = void 0;

      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;
      queue.lastRenderedReducer = reducer;

      if (numberOfReRenders > 0) {
        // This is a re-render. Apply the new render phase updates to the previous
        var _dispatch = queue.dispatch;

        if (renderPhaseUpdates !== null) {
          // Render phase updates are stored in a map of queue -> linked list
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate !== undefined) {
            renderPhaseUpdates.delete(queue);
            var newState = hook.memoizedState;
            var update = firstRenderPhaseUpdate;

            do {
              // Process this render phase update. We don't have to check the
              // priority because it will always be the same as the current
              // render's.
              var _action = update.action;
              newState = reducer(newState, _action);
              update = update.next;
            } while (update !== null); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.


            if (!is(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState; // Don't persist the state accumlated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.

            if (hook.baseUpdate === queue.last) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
            return [newState, _dispatch];
          }
        }

        return [hook.memoizedState, _dispatch];
      } // The last update in the entire queue


      var last = queue.last; // The last update that is part of the base state.

      var baseUpdate = hook.baseUpdate;
      var baseState = hook.baseState; // Find the first unprocessed update.

      var first = void 0;

      if (baseUpdate !== null) {
        if (last !== null) {
          // For the first update, the queue is a circular linked list where
          // `queue.last.next = queue.first`. Once the first update commits, and
          // the `baseUpdate` is no longer empty, we can unravel the list.
          last.next = null;
        }

        first = baseUpdate.next;
      } else {
        first = last !== null ? last.next : null;
      }

      if (first !== null) {
        var _newState = baseState;
        var newBaseState = null;
        var newBaseUpdate = null;
        var prevUpdate = baseUpdate;
        var _update = first;
        var didSkip = false;

        do {
          var updateExpirationTime = _update.expirationTime;

          if (updateExpirationTime < renderExpirationTime) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            if (!didSkip) {
              didSkip = true;
              newBaseUpdate = prevUpdate;
              newBaseState = _newState;
            } // Update the remaining priority in the queue.


            if (updateExpirationTime > remainingExpirationTime) {
              remainingExpirationTime = updateExpirationTime;
            }
          } else {
            // Process this update.
            if (_update.eagerReducer === reducer) {
              // If this update was processed eagerly, and its reducer matches the
              // current reducer, we can use the eagerly computed state.
              _newState = _update.eagerState;
            } else {
              var _action2 = _update.action;
              _newState = reducer(_newState, _action2);
            }
          }

          prevUpdate = _update;
          _update = _update.next;
        } while (_update !== null && _update !== first);

        if (!didSkip) {
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is(_newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = _newState;
        hook.baseUpdate = newBaseUpdate;
        hook.baseState = newBaseState;
        queue.lastRenderedState = _newState;
      }

      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();

      if (typeof initialState === 'function') {
        initialState = initialState();
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    }

    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        // Circular
        next: null
      };

      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var _lastEffect = componentUpdateQueue.lastEffect;

        if (_lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = _lastEffect.next;
          _lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }

      return effect;
    }

    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }

    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }

    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }

    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;

      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(NoEffect$1, create, destroy, nextDeps);
            return;
          }
        }
      }

      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }

    function mountEffect(create, deps) {
      return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function updateEffect(create, deps) {
      return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if (typeof ref === 'function') {
        var refCallback = ref;

        var _inst = create();

        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
        }

        var _inst2 = create();

        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }

    function mountImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function updateImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
      // The react-debug-hooks package injects its own implementation
      // so that e.g. DevTools can display custom hook values.
    }

    var updateDebugValue = mountDebugValue;

    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        // Assume these are defined. If they're not, areHookInputsEqual will warn.
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    } // in a test-like environment, we want to warn if dispatchAction()
    // is called outside of a batchedUpdates/TestUtils.act(...) call.


    var shouldWarnForUnbatchedSetState = false;
    {
      // jest isn't a 'global', it's just exposed to tests via a wrapped function
      // further, this isn't a test file, so flow doesn't recognize the symbol. So...
      // $FlowExpectedError - because requirements don't give a damn about your type sigs.
      if ('undefined' !== typeof jest) {
        shouldWarnForUnbatchedSetState = true;
      }
    }

    function dispatchAction(fiber, queue, action) {
      !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;
      {
        !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
      }
      var alternate = fiber.alternate;

      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdate = true;
        var update = {
          expirationTime: renderExpirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };

        if (renderPhaseUpdates === null) {
          renderPhaseUpdates = new Map();
        }

        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (firstRenderPhaseUpdate === undefined) {
          renderPhaseUpdates.set(queue, update);
        } else {
          // Append the update to the end of the list.
          var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

          while (lastRenderPhaseUpdate.next !== null) {
            lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          }

          lastRenderPhaseUpdate.next = update;
        }
      } else {
        flushPassiveEffects();
        var currentTime = requestCurrentTime();

        var _expirationTime = computeExpirationForFiber(currentTime, fiber);

        var _update2 = {
          expirationTime: _expirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        }; // Append the update to the end of the list.

        var _last = queue.last;

        if (_last === null) {
          // This is the first update. Create a circular list.
          _update2.next = _update2;
        } else {
          var first = _last.next;

          if (first !== null) {
            // Still circular.
            _update2.next = first;
          }

          _last.next = _update2;
        }

        queue.last = _update2;

        if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
          // The queue is currently empty, which means we can eagerly compute the
          // next state before entering the render phase. If the new state is the
          // same as the current state, we may be able to bail out entirely.
          var _lastRenderedReducer = queue.lastRenderedReducer;

          if (_lastRenderedReducer !== null) {
            var prevDispatcher = void 0;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }

            try {
              var currentState = queue.lastRenderedState;

              var _eagerState = _lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
              // it, on the update object. If the reducer hasn't changed by the
              // time we enter the render phase, then the eager state can be used
              // without calling the reducer again.


              _update2.eagerReducer = _lastRenderedReducer;
              _update2.eagerState = _eagerState;

              if (is(_eagerState, currentState)) {
                // Fast path. We can bail out without scheduling React to re-render.
                // It's still possible that we'll need to rebase this update later,
                // if the component re-renders for a different reason and by that
                // time the reducer has changed.
                return;
              }
            } catch (error) {// Suppress the error. It will throw again in the render phase.
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }

        {
          if (shouldWarnForUnbatchedSetState === true) {
            warnIfNotCurrentlyBatchingInDev(fiber);
          }
        }
        scheduleWork(fiber, _expirationTime);
      }
    }

    var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    {
      var warnInvalidContextAccess = function () {
        warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      };

      var warnInvalidHookAccess = function () {
        warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
      };

      HooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
    }
    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      if (!enableProfilerTimer) {
        return;
      }

      commitTime = scheduler.unstable_now();
    }

    function startProfilerTimer(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = scheduler.unstable_now();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = scheduler.unstable_now();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (!enableProfilerTimer) {
        return;
      }

      if (profilerStartTime >= 0) {
        var elapsedTime = scheduler.unstable_now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;

        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }

        profilerStartTime = -1;
      }
    } // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.


    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function enterHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var suspenseInstance = fiber.stateNode;
      nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
      popToNextHostParent(fiber);
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;

          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.

      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;

                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;

                case SuspenseComponent:
                  break;
              }

              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;

                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;

                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                  break;
              }

              break;
            }

          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);

            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }

            return false;
          }

        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);

            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }

            return false;
          }

        case SuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

              if (suspenseInstance !== null) {
                // Downgrade the tag to a dehydrated component until we've hydrated it.
                fiber.tag = DehydratedSuspenseComponent;
                fiber.stateNode = suspenseInstance;
                return true;
              }
            }

            return false;
          }

        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }

      var nextInstance = nextHydratableInstance;

      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }

      var firstAttemptedInstance = nextInstance;

      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);

        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        } // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.


        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }

      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.

      if (updatePayload !== null) {
        return true;
      }

      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;

          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function skipPastDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var suspenseInstance = fiber.stateNode;
      !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }

    function popToNextHostParent(fiber) {
      var parent = fiber.return;

      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
        parent = parent.return;
      }

      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }

      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.

      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;

        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {
      if (!supportsHydration) {
        return;
      }

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    {
      didWarnAboutBadClass = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      //
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their their
      // identity matches.

      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }

    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens after the first render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 === null) {
        var type = Component.type;

        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === undefined) {
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = type;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
        }

        {
          var innerPropTypes = type.propTypes;

          if (innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(type), getCurrentFiberStackInDev);
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }

      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;

        if (_innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(_innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(_type), getCurrentFiberStackInDev);
        }
      }
      var currentChild = current$$1.child; // This is always exactly one child

      if (updateExpirationTime < renderExpirationTime) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps; // Default to shallow comparison

        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;

        if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }

    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens when the inner render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var outerMemoType = workInProgress.elementType;

          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
          }

          var outerPropTypes = outerMemoType && outerMemoType.propTypes;

          if (outerPropTypes) {
            checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
            'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
          } // Inner propTypes will be validated in the function component path.

        }
      }

      if (current$$1 !== null) {
        var prevProps = current$$1.memoizedProps;

        if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          didReceiveUpdate = false;

          if (updateExpirationTime < renderExpirationTime) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        }
      }

      return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      if (enableProfilerTimer) {
        workInProgress.effectTag |= Update;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;

      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      } // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var instance = workInProgress.stateNode;
      var shouldUpdate = void 0;

      if (instance === null) {
        if (current$$1 !== null) {
          // An class component without an instance only mounts if it suspended
          // inside a non- concurrent tree, in an inconsistent state. We want to
          // tree it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current$$1.alternate = null;
          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.effectTag |= Placement;
        } // In the initial pass we might need to construct the instance.


        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        shouldUpdate = true;
      } else if (current$$1 === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }

      var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
      {
        var inst = workInProgress.stateNode;

        if (inst.props !== nextProps) {
          !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current$$1, workInProgress);
      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode; // Rerender

      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;

      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFrom catch is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;

        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase('render');
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            instance.render();
          }

          setCurrentPhase(null);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;

      if (current$$1 !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.


      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;

      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }

      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
      // being called "element".

      var nextChildren = nextState.element;

      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var root = workInProgress.stateNode;

      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.

        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }

      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

      if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
        // Schedule this fiber to re-render at offscreen priority. Then bailout.
        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      } // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.


      return null;
    }

    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
      if (_current !== null) {
        // An lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
      // Cancel and resume right after we know the tag.

      cancelWorkTimer(workInProgress);
      var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      startWorkTimer(workInProgress);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child = void 0;

      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ClassComponent:
          {
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ForwardRef:
          {
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                  'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateExpirationTime, renderExpirationTime);
            break;
          }

        default:
          {
            var hint = '';
            {
              if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = ' Did you wrap a component in React.lazy() more than once?';
              }
            } // This message intentionally doesn't mention ForwardRef or MemoComponent
            // because the fact that it's a separate type of work is an
            // implementation detail.

            invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
          }
      }

      return child;
    }

    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      } // Promote the fiber to a class and try rendering again.


      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }

    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      prepareToReadContext(workInProgress, renderExpirationTime);
      var value = void 0;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;

      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

        resetHooks(); // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext = false;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        {
          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            // Only double-render components with Hooks
            if (workInProgress.memoizedState !== null) {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderExpirationTime);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }

    function validateFunctionComponentInDev(workInProgress, Component) {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
      }

      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();

        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;

        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }

        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;
          warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
          didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
        }
      }

      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
          didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
        }
      }
    }

    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      var mode = workInProgress.mode;
      var nextProps = workInProgress.pendingProps; // We should attempt to render the primary children unless this boundary
      // already suspended during this render (`alreadyCaptured` is true).

      var nextState = workInProgress.memoizedState;
      var nextDidTimeout = void 0;

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        nextState = null;
        nextDidTimeout = false;
      } else {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        nextState = {
          timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
        };
        nextDidTimeout = true;
        workInProgress.effectTag &= ~DidCapture;
      } // This next part is a bit confusing. If the children timeout, we switch to
      // showing the fallback children in place of the "primary" children.
      // However, we don't want to delete the primary children because then their
      // state will be lost (both the React state and the host state, e.g.
      // uncontrolled form inputs). Instead we keep them mounted and hide them.
      // Both the fallback children AND the primary children are rendered at the
      // same time. Once the primary children are un-suspended, we can delete
      // the fallback children — don't need to preserve their state.
      //
      // The two sets of children are siblings in the host environment, but
      // semantically, for purposes of reconciliation, they are two separate sets.
      // So we store them using two fragment fibers.
      //
      // However, we want to avoid allocating extra fibers for every placeholder.
      // They're only necessary when the children time out, because that's the
      // only time when both sets are mounted.
      //
      // So, the extra fragment fibers are only used if the children time out.
      // Otherwise, we render the primary children directly. This requires some
      // custom reconciliation logic to preserve the state of the primary
      // children. It's essentially a very basic form of re-parenting.
      // `child` points to the child fiber. In the normal case, this is the first
      // fiber of the primary children set. In the timed-out case, it's a
      // a fragment fiber containing the primary children.


      var child = void 0; // `next` points to the next fiber React should render. In the normal case,
      // it's the same as `child`: the first fiber of the primary children set.
      // In the timed-out case, it's a fragment fiber containing the *fallback*
      // children -- we skip over the primary children entirely.

      var next = void 0;

      if (current$$1 === null) {
        if (enableSuspenseServerRenderer) {
          // If we're currently hydrating, try to hydrate this boundary.
          // But only if this has a fallback.
          if (nextProps.fallback !== undefined) {
            tryToClaimNextHydratableInstance(workInProgress); // This could've changed the tag if this was a dehydrated suspense component.

            if (workInProgress.tag === DehydratedSuspenseComponent) {
              return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
            }
          }
        } // This is the initial mount. This branch is pretty simple because there's
        // no previous state that needs to be preserved.


        if (nextDidTimeout) {
          // Mount separate fragments for primary and fallback children.
          var nextFallbackChildren = nextProps.fallback;
          var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

          if ((workInProgress.mode & ConcurrentMode) === NoContext) {
            // Outside of concurrent mode, we commit the effects from the
            var progressedState = workInProgress.memoizedState;
            var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
            primaryChildFragment.child = progressedPrimaryChild;
          }

          var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
          primaryChildFragment.sibling = fallbackChildFragment;
          child = primaryChildFragment; // Skip the primary children, and continue working on the
          // fallback children.

          next = fallbackChildFragment;
          child.return = next.return = workInProgress;
        } else {
          // Mount the primary children without an intermediate fragment fiber.
          var nextPrimaryChildren = nextProps.children;
          child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
        }
      } else {
        // This is an update. This branch is more complicated because we need to
        // ensure the state of the primary children is preserved.
        var prevState = current$$1.memoizedState;
        var prevDidTimeout = prevState !== null;

        if (prevDidTimeout) {
          // The current tree already timed out. That means each child set is
          var currentPrimaryChildFragment = current$$1.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

          if (nextDidTimeout) {
            // Still timed out. Reuse the current primary children by cloning
            // its fragment. We're going to skip over these entirely.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState = workInProgress.memoizedState;

              var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

              if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                _primaryChildFragment.child = _progressedPrimaryChild;
              }
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Clone the fallback child fragment, too. These we'll continue
            // working on.


            var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);

            child = _primaryChildFragment;
            _primaryChildFragment.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment;
            child.return = next.return = workInProgress;
          } else {
            // No longer suspended. Switch back to showing the primary children,
            // and remove the intermediate fragment fiber.
            var _nextPrimaryChildren = nextProps.children;
            var currentPrimaryChild = currentPrimaryChildFragment.child;
            var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
            // children. Wait until the complete phase, after we've confirmed the
            // fallback is no longer needed.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode?
            // Continue rendering the children, like we normally do.

            child = next = primaryChild;
          }
        } else {
          // The current tree has not already timed out. That means the primary
          // children are not wrapped in a fragment fiber.
          var _currentPrimaryChild = current$$1.child;

          if (nextDidTimeout) {
            // Timed out. Wrap the children in a fragment fiber to keep them
            // separate from the fallback children.
            var _nextFallbackChildren2 = nextProps.fallback;

            var _primaryChildFragment2 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment2.child = _currentPrimaryChild; // Even though we're creating a new fiber, there are no new children,
            // because we're reusing an already mounted tree. So we don't need to
            // schedule a placement.
            // primaryChildFragment.effectTag |= Placement;

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState2 = workInProgress.memoizedState;

              var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

              _primaryChildFragment2.child = _progressedPrimaryChild2;
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var _treeBaseDuration = 0;
              var _hiddenChild = _primaryChildFragment2.child;

              while (_hiddenChild !== null) {
                _treeBaseDuration += _hiddenChild.treeBaseDuration;
                _hiddenChild = _hiddenChild.sibling;
              }

              _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);

            _fallbackChildFragment2.effectTag |= Placement;
            child = _primaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment2;
            child.return = next.return = workInProgress;
          } else {
            // Still haven't timed out.  Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren2 = nextProps.children;
            next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
          }
        }

        workInProgress.stateNode = current$$1.stateNode;
      }

      workInProgress.memoizedState = nextState;
      workInProgress.child = child;
      return next;
    }

    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      if (current$$1 === null) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        workInProgress.expirationTime = Never;
        return null;
      } // We use childExpirationTime to indicate that a child might depend on context, so if
      // any context has changed, we need to treat is as if the input might have changed.


      var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

      if (didReceiveUpdate || hasContextChanged$$1) {
        // This boundary has changed since the first render. This means that we are now unable to
        // hydrate it. We might still be able to hydrate it using an earlier expiration time but
        // during this render we can't. Instead, we're going to delete the whole subtree and
        // instead inject a new real Suspense boundary to take its place, which may render content
        // or fallback. The real Suspense boundary will suspend for a while so we have some time
        // to ensure it can produce real content, but all state and pending events will be lost.
        // Detach from the current dehydrated boundary.
        current$$1.alternate = null;
        workInProgress.alternate = null; // Insert a deletion in the effect list.

        var returnFiber = workInProgress.return;
        !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = current$$1;
          returnFiber.lastEffect = current$$1;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
        }

        current$$1.nextEffect = null;
        current$$1.effectTag = Deletion; // Upgrade this work in progress to a real Suspense component.

        workInProgress.tag = SuspenseComponent;
        workInProgress.stateNode = null;
        workInProgress.memoizedState = null; // This is now an insertion.

        workInProgress.effectTag |= Placement; // Retry as a real Suspense component.

        return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
      }

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        return workInProgress.child;
      } else {
        // Something suspended. Leave the existing children in place.
        // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
        workInProgress.child = null;
        return null;
      }
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;

      if (current$$1 === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        }
      }
      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);

        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    var hasWarnedAboutUsingContextAsConsumer = false;

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.

      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }

    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        // Reuse previous context list
        workInProgress.contextDependencies = current$$1.contextDependencies;
      }

      if (enableProfilerTimer) {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
      } // Check if the children have any pending work.


      var childExpirationTime = workInProgress.childExpirationTime;

      if (childExpirationTime < renderExpirationTime) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    }

    function beginWork(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;

      if (current$$1 !== null) {
        var oldProps = current$$1.memoizedProps;
        var newProps = workInProgress.pendingProps;

        if (oldProps !== newProps || hasContextChanged()) {
          // If props or context changed, mark the fiber as having performed work.
          // This may be unset if the props are determined to be equal later (memo).
          didReceiveUpdate = true;
        } else if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;

            case HostComponent:
              pushHostContext(workInProgress);
              break;

            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }

                break;
              }

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }

            case Profiler:
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }

              break;

            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                var didTimeout = state !== null;

                if (didTimeout) {
                  // If this boundary is currently timed out, we need to decide
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                }

                break;
              }

            case DehydratedSuspenseComponent:
              {
                if (enableSuspenseServerRenderer) {
                  // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a regular Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.
                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              }
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } else {
        didReceiveUpdate = false;
      } // Before entering the begin phase, clear the expiration time.


      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            var elementType = workInProgress.elementType;
            return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
          }

        case LazyComponent:
          {
            var _elementType = workInProgress.elementType;
            return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
          }

        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }

        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;

            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }

        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

        case HostText:
          return updateHostText(current$$1, workInProgress);

        case SuspenseComponent:
          return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;

            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }

        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);

        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);

        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);

        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                  'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
          }

        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
          }

        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;

            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

            return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            }

            break;
          }
      }

      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }

    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;

    function resetContextDependences() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }

    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer = rendererSigil;
        }
      } else {
        push(valueCursor, context._currentValue2, providerFiber);
        context._currentValue2 = nextValue;
        {
          !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer2 = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        context._currentValue = currentValue;
      } else {
        context._currentValue2 = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      if (is(oldValue, newValue)) {
        // No change
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
        {
          !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
      // Update the child expiration time of all the ancestors, including
      // the alternates.
      var node = parent;

      while (node !== null) {
        var alternate = node.alternate;

        if (node.childExpirationTime < renderExpirationTime) {
          node.childExpirationTime = renderExpirationTime;

          if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          }
        } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
          alternate.childExpirationTime = renderExpirationTime;
        } else {
          // Neither alternate was updated, which means the rest of the
          // ancestor path already has sufficient priority.
          break;
        }

        node = node.return;
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }

      while (fiber !== null) {
        var nextFiber = void 0; // Visit this fiber.

        var list = fiber.contextDependencies;

        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.first;

          while (dependency !== null) {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(renderExpirationTime);
                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.

                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime < renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }

              var alternate = fiber.alternate;

              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }

              scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

              if (list.expirationTime < renderExpirationTime) {
                list.expirationTime = renderExpirationTime;
              } // Since we already found a match, we can stop traversing the
              // dependency list.


              break;
            }

            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
          // If a dehydrated suspense component is in this subtree, we don't know
          // if it will have any context consumers in it. The best we can do is
          // mark it as having updates on its children.
          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var _alternate = fiber.alternate;

          if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
            _alternate.expirationTime = renderExpirationTime;
          } // This is intentionally passing this fiber as the parent
          // because we want to schedule this fiber as having work
          // on its children. We'll use the childExpirationTime on
          // this fiber to indicate that a context has changed.


          scheduleWorkOnParentPath(fiber, renderExpirationTime);
          nextFiber = fiber.sibling;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;

          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }

            var sibling = nextFiber.sibling;

            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            } // No more siblings. Traverse up.


            nextFiber = nextFiber.return;
          }
        }

        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var currentDependencies = workInProgress.contextDependencies;

      if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      workInProgress.contextDependencies = null;
    }

    function readContext(context, observedBits) {
      {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
      }

      if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
      } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
      } else {
        var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.

        if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = maxSigned31BitInt;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0; // This is the first dependency for this component. Create a new list.

          lastContextDependency = contextItem;
          currentlyRenderingFiber.contextDependencies = {
            first: contextItem,
            expirationTime: NoWork
          };
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }

      return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    } // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which can be
    // mutated and processed asynchronously before it is committed — a form of
    // double buffering. If a work-in-progress render is discarded before finishing,
    // we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.


    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.

    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;

      resetCurrentlyProcessingQueue = function () {
        currentlyProcessingQueue = null;
      };
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,
        // TODO: With resuming, if we bail out and resuse the child tree, we should
        // keep these effects.
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime) {
      return {
        expirationTime: expirationTime,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null,
        nextEffect: null
      };
    }

    function appendUpdateToQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.lastUpdate === null) {
        // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      // Update queues are created lazily.
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;

      if (alternate === null) {
        // There's only one fiber.
        queue1 = fiber.updateQueue;
        queue2 = null;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        // There are two owners.
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;

        if (queue1 === null) {
          if (queue2 === null) {
            // Neither fiber has an update queue. Create new ones.
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            // Only one fiber has an update queue. Clone to create a new one.
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          } else {// Both owners have an update queue.
          }
        }
      }

      if (queue2 === null || queue1 === queue2) {
        // There's only a single queue.
        appendUpdateToQueue(queue1, update);
      } else {
        // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          // One of the queues is not empty. We must add the update to both queues.
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          // Both queues are non-empty. The last update is the same in both lists,
          // because of structural sharing. So, only append to one of the lists.
          appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

          queue2.lastUpdate = update;
        }
      }

      {
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      // Captured updates go into a separate list, and only on the work-in-
      // progress queue.
      var workInProgressQueue = workInProgress.updateQueue;

      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      } // Append the update to the end of the list.


      if (workInProgressQueue.lastCapturedUpdate === null) {
        // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;

      if (current !== null) {
        // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }

      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;

            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }

              var nextState = _payload.call(instance, prevState, nextProps);

              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            } // State object


            return _payload;
          }

        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }
        // Intentional fallthrough

        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;

            if (typeof _payload2 === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              // Partial state object
              partialState = _payload2;
            }

            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            } // Merge the partial state and the previous state.


            return _assign({}, prevState, partialState);
          }

        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }

      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;
      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
      {
        currentlyProcessingQueue = queue;
      } // These values may change as we process the queue.

      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

      var update = queue.firstUpdate;
      var resultState = newBaseState;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstUpdate === null) {
            // This is the first skipped update. It will be the first update in
            // the new list.
            newFirstUpdate = update; // Since this is the first update that was skipped, the current result
            // is the new base state.

            newBaseState = resultState;
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;

          if (_callback !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        } // Continue to the next update.


        update = update.next;
      } // Separately, iterate though the list of captured updates.


      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;

      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;

        if (_updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstCapturedUpdate === null) {
            // This is the first skipped captured update. It will be the first
            // update in the new list.
            newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
            // the new base state.

            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;

          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }

        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }

      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }

      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.

      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;
      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      // If the finished render included captured updates, and there are still
      // lower priority updates left over, we need to keep the captured updates
      // in the queue so that they are rebased and not dropped once we process the
      // queue again at the lower priority.
      if (finishedQueue.firstCapturedUpdate !== null) {
        // Join the captured update list to the end of the normal list.
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        } // Clear the list of captured updates.


        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      } // Commit the effects


      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;
      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;

        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }

        effect = effect.nextEffect;
      }
    }

    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;

    if (supportsMutation) {
      // Mutation mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;

        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        } // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.


        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.

        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.

        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else if (supportsPersistence) {
      // Persistent host tree mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendInitialChild(parent, instance);
          } else if (node.tag === HostText) {
            var _instance = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance;
            }

            appendInitialChild(parent, _instance);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }; // An unfortunate fork of appendAllChildren because we have two different parent types.


      var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendChildToContainerChildSet(containerChildSet, instance);
          } else if (node.tag === HostText) {
            var _instance2 = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance2;
            }

            appendChildToContainerChildSet(containerChildSet, _instance2);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged) {// No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

          markUpdate(workInProgress);
          finalizeContainerChildren(container, newChildSet);
        }
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        var currentInstance = current.stateNode;
        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.

        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged && oldProps === newProps) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var recyclableInstance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = null;

        if (oldProps !== newProps) {
          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        }

        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }

        workInProgress.stateNode = newInstance;

        if (childrenUnchanged) {
          // If there are no other effects in this tree, we need to flag this node as having one.
          // Even though we're not going to use it for anything.
          // Otherwise parents won't know that there are new children to propagate upwards.
          markUpdate(workInProgress);
        } else {
          // If children might have changed, we have to add them all to the set.
          appendAllChildren(newInstance, workInProgress, false, false);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.

          markUpdate(workInProgress);
        }
      };
    } else {
      // No host operations
      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
      };
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          break;

        case LazyComponent:
          break;

        case SimpleMemoComponent:
        case FunctionComponent:
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }

            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
              // TODO: Delete this when we delete isMounted and findDOMNode.

              workInProgress.effectTag &= ~Placement;
            }

            updateHostContainer(workInProgress);
            break;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                break;
              }

              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on we want to add then top->down or
              // bottom->up. Top->down is faster in IE11.

              var wasHydrated = popHydrationState(workInProgress);

              if (wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node needs to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress, false, false); // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.

                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = instance;
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }

            break;
          }

        case HostText:
          {
            var newText = newProps;

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.

              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.
              }

              var _rootContainerInstance = getRootHostContainer();

              var _currentHostContext = getHostContext();

              var _wasHydrated = popHydrationState(workInProgress);

              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }

            break;
          }

        case ForwardRef:
          break;

        case SuspenseComponent:
          {
            var nextState = workInProgress.memoizedState;

            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

              return workInProgress;
            }

            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current !== null && current.memoizedState !== null;

            if (current !== null && !nextDidTimeout && prevDidTimeout) {
              // We just switched from the fallback to the normal children. Delete
              // the fallback.
              // TODO: Would it be better to store the fallback fragment on
              var currentFallbackChild = current.child.sibling;

              if (currentFallbackChild !== null) {
                // Deletions go at the beginning of the return fiber's effect list
                var first = workInProgress.firstEffect;

                if (first !== null) {
                  workInProgress.firstEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = first;
                } else {
                  workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = null;
                }

                currentFallbackChild.effectTag = Deletion;
              }
            }

            if (nextDidTimeout || prevDidTimeout) {
              // If the children are hidden, or if they were previous hidden, schedule
              // an effect to toggle their visibility. This is also used to attach a
              // retry listener to the promise.
              workInProgress.effectTag |= Update;
            }

            break;
          }

        case Fragment:
          break;

        case Mode:
          break;

        case Profiler:
          break;

        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;

        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          break;

        case ContextConsumer:
          break;

        case MemoComponent:
          break;

        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              if (current === null) {
                var _wasHydrated2 = popHydrationState(workInProgress);

                !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
                skipPastDehydratedSuspenseInstance(workInProgress);
              } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated.
                // To handle any future suspense cases, we're going to now upgrade it
                // to a Suspense component. We detach it from the existing current fiber.
                current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.tag = SuspenseComponent;
                workInProgress.memoizedState = null;
                workInProgress.stateNode = null;
              }
            }

            break;
          }

        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }

      return null;
    }

    function shouldCaptureSuspense(workInProgress) {
      // In order to capture, the Suspense component must have a fallback prop.
      if (workInProgress.memoizedProps.fallback === undefined) {
        return false;
      } // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.


      var nextState = workInProgress.memoizedState;
      return nextState === null;
    } // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.


    function showErrorDialog(capturedError) {
      return true;
    }

    function logCapturedError(capturedError) {
      var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          } // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.


          console.error(error); // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console.error(combinedMessage);
      }
    }

    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;

      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : '',
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
      startPhaseTimer(current$$1, 'componentWillUnmount');
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    }; // Capture errors so they don't interrupt unmounting.


    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;

      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);

            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function safelyCallDestroy(current$$1, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);

        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current$$1, error);
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }

        case ClassComponent:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }

            return;
          }

        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;

        do {
          if ((effect.tag & unmountTag) !== NoEffect$1) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = undefined;

            if (destroy !== undefined) {
              destroy();
            }
          }

          if ((effect.tag & mountTag) !== NoEffect$1) {
            // Mount
            var create = effect.create;
            effect.destroy = create();
            {
              var _destroy = effect.destroy;

              if (_destroy !== undefined && typeof _destroy !== 'function') {
                var addendum = void 0;

                if (_destroy === null) {
                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                } else if (typeof _destroy.then === 'function') {
                  addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + '}, [someId]); // Or [] if effect doesn\'t need props or state\n\n' + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                } else {
                  addendum = ' You returned: ' + _destroy;
                }

                warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
              }
            }
          }

          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }

    function commitPassiveHookEffects(finishedWork) {
      commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
      commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }

        case ClassComponent:
          {
            var instance = finishedWork.stateNode;

            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }

            var updateQueue = finishedWork.updateQueue;

            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                }
              } // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }

            return;
          }

        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;

            if (_updateQueue !== null) {
              var _instance = null;

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;

                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }

            return;
          }

        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.

            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }

            return;
          }

        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }

        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }

        case Profiler:
          {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;

              if (enableSchedulerTracing) {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              } else {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
              }
            }

            return;
          }

        case SuspenseComponent:
          break;

        case IncompleteClassComponent:
          break;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      if (supportsMutation) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        var node = finishedWork;

        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
            // Found a nested Suspense component that timed out. Skip over the
            var fallbackChildFragment = node.child.sibling;
            fallbackChildFragment.return = node;
            node = fallbackChildFragment;
            continue;
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === finishedWork) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;

      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;

        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;

          default:
            instanceToUse = instance;
        }

        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;

      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay


    function commitUnmount(current$$1) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            var updateQueue = current$$1.updateQueue;

            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  var destroy = effect.destroy;

                  if (destroy !== undefined) {
                    safelyCallDestroy(current$$1, destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            break;
          }

        case ClassComponent:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;

            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }

            return;
          }

        case HostComponent:
          {
            safelyDetachRef(current$$1);
            return;
          }

        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            if (supportsMutation) {
              unmountHostComponents(current$$1);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }

            return;
          }
      }
    }

    function commitNestedUnmounts(root) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      var node = root;

      while (true) {
        commitUnmount(node); // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.

        if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        !supportsMutation || node.tag !== HostPortal)) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === root) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      current$$1.return = null;
      current$$1.child = null;
      current$$1.memoizedState = null;
      current$$1.updateQueue = null;
      var alternate = current$$1.alternate;

      if (alternate !== null) {
        alternate.return = null;
        alternate.child = null;
        alternate.memoizedState = null;
        alternate.updateQueue = null;
      }
    }

    function emptyPortalContainer(current$$1) {
      if (!supportsPersistence) {
        return;
      }

      var portal = current$$1.stateNode;
      var containerInfo = portal.containerInfo;
      var emptyChildSet = createContainerChildSet(containerInfo);
      replaceContainerChildren(containerInfo, emptyChildSet);
    }

    function commitContainer(finishedWork) {
      if (!supportsPersistence) {
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            return;
          }

        case HostText:
          {
            return;
          }

        case HostRoot:
        case HostPortal:
          {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo,
                _pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, _pendingChildren);
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber.return;

      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }

        parent = parent.return;
      }

      invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      var node = fiber;

      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;

        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.effectTag & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          } // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.


          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        } // Check if this host node is stable or about to be placed.


        if (!(node.effectTag & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {
      if (!supportsMutation) {
        return;
      } // Recursively insert all host nodes into the parent.


      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

      var parent = void 0;
      var isContainer = void 0;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentFiber.stateNode;
          isContainer = false;
          break;

        case HostRoot:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        case HostPortal:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        default:
          invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
      }

      if (parentFiber.effectTag & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent); // Clear ContentReset from the effect tag

        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.

      var node = finishedWork;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, node.stateNode, before);
            } else {
              insertBefore(parent, node.stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, node.stateNode);
            } else {
              appendChild(parent, node.stateNode);
            }
          }
        } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1) {
      // We only have the top Fiber that was deleted but we need to recurse down its
      var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.

      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;

          findParent: while (true) {
            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            switch (parent.tag) {
              case HostComponent:
                currentParent = parent.stateNode;
                currentParentIsContainer = false;
                break findParent;

              case HostRoot:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case HostPortal:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }

            parent = parent.return;
          }

          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
          // node from the tree.

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          } // Don't visit children because we already visited them.

        } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
          // Delete the dehydrated suspense boundary and all of its content.
          if (currentParentIsContainer) {
            clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
          } else {
            clearSuspenseBoundary(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true; // Visit children because portals might contain host components.

            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node); // Visit children because we may find more host components below.

          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }

        if (node === current$$1) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === current$$1) {
            return;
          }

          node = node.return;

          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1) {
      if (supportsMutation) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
      } else {
        // Detach refs and call componentWillUnmount() on the whole subtree.
        commitNestedUnmounts(current$$1);
      }

      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {
      if (!supportsMutation) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
            {
              // Note: We currently never use MountMutation, but useLayout uses
              // UnmountMutation.
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }
        }

        commitContainer(finishedWork);
        return;
      }

      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            // Note: We currently never use MountMutation, but useLayout uses
            // UnmountMutation.
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }

        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            var instance = finishedWork.stateNode;

            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }

            return;
          }

        case HostText:
          {
            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }

        case HostRoot:
          {
            return;
          }

        case Profiler:
          {
            return;
          }

        case SuspenseComponent:
          {
            var newState = finishedWork.memoizedState;
            var newDidTimeout = void 0;
            var primaryChildParent = finishedWork;

            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;

              if (newState.timedOutAt === NoWork) {
                // If the children had not already timed out, record the time.
                // This is used to compute the elapsed time during subsequent
                // attempts to render the children.
                newState.timedOutAt = requestCurrentTime();
              }
            }

            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            } // If this boundary just timed out, then it will have a set of thenables.
            // For each thenable, attach a listener so that when it resolves, React
            // attempts to re-render the boundary in the primary (pre-timeout) state.


            var thenables = finishedWork.updateQueue;

            if (thenables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;

              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
              }

              thenables.forEach(function (thenable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);

                if (enableSchedulerTracing) {
                  retry = tracing.unstable_wrap(retry);
                }

                if (!retryCache.has(thenable)) {
                  retryCache.add(thenable);
                  thenable.then(retry, retry);
                }
              });
            }

            return;
          }

        case IncompleteClassComponent:
          {
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitResetTextContent(current$$1) {
      if (!supportsMutation) {
        return;
      }

      resetTextContent(current$$1.stateNode);
    }

    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime); // Unmount the root by rendering null.

      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: null
      };
      var error = errorInfo.value;

      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };

      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if (typeof getDerivedStateFromError === 'function') {
        var error = errorInfo.value;

        update.payload = function () {
          return getDerivedStateFromError(error);
        };
      }

      var inst = fiber.stateNode;

      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
          }

          var error = errorInfo.value;
          var stack = errorInfo.stack;
          logError(fiber, errorInfo);
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
            }
          }
        };
      }

      return update;
    }

    function attachPingListener(root, renderExpirationTime, thenable) {
      // Attach a listener to the promise to "ping" the root and retry. But
      // only if one does not already exist for the current render expiration
      // time (which acts like a "thread ID" here).
      var pingCache = root.pingCache;
      var threadIDs = void 0;

      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        threadIDs = new Set();
        pingCache.set(thenable, threadIDs);
      } else {
        threadIDs = pingCache.get(thenable);

        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        }
      }

      if (!threadIDs.has(renderExpirationTime)) {
        // Memoize using the thread ID to prevent redundant listeners.
        threadIDs.add(renderExpirationTime);
        var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);

        if (enableSchedulerTracing) {
          ping = tracing.unstable_wrap(ping);
        }

        thenable.then(ping, ping);
      }
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      // The source fiber did not complete.
      sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a thenable.
        var thenable = value; // Find the earliest timeout threshold of all the placeholders in the
        // ancestor path. We could avoid this traversal by storing the thresholds on
        // the stack, but we choose not to because we only hit this path if we're
        // IO-bound (i.e. if something suspends). Whereas the stack is used even in
        // the non-IO- bound case.

        var _workInProgress = returnFiber;
        var earliestTimeoutMs = -1;
        var startTimeMs = -1;

        do {
          if (_workInProgress.tag === SuspenseComponent) {
            var current$$1 = _workInProgress.alternate;

            if (current$$1 !== null) {
              var currentState = current$$1.memoizedState;

              if (currentState !== null) {
                // Reached a boundary that already timed out. Do not search
                // any further.
                var timedOutAt = currentState.timedOutAt;
                startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.

                break;
              }
            }

            var timeoutPropMs = _workInProgress.pendingProps.maxDuration;

            if (typeof timeoutPropMs === 'number') {
              if (timeoutPropMs <= 0) {
                earliestTimeoutMs = 0;
              } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                earliestTimeoutMs = timeoutPropMs;
              }
            }
          } // If there is a DehydratedSuspenseComponent we don't have to do anything because
          // if something suspends inside it, we will simply leave that as dehydrated. It
          // will never timeout.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // Schedule the nearest Suspense to re-render the timed out view.


        _workInProgress = returnFiber;

        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
            // Found the nearest boundary.
            // Stash the promise on the boundary fiber. If the boundary times out, we'll
            var thenables = _workInProgress.updateQueue;

            if (thenables === null) {
              var updateQueue = new Set();
              updateQueue.add(thenable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              thenables.add(thenable);
            } // If the boundary is outside of concurrent mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            //
            // Note: It doesn't matter whether the component that suspended was
            // inside a concurrent mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.


            if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
              _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.

              sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;

                if (currentSourceFiber === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force updte to
                  // prevent a bail out.
                  var update = createUpdate(Sync);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              } // The source fiber did not complete. Mark it with Sync priority to
              // indicate that it still has pending work.


              sourceFiber.expirationTime = Sync; // Exit without suspending.

              return;
            } // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.


            attachPingListener(root, renderExpirationTime, thenable);
            var absoluteTimeoutMs = void 0;

            if (earliestTimeoutMs === -1) {
              // If no explicit threshold is given, default to an arbitrarily large
              // value. The actual size doesn't matter because the threshold for the
              // whole tree will be clamped to the expiration time.
              absoluteTimeoutMs = maxSigned31BitInt;
            } else {
              if (startTimeMs === -1) {
                // This suspend happened outside of any already timed-out
                // placeholders. We don't know exactly when the update was
                // scheduled, but we can infer an approximate start time from the
                // expiration time. First, find the earliest uncommitted expiration
                // time in the tree, including work that is suspended. Then subtract
                // the offset used to compute an async update's expiration time.
                // This will cause high priority (interactive) work to expire
                // earlier than necessary, but we can account for this by adjusting
                // for the Just Noticeable Difference.
                var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
              }

              absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
            } // Mark the earliest timeout in the suspended fiber's ancestor path.
            // After completing the root, we'll take the largest of all the
            // suspended fiber's timeouts and use it to compute a timeout for the
            // whole tree.


            renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);
            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
            attachPingListener(root, renderExpirationTime, thenable); // Since we already have a current fiber, we can eagerly add a retry listener.

            var retryCache = _workInProgress.memoizedState;

            if (retryCache === null) {
              retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
              var _current = _workInProgress.alternate;
              !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
              _current.memoizedState = retryCache;
            } // Memoize using the boundary fiber to prevent redundant listeners.


            if (!retryCache.has(thenable)) {
              retryCache.add(thenable);
              var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);

              if (enableSchedulerTracing) {
                retry = tracing.unstable_wrap(retry);
              }

              thenable.then(retry, retry);
            }

            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } // This boundary already captured during this render. Continue to the next
          // boundary.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?


        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
      } // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.


      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;

      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;

              var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }

          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;

            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }

            break;

          default:
            break;
        }

        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;
            !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }

        case HostComponent:
          {
            // TODO: popHydrationState
            popHostContext(workInProgress);
            return null;
          }

        case SuspenseComponent:
          {
            var _effectTag2 = workInProgress.effectTag;

            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

              return workInProgress;
            }

            return null;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              // TODO: popHydrationState
              var _effectTag3 = workInProgress.effectTag;

              if (_effectTag3 & ShouldCapture) {
                workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                return workInProgress;
              }
            }

            return null;
          }

        case HostPortal:
          popHostContainer(workInProgress);
          return null;

        case ContextProvider:
          popProvider(workInProgress);
          return null;

        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }

        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }

        case HostPortal:
          popHostContainer(interruptedWork);
          break;

        case ContextProvider:
          popProvider(interruptedWork);
          break;

        default:
          break;
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;

    if (enableSchedulerTracing) {
      // Provide explicit error message when production+profiling bundle of e.g. react-dom
      // is used with production (non-profiling) bundle of scheduler/tracing
      !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }

    {
      didWarnAboutStateTransition = false;
      didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      warnAboutUpdateOnUnmounted = function (fiber, isClass) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';

        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }

        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      warnAboutInvalidUpdates = function (instance) {
        switch (phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }

            warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;

          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }

            warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    } // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.

    var lastUniqueAsyncExpiration = Sync - 1;
    var isWorking = false; // The next work in progress fiber that we're currently working on.

    var nextUnitOfWork = null;
    var nextRoot = null; // The time at which we're currently rendering work.

    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.

    var nextEffect = null;
    var isCommitting$1 = false;
    var rootWithPendingPassiveEffects = null;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.

    var interruptedBy = null;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;

    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      stashedWorkInProgressProperties = null;
      mayReplayFailedUnitOfWork = true;
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;

      replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          // TODO: Need to figure out a different strategy if/when we add
          // support for catching other types.
          return;
        } // Restore the original state of the work-in-progress


        if (stashedWorkInProgressProperties === null) {
          // This should never happen. Don't throw because this code is DEV-only.
          warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
          return;
        }

        assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

        switch (failedUnitOfWork.tag) {
          case HostRoot:
            popHostContainer(failedUnitOfWork);
            popTopLevelContextObject(failedUnitOfWork);
            break;

          case HostComponent:
            popHostContext(failedUnitOfWork);
            break;

          case ClassComponent:
            {
              var Component = failedUnitOfWork.type;

              if (isContextProvider(Component)) {
                popContext(failedUnitOfWork);
              }

              break;
            }

          case HostPortal:
            popHostContainer(failedUnitOfWork);
            break;

          case ContextProvider:
            popProvider(failedUnitOfWork);
            break;
        } // Replay the begin phase.


        isReplayingFailedUnitOfWork = true;
        originalReplayError = thrownValue;
        invokeGuardedCallback(null, workLoop, null, isYieldy);
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;

        if (hasCaughtError()) {
          var replayError = clearCaughtError();

          if (replayError != null && thrownValue != null) {
            try {
              // Reading the expando property is intentionally
              // inside `try` because it might be a getter or Proxy.
              if (replayError._suppressLogging) {
                // Also suppress logging for the original error.
                thrownValue._suppressLogging = true;
              }
            } catch (inner) {// Ignore.
            }
          }
        } else {
          // If the begin phase did not fail the second time, set this pointer
          // back to the original value.
          nextUnitOfWork = failedUnitOfWork;
        }
      };

      rethrowOriginalError = function () {
        throw originalReplayError;
      };
    }

    function resetStack() {
      if (nextUnitOfWork !== null) {
        var interruptedWork = nextUnitOfWork.return;

        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
      }
      nextRoot = null;
      nextRenderExpirationTime = NoWork;
      nextLatestAbsoluteTimeoutMs = -1;
      nextRenderDidError = false;
      nextUnitOfWork = null;
    }

    function commitAllHostEffects() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        recordEffect();
        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;

          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        } // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every
        // possible bitmap value, we remove the secondary effects from the
        // effect tag and switch on that value.


        var primaryEffectTag = effectTag & (Placement | Update | Deletion);

        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted
              // does and isMounted is deprecated anyway so we should be able
              // to kill this.

              nextEffect.effectTag &= ~Placement;
              break;
            }

          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.

              nextEffect.effectTag &= ~Placement; // Update

              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }

          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }

          case Deletion:
            {
              commitDeletion(nextEffect);
              break;
            }
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitBeforeMutationLifecycles() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & Snapshot) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        ReactStrictModeWarnings.flushLegacyContextWarning();

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.flushPendingDeprecationWarnings();
        }
      }

      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        if (effectTag & Passive) {
          rootWithPendingPassiveEffects = finishedRoot;
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitPassiveEffects(root, firstEffect) {
      rootWithPendingPassiveEffects = null;
      passiveEffectCallbackHandle = null;
      passiveEffectCallback = null; // Set this to true to prevent re-entrancy

      var previousIsRendering = isRendering;
      isRendering = true;
      var effect = firstEffect;

      do {
        {
          setCurrentFiber(effect);
        }

        if (effect.effectTag & Passive) {
          var didError = false;
          var error = void 0;
          {
            invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
            }
          }

          if (didError) {
            captureCommitPhaseError(effect, error);
          }
        }

        effect = effect.nextEffect;
      } while (effect !== null);

      {
        resetCurrentFiber();
      }
      isRendering = previousIsRendering; // Check if work was scheduled by one of the effects

      var rootExpirationTime = root.expirationTime;

      if (rootExpirationTime !== NoWork) {
        requestWork(root, rootExpirationTime);
      } // Flush any sync work that was scheduled by effects


      if (!isBatchingUpdates && !isRendering) {
        performSyncWork();
      }
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function flushPassiveEffects() {
      if (passiveEffectCallbackHandle !== null) {
        cancelPassiveEffects(passiveEffectCallbackHandle);
      }

      if (passiveEffectCallback !== null) {
        // We call the scheduled callback instead of commitPassiveEffects directly
        // to ensure tracing works correctly.
        passiveEffectCallback();
      }
    }

    function commitRoot(root, finishedWork) {
      isWorking = true;
      isCommitting$1 = true;
      startCommitTimer();
      !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var committedExpirationTime = root.pendingCommitExpirationTime;
      !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are
      // about to commit. This needs to happen before calling the lifecycles, since
      // they may schedule additional updates.

      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);
      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // Restore any pending interactions at this point,
        // So that cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      } // Reset this to null before calling lifecycles


      ReactCurrentOwner$2.current = null;
      var firstEffect = void 0;

      if (finishedWork.effectTag > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if
        // it had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }

      prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.

      nextEffect = firstEffect;
      startCommitSnapshotEffectsTimer();

      while (nextEffect !== null) {
        var didError = false;
        var error = void 0;
        {
          invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);

          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }

        if (didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitSnapshotEffectsTimer();

      if (enableProfilerTimer) {
        // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
      } // Commit all the side-effects within a tree. We'll do this in two passes.
      // The first pass performs all the host insertions, updates, deletions and
      // ref unmounts.


      nextEffect = firstEffect;
      startCommitHostEffectsTimer();

      while (nextEffect !== null) {
        var _didError = false;

        var _error = void 0;

        {
          invokeGuardedCallback(null, commitAllHostEffects, null);

          if (hasCaughtError()) {
            _didError = true;
            _error = clearCaughtError();
          }
        }

        if (_didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitHostEffectsTimer();
      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
      // the first pass of the commit phase, so that the previous tree is still
      // current during componentWillUnmount, but before the second pass, so that
      // the finished work is current during componentDidMount/Update.

      root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
      // Life-cycles happen as a separate pass so that all placements, updates,
      // and deletions in the entire tree have already been invoked.
      // This pass also triggers any renderer-specific initial effects.

      nextEffect = firstEffect;
      startCommitLifeCyclesTimer();

      while (nextEffect !== null) {
        var _didError2 = false;

        var _error2 = void 0;

        {
          invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);

          if (hasCaughtError()) {
            _didError2 = true;
            _error2 = clearCaughtError();
          }
        }

        if (_didError2) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error2);

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
        // This commit included a passive effect. These do not need to fire until
        // after the next paint. Schedule an callback to fire them in an async
        // event. To ensure serial execution, the callback will be flushed early if
        // we enter rootWithPendingPassiveEffects commit phase before then.
        var callback = commitPassiveEffects.bind(null, root, firstEffect);

        if (enableSchedulerTracing) {
          // TODO: Avoid this extra callback by mutating the tracing ref directly,
          // like we do at the beginning of commitRoot. I've opted not to do that
          // here because that code is still in flux.
          callback = tracing.unstable_wrap(callback);
        }

        passiveEffectCallbackHandle = scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority, function () {
          return schedulePassiveEffects(callback);
        });
        passiveEffectCallback = callback;
      }

      isCommitting$1 = false;
      isWorking = false;
      stopCommitLifeCyclesTimer();
      stopCommitTimer();
      onCommitRoot(finishedWork.stateNode);

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
      }

      var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
      var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;

      if (earliestRemainingTimeAfterCommit === NoWork) {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }

      onCommit(root, earliestRemainingTimeAfterCommit);

      if (enableSchedulerTracing) {
        tracing.__interactionsRef.current = prevInteractions;
        var subscriber = void 0;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          // It's not safe for commitRoot() to throw.
          // Store the error for now and we'll re-throw in finishRendering().
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        } finally {
          // Clear completed interactions from the pending Map.
          // Unless the render was suspended or cascading work was scheduled,
          // In which case– leave pending interactions until the subsequent render.
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            // Only decrement the pending interaction count if we're done.
            // If there's still work at the current priority,
            // That indicates that we are waiting for suspense data.
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    // It's not safe for commitRoot() to throw.
                    // Store the error for now and we'll re-throw in finishRendering().
                    if (!hasUnhandledError) {
                      hasUnhandledError = true;
                      unhandledError = error;
                    }
                  }
                }
              });
            }
          });
        }
      }
    }

    function resetChildExpirationTime(workInProgress, renderTime) {
      if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }

      var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // We're in profiling mode.
        // Let's use this same traversal to update the render durations.
        var actualDuration = workInProgress.actualDuration;
        var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.
        // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration.
        // If the fiber has not been cloned though, (meaning no work was done),
        // Then this value will reflect the amount of time spent working on a previous render.
        // In that case it should not bubble.
        // We determine whether it was cloned by comparing the child pointer.

        var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
        var child = workInProgress.child;

        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;

          if (childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }

          if (childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }

          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }

          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
        workInProgress.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = workInProgress.child;

        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;

          if (_childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }

          if (_childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }

          _child = _child.sibling;
        }
      }

      workInProgress.childExpirationTime = newChildExpirationTime;
    }

    function completeUnitOfWork(workInProgress) {
      // Attempt to complete the current unit of work, then move to the
      // next sibling. If there are no more siblings, return to the
      // parent fiber.
      while (true) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        {
          setCurrentFiber(workInProgress);
        }
        var returnFiber = workInProgress.return;
        var siblingFiber = workInProgress.sibling;

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // Don't replay if it fails during completion phase.
            mayReplayFailedUnitOfWork = false;
          } // This fiber completed.
          // Remember we're completing this unit so we can find a boundary if it fails.


          nextUnitOfWork = workInProgress;

          if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) {
              startProfilerTimer(workInProgress);
            }

            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

            if (workInProgress.mode & ProfileMode) {
              // Update render duration assuming we didn't error.
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
          } else {
            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
          }

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // We're out of completion phase so replaying is fine now.
            mayReplayFailedUnitOfWork = true;
          }

          stopWorkTimer(workInProgress);
          resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
          {
            resetCurrentFiber();
          }

          if (nextUnitOfWork !== null) {
            // Completing this fiber spawned new work. Work on that next.
            return nextUnitOfWork;
          }

          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.effectTag & Incomplete) === NoEffect) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            } // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.


            var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            return null;
          }
        } else {
          if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

            var actualDuration = workInProgress.actualDuration;
            var child = workInProgress.child;

            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }

            workInProgress.actualDuration = actualDuration;
          } // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.


          var next = unwindWork(workInProgress, nextRenderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.

          if (workInProgress.effectTag & DidCapture) {
            // Restarting an error boundary
            stopFailedWorkTimer(workInProgress);
          } else {
            stopWorkTimer(workInProgress);
          }

          {
            resetCurrentFiber();
          }

          if (next !== null) {
            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.


            next.effectTag &= HostEffectMask;
            return next;
          }

          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            return null;
          }
        }
      } // Without this explicit null return Flow complains of invalid return type
      // TODO Remove the above while(true) loop
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function performUnitOfWork(workInProgress) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.

      startWorkTimer(workInProgress);
      {
        setCurrentFiber(workInProgress);
      }

      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
      }

      var next = void 0;

      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;

        if (workInProgress.mode & ProfileMode) {
          // Record the render duration assuming we didn't bailout (or error).
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
      } else {
        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;
      }

      {
        resetCurrentFiber();

        if (isReplayingFailedUnitOfWork) {
          // Currently replaying a failed unit of work. This should be unreachable,
          // because the render phase is meant to be idempotent, and it should
          // have thrown again. Since it didn't, rethrow the original error, so
          // React's internal stack is not misaligned.
          rethrowOriginalError();
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
      }

      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
      }

      ReactCurrentOwner$2.current = null;
      return next;
    }

    function workLoop(isYieldy) {
      if (!isYieldy) {
        // Flush work without yielding
        while (nextUnitOfWork !== null) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } else {
        // Flush asynchronous work until there's a higher priority event
        while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }

    function renderRoot(root, isYieldy) {
      !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      flushPassiveEffects();
      isWorking = true;
      var previousDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;
      var expirationTime = root.nextExpirationTimeToWorkOn; // Check if we're starting from a fresh stack, or if we're resuming from
      // previously yielded work.

      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
        // Reset the stack and start working from the root.
        resetStack();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
        root.pendingCommitExpirationTime = NoWork;

        if (enableSchedulerTracing) {
          // Determine which interactions this batch of work currently includes,
          // So that we can accurately attribute time spent working on it,
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like renderRoot() without having to recalculate it.
          // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
          // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // Work thrown by an interaction tracing subscriber should be rethrown,
                // But only once it's safe (to avoid leaving the scheduler in an invalid state).
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }
        }
      }

      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // We're about to start new traced work.
        // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      }

      var didFatal = false;
      startWorkLoopTimer(nextUnitOfWork);

      do {
        try {
          workLoop(isYieldy);
        } catch (thrownValue) {
          resetContextDependences();
          resetHooks(); // Reset in case completion throws.
          // This is only used in DEV and when replaying is on.

          var mayReplay = void 0;

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            mayReplay = mayReplayFailedUnitOfWork;
            mayReplayFailedUnitOfWork = true;
          }

          if (nextUnitOfWork === null) {
            // This is a fatal error.
            didFatal = true;
            onUncaughtError(thrownValue);
          } else {
            if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
              // Record the time spent rendering before an error was thrown.
              // This avoids inaccurate Profiler durations in the case of a suspended render.
              stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
            }

            {
              // Reset global debug state
              // We assume this is defined in DEV
              resetCurrentlyProcessingQueue();
            }

            if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              if (mayReplay) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
              }
            } // TODO: we already know this isn't true in some cases.
            // At least this shows a nicer error message until we figure out the cause.
            // https://github.com/facebook/react/issues/12449#issuecomment-386727431


            !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
            var sourceFiber = nextUnitOfWork;
            var returnFiber = sourceFiber.return;

            if (returnFiber === null) {
              // This is the root. The root could capture its own errors. However,
              // we don't know if it errors before or after we pushed the host
              // context. This information is needed to avoid a stack mismatch.
              // Because we're not sure, treat this as a fatal error. We could track
              // which phase it fails in, but doesn't seem worth it. At least
              // for now.
              didFatal = true;
              onUncaughtError(thrownValue);
            } else {
              throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
              continue;
            }
          }
        }

        break;
      } while (true);

      if (enableSchedulerTracing) {
        // Traced work is done for now; restore the previous interactions.
        tracing.__interactionsRef.current = prevInteractions;
      } // We're done performing work. Time to clean up.


      isWorking = false;
      ReactCurrentDispatcher.current = previousDispatcher;
      resetContextDependences();
      resetHooks(); // Yield back to main thread.

      if (didFatal) {
        var _didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
        interruptedBy = null; // There was a fatal error.

        {
          resetStackAfterFatalErrorInDev();
        } // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.

        nextRoot = null;
        onFatal(root);
        return;
      }

      if (nextUnitOfWork !== null) {
        // There's still remaining async work in this tree, but we ran out of time
        // in the current frame. Yield back to the renderer. Unless we're
        // interrupted by a higher priority update, we'll continue later from where
        // we left off.
        var _didCompleteRoot2 = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
        interruptedBy = null;
        onYield(root);
        return;
      } // We completed the whole tree.


      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      var rootWorkInProgress = root.current.alternate;
      !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates
      // that we're in the middle of an async render. Set it to null to indicate
      // there's no more work to be done in the current batch.

      nextRoot = null;
      interruptedBy = null;

      if (nextRenderDidError) {
        // There was an error
        if (hasLowerPriorityWork(root, expirationTime)) {
          // There's lower priority work. If so, it may have the effect of fixing
          // the exception that was just thrown. Exit without committing. This is
          // similar to a suspend, but without a timeout because we're not waiting
          // for a promise to resolve. React will restart at the lower
          // priority level.
          markSuspendedPriorityLevel(root, expirationTime);
          var suspendedExpirationTime = expirationTime;
          var rootExpirationTime = root.expirationTime;
          onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        } else if ( // There's no lower priority work, but we're rendering asynchronously.
        // Synchronously attempt to render the same level one more time. This is
        // similar to a suspend, but without a timeout because we're not waiting
        // for a promise to resolve.
        !root.didError && isYieldy) {
          root.didError = true;

          var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;

          var _rootExpirationTime = root.expirationTime = Sync;

          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        }
      }

      if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
        // The tree was suspended.
        var _suspendedExpirationTime2 = expirationTime;
        markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including
        // work that is suspended. The timeout threshold cannot be longer than
        // the overall expiration.

        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
        var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);

        if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
          nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
        } // Subtract the current time from the absolute timeout to get the number
        // of milliseconds until the timeout. In other words, convert an absolute
        // timestamp to a relative time. This is the value that is passed
        // to `setTimeout`.


        var currentTimeMs = expirationTimeToMs(requestCurrentTime());
        var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
        msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference

        var _rootExpirationTime2 = root.expirationTime;
        onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
        return;
      } // Ready to commit.


      onComplete(root, rootWorkInProgress, expirationTime);
    }

    function captureCommitPhaseError(sourceFiber, value) {
      var expirationTime = Sync;
      var fiber = sourceFiber.return;

      while (fiber !== null) {
        switch (fiber.tag) {
          case ClassComponent:
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(value, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
              return;
            }

            break;

          case HostRoot:
            {
              var _errorInfo = createCapturedValue(value, sourceFiber);

              var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);

              enqueueUpdate(fiber, _update);
              scheduleWork(fiber, expirationTime);
              return;
            }
        }

        fiber = fiber.return;
      }

      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        var rootFiber = sourceFiber;

        var _errorInfo2 = createCapturedValue(value, rootFiber);

        var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);

        enqueueUpdate(rootFiber, _update2);
        scheduleWork(rootFiber, expirationTime);
      }
    }

    function computeThreadID(expirationTime, interactionThreadID) {
      // Interaction threads are unique per root and expiration time.
      return expirationTime * 1000 + interactionThreadID;
    } // Creates a unique async expiration time.


    function computeUniqueAsyncExpiration() {
      var currentTime = requestCurrentTime();
      var result = computeAsyncExpiration(currentTime);

      if (result >= lastUniqueAsyncExpiration) {
        // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration - 1;
      }

      lastUniqueAsyncExpiration = result;
      return lastUniqueAsyncExpiration;
    }

    function computeExpirationForFiber(currentTime, fiber) {
      var priorityLevel = scheduler.unstable_getCurrentPriorityLevel();
      var expirationTime = void 0;

      if ((fiber.mode & ConcurrentMode) === NoContext) {
        // Outside of concurrent mode, updates are always synchronous.
        expirationTime = Sync;
      } else if (isWorking && !isCommitting$1) {
        // During render phase, updates expire during as the current render.
        expirationTime = nextRenderExpirationTime;
      } else {
        switch (priorityLevel) {
          case scheduler.unstable_ImmediatePriority:
            expirationTime = Sync;
            break;

          case scheduler.unstable_UserBlockingPriority:
            expirationTime = computeInteractiveExpiration(currentTime);
            break;

          case scheduler.unstable_NormalPriority:
            // This is a normal, concurrent update
            expirationTime = computeAsyncExpiration(currentTime);
            break;

          case scheduler.unstable_LowPriority:
          case scheduler.unstable_IdlePriority:
            expirationTime = Never;
            break;

          default:
            invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
        } // If we're in the middle of rendering a tree, do not update at the same
        // expiration time that is already rendering.


        if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
          expirationTime -= 1;
        }
      } // Keep track of the lowest pending interactive expiration time. This
      // allows us to synchronously flush all interactive updates
      // when needed.
      // TODO: Move this to renderer?


      if (priorityLevel === scheduler.unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
        lowestPriorityPendingInteractiveExpirationTime = expirationTime;
      }

      return expirationTime;
    }

    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
      // Schedule the timeout.
      if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
        nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
      }
    }

    function renderDidError() {
      nextRenderDidError = true;
    }

    function pingSuspendedRoot(root, thenable, pingTime) {
      // A promise that previously suspended React from committing has resolved.
      // If React is still suspended, try again at the previous level (pingTime).
      var pingCache = root.pingCache;

      if (pingCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(thenable);
      }

      if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
        // Received a ping at the same priority level at which we're currently
        // rendering. Restart from the root.
        nextRoot = null;
      } else {
        // Confirm that the root is still suspended at this level. Otherwise exit.
        if (isPriorityLevelSuspended(root, pingTime)) {
          // Ping at the original level
          markPingedPriorityLevel(root, pingTime);
          var rootExpirationTime = root.expirationTime;

          if (rootExpirationTime !== NoWork) {
            requestWork(root, rootExpirationTime);
          }
        }
      }
    }

    function retryTimedOutBoundary(boundaryFiber, thenable) {
      // The boundary fiber (a Suspense component) previously timed out and was
      // rendered in its fallback state. One of the promises that suspended it has
      // resolved, which means at least part of the tree was likely unblocked. Try
      var retryCache = void 0;

      if (enableSuspenseServerRenderer) {
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            break;

          case DehydratedSuspenseComponent:
            retryCache = boundaryFiber.memoizedState;
            break;

          default:
            invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
        }
      } else {
        retryCache = boundaryFiber.stateNode;
      }

      if (retryCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(thenable);
      }

      var currentTime = requestCurrentTime();
      var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
      var root = scheduleWorkToRoot(boundaryFiber, retryTime);

      if (root !== null) {
        markPendingPriorityLevel(root, retryTime);
        var rootExpirationTime = root.expirationTime;

        if (rootExpirationTime !== NoWork) {
          requestWork(root, rootExpirationTime);
        }
      }
    }

    function scheduleWorkToRoot(fiber, expirationTime) {
      recordScheduleUpdate();
      {
        if (fiber.tag === ClassComponent) {
          var instance = fiber.stateNode;
          warnAboutInvalidUpdates(instance);
        }
      } // Update the source fiber's expiration time

      if (fiber.expirationTime < expirationTime) {
        fiber.expirationTime = expirationTime;
      }

      var alternate = fiber.alternate;

      if (alternate !== null && alternate.expirationTime < expirationTime) {
        alternate.expirationTime = expirationTime;
      } // Walk the parent path to the root and update the child expiration time.


      var node = fiber.return;
      var root = null;

      if (node === null && fiber.tag === HostRoot) {
        root = fiber.stateNode;
      } else {
        while (node !== null) {
          alternate = node.alternate;

          if (node.childExpirationTime < expirationTime) {
            node.childExpirationTime = expirationTime;

            if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }

          if (node.return === null && node.tag === HostRoot) {
            root = node.stateNode;
            break;
          }

          node = node.return;
        }
      }

      if (enableSchedulerTracing) {
        if (root !== null) {
          var interactions = tracing.__interactionsRef.current;

          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);

            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }

            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
      }

      return root;
    }

    function warnIfNotCurrentlyBatchingInDev(fiber) {
      {
        if (isRendering === false && isBatchingUpdates === false) {
          warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    function scheduleWork(fiber, expirationTime) {
      var root = scheduleWorkToRoot(fiber, expirationTime);

      if (root === null) {
        {
          switch (fiber.tag) {
            case ClassComponent:
              warnAboutUpdateOnUnmounted(fiber, true);
              break;

            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
              warnAboutUpdateOnUnmounted(fiber, false);
              break;
          }
        }
        return;
      }

      if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
        resetStack();
      }

      markPendingPriorityLevel(root, expirationTime);

      if ( // If we're in the render phase, we don't need to schedule this root
      // for an update, because we'll do it before we exit...
      !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.
      nextRoot !== root) {
        var rootExpirationTime = root.expirationTime;
        requestWork(root, rootExpirationTime);
      }

      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        // Reset this back to zero so subsequent updates don't throw.
        nestedUpdateCount = 0;
        invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
      }
    }

    function syncUpdates(fn, a, b, c, d) {
      return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        return fn(a, b, c, d);
      });
    } // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots


    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = scheduler.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates

    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;

    function recomputeCurrentRendererTime() {
      var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
      currentRendererTime = msToExpirationTime(currentTimeMs);
    }

    function scheduleCallbackWithExpirationTime(root, expirationTime) {
      if (callbackExpirationTime !== NoWork) {
        // A callback is already scheduled. Check its expiration time (timeout).
        if (expirationTime < callbackExpirationTime) {
          // Existing callback has sufficient timeout. Exit.
          return;
        } else {
          if (callbackID !== null) {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            scheduler.unstable_cancelCallback(callbackID);
          }
        } // The request callback timer is already running. Don't start a new one.

      } else {
        startRequestCallbackTimer();
      }

      callbackExpirationTime = expirationTime;
      var currentMs = scheduler.unstable_now() - originalStartTimeMs;
      var expirationTimeMs = expirationTimeToMs(expirationTime);
      var timeout = expirationTimeMs - currentMs;
      callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, {
        timeout: timeout
      });
    } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.


    function onFatal(root) {
      root.finishedWork = null;
    }

    function onComplete(root, finishedWork, expirationTime) {
      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = finishedWork;
    }

    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
      root.expirationTime = rootExpirationTime;

      if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
        // Don't wait an additional tick. Commit the tree immediately.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
      } else if (msUntilTimeout > 0) {
        // Wait `msUntilTimeout` milliseconds before committing.
        root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
      }
    }

    function onYield(root) {
      root.finishedWork = null;
    }

    function onTimeout(root, finishedWork, suspendedExpirationTime) {
      // The root timed out. Commit it.
      root.pendingCommitExpirationTime = suspendedExpirationTime;
      root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be
      // certain this won't cause tearing related to batching of event updates
      // because we're at the top of a timer event.

      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
      flushRoot(root, suspendedExpirationTime);
    }

    function onCommit(root, expirationTime) {
      root.expirationTime = expirationTime;
      root.finishedWork = null;
    }

    function requestCurrentTime() {
      // requestCurrentTime is called by the scheduler to compute an expiration
      // time.
      //
      // Expiration times are computed by adding to the current time (the start
      // time). However, if two updates are scheduled within the same event, we
      // should treat their start times as simultaneous, even if the actual clock
      // time has advanced between the first and second call.
      // In other words, because expiration times determine how updates are batched,
      // we want all updates of like priority that occur within the same event to
      // receive the same expiration time. Otherwise we get tearing.
      //
      // We keep track of two separate times: the current "renderer" time and the
      // current "scheduler" time. The renderer time can be updated whenever; it
      // only exists to minimize the calls performance.now.
      //
      // But the scheduler time can only be updated if there's no pending work, or
      // if we know for certain that we're not in the middle of an event.
      if (isRendering) {
        // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
      } // Check if there's pending work.


      findHighestPriorityRoot();

      if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
        // If there's no pending work, or if the pending work is offscreen, we can
        // read the current time without risk of tearing.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        return currentSchedulerTime;
      } // There's already pending work. We might be in the middle of a browser
      // event. If we were to read the current time, it could cause multiple updates
      // within the same event to receive different expiration times, leading to
      // tearing. Return the last read time. During the next idle callback, the
      // time will be updated.


      return currentSchedulerTime;
    } // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.


    function requestWork(root, expirationTime) {
      addRootToSchedule(root, expirationTime);

      if (isRendering) {
        // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
      }

      if (isBatchingUpdates) {
        // Flush work at the end of the batch.
        if (isUnbatchingUpdates) {
          // ...unless we're inside unbatchedUpdates, in which case we should
          // flush it now.
          nextFlushedRoot = root;
          nextFlushedExpirationTime = Sync;
          performWorkOnRoot(root, Sync, false);
        }

        return;
      } // TODO: Get rid of Sync and use current time?


      if (expirationTime === Sync) {
        performSyncWork();
      } else {
        scheduleCallbackWithExpirationTime(root, expirationTime);
      }
    }

    function addRootToSchedule(root, expirationTime) {
      // Add the root to the schedule.
      // Check if this root is already part of the schedule.
      if (root.nextScheduledRoot === null) {
        // This root is not already scheduled. Add it.
        root.expirationTime = expirationTime;

        if (lastScheduledRoot === null) {
          firstScheduledRoot = lastScheduledRoot = root;
          root.nextScheduledRoot = root;
        } else {
          lastScheduledRoot.nextScheduledRoot = root;
          lastScheduledRoot = root;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
        }
      } else {
        // This root is already scheduled, but its priority may have increased.
        var remainingExpirationTime = root.expirationTime;

        if (expirationTime > remainingExpirationTime) {
          // Update the priority.
          root.expirationTime = expirationTime;
        }
      }
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = NoWork;
      var highestPriorityRoot = null;

      if (lastScheduledRoot !== null) {
        var previousScheduledRoot = lastScheduledRoot;
        var root = firstScheduledRoot;

        while (root !== null) {
          var remainingExpirationTime = root.expirationTime;

          if (remainingExpirationTime === NoWork) {
            // This root no longer has work. Remove it from the scheduler.
            // TODO: This check is redudant, but Flow is confused by the branch
            // below where we set lastScheduledRoot to null, even though we break
            // from the loop right after.
            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            if (root === root.nextScheduledRoot) {
              // This is the only root in the list.
              root.nextScheduledRoot = null;
              firstScheduledRoot = lastScheduledRoot = null;
              break;
            } else if (root === firstScheduledRoot) {
              // This is the first root in the list.
              var next = root.nextScheduledRoot;
              firstScheduledRoot = next;
              lastScheduledRoot.nextScheduledRoot = next;
              root.nextScheduledRoot = null;
            } else if (root === lastScheduledRoot) {
              // This is the last root in the list.
              lastScheduledRoot = previousScheduledRoot;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
              root.nextScheduledRoot = null;
              break;
            } else {
              previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
              root.nextScheduledRoot = null;
            }

            root = previousScheduledRoot.nextScheduledRoot;
          } else {
            if (remainingExpirationTime > highestPriorityWork) {
              // Update the priority, if it's higher
              highestPriorityWork = remainingExpirationTime;
              highestPriorityRoot = root;
            }

            if (root === lastScheduledRoot) {
              break;
            }

            if (highestPriorityWork === Sync) {
              // Sync is highest priority by definition so
              // we can stop searching.
              break;
            }

            previousScheduledRoot = root;
            root = root.nextScheduledRoot;
          }
        }
      }

      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    } // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.


    var didYield = false;

    function shouldYieldToRenderer() {
      if (didYield) {
        return true;
      }

      if (scheduler.unstable_shouldYield()) {
        didYield = true;
        return true;
      }

      return false;
    }

    function performAsyncWork() {
      try {
        if (!shouldYieldToRenderer()) {
          // The callback timed out. That means at least one update has expired.
          // Iterate through the root schedule. If they contain expired work, set
          // the next render expiration time to the current time. This has the effect
          // of flushing all expired work in a single batch, instead of flushing each
          // level one at a time.
          if (firstScheduledRoot !== null) {
            recomputeCurrentRendererTime();
            var root = firstScheduledRoot;

            do {
              didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.

              root = root.nextScheduledRoot;
            } while (root !== firstScheduledRoot);
          }
        }

        performWork(NoWork, true);
      } finally {
        didYield = false;
      }
    }

    function performSyncWork() {
      performWork(Sync, false);
    }

    function performWork(minExpirationTime, isYieldy) {
      // Keep working on roots until there's no more work, or until there's a higher
      // priority event.
      findHighestPriorityRoot();

      if (isYieldy) {
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        if (enableUserTimingAPI) {
          var didExpire = nextFlushedExpirationTime > currentRendererTime;
          var timeout = expirationTimeToMs(nextFlushedExpirationTime);
          stopRequestCallbackTimer(didExpire, timeout);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
          findHighestPriorityRoot();
          recomputeCurrentRendererTime();
          currentSchedulerTime = currentRendererTime;
        }
      } else {
        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
          findHighestPriorityRoot();
        }
      } // We're done flushing work. Either we ran out of time in this callback,
      // or there's no more work left with sufficient priority.
      // If we're inside a callback, set this to false since we just completed it.


      if (isYieldy) {
        callbackExpirationTime = NoWork;
        callbackID = null;
      } // If there's work left over, schedule a new callback.


      if (nextFlushedExpirationTime !== NoWork) {
        scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
      } // Clean-up.


      finishRendering();
    }

    function flushRoot(root, expirationTime) {
      !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0; // Perform work on root as if the given expiration time is the current time.
      // This has the effect of synchronously flushing all work up to and
      // including the given time.

      nextFlushedRoot = root;
      nextFlushedExpirationTime = expirationTime;
      performWorkOnRoot(root, expirationTime, false); // Flush any sync work that was scheduled by lifecycles

      performSyncWork();
    }

    function finishRendering() {
      nestedUpdateCount = 0;
      lastCommittedRootDuringThisBatch = null;

      if (completedBatches !== null) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }

      if (hasUnhandledError) {
        var error = unhandledError;
        unhandledError = null;
        hasUnhandledError = false;
        throw error;
      }
    }

    function performWorkOnRoot(root, expirationTime, isYieldy) {
      !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      isRendering = true; // Check if this is async work or sync/expired work.

      if (!isYieldy) {
        // Flush work without yielding.
        // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
        // may want to perform some work without yielding, but also without
        // requiring the root to complete (by triggering placeholders).
        var finishedWork = root.finishedWork;

        if (finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var timeoutHandle = root.timeoutHandle;

          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          renderRoot(root, isYieldy);
          finishedWork = root.finishedWork;

          if (finishedWork !== null) {
            // We've completed the root. Commit it.
            completeRoot(root, finishedWork, expirationTime);
          }
        }
      } else {
        // Flush async work.
        var _finishedWork = root.finishedWork;

        if (_finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var _timeoutHandle = root.timeoutHandle;

          if (_timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(_timeoutHandle);
          }

          renderRoot(root, isYieldy);
          _finishedWork = root.finishedWork;

          if (_finishedWork !== null) {
            // We've completed the root. Check the if we should yield one more time
            // before committing.
            if (!shouldYieldToRenderer()) {
              // Still time left. Commit the root.
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              // There's no time left. Mark this root as complete. We'll come
              // back and commit it later.
              root.finishedWork = _finishedWork;
            }
          }
        }
      }

      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      // Check if there's a batch that matches this expiration time.
      var firstBatch = root.firstBatch;

      if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
        if (completedBatches === null) {
          completedBatches = [firstBatch];
        } else {
          completedBatches.push(firstBatch);
        }

        if (firstBatch._defer) {
          // This root is blocked from committing by a batch. Unschedule it until
          // we receive another update.
          root.finishedWork = finishedWork;
          root.expirationTime = NoWork;
          return;
        }
      } // Commit the root.


      root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the
      // commit phase).

      if (root === lastCommittedRootDuringThisBatch) {
        // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
      } else {
        // Reset whenever we switch roots.
        lastCommittedRootDuringThisBatch = root;
        nestedUpdateCount = 0;
      }

      scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        commitRoot(root, finishedWork);
      });
    }

    function onUncaughtError(error) {
      !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's
      // another update.

      nextFlushedRoot.expirationTime = NoWork;

      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function batchedUpdates$1(fn, a) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return fn(a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function unbatchedUpdates(fn, a) {
      if (isBatchingUpdates && !isUnbatchingUpdates) {
        isUnbatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          isUnbatchingUpdates = false;
        }
      }

      return fn(a);
    } // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.


    function flushSync(fn, a) {
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return syncUpdates(fn, a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        performSyncWork();
      }
    }

    function interactiveUpdates$1(fn, a, b) {
      // If there are any pending interactive updates, synchronously flush them.
      // This needs to happen before we read any handlers, because the effect of
      // the previous event may influence which handlers are called during
      // this event.
      if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }

      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority, function () {
          return fn(a, b);
        });
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    function flushInteractiveUpdates$1() {
      if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
    }

    function flushControlled(fn) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        syncUpdates(fn);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.


    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;

        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
      {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;

      if (callback !== null) {
        !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
        update.callback = callback;
      }

      flushPassiveEffects();
      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);
      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current$$1 = container.current;
      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current$$1.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }
      var context = getContextForSubtree(parentComponent);

      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          invariant(false, 'Unable to find node on an unmounted component.');
        } else {
          invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);

        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            invariant(false, 'Unable to find node on an unmounted component.');
          } else {
            invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
          }
        }

        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';

          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;

            if (fiber.mode & StrictMode) {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            } else {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
          }
        }

        return hostFiber.stateNode;
      }
      return findHostInstance(component);
    }

    function createContainer(containerInfo, isConcurrent, hydrate) {
      return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;

      if (!containerFiber.child) {
        return null;
      }

      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);

        default:
          return containerFiber.child.stateNode;
      }
    }

    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    var overrideProps = null;
    {
      var copyWithSetImpl = function (obj, path, idx, value) {
        if (idx >= path.length) {
          return value;
        }

        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
      };

      var copyWithSet = function (obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


      overrideProps = function (fiber, path, value) {
        flushPassiveEffects();
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }

        scheduleWork(fiber, Sync);
      };
    }

    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals(_assign({}, devToolsConfig, {
        overrideProps: overrideProps,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: function (fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }

          return findFiberByHostInstance(instance);
        }
      }));
    } // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.


    function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    } // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }

      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

          if (hostInstance) {
            !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
      };

      warnOnInvalidCallback = function (callback, callerName) {
        !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
      };
    }
    setRestoreImplementation(restoreControlledState$1);

    function ReactBatch(root) {
      var expirationTime = computeUniqueAsyncExpiration();
      this._expirationTime = expirationTime;
      this._root = root;
      this._next = null;
      this._callbacks = null;
      this._didComplete = false;
      this._hasChildren = false;
      this._children = null;
      this._defer = true;
    }

    ReactBatch.prototype.render = function (children) {
      !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
      this._hasChildren = true;
      this._children = children;
      var internalRoot = this._root._internalRoot;
      var expirationTime = this._expirationTime;
      var work = new ReactWork();
      updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
      return work;
    };

    ReactBatch.prototype.then = function (onComplete) {
      if (this._didComplete) {
        onComplete();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onComplete);
    };

    ReactBatch.prototype.commit = function () {
      var internalRoot = this._root._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

      if (!this._hasChildren) {
        // This batch is empty. Return.
        this._next = null;
        this._defer = false;
        return;
      }

      var expirationTime = this._expirationTime; // Ensure this is the first batch in the list.

      if (firstBatch !== this) {
        // This batch is not the earliest batch. We need to move it to the front.
        // Update its expiration time to be the expiration time of the earliest
        // batch, so that we can flush it without flushing the other batches.
        if (this._hasChildren) {
          expirationTime = this._expirationTime = firstBatch._expirationTime; // Rendering this batch again ensures its children will be the final state
          // when we flush (updates are processed in insertion order: last
          // update wins).
          // TODO: This forces a restart. Should we print a warning?

          this.render(this._children);
        } // Remove the batch from the list.


        var previous = null;
        var batch = firstBatch;

        while (batch !== this) {
          previous = batch;
          batch = batch._next;
        }

        !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        previous._next = batch._next; // Add it to the front.

        this._next = firstBatch;
        firstBatch = internalRoot.firstBatch = this;
      } // Synchronously flush all the work up to this batch's expiration time.


      this._defer = false;
      flushRoot(internalRoot, expirationTime); // Pop the batch from the list.

      var next = this._next;
      this._next = null;
      firstBatch = internalRoot.firstBatch = next; // Append the next earliest batch's children to the update queue.

      if (firstBatch !== null && firstBatch._hasChildren) {
        firstBatch.render(firstBatch._children);
      }
    };

    ReactBatch.prototype._onComplete = function () {
      if (this._didComplete) {
        return;
      }

      this._didComplete = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback = callbacks[i];

        _callback();
      }
    };

    function ReactWork() {
      this._callbacks = null;
      this._didCommit = false; // TODO: Avoid need to bind by replacing callbacks in the update queue with
      // list of Work objects.

      this._onCommit = this._onCommit.bind(this);
    }

    ReactWork.prototype.then = function (onCommit) {
      if (this._didCommit) {
        onCommit();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onCommit);
    };

    ReactWork.prototype._onCommit = function () {
      if (this._didCommit) {
        return;
      }

      this._didCommit = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback2 = callbacks[i];
        !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;

        _callback2();
      }
    };

    function ReactRoot(container, isConcurrent, hydrate) {
      var root = createContainer(container, isConcurrent, hydrate);
      this._internalRoot = root;
    }

    ReactRoot.prototype.render = function (children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.unmount = function (callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(null, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, parentComponent, work._onCommit);
      return work;
    };

    ReactRoot.prototype.createBatch = function () {
      var batch = new ReactBatch(this);
      var expirationTime = batch._expirationTime;
      var internalRoot = this._internalRoot;
      var firstBatch = internalRoot.firstBatch;

      if (firstBatch === null) {
        internalRoot.firstBatch = batch;
        batch._next = null;
      } else {
        // Insert sorted by expiration time then insertion order
        var insertAfter = null;
        var insertBefore = firstBatch;

        while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
          insertAfter = insertBefore;
          insertBefore = insertBefore._next;
        }

        batch._next = insertBefore;

        if (insertAfter !== null) {
          insertAfter._next = batch;
        }
      }

      return batch;
    };
    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */


    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;

    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

      if (!shouldHydrate) {
        var warned = false;
        var rootSibling = void 0;

        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }

      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      } // Legacy roots are not async by default.

      var isConcurrent = false;
      return new ReactRoot(container, isConcurrent, shouldHydrate);
    }

    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
      } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.

      var root = container._reactRootContainer;

      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);

        if (typeof callback === 'function') {
          var originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            originalCallback.call(instance);
          };
        } // Initial mount should not be batched.


        unbatchedUpdates(function () {
          if (parentComponent != null) {
            root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
          } else {
            root.render(children, callback);
          }
        });
      } else {
        if (typeof callback === 'function') {
          var _originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);

            _originalCallback.call(instance);
          };
        } // Update


        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      }

      return getPublicRootInstance(root._internalRoot);
    }

    function createPortal$$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0; // TODO: pass ReactDOM portal implementation as third argument

      return createPortal$1(children, container, null, key);
    }

    var ReactDOM = {
      createPortal: createPortal$$1,
      findDOMNode: function (componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrElement == null) {
          return null;
        }

        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }

        {
          return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
        }
        return findHostInstance(componentOrElement);
      },
      hydrate: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        } // TODO: throw or warn if we couldn't hydrate?

        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
          } // Unmount should not be batched.

          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          }); // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?

          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);

            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
          }
          return false;
        }
      },
      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: function () {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }

        return createPortal$$1.apply(undefined, arguments);
      },
      unstable_batchedUpdates: batchedUpdates$1,
      unstable_interactiveUpdates: interactiveUpdates$1,
      flushSync: flushSync,
      unstable_createRoot: createRoot,
      unstable_flushControlled: flushControlled,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // and ReactTestUtils.js. This is an array for better minification.
        Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
      }
    };

    function createRoot(container, options) {
      var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
      !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
      {
        !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        container._reactHasBeenPassedToCreateRootDEV = true;
      }
      var hydrate = options != null && options.hydrate === true;
      return new ReactRoot(container, true, hydrate);
    }

    if (enableStableConcurrentModeAPIs) {
      ReactDOM.createRoot = createRoot;
      ReactDOM.unstable_createRoot = undefined;
    }

    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    var ReactDOM$2 = Object.freeze({
      default: ReactDOM
    });
    var ReactDOM$3 = ReactDOM$2 && ReactDOM || ReactDOM$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactDom = ReactDOM$3.default || ReactDOM$3;
    module.exports = reactDom;
  })();
}
},{"react":"node_modules/react/index.js","object-assign":"node_modules/object-assign/index.js","prop-types/checkPropTypes":"node_modules/prop-types/checkPropTypes.js","scheduler":"node_modules/scheduler/index.js","scheduler/tracing":"node_modules/scheduler/tracing.js"}],"node_modules/react-dom/index.js":[function(require,module,exports) {
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if ("development" !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if ("development" === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}
},{"./cjs/react-dom.development.js":"node_modules/react-dom/cjs/react-dom.development.js"}],"src/Controls.tsx":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

exports["default"] = function (tracks, toggleFilter) {
  return tracks.map(function (track) {
    return React.createElement("label", {
      className: track.selected ? "selected track" : "track",
      key: track.id
    }, React.createElement("input", {
      checked: track.selected,
      onChange: function onChange(e) {
        return toggleFilter(track.id, e.target.checked);
      },
      type: "checkbox"
    }), track.name);
  });
};
},{}],"node_modules/xtend/immutable.js":[function(require,module,exports) {
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
  var target = {};

  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
}
},{}],"node_modules/extend/index.js":[function(require,module,exports) {
'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) { /**/ }

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
	if (defineProperty && options.name === '__proto__') {
		defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
	} else {
		target[options.name] = options.newValue;
	}
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
	if (name === '__proto__') {
		if (!hasOwn.call(obj, name)) {
			return void 0;
		} else if (gOPD) {
			// In early versions of node, obj['__proto__'] is buggy when obj has
			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
			return gOPD(obj, name).value;
		}
	}

	return obj[name];
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = getProperty(target, name);
				copy = getProperty(options, name);

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						setProperty(target, { name: name, newValue: copy });
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};

},{}],"node_modules/bail/index.js":[function(require,module,exports) {
'use strict'

module.exports = bail

function bail(err) {
  if (err) {
    throw err
  }
}

},{}],"node_modules/unist-util-stringify-position/index.js":[function(require,module,exports) {
'use strict'

var own = {}.hasOwnProperty

module.exports = stringify

function stringify(value) {
  /* Nothing. */
  if (!value || typeof value !== 'object') {
    return null
  }

  /* Node. */
  if (own.call(value, 'position') || own.call(value, 'type')) {
    return position(value.position)
  }

  /* Position. */
  if (own.call(value, 'start') || own.call(value, 'end')) {
    return position(value)
  }

  /* Point. */
  if (own.call(value, 'line') || own.call(value, 'column')) {
    return point(value)
  }

  /* ? */
  return null
}

function point(point) {
  if (!point || typeof point !== 'object') {
    point = {}
  }

  return index(point.line) + ':' + index(point.column)
}

function position(pos) {
  if (!pos || typeof pos !== 'object') {
    pos = {}
  }

  return point(pos.start) + '-' + point(pos.end)
}

function index(value) {
  return value && typeof value === 'number' ? value : 1
}

},{}],"node_modules/vfile-message/index.js":[function(require,module,exports) {
'use strict'

var stringify = require('unist-util-stringify-position')

module.exports = VMessage

// Inherit from `Error#`.
function VMessagePrototype() {}
VMessagePrototype.prototype = Error.prototype
VMessage.prototype = new VMessagePrototype()

// Message properties.
var proto = VMessage.prototype

proto.file = ''
proto.name = ''
proto.reason = ''
proto.message = ''
proto.stack = ''
proto.fatal = null
proto.column = null
proto.line = null

// Construct a new VMessage.
//
// Note: We cannot invoke `Error` on the created context, as that adds readonly
// `line` and `column` attributes on Safari 9, thus throwing and failing the
// data.
function VMessage(reason, position, origin) {
  var parts
  var range
  var location

  if (typeof position === 'string') {
    origin = position
    position = null
  }

  parts = parseOrigin(origin)
  range = stringify(position) || '1:1'

  location = {
    start: {line: null, column: null},
    end: {line: null, column: null}
  }

  // Node.
  if (position && position.position) {
    position = position.position
  }

  if (position) {
    // Position.
    if (position.start) {
      location = position
      position = position.start
    } else {
      // Point.
      location.start = position
    }
  }

  if (reason.stack) {
    this.stack = reason.stack
    reason = reason.message
  }

  this.message = reason
  this.name = range
  this.reason = reason
  this.line = position ? position.line : null
  this.column = position ? position.column : null
  this.location = location
  this.source = parts[0]
  this.ruleId = parts[1]
}

function parseOrigin(origin) {
  var result = [null, null]
  var index

  if (typeof origin === 'string') {
    index = origin.indexOf(':')

    if (index === -1) {
      result[1] = origin
    } else {
      result[0] = origin.slice(0, index)
      result[1] = origin.slice(index + 1)
    }
  }

  return result
}

},{"unist-util-stringify-position":"node_modules/unist-util-stringify-position/index.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/path-browserify/index.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{"process":"node_modules/process/browser.js"}],"node_modules/replace-ext/index.js":[function(require,module,exports) {
'use strict';

var path = require('path');

function replaceExt(npath, ext) {
  if (typeof npath !== 'string') {
    return npath;
  }

  if (npath.length === 0) {
    return npath;
  }

  var nFileName = path.basename(npath, path.extname(npath)) + ext;
  return path.join(path.dirname(npath), nFileName);
}

module.exports = replaceExt;
},{"path":"node_modules/path-browserify/index.js"}],"node_modules/is-buffer/index.js":[function(require,module,exports) {
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],"node_modules/vfile/core.js":[function(require,module,exports) {
var process = require("process");
'use strict';

var path = require('path');
var replace = require('replace-ext');
var buffer = require('is-buffer');

module.exports = VFile;

var own = {}.hasOwnProperty;
var proto = VFile.prototype;

proto.toString = toString;

/* Order of setting (least specific to most), we need this because
 * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path
 * is needed before a stem can be set. */
var order = [
  'history',
  'path',
  'basename',
  'stem',
  'extname',
  'dirname'
];

/* Construct a new file. */
function VFile(options) {
  var prop;
  var index;
  var length;

  if (!options) {
    options = {};
  } else if (typeof options === 'string' || buffer(options)) {
    options = {contents: options};
  } else if ('message' in options && 'messages' in options) {
    return options;
  }

  if (!(this instanceof VFile)) {
    return new VFile(options);
  }

  this.data = {};
  this.messages = [];
  this.history = [];
  this.cwd = process.cwd();

  /* Set path related properties in the correct order. */
  index = -1;
  length = order.length;

  while (++index < length) {
    prop = order[index];

    if (own.call(options, prop)) {
      this[prop] = options[prop];
    }
  }

  /* Set non-path related properties. */
  for (prop in options) {
    if (order.indexOf(prop) === -1) {
      this[prop] = options[prop];
    }
  }
}

/* Access full path (`~/index.min.js`). */
Object.defineProperty(proto, 'path', {
  get: function () {
    return this.history[this.history.length - 1];
  },
  set: function (path) {
    assertNonEmpty(path, 'path');

    if (path !== this.path) {
      this.history.push(path);
    }
  }
});

/* Access parent path (`~`). */
Object.defineProperty(proto, 'dirname', {
  get: function () {
    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;
  },
  set: function (dirname) {
    assertPath(this.path, 'dirname');
    this.path = path.join(dirname || '', this.basename);
  }
});

/* Access basename (`index.min.js`). */
Object.defineProperty(proto, 'basename', {
  get: function () {
    return typeof this.path === 'string' ? path.basename(this.path) : undefined;
  },
  set: function (basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = path.join(this.dirname || '', basename);
  }
});

/* Access extname (`.js`). */
Object.defineProperty(proto, 'extname', {
  get: function () {
    return typeof this.path === 'string' ? path.extname(this.path) : undefined;
  },
  set: function (extname) {
    var ext = extname || '';

    assertPart(ext, 'extname');
    assertPath(this.path, 'extname');

    if (ext) {
      if (ext.charAt(0) !== '.') {
        throw new Error('`extname` must start with `.`');
      }

      if (ext.indexOf('.', 1) !== -1) {
        throw new Error('`extname` cannot contain multiple dots');
      }
    }

    this.path = replace(this.path, ext);
  }
});

/* Access stem (`index.min`). */
Object.defineProperty(proto, 'stem', {
  get: function () {
    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;
  },
  set: function (stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = path.join(this.dirname || '', stem + (this.extname || ''));
  }
});

/* Get the value of the file. */
function toString(encoding) {
  var value = this.contents || '';
  return buffer(value) ? value.toString(encoding) : String(value);
}

/* Assert that `part` is not a path (i.e., does
 * not contain `path.sep`). */
function assertPart(part, name) {
  if (part.indexOf(path.sep) !== -1) {
    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');
  }
}

/* Assert that `part` is not empty. */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}

/* Assert `path` exists. */
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too');
  }
}

},{"path":"node_modules/path-browserify/index.js","replace-ext":"node_modules/replace-ext/index.js","is-buffer":"node_modules/is-buffer/index.js","process":"node_modules/process/browser.js"}],"node_modules/vfile/index.js":[function(require,module,exports) {
'use strict';

var VMessage = require('vfile-message');
var VFile = require('./core.js');

module.exports = VFile;

var proto = VFile.prototype;

proto.message = message;
proto.info = info;
proto.fail = fail;

/* Slight backwards compatibility.  Remove in the future. */
proto.warn = message;

/* Create a message with `reason` at `position`.
 * When an error is passed in as `reason`, copies the stack. */
function message(reason, position, origin) {
  var filePath = this.path;
  var message = new VMessage(reason, position, origin);

  if (filePath) {
    message.name = filePath + ':' + message.name;
    message.file = filePath;
  }

  message.fatal = false;

  this.messages.push(message);

  return message;
}

/* Fail. Creates a vmessage, associates it with the file,
 * and throws it. */
function fail() {
  var message = this.message.apply(this, arguments);

  message.fatal = true;

  throw message;
}

/* Info. Creates a vmessage, associates it with the file,
 * and marks the fatality as null. */
function info() {
  var message = this.message.apply(this, arguments);

  message.fatal = null;

  return message;
}

},{"vfile-message":"node_modules/vfile-message/index.js","./core.js":"node_modules/vfile/core.js"}],"node_modules/trough/wrap.js":[function(require,module,exports) {
'use strict'

var slice = [].slice

module.exports = wrap

// Wrap `fn`.
// Can be sync or async; return a promise, receive a completion handler, return
// new values and errors.
function wrap(fn, callback) {
  var invoked

  return wrapped

  function wrapped() {
    var params = slice.call(arguments, 0)
    var callback = fn.length > params.length
    var result

    if (callback) {
      params.push(done)
    }

    try {
      result = fn.apply(null, params)
    } catch (error) {
      // Well, this is quite the pickle.
      // `fn` received a callback and invoked it (thus continuing the pipeline),
      // but later also threw an error.
      // We’re not about to restart the pipeline again, so the only thing left
      // to do is to throw the thing instead.
      if (callback && invoked) {
        throw error
      }

      return done(error)
    }

    if (!callback) {
      if (result && typeof result.then === 'function') {
        result.then(then, done)
      } else if (result instanceof Error) {
        done(result)
      } else {
        then(result)
      }
    }
  }

  // Invoke `next`, only once.
  function done() {
    if (!invoked) {
      invoked = true

      callback.apply(null, arguments)
    }
  }

  // Invoke `done` with one value.
  // Tracks if an error is passed, too.
  function then(value) {
    done(null, value)
  }
}

},{}],"node_modules/trough/index.js":[function(require,module,exports) {
'use strict'

var wrap = require('./wrap.js')

module.exports = trough

trough.wrap = wrap

var slice = [].slice

// Create new middleware.
function trough() {
  var fns = []
  var middleware = {}

  middleware.run = run
  middleware.use = use

  return middleware

  // Run `fns`.  Last argument must be a completion handler.
  function run() {
    var index = -1
    var input = slice.call(arguments, 0, -1)
    var done = arguments[arguments.length - 1]

    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done)
    }

    next.apply(null, [null].concat(input))

    // Run the next `fn`, if any.
    function next(err) {
      var fn = fns[++index]
      var params = slice.call(arguments, 0)
      var values = params.slice(1)
      var length = input.length
      var pos = -1

      if (err) {
        done(err)
        return
      }

      // Copy non-nully input into values.
      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos]
        }
      }

      input = values

      // Next or done.
      if (fn) {
        wrap(fn, next).apply(null, input)
      } else {
        done.apply(null, [null].concat(input))
      }
    }
  }

  // Add `fn` to the list.
  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn)
    }

    fns.push(fn)

    return middleware
  }
}

},{"./wrap.js":"node_modules/trough/wrap.js"}],"node_modules/x-is-string/index.js":[function(require,module,exports) {
var toString = Object.prototype.toString

module.exports = isString

function isString(obj) {
    return toString.call(obj) === "[object String]"
}

},{}],"node_modules/is-plain-obj/index.js":[function(require,module,exports) {
'use strict';

var toString = Object.prototype.toString;

module.exports = function (x) {
  var prototype;
  return toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
};
},{}],"node_modules/unified/index.js":[function(require,module,exports) {
var process = require("process");
'use strict'

/* Dependencies. */
var extend = require('extend')
var bail = require('bail')
var vfile = require('vfile')
var trough = require('trough')
var string = require('x-is-string')
var plain = require('is-plain-obj')

/* Expose a frozen processor. */
module.exports = unified().freeze()

var slice = [].slice
var own = {}.hasOwnProperty

/* Process pipeline. */
var pipeline = trough()
  .use(pipelineParse)
  .use(pipelineRun)
  .use(pipelineStringify)

function pipelineParse(p, ctx) {
  ctx.tree = p.parse(ctx.file)
}

function pipelineRun(p, ctx, next) {
  p.run(ctx.tree, ctx.file, done)

  function done(err, tree, file) {
    if (err) {
      next(err)
    } else {
      ctx.tree = tree
      ctx.file = file
      next()
    }
  }
}

function pipelineStringify(p, ctx) {
  ctx.file.contents = p.stringify(ctx.tree, ctx.file)
}

/* Function to create the first processor. */
function unified() {
  var attachers = []
  var transformers = trough()
  var namespace = {}
  var frozen = false
  var freezeIndex = -1

  /* Data management. */
  processor.data = data

  /* Lock. */
  processor.freeze = freeze

  /* Plug-ins. */
  processor.attachers = attachers
  processor.use = use

  /* API. */
  processor.parse = parse
  processor.stringify = stringify
  processor.run = run
  processor.runSync = runSync
  processor.process = process
  processor.processSync = processSync

  /* Expose. */
  return processor

  /* Create a new processor based on the processor
   * in the current scope. */
  function processor() {
    var destination = unified()
    var length = attachers.length
    var index = -1

    while (++index < length) {
      destination.use.apply(null, attachers[index])
    }

    destination.data(extend(true, {}, namespace))

    return destination
  }

  /* Freeze: used to signal a processor that has finished
   * configuration.
   *
   * For example, take unified itself.  It’s frozen.
   * Plug-ins should not be added to it.  Rather, it should
   * be extended, by invoking it, before modifying it.
   *
   * In essence, always invoke this when exporting a
   * processor. */
  function freeze() {
    var values
    var plugin
    var options
    var transformer

    if (frozen) {
      return processor
    }

    while (++freezeIndex < attachers.length) {
      values = attachers[freezeIndex]
      plugin = values[0]
      options = values[1]
      transformer = null

      if (options === false) {
        continue
      }

      if (options === true) {
        values[1] = undefined
      }

      transformer = plugin.apply(processor, values.slice(1))

      if (typeof transformer === 'function') {
        transformers.use(transformer)
      }
    }

    frozen = true
    freezeIndex = Infinity

    return processor
  }

  /* Data management.
   * Getter / setter for processor-specific informtion. */
  function data(key, value) {
    if (string(key)) {
      /* Set `key`. */
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen)

        namespace[key] = value

        return processor
      }

      /* Get `key`. */
      return (own.call(namespace, key) && namespace[key]) || null
    }

    /* Set space. */
    if (key) {
      assertUnfrozen('data', frozen)
      namespace = key
      return processor
    }

    /* Get space. */
    return namespace
  }

  /* Plug-in management.
   *
   * Pass it:
   * *   an attacher and options,
   * *   a preset,
   * *   a list of presets, attachers, and arguments (list
   *     of attachers and options). */
  function use(value) {
    var settings

    assertUnfrozen('use', frozen)

    if (value === null || value === undefined) {
      /* Empty */
    } else if (typeof value === 'function') {
      addPlugin.apply(null, arguments)
    } else if (typeof value === 'object') {
      if ('length' in value) {
        addList(value)
      } else {
        addPreset(value)
      }
    } else {
      throw new Error('Expected usable value, not `' + value + '`')
    }

    if (settings) {
      namespace.settings = extend(namespace.settings || {}, settings)
    }

    return processor

    function addPreset(result) {
      addList(result.plugins)

      if (result.settings) {
        settings = extend(settings || {}, result.settings)
      }
    }

    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value)
      } else if (typeof value === 'object') {
        if ('length' in value) {
          addPlugin.apply(null, value)
        } else {
          addPreset(value)
        }
      } else {
        throw new Error('Expected usable value, not `' + value + '`')
      }
    }

    function addList(plugins) {
      var length
      var index

      if (plugins === null || plugins === undefined) {
        /* Empty */
      } else if (typeof plugins === 'object' && 'length' in plugins) {
        length = plugins.length
        index = -1

        while (++index < length) {
          add(plugins[index])
        }
      } else {
        throw new Error('Expected a list of plugins, not `' + plugins + '`')
      }
    }

    function addPlugin(plugin, value) {
      var entry = find(plugin)

      if (entry) {
        if (plain(entry[1]) && plain(value)) {
          value = extend(entry[1], value)
        }

        entry[1] = value
      } else {
        attachers.push(slice.call(arguments))
      }
    }
  }

  function find(plugin) {
    var length = attachers.length
    var index = -1
    var entry

    while (++index < length) {
      entry = attachers[index]

      if (entry[0] === plugin) {
        return entry
      }
    }
  }

  /* Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the
   * processor. */
  function parse(doc) {
    var file = vfile(doc)
    var Parser

    freeze()
    Parser = processor.Parser
    assertParser('parse', Parser)

    if (newable(Parser)) {
      return new Parser(String(file), file).parse()
    }

    return Parser(String(file), file) // eslint-disable-line new-cap
  }

  /* Run transforms on a Unist node representation of a file
   * (in string or VFile representation), async. */
  function run(node, file, cb) {
    assertNode(node)
    freeze()

    if (!cb && typeof file === 'function') {
      cb = file
      file = null
    }

    if (!cb) {
      return new Promise(executor)
    }

    executor(null, cb)

    function executor(resolve, reject) {
      transformers.run(node, vfile(file), done)

      function done(err, tree, file) {
        tree = tree || node
        if (err) {
          reject(err)
        } else if (resolve) {
          resolve(tree)
        } else {
          cb(null, tree, file)
        }
      }
    }
  }

  /* Run transforms on a Unist node representation of a file
   * (in string or VFile representation), sync. */
  function runSync(node, file) {
    var complete = false
    var result

    run(node, file, done)

    assertDone('runSync', 'run', complete)

    return result

    function done(err, tree) {
      complete = true
      bail(err)
      result = tree
    }
  }

  /* Stringify a Unist node representation of a file
   * (in string or VFile representation) into a string
   * using the `Compiler` on the processor. */
  function stringify(node, doc) {
    var file = vfile(doc)
    var Compiler

    freeze()
    Compiler = processor.Compiler
    assertCompiler('stringify', Compiler)
    assertNode(node)

    if (newable(Compiler)) {
      return new Compiler(node, file).compile()
    }

    return Compiler(node, file) // eslint-disable-line new-cap
  }

  /* Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the processor,
   * then run transforms on that node, and compile the
   * resulting node using the `Compiler` on the processor,
   * and store that result on the VFile. */
  function process(doc, cb) {
    freeze()
    assertParser('process', processor.Parser)
    assertCompiler('process', processor.Compiler)

    if (!cb) {
      return new Promise(executor)
    }

    executor(null, cb)

    function executor(resolve, reject) {
      var file = vfile(doc)

      pipeline.run(processor, {file: file}, done)

      function done(err) {
        if (err) {
          reject(err)
        } else if (resolve) {
          resolve(file)
        } else {
          cb(null, file)
        }
      }
    }
  }

  /* Process the given document (in string or VFile
   * representation), sync. */
  function processSync(doc) {
    var complete = false
    var file

    freeze()
    assertParser('processSync', processor.Parser)
    assertCompiler('processSync', processor.Compiler)
    file = vfile(doc)

    process(file, done)

    assertDone('processSync', 'process', complete)

    return file

    function done(err) {
      complete = true
      bail(err)
    }
  }
}

/* Check if `func` is a constructor. */
function newable(value) {
  return typeof value === 'function' && keys(value.prototype)
}

/* Check if `value` is an object with keys. */
function keys(value) {
  var key
  for (key in value) {
    return true
  }
  return false
}

/* Assert a parser is available. */
function assertParser(name, Parser) {
  if (typeof Parser !== 'function') {
    throw new Error('Cannot `' + name + '` without `Parser`')
  }
}

/* Assert a compiler is available. */
function assertCompiler(name, Compiler) {
  if (typeof Compiler !== 'function') {
    throw new Error('Cannot `' + name + '` without `Compiler`')
  }
}

/* Assert the processor is not frozen. */
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      [
        'Cannot invoke `' + name + '` on a frozen processor.\nCreate a new ',
        'processor first, by invoking it: use `processor()` instead of ',
        '`processor`.'
      ].join('')
    )
  }
}

/* Assert `node` is a Unist node. */
function assertNode(node) {
  if (!node || !string(node.type)) {
    throw new Error('Expected node, got `' + node + '`')
  }
}

/* Assert that `complete` is `true`. */
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      '`' + name + '` finished async. Use `' + asyncName + '` instead'
    )
  }
}

},{"extend":"node_modules/extend/index.js","bail":"node_modules/bail/index.js","vfile":"node_modules/vfile/index.js","trough":"node_modules/trough/index.js","x-is-string":"node_modules/x-is-string/index.js","is-plain-obj":"node_modules/is-plain-obj/index.js","process":"node_modules/process/browser.js"}],"node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"node_modules/unherit/index.js":[function(require,module,exports) {
'use strict'

var xtend = require('xtend')
var inherits = require('inherits')

module.exports = unherit

// Create a custom constructor which can be modified without affecting the
// original class.
function unherit(Super) {
  var result
  var key
  var value

  inherits(Of, Super)
  inherits(From, Of)

  // Clone values.
  result = Of.prototype

  for (key in result) {
    value = result[key]

    if (value && typeof value === 'object') {
      result[key] = 'concat' in value ? value.concat() : xtend(value)
    }
  }

  return Of

  // Constructor accepting a single argument, which itself is an `arguments`
  // object.
  function From(parameters) {
    return Super.apply(this, parameters)
  }

  // Constructor accepting variadic arguments.
  function Of() {
    if (!(this instanceof Of)) {
      return new From(arguments)
    }

    return Super.apply(this, arguments)
  }
}

},{"xtend":"node_modules/xtend/immutable.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/state-toggle/index.js":[function(require,module,exports) {
'use strict'

module.exports = factory

// Construct a state `toggler`: a function which inverses `property` in context
// based on its current value.
// The by `toggler` returned function restores that value.
function factory(key, state, ctx) {
  return enter

  function enter() {
    var context = ctx || this
    var current = context[key]

    context[key] = !state

    return exit

    function exit() {
      context[key] = current
    }
  }
}

},{}],"node_modules/vfile-location/index.js":[function(require,module,exports) {
'use strict'

module.exports = factory

function factory(file) {
  var contents = indices(String(file))

  return {
    toPosition: offsetToPositionFactory(contents),
    toOffset: positionToOffsetFactory(contents)
  }
}

// Factory to get the line and column-based `position` for `offset` in the bound
// indices.
function offsetToPositionFactory(indices) {
  return offsetToPosition

  // Get the line and column-based `position` for `offset` in the bound indices.
  function offsetToPosition(offset) {
    var index = -1
    var length = indices.length

    if (offset < 0) {
      return {}
    }

    while (++index < length) {
      if (indices[index] > offset) {
        return {
          line: index + 1,
          column: offset - (indices[index - 1] || 0) + 1,
          offset: offset
        }
      }
    }

    return {}
  }
}

// Factory to get the `offset` for a line and column-based `position` in the
// bound indices.
function positionToOffsetFactory(indices) {
  return positionToOffset

  // Get the `offset` for a line and column-based `position` in the bound
  // indices.
  function positionToOffset(position) {
    var line = position && position.line
    var column = position && position.column

    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {
      return (indices[line - 2] || 0) + column - 1 || 0
    }

    return -1
  }
}

// Get indices of line-breaks in `value`.
function indices(value) {
  var result = []
  var index = value.indexOf('\n')

  while (index !== -1) {
    result.push(index + 1)
    index = value.indexOf('\n', index + 1)
  }

  result.push(value.length + 1)

  return result
}

},{}],"node_modules/remark-parse/lib/unescape.js":[function(require,module,exports) {
'use strict';

module.exports = factory;

/* Factory to de-escape a value, based on a list at `key`
 * in `ctx`. */
function factory(ctx, key) {
  return unescape;

  /* De-escape a string using the expression at `key`
   * in `ctx`. */
  function unescape(value) {
    var prev = 0;
    var index = value.indexOf('\\');
    var escape = ctx[key];
    var queue = [];
    var character;

    while (index !== -1) {
      queue.push(value.slice(prev, index));
      prev = index + 1;
      character = value.charAt(prev);

      /* If the following character is not a valid escape,
       * add the slash. */
      if (!character || escape.indexOf(character) === -1) {
        queue.push('\\');
      }

      index = value.indexOf('\\', prev);
    }

    queue.push(value.slice(prev));

    return queue.join('');
  }
}

},{}],"node_modules/character-entities-legacy/index.json":[function(require,module,exports) {
module.exports = {
  "AElig": "Æ",
  "AMP": "&",
  "Aacute": "Á",
  "Acirc": "Â",
  "Agrave": "À",
  "Aring": "Å",
  "Atilde": "Ã",
  "Auml": "Ä",
  "COPY": "©",
  "Ccedil": "Ç",
  "ETH": "Ð",
  "Eacute": "É",
  "Ecirc": "Ê",
  "Egrave": "È",
  "Euml": "Ë",
  "GT": ">",
  "Iacute": "Í",
  "Icirc": "Î",
  "Igrave": "Ì",
  "Iuml": "Ï",
  "LT": "<",
  "Ntilde": "Ñ",
  "Oacute": "Ó",
  "Ocirc": "Ô",
  "Ograve": "Ò",
  "Oslash": "Ø",
  "Otilde": "Õ",
  "Ouml": "Ö",
  "QUOT": "\"",
  "REG": "®",
  "THORN": "Þ",
  "Uacute": "Ú",
  "Ucirc": "Û",
  "Ugrave": "Ù",
  "Uuml": "Ü",
  "Yacute": "Ý",
  "aacute": "á",
  "acirc": "â",
  "acute": "´",
  "aelig": "æ",
  "agrave": "à",
  "amp": "&",
  "aring": "å",
  "atilde": "ã",
  "auml": "ä",
  "brvbar": "¦",
  "ccedil": "ç",
  "cedil": "¸",
  "cent": "¢",
  "copy": "©",
  "curren": "¤",
  "deg": "°",
  "divide": "÷",
  "eacute": "é",
  "ecirc": "ê",
  "egrave": "è",
  "eth": "ð",
  "euml": "ë",
  "frac12": "½",
  "frac14": "¼",
  "frac34": "¾",
  "gt": ">",
  "iacute": "í",
  "icirc": "î",
  "iexcl": "¡",
  "igrave": "ì",
  "iquest": "¿",
  "iuml": "ï",
  "laquo": "«",
  "lt": "<",
  "macr": "¯",
  "micro": "µ",
  "middot": "·",
  "nbsp": " ",
  "not": "¬",
  "ntilde": "ñ",
  "oacute": "ó",
  "ocirc": "ô",
  "ograve": "ò",
  "ordf": "ª",
  "ordm": "º",
  "oslash": "ø",
  "otilde": "õ",
  "ouml": "ö",
  "para": "¶",
  "plusmn": "±",
  "pound": "£",
  "quot": "\"",
  "raquo": "»",
  "reg": "®",
  "sect": "§",
  "shy": "­",
  "sup1": "¹",
  "sup2": "²",
  "sup3": "³",
  "szlig": "ß",
  "thorn": "þ",
  "times": "×",
  "uacute": "ú",
  "ucirc": "û",
  "ugrave": "ù",
  "uml": "¨",
  "uuml": "ü",
  "yacute": "ý",
  "yen": "¥",
  "yuml": "ÿ"
}
;
},{}],"node_modules/character-reference-invalid/index.json":[function(require,module,exports) {
module.exports = {
  "0": "�",
  "128": "€",
  "130": "‚",
  "131": "ƒ",
  "132": "„",
  "133": "…",
  "134": "†",
  "135": "‡",
  "136": "ˆ",
  "137": "‰",
  "138": "Š",
  "139": "‹",
  "140": "Œ",
  "142": "Ž",
  "145": "‘",
  "146": "’",
  "147": "“",
  "148": "”",
  "149": "•",
  "150": "–",
  "151": "—",
  "152": "˜",
  "153": "™",
  "154": "š",
  "155": "›",
  "156": "œ",
  "158": "ž",
  "159": "Ÿ"
}
;
},{}],"node_modules/is-decimal/index.js":[function(require,module,exports) {
'use strict'

module.exports = decimal

// Check if the given character code, or the character code at the first
// character, is decimal.
function decimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character

  return code >= 48 && code <= 57 /* 0-9 */
}

},{}],"node_modules/is-hexadecimal/index.js":[function(require,module,exports) {
'use strict'

module.exports = hexadecimal

// Check if the given character code, or the character code at the first
// character, is hexadecimal.
function hexadecimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character

  return (
    (code >= 97 /* a */ && code <= 102) /* z */ ||
    (code >= 65 /* A */ && code <= 70) /* Z */ ||
    (code >= 48 /* A */ && code <= 57) /* Z */
  )
}

},{}],"node_modules/is-alphabetical/index.js":[function(require,module,exports) {
'use strict'

module.exports = alphabetical

// Check if the given character code, or the character code at the first
// character, is alphabetical.
function alphabetical(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character

  return (
    (code >= 97 && code <= 122) /* a-z */ ||
    (code >= 65 && code <= 90) /* A-Z */
  )
}

},{}],"node_modules/is-alphanumerical/index.js":[function(require,module,exports) {
'use strict'

var alphabetical = require('is-alphabetical')
var decimal = require('is-decimal')

module.exports = alphanumerical

// Check if the given character code, or the character code at the first
// character, is alphanumerical.
function alphanumerical(character) {
  return alphabetical(character) || decimal(character)
}

},{"is-alphabetical":"node_modules/is-alphabetical/index.js","is-decimal":"node_modules/is-decimal/index.js"}],"node_modules/parse-entities/decode-entity.browser.js":[function(require,module,exports) {
'use strict'

/* eslint-env browser */

var el

var semicolon = 59 //  ';'

module.exports = decodeEntity

function decodeEntity(characters) {
  var entity = '&' + characters + ';'
  var char

  el = el || document.createElement('i')
  el.innerHTML = entity
  char = el.textContent

  // Some entities do not require the closing semicolon (`&not` - for instance),
  // which leads to situations where parsing the assumed entity of &notit; will
  // result in the string `¬it;`.  When we encounter a trailing semicolon after
  // parsing and the entity to decode was not a semicolon (`&semi;`), we can
  // assume that the matching was incomplete
  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {
    return false
  }

  // If the decoded string is equal to the input, the entity was not valid
  return char === entity ? false : char
}

},{}],"node_modules/parse-entities/index.js":[function(require,module,exports) {
'use strict'

var legacy = require('character-entities-legacy')
var invalid = require('character-reference-invalid')
var decimal = require('is-decimal')
var hexadecimal = require('is-hexadecimal')
var alphanumerical = require('is-alphanumerical')
var decodeEntity = require('./decode-entity')

module.exports = parseEntities

var own = {}.hasOwnProperty
var fromCharCode = String.fromCharCode
var noop = Function.prototype

// Default settings.
var defaults = {
  warning: null,
  reference: null,
  text: null,
  warningContext: null,
  referenceContext: null,
  textContext: null,
  position: {},
  additional: null,
  attribute: false,
  nonTerminated: true
}

// Characters.
var tab = 9 // '\t'
var lineFeed = 10 // '\n'
var formFeed = 12 //  '\f'
var space = 32 // ' '
var ampersand = 38 //  '&'
var semicolon = 59 //  ';'
var lessThan = 60 //  '<'
var equalsTo = 61 //  '='
var numberSign = 35 //  '#'
var uppercaseX = 88 //  'X'
var lowercaseX = 120 //  'x'
var replacementCharacter = 65533 // '�'

// Reference types.
var name = 'named'
var hexa = 'hexadecimal'
var deci = 'decimal'

// Map of bases.
var bases = {}

bases[hexa] = 16
bases[deci] = 10

// Map of types to tests.
// Each type of character reference accepts different characters.
// This test is used to detect whether a reference has ended (as the semicolon
// is not strictly needed).
var tests = {}

tests[name] = alphanumerical
tests[deci] = decimal
tests[hexa] = hexadecimal

// Warning types.
var namedNotTerminated = 1
var numericNotTerminated = 2
var namedEmpty = 3
var numericEmpty = 4
var namedUnknown = 5
var numericDisallowed = 6
var numericProhibited = 7

// Warning messages.
var messages = {}

messages[namedNotTerminated] =
  'Named character references must be terminated by a semicolon'
messages[numericNotTerminated] =
  'Numeric character references must be terminated by a semicolon'
messages[namedEmpty] = 'Named character references cannot be empty'
messages[numericEmpty] = 'Numeric character references cannot be empty'
messages[namedUnknown] = 'Named character references must be known'
messages[numericDisallowed] =
  'Numeric character references cannot be disallowed'
messages[numericProhibited] =
  'Numeric character references cannot be outside the permissible Unicode range'

// Wrap to ensure clean parameters are given to `parse`.
function parseEntities(value, options) {
  var settings = {}
  var option
  var key

  if (!options) {
    options = {}
  }

  for (key in defaults) {
    option = options[key]
    settings[key] =
      option === null || option === undefined ? defaults[key] : option
  }

  if (settings.position.indent || settings.position.start) {
    settings.indent = settings.position.indent || []
    settings.position = settings.position.start
  }

  return parse(value, settings)
}

// Parse entities.
// eslint-disable-next-line complexity
function parse(value, settings) {
  var additional = settings.additional
  var nonTerminated = settings.nonTerminated
  var handleText = settings.text
  var handleReference = settings.reference
  var handleWarning = settings.warning
  var textContext = settings.textContext
  var referenceContext = settings.referenceContext
  var warningContext = settings.warningContext
  var pos = settings.position
  var indent = settings.indent || []
  var length = value.length
  var index = 0
  var lines = -1
  var column = pos.column || 1
  var line = pos.line || 1
  var queue = ''
  var result = []
  var entityCharacters
  var namedEntity
  var terminated
  var characters
  var character
  var reference
  var following
  var warning
  var reason
  var output
  var entity
  var begin
  var start
  var type
  var test
  var prev
  var next
  var diff
  var end

  if (typeof additional === 'string') {
    additional = additional.charCodeAt(0)
  }

  // Cache the current point.
  prev = now()

  // Wrap `handleWarning`.
  warning = handleWarning ? parseError : noop

  // Ensure the algorithm walks over the first character and the end (inclusive).
  index--
  length++

  while (++index < length) {
    // If the previous character was a newline.
    if (character === lineFeed) {
      column = indent[lines] || 1
    }

    character = value.charCodeAt(index)

    if (character === ampersand) {
      following = value.charCodeAt(index + 1)

      // The behaviour depends on the identity of the next character.
      if (
        following === tab ||
        following === lineFeed ||
        following === formFeed ||
        following === space ||
        following === ampersand ||
        following === lessThan ||
        following !== following ||
        (additional && following === additional)
      ) {
        // Not a character reference.
        // No characters are consumed, and nothing is returned.
        // This is not an error, either.
        queue += fromCharCode(character)
        column++

        continue
      }

      start = index + 1
      begin = start
      end = start

      if (following === numberSign) {
        // Numerical entity.
        end = ++begin

        // The behaviour further depends on the next character.
        following = value.charCodeAt(end)

        if (following === uppercaseX || following === lowercaseX) {
          // ASCII hex digits.
          type = hexa
          end = ++begin
        } else {
          // ASCII digits.
          type = deci
        }
      } else {
        // Named entity.
        type = name
      }

      entityCharacters = ''
      entity = ''
      characters = ''
      test = tests[type]
      end--

      while (++end < length) {
        following = value.charCodeAt(end)

        if (!test(following)) {
          break
        }

        characters += fromCharCode(following)

        // Check if we can match a legacy named reference.
        // If so, we cache that as the last viable named reference.
        // This ensures we do not need to walk backwards later.
        if (type === name && own.call(legacy, characters)) {
          entityCharacters = characters
          entity = legacy[characters]
        }
      }

      terminated = value.charCodeAt(end) === semicolon

      if (terminated) {
        end++

        namedEntity = type === name ? decodeEntity(characters) : false

        if (namedEntity) {
          entityCharacters = characters
          entity = namedEntity
        }
      }

      diff = 1 + end - start

      if (!terminated && !nonTerminated) {
        // Empty.
      } else if (!characters) {
        // An empty (possible) entity is valid, unless it’s numeric (thus an
        // ampersand followed by an octothorp).
        if (type !== name) {
          warning(numericEmpty, diff)
        }
      } else if (type === name) {
        // An ampersand followed by anything unknown, and not terminated, is
        // invalid.
        if (terminated && !entity) {
          warning(namedUnknown, 1)
        } else {
          // If theres something after an entity name which is not known, cap
          // the reference.
          if (entityCharacters !== characters) {
            end = begin + entityCharacters.length
            diff = 1 + end - begin
            terminated = false
          }

          // If the reference is not terminated, warn.
          if (!terminated) {
            reason = entityCharacters ? namedNotTerminated : namedEmpty

            if (settings.attribute) {
              following = value.charCodeAt(end)

              if (following === equalsTo) {
                warning(reason, diff)
                entity = null
              } else if (alphanumerical(following)) {
                entity = null
              } else {
                warning(reason, diff)
              }
            } else {
              warning(reason, diff)
            }
          }
        }

        reference = entity
      } else {
        if (!terminated) {
          // All non-terminated numeric entities are not rendered, and trigger a
          // warning.
          warning(numericNotTerminated, diff)
        }

        // When terminated and number, parse as either hexadecimal or decimal.
        reference = parseInt(characters, bases[type])

        // Trigger a warning when the parsed number is prohibited, and replace
        // with replacement character.
        if (prohibited(reference)) {
          warning(numericProhibited, diff)
          reference = fromCharCode(replacementCharacter)
        } else if (reference in invalid) {
          // Trigger a warning when the parsed number is disallowed, and replace
          // by an alternative.
          warning(numericDisallowed, diff)
          reference = invalid[reference]
        } else {
          // Parse the number.
          output = ''

          // Trigger a warning when the parsed number should not be used.
          if (disallowed(reference)) {
            warning(numericDisallowed, diff)
          }

          // Stringify the number.
          if (reference > 0xffff) {
            reference -= 0x10000
            output += fromCharCode((reference >>> (10 & 0x3ff)) | 0xd800)
            reference = 0xdc00 | (reference & 0x3ff)
          }

          reference = output + fromCharCode(reference)
        }
      }

      // Found it!
      // First eat the queued characters as normal text, then eat an entity.
      if (reference) {
        flush()

        prev = now()
        index = end - 1
        column += end - start + 1
        result.push(reference)
        next = now()
        next.offset++

        if (handleReference) {
          handleReference.call(
            referenceContext,
            reference,
            {start: prev, end: next},
            value.slice(start - 1, end)
          )
        }

        prev = next
      } else {
        // If we could not find a reference, queue the checked characters (as
        // normal characters), and move the pointer to their end.
        // This is possible because we can be certain neither newlines nor
        // ampersands are included.
        characters = value.slice(start - 1, end)
        queue += characters
        column += characters.length
        index = end - 1
      }
    } else {
      // Handle anything other than an ampersand, including newlines and EOF.
      if (
        character === 10 // Line feed
      ) {
        line++
        lines++
        column = 0
      }

      if (character === character) {
        queue += fromCharCode(character)
        column++
      } else {
        flush()
      }
    }
  }

  // Return the reduced nodes, and any possible warnings.
  return result.join('')

  // Get current position.
  function now() {
    return {
      line: line,
      column: column,
      offset: index + (pos.offset || 0)
    }
  }

  // “Throw” a parse-error: a warning.
  function parseError(code, offset) {
    var position = now()

    position.column += offset
    position.offset += offset

    handleWarning.call(warningContext, messages[code], position, code)
  }

  // Flush `queue` (normal text).
  // Macro invoked before each entity and at the end of `value`.
  // Does nothing when `queue` is empty.
  function flush() {
    if (queue) {
      result.push(queue)

      if (handleText) {
        handleText.call(textContext, queue, {start: prev, end: now()})
      }

      queue = ''
    }
  }
}

// Check if `character` is outside the permissible unicode range.
function prohibited(code) {
  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff
}

// Check if `character` is disallowed.
function disallowed(code) {
  return (
    (code >= 0x0001 && code <= 0x0008) ||
    code === 0x000b ||
    (code >= 0x000d && code <= 0x001f) ||
    (code >= 0x007f && code <= 0x009f) ||
    (code >= 0xfdd0 && code <= 0xfdef) ||
    (code & 0xffff) === 0xffff ||
    (code & 0xffff) === 0xfffe
  )
}

},{"character-entities-legacy":"node_modules/character-entities-legacy/index.json","character-reference-invalid":"node_modules/character-reference-invalid/index.json","is-decimal":"node_modules/is-decimal/index.js","is-hexadecimal":"node_modules/is-hexadecimal/index.js","is-alphanumerical":"node_modules/is-alphanumerical/index.js","./decode-entity":"node_modules/parse-entities/decode-entity.browser.js"}],"node_modules/remark-parse/lib/decode.js":[function(require,module,exports) {
'use strict';

var xtend = require('xtend');
var entities = require('parse-entities');

module.exports = factory;

/* Factory to create an entity decoder. */
function factory(ctx) {
  decoder.raw = decodeRaw;

  return decoder;

  /* Normalize `position` to add an `indent`. */
  function normalize(position) {
    var offsets = ctx.offset;
    var line = position.line;
    var result = [];

    while (++line) {
      if (!(line in offsets)) {
        break;
      }

      result.push((offsets[line] || 0) + 1);
    }

    return {
      start: position,
      indent: result
    };
  }

  /* Handle a warning.
   * See https://github.com/wooorm/parse-entities
   * for the warnings. */
  function handleWarning(reason, position, code) {
    if (code === 3) {
      return;
    }

    ctx.file.message(reason, position);
  }

  /* Decode `value` (at `position`) into text-nodes. */
  function decoder(value, position, handler) {
    entities(value, {
      position: normalize(position),
      warning: handleWarning,
      text: handler,
      reference: handler,
      textContext: ctx,
      referenceContext: ctx
    });
  }

  /* Decode `value` (at `position`) into a string. */
  function decodeRaw(value, position, options) {
    return entities(value, xtend(options, {
      position: normalize(position),
      warning: handleWarning
    }));
  }
}

},{"xtend":"node_modules/xtend/immutable.js","parse-entities":"node_modules/parse-entities/index.js"}],"node_modules/remark-parse/lib/tokenizer.js":[function(require,module,exports) {
'use strict';

module.exports = factory;

var MERGEABLE_NODES = {
  text: mergeText,
  blockquote: mergeBlockquote
};

/* Check whether a node is mergeable with adjacent nodes. */
function mergeable(node) {
  var start;
  var end;

  if (node.type !== 'text' || !node.position) {
    return true;
  }

  start = node.position.start;
  end = node.position.end;

  /* Only merge nodes which occupy the same size as their
   * `value`. */
  return start.line !== end.line ||
      end.column - start.column === node.value.length;
}

/* Merge two text nodes: `node` into `prev`. */
function mergeText(prev, node) {
  prev.value += node.value;

  return prev;
}

/* Merge two blockquotes: `node` into `prev`, unless in
 * CommonMark mode. */
function mergeBlockquote(prev, node) {
  if (this.options.commonmark) {
    return node;
  }

  prev.children = prev.children.concat(node.children);

  return prev;
}

/* Construct a tokenizer.  This creates both
 * `tokenizeInline` and `tokenizeBlock`. */
function factory(type) {
  return tokenize;

  /* Tokenizer for a bound `type`. */
  function tokenize(value, location) {
    var self = this;
    var offset = self.offset;
    var tokens = [];
    var methods = self[type + 'Methods'];
    var tokenizers = self[type + 'Tokenizers'];
    var line = location.line;
    var column = location.column;
    var index;
    var length;
    var method;
    var name;
    var matched;
    var valueLength;

    /* Trim white space only lines. */
    if (!value) {
      return tokens;
    }

    /* Expose on `eat`. */
    eat.now = now;
    eat.file = self.file;

    /* Sync initial offset. */
    updatePosition('');

    /* Iterate over `value`, and iterate over all
     * tokenizers.  When one eats something, re-iterate
     * with the remaining value.  If no tokenizer eats,
     * something failed (should not happen) and an
     * exception is thrown. */
    while (value) {
      index = -1;
      length = methods.length;
      matched = false;

      while (++index < length) {
        name = methods[index];
        method = tokenizers[name];

        if (
          method &&
          /* istanbul ignore next */ (!method.onlyAtStart || self.atStart) &&
          (!method.notInList || !self.inList) &&
          (!method.notInBlock || !self.inBlock) &&
          (!method.notInLink || !self.inLink)
        ) {
          valueLength = value.length;

          method.apply(self, [eat, value]);

          matched = valueLength !== value.length;

          if (matched) {
            break;
          }
        }
      }

      /* istanbul ignore if */
      if (!matched) {
        self.file.fail(new Error('Infinite loop'), eat.now());
      }
    }

    self.eof = now();

    return tokens;

    /* Update line, column, and offset based on
     * `value`. */
    function updatePosition(subvalue) {
      var lastIndex = -1;
      var index = subvalue.indexOf('\n');

      while (index !== -1) {
        line++;
        lastIndex = index;
        index = subvalue.indexOf('\n', index + 1);
      }

      if (lastIndex === -1) {
        column += subvalue.length;
      } else {
        column = subvalue.length - lastIndex;
      }

      if (line in offset) {
        if (lastIndex !== -1) {
          column += offset[line];
        } else if (column <= offset[line]) {
          column = offset[line] + 1;
        }
      }
    }

    /* Get offset.  Called before the first character is
     * eaten to retrieve the range's offsets. */
    function getOffset() {
      var indentation = [];
      var pos = line + 1;

      /* Done.  Called when the last character is
       * eaten to retrieve the range’s offsets. */
      return function () {
        var last = line + 1;

        while (pos < last) {
          indentation.push((offset[pos] || 0) + 1);

          pos++;
        }

        return indentation;
      };
    }

    /* Get the current position. */
    function now() {
      var pos = {line: line, column: column};

      pos.offset = self.toOffset(pos);

      return pos;
    }

    /* Store position information for a node. */
    function Position(start) {
      this.start = start;
      this.end = now();
    }

    /* Throw when a value is incorrectly eaten.
     * This shouldn’t happen but will throw on new,
     * incorrect rules. */
    function validateEat(subvalue) {
      /* istanbul ignore if */
      if (value.substring(0, subvalue.length) !== subvalue) {
        /* Capture stack-trace. */
        self.file.fail(
          new Error(
            'Incorrectly eaten value: please report this ' +
            'warning on http://git.io/vg5Ft'
          ),
          now()
        );
      }
    }

    /* Mark position and patch `node.position`. */
    function position() {
      var before = now();

      return update;

      /* Add the position to a node. */
      function update(node, indent) {
        var prev = node.position;
        var start = prev ? prev.start : before;
        var combined = [];
        var n = prev && prev.end.line;
        var l = before.line;

        node.position = new Position(start);

        /* If there was already a `position`, this
         * node was merged.  Fixing `start` wasn’t
         * hard, but the indent is different.
         * Especially because some information, the
         * indent between `n` and `l` wasn’t
         * tracked.  Luckily, that space is
         * (should be?) empty, so we can safely
         * check for it now. */
        if (prev && indent && prev.indent) {
          combined = prev.indent;

          if (n < l) {
            while (++n < l) {
              combined.push((offset[n] || 0) + 1);
            }

            combined.push(before.column);
          }

          indent = combined.concat(indent);
        }

        node.position.indent = indent || [];

        return node;
      }
    }

    /* Add `node` to `parent`s children or to `tokens`.
     * Performs merges where possible. */
    function add(node, parent) {
      var children = parent ? parent.children : tokens;
      var prev = children[children.length - 1];

      if (
        prev &&
        node.type === prev.type &&
        node.type in MERGEABLE_NODES &&
        mergeable(prev) &&
        mergeable(node)
      ) {
        node = MERGEABLE_NODES[node.type].call(self, prev, node);
      }

      if (node !== prev) {
        children.push(node);
      }

      if (self.atStart && tokens.length !== 0) {
        self.exitStart();
      }

      return node;
    }

    /* Remove `subvalue` from `value`.
     * `subvalue` must be at the start of `value`. */
    function eat(subvalue) {
      var indent = getOffset();
      var pos = position();
      var current = now();

      validateEat(subvalue);

      apply.reset = reset;
      reset.test = test;
      apply.test = test;

      value = value.substring(subvalue.length);

      updatePosition(subvalue);

      indent = indent();

      return apply;

      /* Add the given arguments, add `position` to
       * the returned node, and return the node. */
      function apply(node, parent) {
        return pos(add(pos(node), parent), indent);
      }

      /* Functions just like apply, but resets the
       * content:  the line and column are reversed,
       * and the eaten value is re-added.
       * This is useful for nodes with a single
       * type of content, such as lists and tables.
       * See `apply` above for what parameters are
       * expected. */
      function reset() {
        var node = apply.apply(null, arguments);

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return node;
      }

      /* Test the position, after eating, and reverse
       * to a not-eaten state. */
      function test() {
        var result = pos({});

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return result.position;
      }
    }
  }
}

},{}],"node_modules/markdown-escapes/index.js":[function(require,module,exports) {
'use strict'

module.exports = escapes

var defaults = [
  '\\',
  '`',
  '*',
  '{',
  '}',
  '[',
  ']',
  '(',
  ')',
  '#',
  '+',
  '-',
  '.',
  '!',
  '_',
  '>'
]

var gfm = defaults.concat(['~', '|'])

var commonmark = gfm.concat([
  '\n',
  '"',
  '$',
  '%',
  '&',
  "'",
  ',',
  '/',
  ':',
  ';',
  '<',
  '=',
  '?',
  '@',
  '^'
])

escapes.default = defaults
escapes.gfm = gfm
escapes.commonmark = commonmark

// Get markdown escapes.
function escapes(options) {
  var settings = options || {}

  if (settings.commonmark) {
    return commonmark
  }

  return settings.gfm ? gfm : defaults
}

},{}],"node_modules/remark-parse/lib/block-elements.json":[function(require,module,exports) {
module.exports = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "meta",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "pre",
  "section",
  "source",
  "title",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
]
;
},{}],"node_modules/remark-parse/lib/defaults.js":[function(require,module,exports) {
'use strict';

module.exports = {
  position: true,
  gfm: true,
  commonmark: false,
  footnotes: false,
  pedantic: false,
  blocks: require('./block-elements.json')
};

},{"./block-elements.json":"node_modules/remark-parse/lib/block-elements.json"}],"node_modules/remark-parse/lib/set-options.js":[function(require,module,exports) {
'use strict';

var xtend = require('xtend');
var escapes = require('markdown-escapes');
var defaults = require('./defaults');

module.exports = setOptions;

function setOptions(options) {
  var self = this;
  var current = self.options;
  var key;
  var value;

  if (options == null) {
    options = {};
  } else if (typeof options === 'object') {
    options = xtend(options);
  } else {
    throw new Error(
      'Invalid value `' + options + '` ' +
      'for setting `options`'
    );
  }

  for (key in defaults) {
    value = options[key];

    if (value == null) {
      value = current[key];
    }

    if (
      (key !== 'blocks' && typeof value !== 'boolean') ||
      (key === 'blocks' && typeof value !== 'object')
    ) {
      throw new Error('Invalid value `' + value + '` for setting `options.' + key + '`');
    }

    options[key] = value;
  }

  self.options = options;
  self.escape = escapes(options);

  return self;
}

},{"xtend":"node_modules/xtend/immutable.js","markdown-escapes":"node_modules/markdown-escapes/index.js","./defaults":"node_modules/remark-parse/lib/defaults.js"}],"node_modules/unist-util-is/convert.js":[function(require,module,exports) {
'use strict'

module.exports = convert

function convert(test) {
  if (typeof test === 'string') {
    return typeFactory(test)
  }

  if (test === null || test === undefined) {
    return ok
  }

  if (typeof test === 'object') {
    return ('length' in test ? anyFactory : matchesFactory)(test)
  }

  if (typeof test === 'function') {
    return test
  }

  throw new Error('Expected function, string, or object as test')
}

function convertAll(tests) {
  var results = []
  var length = tests.length
  var index = -1

  while (++index < length) {
    results[index] = convert(tests[index])
  }

  return results
}

// Utility assert each property in `test` is represented in `node`, and each
// values are strictly equal.
function matchesFactory(test) {
  return matches

  function matches(node) {
    var key

    for (key in test) {
      if (node[key] !== test[key]) {
        return false
      }
    }

    return true
  }
}

function anyFactory(tests) {
  var checks = convertAll(tests)
  var length = checks.length

  return matches

  function matches() {
    var index = -1

    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true
      }
    }

    return false
  }
}

// Utility to convert a string into a function which checks a given node’s type
// for said string.
function typeFactory(test) {
  return type

  function type(node) {
    return Boolean(node && node.type === test)
  }
}

// Utility to return true.
function ok() {
  return true
}

},{}],"node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js":[function(require,module,exports) {
'use strict'

module.exports = visitParents

var convert = require('unist-util-is/convert')

var CONTINUE = true
var SKIP = 'skip'
var EXIT = false

visitParents.CONTINUE = CONTINUE
visitParents.SKIP = SKIP
visitParents.EXIT = EXIT

function visitParents(tree, test, visitor, reverse) {
  var is

  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor
    visitor = test
    test = null
  }

  is = convert(test)

  one(tree, null, [])

  // Visit a single node.
  function one(node, index, parents) {
    var result = []
    var subresult

    if (!test || is(node, index, parents[parents.length - 1] || null)) {
      result = toResult(visitor(node, parents))

      if (result[0] === EXIT) {
        return result
      }
    }

    if (node.children && result[0] !== SKIP) {
      subresult = toResult(all(node.children, parents.concat(node)))
      return subresult[0] === EXIT ? subresult : result
    }

    return result
  }

  // Visit children in `parent`.
  function all(children, parents) {
    var min = -1
    var step = reverse ? -1 : 1
    var index = (reverse ? children.length : min) + step
    var result

    while (index > min && index < children.length) {
      result = one(children[index], index, parents)

      if (result[0] === EXIT) {
        return result
      }

      index = typeof result[1] === 'number' ? result[1] : index + step
    }
  }
}

function toResult(value) {
  if (value !== null && typeof value === 'object' && 'length' in value) {
    return value
  }

  if (typeof value === 'number') {
    return [CONTINUE, value]
  }

  return [value]
}

},{"unist-util-is/convert":"node_modules/unist-util-is/convert.js"}],"node_modules/unist-util-visit/index.js":[function(require,module,exports) {
'use strict'

module.exports = visit

var visitParents = require('unist-util-visit-parents')

var CONTINUE = visitParents.CONTINUE
var SKIP = visitParents.SKIP
var EXIT = visitParents.EXIT

visit.CONTINUE = CONTINUE
visit.SKIP = SKIP
visit.EXIT = EXIT

function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor
    visitor = test
    test = null
  }

  visitParents(tree, test, overload, reverse)

  function overload(node, parents) {
    var parent = parents[parents.length - 1]
    var index = parent ? parent.children.indexOf(node) : null
    return visitor(node, index, parent)
  }
}

},{"unist-util-visit-parents":"node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js"}],"node_modules/unist-util-remove-position/index.js":[function(require,module,exports) {
'use strict'

var visit = require('unist-util-visit')

module.exports = removePosition

function removePosition(node, force) {
  visit(node, force ? hard : soft)
  return node
}

function hard(node) {
  delete node.position
}

function soft(node) {
  node.position = undefined
}

},{"unist-util-visit":"node_modules/unist-util-visit/index.js"}],"node_modules/remark-parse/lib/parse.js":[function(require,module,exports) {
'use strict';

var xtend = require('xtend');
var removePosition = require('unist-util-remove-position');

module.exports = parse;

var C_NEWLINE = '\n';
var EXPRESSION_LINE_BREAKS = /\r\n|\r/g;

/* Parse the bound file. */
function parse() {
  var self = this;
  var value = String(self.file);
  var start = {line: 1, column: 1, offset: 0};
  var content = xtend(start);
  var node;

  /* Clean non-unix newlines: `\r\n` and `\r` are all
   * changed to `\n`.  This should not affect positional
   * information. */
  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);

  if (value.charCodeAt(0) === 0xFEFF) {
    value = value.slice(1);

    content.column++;
    content.offset++;
  }

  node = {
    type: 'root',
    children: self.tokenizeBlock(value, content),
    position: {
      start: start,
      end: self.eof || xtend(start)
    }
  };

  if (!self.options.position) {
    removePosition(node, true);
  }

  return node;
}

},{"xtend":"node_modules/xtend/immutable.js","unist-util-remove-position":"node_modules/unist-util-remove-position/index.js"}],"node_modules/is-whitespace-character/index.js":[function(require,module,exports) {
'use strict'

module.exports = whitespace

var fromCode = String.fromCharCode
var re = /\s/

// Check if the given character code, or the character code at the first
// character, is a whitespace character.
function whitespace(character) {
  return re.test(
    typeof character === 'number' ? fromCode(character) : character.charAt(0)
  )
}

},{}],"node_modules/remark-parse/lib/tokenize/newline.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');

module.exports = newline;

/* Tokenise newline. */
function newline(eat, value, silent) {
  var character = value.charAt(0);
  var length;
  var subvalue;
  var queue;
  var index;

  if (character !== '\n') {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  index = 1;
  length = value.length;
  subvalue = character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;

    if (character === '\n') {
      subvalue += queue;
      queue = '';
    }

    index++;
  }

  eat(subvalue);
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js"}],"node_modules/repeat-string/index.js":[function(require,module,exports) {
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
'use strict';
/**
 * Results cache
 */

var res = '';
var cache;
/**
 * Expose `repeat`
 */

module.exports = repeat;
/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  } // cover common, quick use cases


  if (num === 1) return str;
  if (num === 2) return str + str;
  var max = str.length * num;

  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  } else if (res.length >= max) {
    return res.substr(0, max);
  }

  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str;
    }

    num >>= 1;
    str += str;
  }

  res += str;
  res = res.substr(0, max);
  return res;
}
},{}],"node_modules/trim-trailing-lines/index.js":[function(require,module,exports) {
'use strict'

module.exports = trimTrailingLines

var line = '\n'

// Remove final newline characters from `value`.
function trimTrailingLines(value) {
  var val = String(value)
  var index = val.length

  while (val.charAt(--index) === line) {
    // Empty
  }

  return val.slice(0, index + 1)
}

},{}],"node_modules/remark-parse/lib/tokenize/code-indented.js":[function(require,module,exports) {
'use strict';

var repeat = require('repeat-string');
var trim = require('trim-trailing-lines');

module.exports = indentedCode;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';

var CODE_INDENT_COUNT = 4;
var CODE_INDENT = repeat(C_SPACE, CODE_INDENT_COUNT);

/* Tokenise indented code. */
function indentedCode(eat, value, silent) {
  var index = -1;
  var length = value.length;
  var subvalue = '';
  var content = '';
  var subvalueQueue = '';
  var contentQueue = '';
  var character;
  var blankQueue;
  var indent;

  while (++index < length) {
    character = value.charAt(index);

    if (indent) {
      indent = false;

      subvalue += subvalueQueue;
      content += contentQueue;
      subvalueQueue = '';
      contentQueue = '';

      if (character === C_NEWLINE) {
        subvalueQueue = character;
        contentQueue = character;
      } else {
        subvalue += character;
        content += character;

        while (++index < length) {
          character = value.charAt(index);

          if (!character || character === C_NEWLINE) {
            contentQueue = character;
            subvalueQueue = character;
            break;
          }

          subvalue += character;
          content += character;
        }
      }
    } else if (
      character === C_SPACE &&
      value.charAt(index + 1) === character &&
      value.charAt(index + 2) === character &&
      value.charAt(index + 3) === character
    ) {
      subvalueQueue += CODE_INDENT;
      index += 3;
      indent = true;
    } else if (character === C_TAB) {
      subvalueQueue += character;
      indent = true;
    } else {
      blankQueue = '';

      while (character === C_TAB || character === C_SPACE) {
        blankQueue += character;
        character = value.charAt(++index);
      }

      if (character !== C_NEWLINE) {
        break;
      }

      subvalueQueue += blankQueue + character;
      contentQueue += character;
    }
  }

  if (content) {
    if (silent) {
      return true;
    }

    return eat(subvalue)({
      type: 'code',
      lang: null,
      value: trim(content)
    });
  }
}

},{"repeat-string":"node_modules/repeat-string/index.js","trim-trailing-lines":"node_modules/trim-trailing-lines/index.js"}],"node_modules/remark-parse/lib/tokenize/code-fenced.js":[function(require,module,exports) {
'use strict';

var trim = require('trim-trailing-lines');

module.exports = fencedCode;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_TILDE = '~';
var C_TICK = '`';

var MIN_FENCE_COUNT = 3;
var CODE_INDENT_COUNT = 4;

function fencedCode(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = 0;
  var subvalue = '';
  var fenceCount;
  var marker;
  var character;
  var flag;
  var queue;
  var content;
  var exdentedContent;
  var closing;
  var exdentedClosing;
  var indent;
  var now;

  if (!settings.gfm) {
    return;
  }

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  indent = index;

  /* Eat the fence. */
  character = value.charAt(index);

  if (character !== C_TILDE && character !== C_TICK) {
    return;
  }

  index++;
  marker = character;
  fenceCount = 1;
  subvalue += character;

  while (index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      break;
    }

    subvalue += character;
    fenceCount++;
    index++;
  }

  if (fenceCount < MIN_FENCE_COUNT) {
    return;
  }

  /* Eat spacing before flag. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat flag. */
  flag = '';
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character === C_NEWLINE ||
      character === C_TILDE ||
      character === C_TICK
    ) {
      break;
    }

    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      flag += queue + character;
      queue = '';
    }

    index++;
  }

  character = value.charAt(index);

  if (character && character !== C_NEWLINE) {
    return;
  }

  if (silent) {
    return true;
  }

  now = eat.now();
  now.column += subvalue.length;
  now.offset += subvalue.length;

  subvalue += flag;
  flag = self.decode.raw(self.unescape(flag), now);

  if (queue) {
    subvalue += queue;
  }

  queue = '';
  closing = '';
  exdentedClosing = '';
  content = '';
  exdentedContent = '';

  /* Eat content. */
  while (index < length) {
    character = value.charAt(index);
    content += closing;
    exdentedContent += exdentedClosing;
    closing = '';
    exdentedClosing = '';

    if (character !== C_NEWLINE) {
      content += character;
      exdentedClosing += character;
      index++;
      continue;
    }

    /* Add the newline to `subvalue` if its the first
     * character.  Otherwise, add it to the `closing`
     * queue. */
    if (content) {
      closing += character;
      exdentedClosing += character;
    } else {
      subvalue += character;
    }

    queue = '';
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue.slice(indent);

    if (queue.length >= CODE_INDENT_COUNT) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== marker) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue;

    if (queue.length < fenceCount) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }

      closing += character;
      exdentedClosing += character;
      index++;
    }

    if (!character || character === C_NEWLINE) {
      break;
    }
  }

  subvalue += content + closing;

  return eat(subvalue)({
    type: 'code',
    lang: flag || null,
    value: trim(exdentedContent)
  });
}

},{"trim-trailing-lines":"node_modules/trim-trailing-lines/index.js"}],"node_modules/trim/index.js":[function(require,module,exports) {

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],"node_modules/remark-parse/lib/util/interrupt.js":[function(require,module,exports) {
'use strict';

module.exports = interrupt;

function interrupt(interruptors, tokenizers, ctx, params) {
  var bools = ['pedantic', 'commonmark'];
  var count = bools.length;
  var length = interruptors.length;
  var index = -1;
  var interruptor;
  var config;
  var fn;
  var offset;
  var bool;
  var ignore;

  while (++index < length) {
    interruptor = interruptors[index];
    config = interruptor[1] || {};
    fn = interruptor[0];
    offset = -1;
    ignore = false;

    while (++offset < count) {
      bool = bools[offset];

      if (config[bool] !== undefined && config[bool] !== ctx.options[bool]) {
        ignore = true;
        break;
      }
    }

    if (ignore) {
      continue;
    }

    if (tokenizers[fn].apply(ctx, params)) {
      return true;
    }
  }

  return false;
}

},{}],"node_modules/remark-parse/lib/tokenize/blockquote.js":[function(require,module,exports) {
'use strict';

var trim = require('trim');
var interrupt = require('../util/interrupt');

module.exports = blockquote;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_GT = '>';

/* Tokenise a blockquote. */
function blockquote(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptBlockquote;
  var now = eat.now();
  var currentLine = now.line;
  var length = value.length;
  var values = [];
  var contents = [];
  var indents = [];
  var add;
  var index = 0;
  var character;
  var rest;
  var nextIndex;
  var content;
  var line;
  var startIndex;
  var prefixed;
  var exit;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== C_GT) {
    return;
  }

  if (silent) {
    return true;
  }

  index = 0;

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }

      index++;
    }

    if (value.charAt(index) === C_GT) {
      index++;
      prefixed = true;

      if (value.charAt(index) === C_SPACE) {
        index++;
      }
    } else {
      index = startIndex;
    }

    content = value.slice(index, nextIndex);

    if (!prefixed && !trim(content)) {
      index = startIndex;
      break;
    }

    if (!prefixed) {
      rest = value.slice(index);

      /* Check if the following code contains a possible
       * block. */
      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {
        break;
      }
    }

    line = startIndex === index ? content : value.slice(startIndex, nextIndex);

    indents.push(index - startIndex);
    values.push(line);
    contents.push(content);

    index = nextIndex + 1;
  }

  index = -1;
  length = indents.length;
  add = eat(values.join(C_NEWLINE));

  while (++index < length) {
    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];
    currentLine++;
  }

  exit = self.enterBlock();
  contents = self.tokenizeBlock(contents.join(C_NEWLINE), now);
  exit();

  return add({
    type: 'blockquote',
    children: contents
  });
}

},{"trim":"node_modules/trim/index.js","../util/interrupt":"node_modules/remark-parse/lib/util/interrupt.js"}],"node_modules/remark-parse/lib/tokenize/heading-atx.js":[function(require,module,exports) {
'use strict';

module.exports = atxHeading;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_HASH = '#';

var MAX_ATX_COUNT = 6;

function atxHeading(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = -1;
  var now = eat.now();
  var subvalue = '';
  var content = '';
  var character;
  var queue;
  var depth;

  /* Eat initial spacing. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat hashes. */
  depth = 0;

  while (++index <= length) {
    character = value.charAt(index);

    if (character !== C_HASH) {
      index--;
      break;
    }

    subvalue += character;
    depth++;
  }

  if (depth > MAX_ATX_COUNT) {
    return;
  }

  if (
    !depth ||
    (!settings.pedantic && value.charAt(index + 1) === C_HASH)
  ) {
    return;
  }

  length = value.length + 1;

  /* Eat intermediate white-space. */
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }

    queue += character;
  }

  /* Exit when not in pedantic mode without spacing. */
  if (
    !settings.pedantic &&
    queue.length === 0 &&
    character &&
    character !== C_NEWLINE
  ) {
    return;
  }

  if (silent) {
    return true;
  }

  /* Eat content. */
  subvalue += queue;
  queue = '';
  content = '';

  while (++index < length) {
    character = value.charAt(index);

    if (!character || character === C_NEWLINE) {
      break;
    }

    if (
      character !== C_SPACE &&
      character !== C_TAB &&
      character !== C_HASH
    ) {
      content += queue + character;
      queue = '';
      continue;
    }

    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_HASH) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }

    index--;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  return eat(subvalue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},{}],"node_modules/remark-parse/lib/tokenize/thematic-break.js":[function(require,module,exports) {
'use strict';

module.exports = thematicBreak;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_DASH = '-';

var THEMATIC_BREAK_MARKER_COUNT = 3;

function thematicBreak(eat, value, silent) {
  var index = -1;
  var length = value.length + 1;
  var subvalue = '';
  var character;
  var marker;
  var markerCount;
  var queue;

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
  }

  if (
    character !== C_ASTERISK &&
    character !== C_DASH &&
    character !== C_UNDERSCORE
  ) {
    return;
  }

  marker = character;
  subvalue += character;
  markerCount = 1;
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === marker) {
      markerCount++;
      subvalue += queue + marker;
      queue = '';
    } else if (character === C_SPACE) {
      queue += character;
    } else if (
      markerCount >= THEMATIC_BREAK_MARKER_COUNT &&
      (!character || character === C_NEWLINE)
    ) {
      subvalue += queue;

      if (silent) {
        return true;
      }

      return eat(subvalue)({type: 'thematicBreak'});
    } else {
      return;
    }
  }
}

},{}],"node_modules/remark-parse/lib/util/get-indentation.js":[function(require,module,exports) {
'use strict';

module.exports = indentation;

/* Map of characters, and their column length,
 * which can be used as indentation. */
var characters = {' ': 1, '\t': 4};

/* Gets indentation information for a line. */
function indentation(value) {
  var index = 0;
  var indent = 0;
  var character = value.charAt(index);
  var stops = {};
  var size;

  while (character in characters) {
    size = characters[character];

    indent += size;

    if (size > 1) {
      indent = Math.floor(indent / size) * size;
    }

    stops[indent] = index;

    character = value.charAt(++index);
  }

  return {indent: indent, stops: stops};
}

},{}],"node_modules/remark-parse/lib/util/remove-indentation.js":[function(require,module,exports) {
'use strict';

var trim = require('trim');
var repeat = require('repeat-string');
var getIndent = require('./get-indentation');

module.exports = indentation;

var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';

/* Remove the minimum indent from every line in `value`.
 * Supports both tab, spaced, and mixed indentation (as
 * well as possible). */
function indentation(value, maximum) {
  var values = value.split(C_NEWLINE);
  var position = values.length + 1;
  var minIndent = Infinity;
  var matrix = [];
  var index;
  var indentation;
  var stops;
  var padding;

  values.unshift(repeat(C_SPACE, maximum) + '!');

  while (position--) {
    indentation = getIndent(values[position]);

    matrix[position] = indentation.stops;

    if (trim(values[position]).length === 0) {
      continue;
    }

    if (indentation.indent) {
      if (indentation.indent > 0 && indentation.indent < minIndent) {
        minIndent = indentation.indent;
      }
    } else {
      minIndent = Infinity;

      break;
    }
  }

  if (minIndent !== Infinity) {
    position = values.length;

    while (position--) {
      stops = matrix[position];
      index = minIndent;

      while (index && !(index in stops)) {
        index--;
      }

      if (
        trim(values[position]).length !== 0 &&
        minIndent &&
        index !== minIndent
      ) {
        padding = C_TAB;
      } else {
        padding = '';
      }

      values[position] = padding + values[position].slice(
        index in stops ? stops[index] + 1 : 0
      );
    }
  }

  values.shift();

  return values.join(C_NEWLINE);
}

},{"trim":"node_modules/trim/index.js","repeat-string":"node_modules/repeat-string/index.js","./get-indentation":"node_modules/remark-parse/lib/util/get-indentation.js"}],"node_modules/remark-parse/lib/tokenize/list.js":[function(require,module,exports) {
'use strict';

/* eslint-disable max-params */

var trim = require('trim');
var repeat = require('repeat-string');
var decimal = require('is-decimal');
var getIndent = require('../util/get-indentation');
var removeIndent = require('../util/remove-indentation');
var interrupt = require('../util/interrupt');

module.exports = list;

var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_PLUS = '+';
var C_DASH = '-';
var C_DOT = '.';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_PAREN_CLOSE = ')';
var C_X_LOWER = 'x';

var TAB_SIZE = 4;
var EXPRESSION_LOOSE_LIST_ITEM = /\n\n(?!\s*$)/;
var EXPRESSION_TASK_ITEM = /^\[([ \t]|x|X)][ \t]/;
var EXPRESSION_BULLET = /^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/;
var EXPRESSION_PEDANTIC_BULLET = /^([ \t]*)([*+-]|\d+[.)])([ \t]+)/;
var EXPRESSION_INITIAL_INDENT = /^( {1,4}|\t)?/gm;

/* Map of characters which can be used to mark
 * list-items. */
var LIST_UNORDERED_MARKERS = {};

LIST_UNORDERED_MARKERS[C_ASTERISK] = true;
LIST_UNORDERED_MARKERS[C_PLUS] = true;
LIST_UNORDERED_MARKERS[C_DASH] = true;

/* Map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_MARKERS = {};

LIST_ORDERED_MARKERS[C_DOT] = true;

/* Map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_COMMONMARK_MARKERS = {};

LIST_ORDERED_COMMONMARK_MARKERS[C_DOT] = true;
LIST_ORDERED_COMMONMARK_MARKERS[C_PAREN_CLOSE] = true;

function list(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var pedantic = self.options.pedantic;
  var tokenizers = self.blockTokenizers;
  var interuptors = self.interruptList;
  var markers;
  var index = 0;
  var length = value.length;
  var start = null;
  var size = 0;
  var queue;
  var ordered;
  var character;
  var marker;
  var nextIndex;
  var startIndex;
  var prefixed;
  var currentMarker;
  var content;
  var line;
  var prevEmpty;
  var empty;
  var items;
  var allLines;
  var emptyLines;
  var item;
  var enterTop;
  var exitBlockquote;
  var isLoose;
  var node;
  var now;
  var end;
  var indented;

  while (index < length) {
    character = value.charAt(index);

    if (character === C_TAB) {
      size += TAB_SIZE - (size % TAB_SIZE);
    } else if (character === C_SPACE) {
      size++;
    } else {
      break;
    }

    index++;
  }

  if (size >= TAB_SIZE) {
    return;
  }

  character = value.charAt(index);

  markers = commonmark ?
    LIST_ORDERED_COMMONMARK_MARKERS :
    LIST_ORDERED_MARKERS;

  if (LIST_UNORDERED_MARKERS[character] === true) {
    marker = character;
    ordered = false;
  } else {
    ordered = true;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (!decimal(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (!queue || markers[character] !== true) {
      return;
    }

    start = parseInt(queue, 10);
    marker = character;
  }

  character = value.charAt(++index);

  if (character !== C_SPACE && character !== C_TAB) {
    return;
  }

  if (silent) {
    return true;
  }

  index = 0;
  items = [];
  allLines = [];
  emptyLines = [];

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;
    indented = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    end = index + TAB_SIZE;
    size = 0;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_TAB) {
        size += TAB_SIZE - (size % TAB_SIZE);
      } else if (character === C_SPACE) {
        size++;
      } else {
        break;
      }

      index++;
    }

    if (size >= TAB_SIZE) {
      indented = true;
    }

    if (item && size >= item.indent) {
      indented = true;
    }

    character = value.charAt(index);
    currentMarker = null;

    if (!indented) {
      if (LIST_UNORDERED_MARKERS[character] === true) {
        currentMarker = character;
        index++;
        size++;
      } else {
        queue = '';

        while (index < length) {
          character = value.charAt(index);

          if (!decimal(character)) {
            break;
          }

          queue += character;
          index++;
        }

        character = value.charAt(index);
        index++;

        if (queue && markers[character] === true) {
          currentMarker = character;
          size += queue.length + 1;
        }
      }

      if (currentMarker) {
        character = value.charAt(index);

        if (character === C_TAB) {
          size += TAB_SIZE - (size % TAB_SIZE);
          index++;
        } else if (character === C_SPACE) {
          end = index + TAB_SIZE;

          while (index < end) {
            if (value.charAt(index) !== C_SPACE) {
              break;
            }

            index++;
            size++;
          }

          if (index === end && value.charAt(index) === C_SPACE) {
            index -= TAB_SIZE - 1;
            size -= TAB_SIZE - 1;
          }
        } else if (character !== C_NEWLINE && character !== '') {
          currentMarker = null;
        }
      }
    }

    if (currentMarker) {
      if (!pedantic && marker !== currentMarker) {
        break;
      }

      prefixed = true;
    } else {
      if (!commonmark && !indented && value.charAt(startIndex) === C_SPACE) {
        indented = true;
      } else if (commonmark && item) {
        indented = size >= item.indent || size > TAB_SIZE;
      }

      prefixed = false;
      index = startIndex;
    }

    line = value.slice(startIndex, nextIndex);
    content = startIndex === index ? line : value.slice(index, nextIndex);

    if (
      currentMarker === C_ASTERISK ||
      currentMarker === C_UNDERSCORE ||
      currentMarker === C_DASH
    ) {
      if (tokenizers.thematicBreak.call(self, eat, line, true)) {
        break;
      }
    }

    prevEmpty = empty;
    empty = !trim(content).length;

    if (indented && item) {
      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (prefixed) {
      if (emptyLines.length !== 0) {
        item.value.push('');
        item.trail = emptyLines.concat();
      }

      item = {
        value: [line],
        indent: size,
        trail: []
      };

      items.push(item);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (empty) {
      if (prevEmpty) {
        break;
      }

      emptyLines.push(line);
    } else {
      if (prevEmpty) {
        break;
      }

      if (interrupt(interuptors, tokenizers, self, [eat, line, true])) {
        break;
      }

      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    }

    index = nextIndex + 1;
  }

  node = eat(allLines.join(C_NEWLINE)).reset({
    type: 'list',
    ordered: ordered,
    start: start,
    loose: null,
    children: []
  });

  enterTop = self.enterList();
  exitBlockquote = self.enterBlock();
  isLoose = false;
  index = -1;
  length = items.length;

  while (++index < length) {
    item = items[index].value.join(C_NEWLINE);
    now = eat.now();

    item = eat(item)(listItem(self, item, now), node);

    if (item.loose) {
      isLoose = true;
    }

    item = items[index].trail.join(C_NEWLINE);

    if (index !== length - 1) {
      item += C_NEWLINE;
    }

    eat(item);
  }

  enterTop();
  exitBlockquote();

  node.loose = isLoose;

  return node;
}

function listItem(ctx, value, position) {
  var offsets = ctx.offset;
  var fn = ctx.options.pedantic ? pedanticListItem : normalListItem;
  var checked = null;
  var task;
  var indent;

  value = fn.apply(null, arguments);

  if (ctx.options.gfm) {
    task = value.match(EXPRESSION_TASK_ITEM);

    if (task) {
      indent = task[0].length;
      checked = task[1].toLowerCase() === C_X_LOWER;
      offsets[position.line] += indent;
      value = value.slice(indent);
    }
  }

  return {
    type: 'listItem',
    loose: EXPRESSION_LOOSE_LIST_ITEM.test(value) ||
      value.charAt(value.length - 1) === C_NEWLINE,
    checked: checked,
    children: ctx.tokenizeBlock(value, position)
  };
}

/* Create a list-item using overly simple mechanics. */
function pedanticListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_PEDANTIC_BULLET, replacer);

  /* The initial line was also matched by the below, so
   * we reset the `line`. */
  line = position.line;

  return value.replace(EXPRESSION_INITIAL_INDENT, replacer);

  /* A simple replacer which removed all matches,
   * and adds their length to `offset`. */
  function replacer($0) {
    offsets[line] = (offsets[line] || 0) + $0.length;
    line++;

    return '';
  }
}

/* Create a list-item using sane mechanics. */
function normalListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;
  var max;
  var bullet;
  var rest;
  var lines;
  var trimmedLines;
  var index;
  var length;

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_BULLET, replacer);

  lines = value.split(C_NEWLINE);

  trimmedLines = removeIndent(value, getIndent(max).indent).split(C_NEWLINE);

  /* We replaced the initial bullet with something
   * else above, which was used to trick
   * `removeIndentation` into removing some more
   * characters when possible.  However, that could
   * result in the initial line to be stripped more
   * than it should be. */
  trimmedLines[0] = rest;

  offsets[line] = (offsets[line] || 0) + bullet.length;
  line++;

  index = 0;
  length = lines.length;

  while (++index < length) {
    offsets[line] = (offsets[line] || 0) +
      lines[index].length - trimmedLines[index].length;
    line++;
  }

  return trimmedLines.join(C_NEWLINE);

  function replacer($0, $1, $2, $3, $4) {
    bullet = $1 + $2 + $3;
    rest = $4;

    /* Make sure that the first nine numbered list items
     * can indent with an extra space.  That is, when
     * the bullet did not receive an extra final space. */
    if (Number($2) < 10 && bullet.length % 2 === 1) {
      $2 = C_SPACE + $2;
    }

    max = $1 + repeat(C_SPACE, $2.length) + $3;

    return max + rest;
  }
}

},{"trim":"node_modules/trim/index.js","repeat-string":"node_modules/repeat-string/index.js","is-decimal":"node_modules/is-decimal/index.js","../util/get-indentation":"node_modules/remark-parse/lib/util/get-indentation.js","../util/remove-indentation":"node_modules/remark-parse/lib/util/remove-indentation.js","../util/interrupt":"node_modules/remark-parse/lib/util/interrupt.js"}],"node_modules/remark-parse/lib/tokenize/heading-setext.js":[function(require,module,exports) {
'use strict';

module.exports = setextHeading;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_EQUALS = '=';
var C_DASH = '-';

var MAX_HEADING_INDENT = 3;

/* Map of characters which can be used to mark setext
 * headers, mapping to their corresponding depth. */
var SETEXT_MARKERS = {};

SETEXT_MARKERS[C_EQUALS] = 1;
SETEXT_MARKERS[C_DASH] = 2;

function setextHeading(eat, value, silent) {
  var self = this;
  var now = eat.now();
  var length = value.length;
  var index = -1;
  var subvalue = '';
  var content;
  var queue;
  var character;
  var marker;
  var depth;

  /* Eat initial indentation. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE || index >= MAX_HEADING_INDENT) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat content. */
  content = '';
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE) {
      index--;
      break;
    }

    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      content += queue + character;
      queue = '';
    }
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  /* Ensure the content is followed by a newline and a
   * valid marker. */
  character = value.charAt(++index);
  marker = value.charAt(++index);

  if (character !== C_NEWLINE || !SETEXT_MARKERS[marker]) {
    return;
  }

  subvalue += character;

  /* Eat Setext-line. */
  queue = marker;
  depth = SETEXT_MARKERS[marker];

  while (++index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      if (character !== C_NEWLINE) {
        return;
      }

      index--;
      break;
    }

    queue += character;
  }

  if (silent) {
    return true;
  }

  return eat(subvalue + queue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},{}],"node_modules/remark-parse/lib/util/html.js":[function(require,module,exports) {
'use strict';

var attributeName = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
var unquoted = '[^"\'=<>`\\u0000-\\u0020]+';
var singleQuoted = '\'[^\']*\'';
var doubleQuoted = '"[^"]*"';
var attributeValue = '(?:' + unquoted + '|' + singleQuoted + '|' + doubleQuoted + ')';
var attribute = '(?:\\s+' + attributeName + '(?:\\s*=\\s*' + attributeValue + ')?)';
var openTag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
var closeTag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
var comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
var processing = '<[?].*?[?]>';
var declaration = '<![A-Za-z]+\\s+[^>]*>';
var cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

exports.openCloseTag = new RegExp('^(?:' + openTag + '|' + closeTag + ')');

exports.tag = new RegExp('^(?:' +
  openTag + '|' +
  closeTag + '|' +
  comment + '|' +
  processing + '|' +
  declaration + '|' +
  cdata +
')');

},{}],"node_modules/remark-parse/lib/tokenize/html-block.js":[function(require,module,exports) {
'use strict';

var openCloseTag = require('../util/html').openCloseTag;

module.exports = blockHTML;

var C_TAB = '\t';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_LT = '<';

function blockHTML(eat, value, silent) {
  var self = this;
  var blocks = self.options.blocks;
  var length = value.length;
  var index = 0;
  var next;
  var line;
  var offset;
  var character;
  var count;
  var sequence;
  var subvalue;

  var sequences = [
    [/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true],
    [/^<!--/, /-->/, true],
    [/^<\?/, /\?>/, true],
    [/^<![A-Za-z]/, />/, true],
    [/^<!\[CDATA\[/, /\]\]>/, true],
    [new RegExp('^</?(' + blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true],
    [new RegExp(openCloseTag.source + '\\s*$'), /^$/, false]
  ];

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== C_LT) {
    return;
  }

  next = value.indexOf(C_NEWLINE, index + 1);
  next = next === -1 ? length : next;
  line = value.slice(index, next);
  offset = -1;
  count = sequences.length;

  while (++offset < count) {
    if (sequences[offset][0].test(line)) {
      sequence = sequences[offset];
      break;
    }
  }

  if (!sequence) {
    return;
  }

  if (silent) {
    return sequence[2];
  }

  index = next;

  if (!sequence[1].test(line)) {
    while (index < length) {
      next = value.indexOf(C_NEWLINE, index + 1);
      next = next === -1 ? length : next;
      line = value.slice(index + 1, next);

      if (sequence[1].test(line)) {
        if (line) {
          index = next;
        }

        break;
      }

      index = next;
    }
  }

  subvalue = value.slice(0, index);

  return eat(subvalue)({type: 'html', value: subvalue});
}

},{"../util/html":"node_modules/remark-parse/lib/util/html.js"}],"node_modules/collapse-white-space/index.js":[function(require,module,exports) {
'use strict'

module.exports = collapse

// `collapse(' \t\nbar \nbaz\t') // ' bar baz '`
function collapse(value) {
  return String(value).replace(/\s+/g, ' ')
}

},{}],"node_modules/remark-parse/lib/util/normalize.js":[function(require,module,exports) {
'use strict';

var collapseWhiteSpace = require('collapse-white-space');

module.exports = normalize;

/* Normalize an identifier.  Collapses multiple white space
 * characters into a single space, and removes casing. */
function normalize(value) {
  return collapseWhiteSpace(value).toLowerCase();
}

},{"collapse-white-space":"node_modules/collapse-white-space/index.js"}],"node_modules/remark-parse/lib/tokenize/footnote-definition.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var normalize = require('../util/normalize');

module.exports = footnoteDefinition;
footnoteDefinition.notInList = true;
footnoteDefinition.notInBlock = true;

var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_CARET = '^';
var C_COLON = ':';

var EXPRESSION_INITIAL_TAB = /^( {4}|\t)?/gm;

function footnoteDefinition(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var index;
  var length;
  var subvalue;
  var now;
  var currentLine;
  var content;
  var queue;
  var subqueue;
  var character;
  var identifier;
  var add;
  var exit;

  if (!self.options.footnotes) {
    return;
  }

  index = 0;
  length = value.length;
  subvalue = '';
  now = eat.now();
  currentLine = now.line;

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  if (
    value.charAt(index) !== C_BRACKET_OPEN ||
    value.charAt(index + 1) !== C_CARET
  ) {
    return;
  }

  subvalue += C_BRACKET_OPEN + C_CARET;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (
    !queue ||
    value.charAt(index) !== C_BRACKET_CLOSE ||
    value.charAt(index + 1) !== C_COLON
  ) {
    return;
  }

  if (silent) {
    return true;
  }

  identifier = normalize(queue);
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
    index++;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  queue = '';
  content = '';
  subqueue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE) {
      subqueue = character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_NEWLINE) {
          break;
        }

        subqueue += character;
        index++;
      }

      queue += subqueue;
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_SPACE) {
          break;
        }

        subqueue += character;
        index++;
      }

      if (subqueue.length === 0) {
        break;
      }

      queue += subqueue;
    }

    if (queue) {
      content += queue;
      queue = '';
    }

    content += character;
    index++;
  }

  subvalue += content;

  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {
    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;
    currentLine++;

    return '';
  });

  add = eat(subvalue);

  exit = self.enterBlock();
  content = self.tokenizeBlock(content, now);
  exit();

  return add({
    type: 'footnoteDefinition',
    identifier: identifier,
    children: content
  });
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../util/normalize":"node_modules/remark-parse/lib/util/normalize.js"}],"node_modules/remark-parse/lib/tokenize/definition.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var normalize = require('../util/normalize');

module.exports = definition;
definition.notInList = true;
definition.notInBlock = true;

var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_COLON = ':';
var C_LT = '<';
var C_GT = '>';

function definition(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var beforeURL;
  var beforeTitle;
  var queue;
  var character;
  var test;
  var identifier;
  var url;
  var title;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (character !== C_BRACKET_OPEN) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (
    !queue ||
    value.charAt(index) !== C_BRACKET_CLOSE ||
    value.charAt(index + 1) !== C_COLON
  ) {
    return;
  }

  identifier = queue;
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character !== C_TAB &&
      character !== C_SPACE &&
      character !== C_NEWLINE
    ) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT) {
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (!isEnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character === isEnclosedURLCharacter.delimiter) {
      subvalue += C_LT + queue + character;
      index++;
    } else {
      if (commonmark) {
        return;
      }

      index -= queue.length + 1;
      queue = '';
    }
  }

  if (!queue) {
    while (index < length) {
      character = value.charAt(index);

      if (!isUnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    subvalue += queue;
  }

  if (!queue) {
    return;
  }

  url = queue;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character !== C_TAB &&
      character !== C_SPACE &&
      character !== C_NEWLINE
    ) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  test = null;

  if (character === C_DOUBLE_QUOTE) {
    test = C_DOUBLE_QUOTE;
  } else if (character === C_SINGLE_QUOTE) {
    test = C_SINGLE_QUOTE;
  } else if (character === C_PAREN_OPEN) {
    test = C_PAREN_CLOSE;
  }

  if (!test) {
    queue = '';
    index = subvalue.length;
  } else if (queue) {
    subvalue += queue + character;
    index = subvalue.length;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character === test) {
        break;
      }

      if (character === C_NEWLINE) {
        index++;
        character = value.charAt(index);

        if (character === C_NEWLINE || character === test) {
          return;
        }

        queue += C_NEWLINE;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character !== test) {
      return;
    }

    beforeTitle = subvalue;
    subvalue += queue + character;
    index++;
    title = queue;
    queue = '';
  } else {
    return;
  }

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (!character || character === C_NEWLINE) {
    if (silent) {
      return true;
    }

    beforeURL = eat(beforeURL).test().end;
    url = self.decode.raw(self.unescape(url), beforeURL, {nonTerminated: false});

    if (title) {
      beforeTitle = eat(beforeTitle).test().end;
      title = self.decode.raw(self.unescape(title), beforeTitle);
    }

    return eat(subvalue)({
      type: 'definition',
      identifier: normalize(identifier),
      title: title || null,
      url: url
    });
  }
}

/* Check if `character` can be inside an enclosed URI. */
function isEnclosedURLCharacter(character) {
  return character !== C_GT &&
    character !== C_BRACKET_OPEN &&
    character !== C_BRACKET_CLOSE;
}

isEnclosedURLCharacter.delimiter = C_GT;

/* Check if `character` can be inside an unclosed URI. */
function isUnclosedURLCharacter(character) {
  return character !== C_BRACKET_OPEN &&
    character !== C_BRACKET_CLOSE &&
    !whitespace(character);
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../util/normalize":"node_modules/remark-parse/lib/util/normalize.js"}],"node_modules/remark-parse/lib/tokenize/table.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');

module.exports = table;

var C_BACKSLASH = '\\';
var C_TICK = '`';
var C_DASH = '-';
var C_PIPE = '|';
var C_COLON = ':';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';

var MIN_TABLE_COLUMNS = 1;
var MIN_TABLE_ROWS = 2;

var TABLE_ALIGN_LEFT = 'left';
var TABLE_ALIGN_CENTER = 'center';
var TABLE_ALIGN_RIGHT = 'right';
var TABLE_ALIGN_NONE = null;

function table(eat, value, silent) {
  var self = this;
  var index;
  var alignments;
  var alignment;
  var subvalue;
  var row;
  var length;
  var lines;
  var queue;
  var character;
  var hasDash;
  var align;
  var cell;
  var preamble;
  var count;
  var opening;
  var now;
  var position;
  var lineCount;
  var line;
  var rows;
  var table;
  var lineIndex;
  var pipeIndex;
  var first;

  /* Exit when not in gfm-mode. */
  if (!self.options.gfm) {
    return;
  }

  /* Get the rows.
   * Detecting tables soon is hard, so there are some
   * checks for performance here, such as the minimum
   * number of rows, and allowed characters in the
   * alignment row. */
  index = 0;
  lineCount = 0;
  length = value.length + 1;
  lines = [];

  while (index < length) {
    lineIndex = value.indexOf(C_NEWLINE, index);
    pipeIndex = value.indexOf(C_PIPE, index + 1);

    if (lineIndex === -1) {
      lineIndex = value.length;
    }

    if (pipeIndex === -1 || pipeIndex > lineIndex) {
      if (lineCount < MIN_TABLE_ROWS) {
        return;
      }

      break;
    }

    lines.push(value.slice(index, lineIndex));
    lineCount++;
    index = lineIndex + 1;
  }

  /* Parse the alignment row. */
  subvalue = lines.join(C_NEWLINE);
  alignments = lines.splice(1, 1)[0] || [];
  index = 0;
  length = alignments.length;
  lineCount--;
  alignment = false;
  align = [];

  while (index < length) {
    character = alignments.charAt(index);

    if (character === C_PIPE) {
      hasDash = null;

      if (alignment === false) {
        if (first === false) {
          return;
        }
      } else {
        align.push(alignment);
        alignment = false;
      }

      first = false;
    } else if (character === C_DASH) {
      hasDash = true;
      alignment = alignment || TABLE_ALIGN_NONE;
    } else if (character === C_COLON) {
      if (alignment === TABLE_ALIGN_LEFT) {
        alignment = TABLE_ALIGN_CENTER;
      } else if (hasDash && alignment === TABLE_ALIGN_NONE) {
        alignment = TABLE_ALIGN_RIGHT;
      } else {
        alignment = TABLE_ALIGN_LEFT;
      }
    } else if (!whitespace(character)) {
      return;
    }

    index++;
  }

  if (alignment !== false) {
    align.push(alignment);
  }

  /* Exit when without enough columns. */
  if (align.length < MIN_TABLE_COLUMNS) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  /* Parse the rows. */
  position = -1;
  rows = [];

  table = eat(subvalue).reset({
    type: 'table',
    align: align,
    children: rows
  });

  while (++position < lineCount) {
    line = lines[position];
    row = {type: 'tableRow', children: []};

    /* Eat a newline character when this is not the
     * first row. */
    if (position) {
      eat(C_NEWLINE);
    }

    /* Eat the row. */
    eat(line).reset(row, table);

    length = line.length + 1;
    index = 0;
    queue = '';
    cell = '';
    preamble = true;
    count = null;
    opening = null;

    while (index < length) {
      character = line.charAt(index);

      if (character === C_TAB || character === C_SPACE) {
        if (cell) {
          queue += character;
        } else {
          eat(character);
        }

        index++;
        continue;
      }

      if (character === '' || character === C_PIPE) {
        if (preamble) {
          eat(character);
        } else {
          if (character && opening) {
            queue += character;
            index++;
            continue;
          }

          if ((cell || character) && !preamble) {
            subvalue = cell;

            if (queue.length > 1) {
              if (character) {
                subvalue += queue.slice(0, queue.length - 1);
                queue = queue.charAt(queue.length - 1);
              } else {
                subvalue += queue;
                queue = '';
              }
            }

            now = eat.now();

            eat(subvalue)({
              type: 'tableCell',
              children: self.tokenizeInline(cell, now)
            }, row);
          }

          eat(queue + character);

          queue = '';
          cell = '';
        }
      } else {
        if (queue) {
          cell += queue;
          queue = '';
        }

        cell += character;

        if (character === C_BACKSLASH && index !== length - 2) {
          cell += line.charAt(index + 1);
          index++;
        }

        if (character === C_TICK) {
          count = 1;

          while (line.charAt(index + 1) === character) {
            cell += character;
            index++;
            count++;
          }

          if (!opening) {
            opening = count;
          } else if (count >= opening) {
            opening = 0;
          }
        }
      }

      preamble = false;
      index++;
    }

    /* Eat the alignment row. */
    if (!position) {
      eat(C_NEWLINE + alignments);
    }
  }

  return table;
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js"}],"node_modules/remark-parse/lib/tokenize/paragraph.js":[function(require,module,exports) {
'use strict';

var trim = require('trim');
var decimal = require('is-decimal');
var trimTrailingLines = require('trim-trailing-lines');
var interrupt = require('../util/interrupt');

module.exports = paragraph;

var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';

var TAB_SIZE = 4;

/* Tokenise paragraph. */
function paragraph(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var commonmark = settings.commonmark;
  var gfm = settings.gfm;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptParagraph;
  var index = value.indexOf(C_NEWLINE);
  var length = value.length;
  var position;
  var subvalue;
  var character;
  var size;
  var now;

  while (index < length) {
    /* Eat everything if there’s no following newline. */
    if (index === -1) {
      index = length;
      break;
    }

    /* Stop if the next character is NEWLINE. */
    if (value.charAt(index + 1) === C_NEWLINE) {
      break;
    }

    /* In commonmark-mode, following indented lines
     * are part of the paragraph. */
    if (commonmark) {
      size = 0;
      position = index + 1;

      while (position < length) {
        character = value.charAt(position);

        if (character === C_TAB) {
          size = TAB_SIZE;
          break;
        } else if (character === C_SPACE) {
          size++;
        } else {
          break;
        }

        position++;
      }

      if (size >= TAB_SIZE) {
        index = value.indexOf(C_NEWLINE, index + 1);
        continue;
      }
    }

    subvalue = value.slice(index + 1);

    /* Check if the following code contains a possible
     * block. */
    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {
      break;
    }

    /* Break if the following line starts a list, when
     * already in a list, or when in commonmark, or when
     * in gfm mode and the bullet is *not* numeric. */
    if (
      tokenizers.list.call(self, eat, subvalue, true) &&
      (
        self.inList ||
        commonmark ||
        (gfm && !decimal(trim.left(subvalue).charAt(0)))
      )
    ) {
      break;
    }

    position = index;
    index = value.indexOf(C_NEWLINE, index + 1);

    if (index !== -1 && trim(value.slice(position, index)) === '') {
      index = position;
      break;
    }
  }

  subvalue = value.slice(0, index);

  if (trim(subvalue) === '') {
    eat(subvalue);

    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  now = eat.now();
  subvalue = trimTrailingLines(subvalue);

  return eat(subvalue)({
    type: 'paragraph',
    children: self.tokenizeInline(subvalue, now)
  });
}

},{"trim":"node_modules/trim/index.js","is-decimal":"node_modules/is-decimal/index.js","trim-trailing-lines":"node_modules/trim-trailing-lines/index.js","../util/interrupt":"node_modules/remark-parse/lib/util/interrupt.js"}],"node_modules/remark-parse/lib/locate/escape.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  return value.indexOf('\\', fromIndex);
}

},{}],"node_modules/remark-parse/lib/tokenize/escape.js":[function(require,module,exports) {
'use strict';

var locate = require('../locate/escape');

module.exports = escape;
escape.locator = locate;

function escape(eat, value, silent) {
  var self = this;
  var character;
  var node;

  if (value.charAt(0) === '\\') {
    character = value.charAt(1);

    if (self.escape.indexOf(character) !== -1) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      if (character === '\n') {
        node = {type: 'break'};
      } else {
        node = {
          type: 'text',
          value: character
        };
      }

      return eat('\\' + character)(node);
    }
  }
}

},{"../locate/escape":"node_modules/remark-parse/lib/locate/escape.js"}],"node_modules/remark-parse/lib/locate/tag.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  return value.indexOf('<', fromIndex);
}

},{}],"node_modules/remark-parse/lib/tokenize/auto-link.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var decode = require('parse-entities');
var locate = require('../locate/tag');

module.exports = autoLink;
autoLink.locator = locate;
autoLink.notInLink = true;

var C_LT = '<';
var C_GT = '>';
var C_AT_SIGN = '@';
var C_SLASH = '/';
var MAILTO = 'mailto:';
var MAILTO_LENGTH = MAILTO.length;

/* Tokenise a link. */
function autoLink(eat, value, silent) {
  var self;
  var subvalue;
  var length;
  var index;
  var queue;
  var character;
  var hasAtCharacter;
  var link;
  var now;
  var content;
  var tokenizers;
  var exit;

  if (value.charAt(0) !== C_LT) {
    return;
  }

  self = this;
  subvalue = '';
  length = value.length;
  index = 0;
  queue = '';
  hasAtCharacter = false;
  link = '';

  index++;
  subvalue = C_LT;

  while (index < length) {
    character = value.charAt(index);

    if (
      whitespace(character) ||
      character === C_GT ||
      character === C_AT_SIGN ||
      (character === ':' && value.charAt(index + 1) === C_SLASH)
    ) {
      break;
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  link += queue;
  queue = '';

  character = value.charAt(index);
  link += character;
  index++;

  if (character === C_AT_SIGN) {
    hasAtCharacter = true;
  } else {
    if (
      character !== ':' ||
      value.charAt(index + 1) !== C_SLASH
    ) {
      return;
    }

    link += C_SLASH;
    index++;
  }

  while (index < length) {
    character = value.charAt(index);

    if (whitespace(character) || character === C_GT) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  if (!queue || character !== C_GT) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  link += queue;
  content = link;
  subvalue += link + character;
  now = eat.now();
  now.column++;
  now.offset++;

  if (hasAtCharacter) {
    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {
      content = content.substr(MAILTO_LENGTH);
      now.column += MAILTO_LENGTH;
      now.offset += MAILTO_LENGTH;
    } else {
      link = MAILTO + link;
    }
  }

  /* Temporarily remove all tokenizers except text in autolinks. */
  tokenizers = self.inlineTokenizers;
  self.inlineTokenizers = {text: tokenizers.text};

  exit = self.enterLink();

  content = self.tokenizeInline(content, now);

  self.inlineTokenizers = tokenizers;
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(link, {nonTerminated: false}),
    children: content
  });
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","parse-entities":"node_modules/parse-entities/index.js","../locate/tag":"node_modules/remark-parse/lib/locate/tag.js"}],"node_modules/remark-parse/lib/locate/url.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

var PROTOCOLS = ['https://', 'http://', 'mailto:'];

function locate(value, fromIndex) {
  var length = PROTOCOLS.length;
  var index = -1;
  var min = -1;
  var position;

  if (!this.options.gfm) {
    return -1;
  }

  while (++index < length) {
    position = value.indexOf(PROTOCOLS[index], fromIndex);

    if (position !== -1 && (position < min || min === -1)) {
      min = position;
    }
  }

  return min;
}

},{}],"node_modules/remark-parse/lib/tokenize/url.js":[function(require,module,exports) {
'use strict';

var decode = require('parse-entities');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/url');

module.exports = url;
url.locator = locate;
url.notInLink = true;

var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_AT_SIGN = '@';

var HTTP_PROTOCOL = 'http://';
var HTTPS_PROTOCOL = 'https://';
var MAILTO_PROTOCOL = 'mailto:';

var PROTOCOLS = [
  HTTP_PROTOCOL,
  HTTPS_PROTOCOL,
  MAILTO_PROTOCOL
];

var PROTOCOLS_LENGTH = PROTOCOLS.length;

function url(eat, value, silent) {
  var self = this;
  var subvalue;
  var content;
  var character;
  var index;
  var position;
  var protocol;
  var match;
  var length;
  var queue;
  var parenCount;
  var nextCharacter;
  var exit;

  if (!self.options.gfm) {
    return;
  }

  subvalue = '';
  index = -1;
  length = PROTOCOLS_LENGTH;

  while (++index < length) {
    protocol = PROTOCOLS[index];
    match = value.slice(0, protocol.length);

    if (match.toLowerCase() === protocol) {
      subvalue = match;
      break;
    }
  }

  if (!subvalue) {
    return;
  }

  index = subvalue.length;
  length = value.length;
  queue = '';
  parenCount = 0;

  while (index < length) {
    character = value.charAt(index);

    if (whitespace(character) || character === C_LT) {
      break;
    }

    if (
      character === '.' ||
      character === ',' ||
      character === ':' ||
      character === ';' ||
      character === '"' ||
      character === '\'' ||
      character === ')' ||
      character === ']'
    ) {
      nextCharacter = value.charAt(index + 1);

      if (!nextCharacter || whitespace(nextCharacter)) {
        break;
      }
    }

    if (character === C_PAREN_OPEN || character === C_BRACKET_OPEN) {
      parenCount++;
    }

    if (character === C_PAREN_CLOSE || character === C_BRACKET_CLOSE) {
      parenCount--;

      if (parenCount < 0) {
        break;
      }
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue += queue;
  content = subvalue;

  if (protocol === MAILTO_PROTOCOL) {
    position = queue.indexOf(C_AT_SIGN);

    if (position === -1 || position === length - 1) {
      return;
    }

    content = content.substr(MAILTO_PROTOCOL.length);
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  exit = self.enterLink();
  content = self.tokenizeInline(content, eat.now());
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(subvalue, {nonTerminated: false}),
    children: content
  });
}

},{"parse-entities":"node_modules/parse-entities/index.js","is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/url":"node_modules/remark-parse/lib/locate/url.js"}],"node_modules/remark-parse/lib/tokenize/html-inline.js":[function(require,module,exports) {
'use strict';

var alphabetical = require('is-alphabetical');
var locate = require('../locate/tag');
var tag = require('../util/html').tag;

module.exports = inlineHTML;
inlineHTML.locator = locate;

var EXPRESSION_HTML_LINK_OPEN = /^<a /i;
var EXPRESSION_HTML_LINK_CLOSE = /^<\/a>/i;

function inlineHTML(eat, value, silent) {
  var self = this;
  var length = value.length;
  var character;
  var subvalue;

  if (value.charAt(0) !== '<' || length < 3) {
    return;
  }

  character = value.charAt(1);

  if (
    !alphabetical(character) &&
    character !== '?' &&
    character !== '!' &&
    character !== '/'
  ) {
    return;
  }

  subvalue = value.match(tag);

  if (!subvalue) {
    return;
  }

  /* istanbul ignore if - not used yet. */
  if (silent) {
    return true;
  }

  subvalue = subvalue[0];

  if (!self.inLink && EXPRESSION_HTML_LINK_OPEN.test(subvalue)) {
    self.inLink = true;
  } else if (self.inLink && EXPRESSION_HTML_LINK_CLOSE.test(subvalue)) {
    self.inLink = false;
  }

  return eat(subvalue)({type: 'html', value: subvalue});
}

},{"is-alphabetical":"node_modules/is-alphabetical/index.js","../locate/tag":"node_modules/remark-parse/lib/locate/tag.js","../util/html":"node_modules/remark-parse/lib/util/html.js"}],"node_modules/remark-parse/lib/locate/link.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  var link = value.indexOf('[', fromIndex);
  var image = value.indexOf('![', fromIndex);

  if (image === -1) {
    return link;
  }

  /* Link can never be `-1` if an image is found, so we don’t need
   * to check for that :) */
  return link < image ? link : image;
}

},{}],"node_modules/remark-parse/lib/tokenize/link.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var locate = require('../locate/link');

module.exports = link;
link.locator = locate;

var own = {}.hasOwnProperty;

var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_GT = '>';
var C_TICK = '`';
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';

/* Map of characters, which can be used to mark link
 * and image titles. */
var LINK_MARKERS = {};

LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;

/* Map of characters, which can be used to mark link
 * and image titles in commonmark-mode. */
var COMMONMARK_LINK_MARKERS = {};

COMMONMARK_LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_PAREN_OPEN] = C_PAREN_CLOSE;

function link(eat, value, silent) {
  var self = this;
  var subvalue = '';
  var index = 0;
  var character = value.charAt(0);
  var pedantic = self.options.pedantic;
  var commonmark = self.options.commonmark;
  var gfm = self.options.gfm;
  var closed;
  var count;
  var opening;
  var beforeURL;
  var beforeTitle;
  var subqueue;
  var hasMarker;
  var markers;
  var isImage;
  var content;
  var marker;
  var length;
  var title;
  var depth;
  var queue;
  var url;
  var now;
  var exit;
  var node;

  /* Detect whether this is an image. */
  if (character === '!') {
    isImage = true;
    subvalue = character;
    character = value.charAt(++index);
  }

  /* Eat the opening. */
  if (character !== C_BRACKET_OPEN) {
    return;
  }

  /* Exit when this is a link and we’re already inside
   * a link. */
  if (!isImage && self.inLink) {
    return;
  }

  subvalue += character;
  queue = '';
  index++;

  /* Eat the content. */
  length = value.length;
  now = eat.now();
  depth = 0;

  now.column += index;
  now.offset += index;

  while (index < length) {
    character = value.charAt(index);
    subqueue = character;

    if (character === C_TICK) {
      /* Inline-code in link content. */
      count = 1;

      while (value.charAt(index + 1) === C_TICK) {
        subqueue += character;
        index++;
        count++;
      }

      if (!opening) {
        opening = count;
      } else if (count >= opening) {
        opening = 0;
      }
    } else if (character === C_BACKSLASH) {
      /* Allow brackets to be escaped. */
      index++;
      subqueue += value.charAt(index);
    /* In GFM mode, brackets in code still count.
     * In all other modes, they don’t.  This empty
     * block prevents the next statements are
     * entered. */
    } else if ((!opening || gfm) && character === C_BRACKET_OPEN) {
      depth++;
    } else if ((!opening || gfm) && character === C_BRACKET_CLOSE) {
      if (depth) {
        depth--;
      } else {
        /* Allow white-space between content and
         * url in GFM mode. */
        if (!pedantic) {
          while (index < length) {
            character = value.charAt(index + 1);

            if (!whitespace(character)) {
              break;
            }

            subqueue += character;
            index++;
          }
        }

        if (value.charAt(index + 1) !== C_PAREN_OPEN) {
          return;
        }

        subqueue += C_PAREN_OPEN;
        closed = true;
        index++;

        break;
      }
    }

    queue += subqueue;
    subqueue = '';
    index++;
  }

  /* Eat the content closing. */
  if (!closed) {
    return;
  }

  content = queue;
  subvalue += queue + subqueue;
  index++;

  /* Eat white-space. */
  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat the URL. */
  character = value.charAt(index);
  markers = commonmark ? COMMONMARK_LINK_MARKERS : LINK_MARKERS;
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT) {
    index++;
    beforeURL += C_LT;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_GT) {
        break;
      }

      if (commonmark && character === '\n') {
        return;
      }

      queue += character;
      index++;
    }

    if (value.charAt(index) !== C_GT) {
      return;
    }

    subvalue += C_LT + queue + C_GT;
    url = queue;
    index++;
  } else {
    character = null;
    subqueue = '';

    while (index < length) {
      character = value.charAt(index);

      if (subqueue && own.call(markers, character)) {
        break;
      }

      if (whitespace(character)) {
        if (!pedantic) {
          break;
        }

        subqueue += character;
      } else {
        if (character === C_PAREN_OPEN) {
          depth++;
        } else if (character === C_PAREN_CLOSE) {
          if (depth === 0) {
            break;
          }

          depth--;
        }

        queue += subqueue;
        subqueue = '';

        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }

        queue += character;
      }

      index++;
    }

    subvalue += queue;
    url = queue;
    index = subvalue.length;
  }

  /* Eat white-space. */
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  subvalue += queue;

  /* Eat the title. */
  if (queue && own.call(markers, character)) {
    index++;
    subvalue += character;
    queue = '';
    marker = markers[character];
    beforeTitle = subvalue;

    /* In commonmark-mode, things are pretty easy: the
     * marker cannot occur inside the title.
     *
     * Non-commonmark does, however, support nested
     * delimiters. */
    if (commonmark) {
      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          break;
        }

        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }

        index++;
        queue += character;
      }

      character = value.charAt(index);

      if (character !== marker) {
        return;
      }

      title = queue;
      subvalue += queue + character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (!whitespace(character)) {
          break;
        }

        subvalue += character;
        index++;
      }
    } else {
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          if (hasMarker) {
            queue += marker + subqueue;
            subqueue = '';
          }

          hasMarker = true;
        } else if (!hasMarker) {
          queue += character;
        } else if (character === C_PAREN_CLOSE) {
          subvalue += queue + marker + subqueue;
          title = queue;
          break;
        } else if (whitespace(character)) {
          subqueue += character;
        } else {
          queue += marker + subqueue + character;
          subqueue = '';
          hasMarker = false;
        }

        index++;
      }
    }
  }

  if (value.charAt(index) !== C_PAREN_CLOSE) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  subvalue += C_PAREN_CLOSE;

  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {nonTerminated: false});

  if (title) {
    beforeTitle = eat(beforeTitle).test().end;
    title = self.decode.raw(self.unescape(title), beforeTitle);
  }

  node = {
    type: isImage ? 'image' : 'link',
    title: title || null,
    url: url
  };

  if (isImage) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  } else {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  }

  return eat(subvalue)(node);
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/link":"node_modules/remark-parse/lib/locate/link.js"}],"node_modules/remark-parse/lib/tokenize/reference.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var locate = require('../locate/link');
var normalize = require('../util/normalize');

module.exports = reference;
reference.locator = locate;

var T_LINK = 'link';
var T_IMAGE = 'image';
var T_FOOTNOTE = 'footnote';
var REFERENCE_TYPE_SHORTCUT = 'shortcut';
var REFERENCE_TYPE_COLLAPSED = 'collapsed';
var REFERENCE_TYPE_FULL = 'full';
var C_CARET = '^';
var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';

function reference(eat, value, silent) {
  var self = this;
  var character = value.charAt(0);
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var intro = '';
  var type = T_LINK;
  var referenceType = REFERENCE_TYPE_SHORTCUT;
  var content;
  var identifier;
  var now;
  var node;
  var exit;
  var queue;
  var bracketed;
  var depth;

  /* Check whether we’re eating an image. */
  if (character === '!') {
    type = T_IMAGE;
    intro = character;
    character = value.charAt(++index);
  }

  if (character !== C_BRACKET_OPEN) {
    return;
  }

  index++;
  intro += character;
  queue = '';

  /* Check whether we’re eating a footnote. */
  if (self.options.footnotes && value.charAt(index) === C_CARET) {
    /* Exit if `![^` is found, so the `!` will be seen as text after this,
     * and we’ll enter this function again when `[^` is found. */
    if (type === T_IMAGE) {
      return;
    }

    intro += C_CARET;
    index++;
    type = T_FOOTNOTE;
  }

  /* Eat the text. */
  depth = 0;

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_OPEN) {
      bracketed = true;
      depth++;
    } else if (character === C_BRACKET_CLOSE) {
      if (!depth) {
        break;
      }

      depth--;
    }

    if (character === C_BACKSLASH) {
      queue += C_BACKSLASH;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }

  subvalue = queue;
  content = queue;
  character = value.charAt(index);

  if (character !== C_BRACKET_CLOSE) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  /* Inline footnotes cannot have an identifier. */
  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {
    identifier = '';
    queue += character;
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {
        break;
      }

      if (character === C_BACKSLASH) {
        identifier += C_BACKSLASH;
        character = value.charAt(++index);
      }

      identifier += character;
      index++;
    }

    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;
      queue += identifier + character;
      index++;
    } else {
      identifier = '';
    }

    subvalue += queue;
    queue = '';
  } else {
    if (!content) {
      return;
    }

    identifier = content;
  }

  /* Brackets cannot be inside the identifier. */
  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {
    return;
  }

  subvalue = intro + subvalue;

  if (type === T_LINK && self.inLink) {
    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {
    return eat(subvalue)({
      type: 'footnote',
      children: this.tokenizeInline(content, eat.now())
    });
  }

  now = eat.now();
  now.column += intro.length;
  now.offset += intro.length;
  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;

  node = {
    type: type + 'Reference',
    identifier: normalize(identifier)
  };

  if (type === T_LINK || type === T_IMAGE) {
    node.referenceType = referenceType;
  }

  if (type === T_LINK) {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  } else if (type === T_IMAGE) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  }

  return eat(subvalue)(node);
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/link":"node_modules/remark-parse/lib/locate/link.js","../util/normalize":"node_modules/remark-parse/lib/util/normalize.js"}],"node_modules/remark-parse/lib/locate/strong.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  var asterisk = value.indexOf('**', fromIndex);
  var underscore = value.indexOf('__', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

},{}],"node_modules/remark-parse/lib/tokenize/strong.js":[function(require,module,exports) {
'use strict';

var trim = require('trim');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/strong');

module.exports = strong;
strong.locator = locate;

var C_ASTERISK = '*';
var C_UNDERSCORE = '_';

function strong(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (
    (character !== C_ASTERISK && character !== C_UNDERSCORE) ||
    value.charAt(++index) !== character
  ) {
    return;
  }

  pedantic = self.options.pedantic;
  marker = character;
  subvalue = marker + marker;
  length = value.length;
  index++;
  queue = '';
  character = '';

  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (
      character === marker &&
      value.charAt(index + 1) === marker &&
      (!pedantic || !whitespace(prev))
    ) {
      character = value.charAt(index + 2);

      if (character !== marker) {
        if (!trim(queue)) {
          return;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column += 2;
        now.offset += 2;

        return eat(subvalue + queue + subvalue)({
          type: 'strong',
          children: self.tokenizeInline(queue, now)
        });
      }
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

},{"trim":"node_modules/trim/index.js","is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/strong":"node_modules/remark-parse/lib/locate/strong.js"}],"node_modules/is-word-character/index.js":[function(require,module,exports) {
'use strict'

module.exports = wordCharacter

var fromCode = String.fromCharCode
var re = /\w/

// Check if the given character code, or the character code at the first
// character, is a word character.
function wordCharacter(character) {
  return re.test(
    typeof character === 'number' ? fromCode(character) : character.charAt(0)
  )
}

},{}],"node_modules/remark-parse/lib/locate/emphasis.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  var asterisk = value.indexOf('*', fromIndex);
  var underscore = value.indexOf('_', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

},{}],"node_modules/remark-parse/lib/tokenize/emphasis.js":[function(require,module,exports) {
'use strict';

var trim = require('trim');
var word = require('is-word-character');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/emphasis');

module.exports = emphasis;
emphasis.locator = locate;

var C_ASTERISK = '*';
var C_UNDERSCORE = '_';

function emphasis(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (character !== C_ASTERISK && character !== C_UNDERSCORE) {
    return;
  }

  pedantic = self.options.pedantic;
  subvalue = character;
  marker = character;
  length = value.length;
  index++;
  queue = '';
  character = '';

  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && (!pedantic || !whitespace(prev))) {
      character = value.charAt(++index);

      if (character !== marker) {
        if (!trim(queue) || prev === marker) {
          return;
        }

        if (!pedantic && marker === C_UNDERSCORE && word(character)) {
          queue += marker;
          continue;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column++;
        now.offset++;

        return eat(subvalue + queue + marker)({
          type: 'emphasis',
          children: self.tokenizeInline(queue, now)
        });
      }

      queue += marker;
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

},{"trim":"node_modules/trim/index.js","is-word-character":"node_modules/is-word-character/index.js","is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/emphasis":"node_modules/remark-parse/lib/locate/emphasis.js"}],"node_modules/remark-parse/lib/locate/delete.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  return value.indexOf('~~', fromIndex);
}

},{}],"node_modules/remark-parse/lib/tokenize/delete.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var locate = require('../locate/delete');

module.exports = strikethrough;
strikethrough.locator = locate;

var C_TILDE = '~';
var DOUBLE = '~~';

function strikethrough(eat, value, silent) {
  var self = this;
  var character = '';
  var previous = '';
  var preceding = '';
  var subvalue = '';
  var index;
  var length;
  var now;

  if (
    !self.options.gfm ||
    value.charAt(0) !== C_TILDE ||
    value.charAt(1) !== C_TILDE ||
    whitespace(value.charAt(2))
  ) {
    return;
  }

  index = 1;
  length = value.length;
  now = eat.now();
  now.column += 2;
  now.offset += 2;

  while (++index < length) {
    character = value.charAt(index);

    if (
      character === C_TILDE &&
      previous === C_TILDE &&
      (!preceding || !whitespace(preceding))
    ) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      return eat(DOUBLE + subvalue + DOUBLE)({
        type: 'delete',
        children: self.tokenizeInline(subvalue, now)
      });
    }

    subvalue += previous;
    preceding = previous;
    previous = character;
  }
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/delete":"node_modules/remark-parse/lib/locate/delete.js"}],"node_modules/remark-parse/lib/locate/code-inline.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  return value.indexOf('`', fromIndex);
}

},{}],"node_modules/remark-parse/lib/tokenize/code-inline.js":[function(require,module,exports) {
'use strict';

var whitespace = require('is-whitespace-character');
var locate = require('../locate/code-inline');

module.exports = inlineCode;
inlineCode.locator = locate;

var C_TICK = '`';

/* Tokenise inline code. */
function inlineCode(eat, value, silent) {
  var length = value.length;
  var index = 0;
  var queue = '';
  var tickQueue = '';
  var contentQueue;
  var subqueue;
  var count;
  var openingCount;
  var subvalue;
  var character;
  var found;
  var next;

  while (index < length) {
    if (value.charAt(index) !== C_TICK) {
      break;
    }

    queue += C_TICK;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue = queue;
  openingCount = index;
  queue = '';
  next = value.charAt(index);
  count = 0;

  while (index < length) {
    character = next;
    next = value.charAt(index + 1);

    if (character === C_TICK) {
      count++;
      tickQueue += character;
    } else {
      count = 0;
      queue += character;
    }

    if (count && next !== C_TICK) {
      if (count === openingCount) {
        subvalue += queue + tickQueue;
        found = true;
        break;
      }

      queue += tickQueue;
      tickQueue = '';
    }

    index++;
  }

  if (!found) {
    if (openingCount % 2 !== 0) {
      return;
    }

    queue = '';
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  contentQueue = '';
  subqueue = '';
  length = queue.length;
  index = -1;

  while (++index < length) {
    character = queue.charAt(index);

    if (whitespace(character)) {
      subqueue += character;
      continue;
    }

    if (subqueue) {
      if (contentQueue) {
        contentQueue += subqueue;
      }

      subqueue = '';
    }

    contentQueue += character;
  }

  return eat(subvalue)({
    type: 'inlineCode',
    value: contentQueue
  });
}

},{"is-whitespace-character":"node_modules/is-whitespace-character/index.js","../locate/code-inline":"node_modules/remark-parse/lib/locate/code-inline.js"}],"node_modules/remark-parse/lib/locate/break.js":[function(require,module,exports) {
'use strict';

module.exports = locate;

function locate(value, fromIndex) {
  var index = value.indexOf('\n', fromIndex);

  while (index > fromIndex) {
    if (value.charAt(index - 1) !== ' ') {
      break;
    }

    index--;
  }

  return index;
}

},{}],"node_modules/remark-parse/lib/tokenize/break.js":[function(require,module,exports) {
'use strict';

var locate = require('../locate/break');

module.exports = hardBreak;
hardBreak.locator = locate;

var MIN_BREAK_LENGTH = 2;

function hardBreak(eat, value, silent) {
  var length = value.length;
  var index = -1;
  var queue = '';
  var character;

  while (++index < length) {
    character = value.charAt(index);

    if (character === '\n') {
      if (index < MIN_BREAK_LENGTH) {
        return;
      }

      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      queue += character;

      return eat(queue)({type: 'break'});
    }

    if (character !== ' ') {
      return;
    }

    queue += character;
  }
}

},{"../locate/break":"node_modules/remark-parse/lib/locate/break.js"}],"node_modules/remark-parse/lib/tokenize/text.js":[function(require,module,exports) {
'use strict';

module.exports = text;

function text(eat, value, silent) {
  var self = this;
  var methods;
  var tokenizers;
  var index;
  var length;
  var subvalue;
  var position;
  var tokenizer;
  var name;
  var min;
  var now;

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  methods = self.inlineMethods;
  length = methods.length;
  tokenizers = self.inlineTokenizers;
  index = -1;
  min = value.length;

  while (++index < length) {
    name = methods[index];

    if (name === 'text' || !tokenizers[name]) {
      continue;
    }

    tokenizer = tokenizers[name].locator;

    if (!tokenizer) {
      eat.file.fail('Missing locator: `' + name + '`');
    }

    position = tokenizer.call(self, value, 1);

    if (position !== -1 && position < min) {
      min = position;
    }
  }

  subvalue = value.slice(0, min);
  now = eat.now();

  self.decode(subvalue, now, function (content, position, source) {
    eat(source || content)({
      type: 'text',
      value: content
    });
  });
}

},{}],"node_modules/remark-parse/lib/parser.js":[function(require,module,exports) {
'use strict';

var xtend = require('xtend');
var toggle = require('state-toggle');
var vfileLocation = require('vfile-location');
var unescape = require('./unescape');
var decode = require('./decode');
var tokenizer = require('./tokenizer');

module.exports = Parser;

function Parser(doc, file) {
  this.file = file;
  this.offset = {};
  this.options = xtend(this.options);
  this.setOptions({});

  this.inList = false;
  this.inBlock = false;
  this.inLink = false;
  this.atStart = true;

  this.toOffset = vfileLocation(file).toOffset;
  this.unescape = unescape(this, 'escape');
  this.decode = decode(this);
}

var proto = Parser.prototype;

/* Expose core. */
proto.setOptions = require('./set-options');
proto.parse = require('./parse');

/* Expose `defaults`. */
proto.options = require('./defaults');

/* Enter and exit helpers. */
proto.exitStart = toggle('atStart', true);
proto.enterList = toggle('inList', false);
proto.enterLink = toggle('inLink', false);
proto.enterBlock = toggle('inBlock', false);

/* Nodes that can interupt a paragraph:
 *
 * ```markdown
 * A paragraph, followed by a thematic break.
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the paragraph. */
proto.interruptParagraph = [
  ['thematicBreak'],
  ['atxHeading'],
  ['fencedCode'],
  ['blockquote'],
  ['html'],
  ['setextHeading', {commonmark: false}],
  ['definition', {commonmark: false}],
  ['footnote', {commonmark: false}]
];

/* Nodes that can interupt a list:
 *
 * ```markdown
 * - One
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the list. */
proto.interruptList = [
  ['atxHeading', {pedantic: false}],
  ['fencedCode', {pedantic: false}],
  ['thematicBreak', {pedantic: false}],
  ['definition', {commonmark: false}],
  ['footnote', {commonmark: false}]
];

/* Nodes that can interupt a blockquote:
 *
 * ```markdown
 * > A paragraph.
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the blockquote. */
proto.interruptBlockquote = [
  ['indentedCode', {commonmark: true}],
  ['fencedCode', {commonmark: true}],
  ['atxHeading', {commonmark: true}],
  ['setextHeading', {commonmark: true}],
  ['thematicBreak', {commonmark: true}],
  ['html', {commonmark: true}],
  ['list', {commonmark: true}],
  ['definition', {commonmark: false}],
  ['footnote', {commonmark: false}]
];

/* Handlers. */
proto.blockTokenizers = {
  newline: require('./tokenize/newline'),
  indentedCode: require('./tokenize/code-indented'),
  fencedCode: require('./tokenize/code-fenced'),
  blockquote: require('./tokenize/blockquote'),
  atxHeading: require('./tokenize/heading-atx'),
  thematicBreak: require('./tokenize/thematic-break'),
  list: require('./tokenize/list'),
  setextHeading: require('./tokenize/heading-setext'),
  html: require('./tokenize/html-block'),
  footnote: require('./tokenize/footnote-definition'),
  definition: require('./tokenize/definition'),
  table: require('./tokenize/table'),
  paragraph: require('./tokenize/paragraph')
};

proto.inlineTokenizers = {
  escape: require('./tokenize/escape'),
  autoLink: require('./tokenize/auto-link'),
  url: require('./tokenize/url'),
  html: require('./tokenize/html-inline'),
  link: require('./tokenize/link'),
  reference: require('./tokenize/reference'),
  strong: require('./tokenize/strong'),
  emphasis: require('./tokenize/emphasis'),
  deletion: require('./tokenize/delete'),
  code: require('./tokenize/code-inline'),
  break: require('./tokenize/break'),
  text: require('./tokenize/text')
};

/* Expose precedence. */
proto.blockMethods = keys(proto.blockTokenizers);
proto.inlineMethods = keys(proto.inlineTokenizers);

/* Tokenizers. */
proto.tokenizeBlock = tokenizer('block');
proto.tokenizeInline = tokenizer('inline');
proto.tokenizeFactory = tokenizer;

/* Get all keys in `value`. */
function keys(value) {
  var result = [];
  var key;

  for (key in value) {
    result.push(key);
  }

  return result;
}

},{"xtend":"node_modules/xtend/immutable.js","state-toggle":"node_modules/state-toggle/index.js","vfile-location":"node_modules/vfile-location/index.js","./unescape":"node_modules/remark-parse/lib/unescape.js","./decode":"node_modules/remark-parse/lib/decode.js","./tokenizer":"node_modules/remark-parse/lib/tokenizer.js","./set-options":"node_modules/remark-parse/lib/set-options.js","./parse":"node_modules/remark-parse/lib/parse.js","./defaults":"node_modules/remark-parse/lib/defaults.js","./tokenize/newline":"node_modules/remark-parse/lib/tokenize/newline.js","./tokenize/code-indented":"node_modules/remark-parse/lib/tokenize/code-indented.js","./tokenize/code-fenced":"node_modules/remark-parse/lib/tokenize/code-fenced.js","./tokenize/blockquote":"node_modules/remark-parse/lib/tokenize/blockquote.js","./tokenize/heading-atx":"node_modules/remark-parse/lib/tokenize/heading-atx.js","./tokenize/thematic-break":"node_modules/remark-parse/lib/tokenize/thematic-break.js","./tokenize/list":"node_modules/remark-parse/lib/tokenize/list.js","./tokenize/heading-setext":"node_modules/remark-parse/lib/tokenize/heading-setext.js","./tokenize/html-block":"node_modules/remark-parse/lib/tokenize/html-block.js","./tokenize/footnote-definition":"node_modules/remark-parse/lib/tokenize/footnote-definition.js","./tokenize/definition":"node_modules/remark-parse/lib/tokenize/definition.js","./tokenize/table":"node_modules/remark-parse/lib/tokenize/table.js","./tokenize/paragraph":"node_modules/remark-parse/lib/tokenize/paragraph.js","./tokenize/escape":"node_modules/remark-parse/lib/tokenize/escape.js","./tokenize/auto-link":"node_modules/remark-parse/lib/tokenize/auto-link.js","./tokenize/url":"node_modules/remark-parse/lib/tokenize/url.js","./tokenize/html-inline":"node_modules/remark-parse/lib/tokenize/html-inline.js","./tokenize/link":"node_modules/remark-parse/lib/tokenize/link.js","./tokenize/reference":"node_modules/remark-parse/lib/tokenize/reference.js","./tokenize/strong":"node_modules/remark-parse/lib/tokenize/strong.js","./tokenize/emphasis":"node_modules/remark-parse/lib/tokenize/emphasis.js","./tokenize/delete":"node_modules/remark-parse/lib/tokenize/delete.js","./tokenize/code-inline":"node_modules/remark-parse/lib/tokenize/code-inline.js","./tokenize/break":"node_modules/remark-parse/lib/tokenize/break.js","./tokenize/text":"node_modules/remark-parse/lib/tokenize/text.js"}],"node_modules/remark-parse/index.js":[function(require,module,exports) {
'use strict';

var unherit = require('unherit');
var xtend = require('xtend');
var Parser = require('./lib/parser.js');

module.exports = parse;
parse.Parser = Parser;

function parse(options) {
  var Local = unherit(Parser);
  Local.prototype.options = xtend(Local.prototype.options, this.data('settings'), options);
  this.Parser = Local;
}

},{"unherit":"node_modules/unherit/index.js","xtend":"node_modules/xtend/immutable.js","./lib/parser.js":"node_modules/remark-parse/lib/parser.js"}],"node_modules/react-is/cjs/react-is.development.js":[function(require,module,exports) {
/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode


    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }

    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }

    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }

    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }

    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }

    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }

    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }

    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }

    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }

    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }

    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }

    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}
},{}],"node_modules/react-is/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = require('./cjs/react-is.development.js');
}
},{"./cjs/react-is.development.js":"node_modules/react-is/cjs/react-is.development.js"}],"node_modules/prop-types/factoryWithTypeCheckers.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var ReactIs = require('react-is');

var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

var checkPropTypes = require('./checkPropTypes');

var has = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning = function () {};

if ("development" !== 'production') {
  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("development" !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if ("development" !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }

      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);

        if (type === 'symbol') {
          return String(value);
        }

        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = assign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // falsy value can't be a Symbol


    if (!propValue) {
      return false;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = typeof propValue;

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
},{"react-is":"node_modules/react-is/index.js","object-assign":"node_modules/object-assign/index.js","./lib/ReactPropTypesSecret":"node_modules/prop-types/lib/ReactPropTypesSecret.js","./checkPropTypes":"node_modules/prop-types/checkPropTypes.js"}],"node_modules/prop-types/index.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if ("development" !== 'production') {
  var ReactIs = require('react-is'); // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}
},{"react-is":"node_modules/react-is/index.js","./factoryWithTypeCheckers":"node_modules/prop-types/factoryWithTypeCheckers.js"}],"node_modules/unist-util-visit-parents/index.js":[function(require,module,exports) {
'use strict'

/* Expose. */
module.exports = visitParents

/* Visit. */
function visitParents(tree, type, visitor) {
  var stack = []

  if (typeof type === 'function') {
    visitor = type
    type = null
  }

  one(tree)

  /* Visit a single node. */
  function one(node) {
    var result

    if (!type || node.type === type) {
      result = visitor(node, stack.concat())
    }

    if (node.children && result !== false) {
      return all(node.children, node)
    }

    return result
  }

  /* Visit children in `parent`. */
  function all(children, parent) {
    var length = children.length
    var index = -1
    var child

    stack.push(parent)

    while (++index < length) {
      child = children[index]

      if (child && one(child) === false) {
        return false
      }
    }

    stack.pop()

    return true
  }
}

},{}],"node_modules/mdast-add-list-metadata/index.js":[function(require,module,exports) {
var visitWithParents = require('unist-util-visit-parents');

function addListMetadata() {
  return function (ast) {
    visitWithParents(ast, 'list', function (listNode, parents) {
      var depth = 0, i, n;
      for (i = 0, n = parents.length; i < n; i++) {
        if (parents[i].type === 'list') depth += 1;
      }
      for (i = 0, n = listNode.children.length; i < n; i++) {
        var child = listNode.children[i];
        child.index = i;
        child.ordered = listNode.ordered;
      }
      listNode.depth = depth;
    });
    return ast;
  };
}

module.exports = addListMetadata;

},{"unist-util-visit-parents":"node_modules/unist-util-visit-parents/index.js"}],"node_modules/react-markdown/lib/plugins/naive-html.js":[function(require,module,exports) {
"use strict";

/**
 * Naive, simple plugin to match inline nodes without attributes
 * This allows say <strong>foo</strong>, but not <strong class="very">foo</strong>
 * For proper HTML support, you'll want a different plugin
 **/
var visit = require('unist-util-visit');

var type = 'virtualHtml';
var selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
var simpleTagRe = /^<(\/?)([a-z]+)\s*>$/;

module.exports = function (tree) {
  var open;
  var currentParent;
  visit(tree, 'html', function (node, index, parent) {
    if (currentParent !== parent) {
      open = [];
      currentParent = parent;
    }

    var selfClosing = getSelfClosing(node);

    if (selfClosing) {
      parent.children.splice(index, 1, {
        type: type,
        tag: selfClosing,
        position: node.position
      });
      return true;
    }

    var current = getSimpleTag(node, parent);

    if (!current) {
      return true;
    }

    var matching = findAndPull(open, current.tag);

    if (matching) {
      parent.children.splice(index, 0, virtual(current, matching, parent));
    } else if (!current.opening) {
      open.push(current);
    }

    return true;
  }, true // Iterate in reverse
  );
  return tree;
};

function findAndPull(open, matchingTag) {
  var i = open.length;

  while (i--) {
    if (open[i].tag === matchingTag) {
      return open.splice(i, 1)[0];
    }
  }

  return false;
}

function getSimpleTag(node, parent) {
  var match = node.value.match(simpleTagRe);
  return match ? {
    tag: match[2],
    opening: !match[1],
    node: node
  } : false;
}

function getSelfClosing(node) {
  var match = node.value.match(selfClosingRe);
  return match ? match[1] : false;
}

function virtual(fromNode, toNode, parent) {
  var fromIndex = parent.children.indexOf(fromNode.node);
  var toIndex = parent.children.indexOf(toNode.node);
  var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
  var children = extracted.slice(1, -1);
  return {
    type: type,
    children: children,
    tag: fromNode.tag,
    position: {
      start: fromNode.node.position.start,
      end: toNode.node.position.end,
      indent: []
    }
  };
}
},{"unist-util-visit":"node_modules/unist-util-visit/index.js"}],"node_modules/react-markdown/lib/plugins/disallow-node.js":[function(require,module,exports) {
"use strict";

var visit = require('unist-util-visit');

exports.ofType = function (types, mode) {
  return function (node) {
    types.forEach(function (type) {
      return visit(node, type, disallow, true);
    });
    return node;
  };

  function disallow(node, index, parent) {
    if (parent) {
      untangle(node, index, parent, mode);
    }
  }
};

exports.ifNotMatch = function (allowNode, mode) {
  return function (node) {
    visit(node, disallow, true);
    return node;
  };

  function disallow(node, index, parent) {
    if (parent && !allowNode(node, index, parent)) {
      untangle(node, index, parent, mode);
    }
  }
};

function untangle(node, index, parent, mode) {
  if (mode === 'remove') {
    parent.children.splice(index, 1);
  } else if (mode === 'unwrap') {
    var args = [index, 1];

    if (node.children) {
      args = args.concat(node.children);
    }

    Array.prototype.splice.apply(parent.children, args);
  }
}
},{"unist-util-visit":"node_modules/unist-util-visit/index.js"}],"node_modules/react-markdown/lib/ast-to-react.js":[function(require,module,exports) {
'use strict';

var React = require('react');

var xtend = require('xtend');

function astToReact(node, options) {
  var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var renderer = options.renderers[node.type];
  var pos = node.position.start;
  var key = [node.type, pos.line, pos.column].join('-');

  if (typeof renderer !== 'function' && typeof renderer !== 'string' && !isReactFragment(renderer)) {
    throw new Error("Renderer for type `".concat(node.type, "` not defined or is not renderable"));
  }

  var nodeProps = getNodeProps(node, key, options, renderer, parent, index);
  return React.createElement(renderer, nodeProps, nodeProps.children || resolveChildren() || undefined);

  function resolveChildren() {
    return node.children && node.children.map(function (childNode, i) {
      return astToReact(childNode, options, {
        node: node,
        props: nodeProps
      }, i);
    });
  }
}

function isReactFragment(renderer) {
  return React.Fragment && React.Fragment === renderer;
} // eslint-disable-next-line max-params, complexity


function getNodeProps(node, key, opts, renderer, parent, index) {
  var props = {
    key: key
  };
  var isTagRenderer = typeof renderer === 'string'; // `sourcePos` is true if the user wants source information (line/column info from markdown source)

  if (opts.sourcePos && node.position) {
    props['data-sourcepos'] = flattenPosition(node.position);
  }

  if (opts.rawSourcePos && !isTagRenderer) {
    props.sourcePosition = node.position;
  } // If `includeNodeIndex` is true, pass node index info to all non-tag renderers


  if (opts.includeNodeIndex && parent.node && parent.node.children && !isTagRenderer) {
    props.index = parent.node.children.indexOf(node);
    props.parentChildCount = parent.node.children.length;
  }

  var ref = node.identifier !== null && node.identifier !== undefined ? opts.definitions[node.identifier] || {} : null;

  switch (node.type) {
    case 'root':
      assignDefined(props, {
        className: opts.className
      });
      break;

    case 'text':
      props.nodeKey = key;
      props.children = node.value;
      break;

    case 'heading':
      props.level = node.depth;
      break;

    case 'list':
      props.start = node.start;
      props.ordered = node.ordered;
      props.tight = !node.loose;
      props.depth = node.depth;
      break;

    case 'listItem':
      props.checked = node.checked;
      props.tight = !node.loose;
      props.ordered = node.ordered;
      props.index = node.index;
      props.children = getListItemChildren(node, parent).map(function (childNode, i) {
        return astToReact(childNode, opts, {
          node: node,
          props: props
        }, i);
      });
      break;

    case 'definition':
      assignDefined(props, {
        identifier: node.identifier,
        title: node.title,
        url: node.url
      });
      break;

    case 'code':
      assignDefined(props, {
        language: node.lang && node.lang.split(/\s/, 1)[0]
      });
      break;

    case 'inlineCode':
      props.children = node.value;
      props.inline = true;
      break;

    case 'link':
      assignDefined(props, {
        title: node.title || undefined,
        target: typeof opts.linkTarget === 'function' ? opts.linkTarget(node.url, node.children, node.title) : opts.linkTarget,
        href: opts.transformLinkUri ? opts.transformLinkUri(node.url, node.children, node.title) : node.url
      });
      break;

    case 'image':
      assignDefined(props, {
        alt: node.alt || undefined,
        title: node.title || undefined,
        src: opts.transformImageUri ? opts.transformImageUri(node.url, node.children, node.title, node.alt) : node.url
      });
      break;

    case 'linkReference':
      assignDefined(props, xtend(ref, {
        href: opts.transformLinkUri ? opts.transformLinkUri(ref.href) : ref.href
      }));
      break;

    case 'imageReference':
      assignDefined(props, {
        src: opts.transformImageUri && ref.href ? opts.transformImageUri(ref.href, node.children, ref.title, node.alt) : ref.href,
        title: ref.title || undefined,
        alt: node.alt || undefined
      });
      break;

    case 'table':
    case 'tableHead':
    case 'tableBody':
      props.columnAlignment = node.align;
      break;

    case 'tableRow':
      props.isHeader = parent.node.type === 'tableHead';
      props.columnAlignment = parent.props.columnAlignment;
      break;

    case 'tableCell':
      assignDefined(props, {
        isHeader: parent.props.isHeader,
        align: parent.props.columnAlignment[index]
      });
      break;

    case 'virtualHtml':
      props.tag = node.tag;
      break;

    case 'html':
      // @todo find a better way than this
      props.isBlock = node.position.start.line !== node.position.end.line;
      props.escapeHtml = opts.escapeHtml;
      props.skipHtml = opts.skipHtml;
      break;

    case 'parsedHtml':
      {
        var parsedChildren;

        if (node.children) {
          parsedChildren = node.children.map(function (child, i) {
            return astToReact(child, opts, {
              node: node,
              props: props
            }, i);
          });
        }

        props.escapeHtml = opts.escapeHtml;
        props.skipHtml = opts.skipHtml;
        props.element = mergeNodeChildren(node, parsedChildren);
        break;
      }

    default:
      assignDefined(props, xtend(node, {
        type: undefined,
        position: undefined,
        children: undefined
      }));
  }

  if (!isTagRenderer && node.value) {
    props.value = node.value;
  }

  return props;
}

function assignDefined(target, attrs) {
  for (var key in attrs) {
    if (typeof attrs[key] !== 'undefined') {
      target[key] = attrs[key];
    }
  }
}

function mergeNodeChildren(node, parsedChildren) {
  var el = node.element;

  if (Array.isArray(el)) {
    var Fragment = React.Fragment || 'div';
    return React.createElement(Fragment, null, el);
  }

  if (el.props.children || parsedChildren) {
    var children = React.Children.toArray(el.props.children).concat(parsedChildren);
    return React.cloneElement(el, null, children);
  }

  return React.cloneElement(el, null);
}

function flattenPosition(pos) {
  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');
}

function getListItemChildren(node, parent) {
  if (node.loose) {
    return node.children;
  }

  if (parent.node && node.index > 0 && parent.node.children[node.index - 1].loose) {
    return node.children;
  }

  return unwrapParagraphs(node);
}

function unwrapParagraphs(node) {
  return node.children.reduce(function (array, child) {
    return array.concat(child.type === 'paragraph' ? child.children || [] : [child]);
  }, []);
}

module.exports = astToReact;
},{"react":"node_modules/react/index.js","xtend":"node_modules/xtend/immutable.js"}],"node_modules/react-markdown/lib/wrap-table-rows.js":[function(require,module,exports) {
'use strict';

var visit = require('unist-util-visit');

module.exports = function (node) {
  visit(node, 'table', wrap);
  return node;
};

function wrap(table) {
  var children = table.children;
  table.children = [{
    type: 'tableHead',
    align: table.align,
    children: [children[0]],
    position: children[0].position
  }];

  if (children.length > 1) {
    table.children.push({
      type: 'tableBody',
      align: table.align,
      children: children.slice(1),
      position: {
        start: children[1].position.start,
        end: children[children.length - 1].position.end
      }
    });
  }
}
},{"unist-util-visit":"node_modules/unist-util-visit/index.js"}],"node_modules/react-markdown/lib/get-definitions.js":[function(require,module,exports) {
'use strict';

module.exports = function getDefinitions(node) {
  var defs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (node.children || []).reduce(function (definitions, child) {
    if (child.type === 'definition') {
      definitions[child.identifier] = {
        href: child.url,
        title: child.title
      };
    }

    return getDefinitions(child, definitions);
  }, defs);
};
},{}],"node_modules/react-markdown/lib/uri-transformer.js":[function(require,module,exports) {
"use strict";

var protocols = ['http', 'https', 'mailto', 'tel'];

module.exports = function uriTransformer(uri) {
  var url = (uri || '').trim();
  var first = url.charAt(0);

  if (first === '#' || first === '/') {
    return url;
  }

  var colon = url.indexOf(':');

  if (colon === -1) {
    return url;
  }

  var length = protocols.length;
  var index = -1;

  while (++index < length) {
    var protocol = protocols[index];

    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
      return url;
    }
  }

  index = url.indexOf('?');

  if (index !== -1 && colon > index) {
    return url;
  }

  index = url.indexOf('#');

  if (index !== -1 && colon > index) {
    return url;
  } // eslint-disable-next-line no-script-url


  return 'javascript:void(0)';
};
},{}],"node_modules/react-markdown/lib/renderers.js":[function(require,module,exports) {
/* eslint-disable react/prop-types, react/no-multi-comp */
'use strict';

var xtend = require('xtend');

var React = require('react');

var supportsStringRender = parseInt((React.version || '16').slice(0, 2), 10) >= 16;
var createElement = React.createElement;
module.exports = {
  break: 'br',
  paragraph: 'p',
  emphasis: 'em',
  strong: 'strong',
  thematicBreak: 'hr',
  blockquote: 'blockquote',
  delete: 'del',
  link: 'a',
  image: 'img',
  linkReference: 'a',
  imageReference: 'img',
  table: SimpleRenderer.bind(null, 'table'),
  tableHead: SimpleRenderer.bind(null, 'thead'),
  tableBody: SimpleRenderer.bind(null, 'tbody'),
  tableRow: SimpleRenderer.bind(null, 'tr'),
  tableCell: TableCell,
  root: Root,
  text: TextRenderer,
  list: List,
  listItem: ListItem,
  definition: NullRenderer,
  heading: Heading,
  inlineCode: InlineCode,
  code: CodeBlock,
  html: Html,
  virtualHtml: VirtualHtml,
  parsedHtml: ParsedHtml
};

function TextRenderer(props) {
  return supportsStringRender ? props.children : createElement('span', null, props.children);
}

function Root(props) {
  var useFragment = !props.className;
  var root = useFragment ? React.Fragment || 'div' : 'div';
  return createElement(root, useFragment ? null : props, props.children);
}

function SimpleRenderer(tag, props) {
  return createElement(tag, getCoreProps(props), props.children);
}

function TableCell(props) {
  var style = props.align ? {
    textAlign: props.align
  } : undefined;
  var coreProps = getCoreProps(props);
  return createElement(props.isHeader ? 'th' : 'td', style ? xtend({
    style: style
  }, coreProps) : coreProps, props.children);
}

function Heading(props) {
  return createElement("h".concat(props.level), getCoreProps(props), props.children);
}

function List(props) {
  var attrs = getCoreProps(props);

  if (props.start !== null && props.start !== 1) {
    attrs.start = props.start.toString();
  }

  return createElement(props.ordered ? 'ol' : 'ul', attrs, props.children);
}

function ListItem(props) {
  var checkbox = null;

  if (props.checked !== null) {
    var checked = props.checked;
    checkbox = createElement('input', {
      type: 'checkbox',
      checked: checked,
      readOnly: true
    });
  }

  return createElement('li', getCoreProps(props), checkbox, props.children);
}

function CodeBlock(props) {
  var className = props.language && "language-".concat(props.language);
  var code = createElement('code', className ? {
    className: className
  } : null, props.value);
  return createElement('pre', getCoreProps(props), code);
}

function InlineCode(props) {
  return createElement('code', getCoreProps(props), props.children);
}

function Html(props) {
  if (props.skipHtml) {
    return null;
  }

  var tag = props.isBlock ? 'div' : 'span';

  if (props.escapeHtml) {
    var comp = React.Fragment || tag;
    return createElement(comp, null, props.value);
  }

  var nodeProps = {
    dangerouslySetInnerHTML: {
      __html: props.value
    }
  };
  return createElement(tag, nodeProps);
}

function ParsedHtml(props) {
  return props['data-sourcepos'] ? React.cloneElement(props.element, {
    'data-sourcepos': props['data-sourcepos']
  }) : props.element;
}

function VirtualHtml(props) {
  return createElement(props.tag, getCoreProps(props), props.children);
}

function NullRenderer() {
  return null;
}

function getCoreProps(props) {
  return props['data-sourcepos'] ? {
    'data-sourcepos': props['data-sourcepos']
  } : {};
}
},{"xtend":"node_modules/xtend/immutable.js","react":"node_modules/react/index.js"}],"node_modules/react-markdown/lib/symbols.js":[function(require,module,exports) {
"use strict";

var HtmlParser = '__RMD_HTML_PARSER__';
exports.HtmlParser = typeof Symbol === 'undefined' ? HtmlParser : Symbol(HtmlParser);
},{}],"node_modules/react-markdown/lib/react-markdown.js":[function(require,module,exports) {
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var xtend = require('xtend');

var unified = require('unified');

var parse = require('remark-parse');

var PropTypes = require('prop-types');

var addListMetadata = require('mdast-add-list-metadata');

var naiveHtml = require('./plugins/naive-html');

var disallowNode = require('./plugins/disallow-node');

var astToReact = require('./ast-to-react');

var wrapTableRows = require('./wrap-table-rows');

var getDefinitions = require('./get-definitions');

var uriTransformer = require('./uri-transformer');

var defaultRenderers = require('./renderers');

var symbols = require('./symbols');

var allTypes = Object.keys(defaultRenderers);

var ReactMarkdown = function ReactMarkdown(props) {
  var src = props.source || props.children || '';

  if (props.allowedTypes && props.disallowedTypes) {
    throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');
  }

  var renderers = xtend(defaultRenderers, props.renderers);
  var plugins = [parse].concat(props.plugins || []);
  var parser = plugins.reduce(applyParserPlugin, unified());
  var rawAst = parser.parse(src);
  var renderProps = xtend(props, {
    renderers: renderers,
    definitions: getDefinitions(rawAst)
  });
  var astPlugins = determineAstPlugins(props);
  var ast = astPlugins.reduce(function (node, plugin) {
    return plugin(node, renderProps);
  }, rawAst);
  return astToReact(ast, renderProps);
};

function applyParserPlugin(parser, plugin) {
  return Array.isArray(plugin) ? parser.use.apply(parser, _toConsumableArray(plugin)) : parser.use(plugin);
}

function determineAstPlugins(props) {
  var plugins = [wrapTableRows, addListMetadata()];
  var disallowedTypes = props.disallowedTypes;

  if (props.allowedTypes) {
    disallowedTypes = allTypes.filter(function (type) {
      return type !== 'root' && props.allowedTypes.indexOf(type) === -1;
    });
  }

  var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';

  if (disallowedTypes && disallowedTypes.length > 0) {
    plugins.push(disallowNode.ofType(disallowedTypes, removalMethod));
  }

  if (props.allowNode) {
    plugins.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));
  }

  var renderHtml = !props.escapeHtml && !props.skipHtml;
  var hasHtmlParser = (props.astPlugins || []).some(function (item) {
    var plugin = Array.isArray(item) ? item[0] : item;
    return plugin.identity === symbols.HtmlParser;
  });

  if (renderHtml && !hasHtmlParser) {
    plugins.push(naiveHtml);
  }

  return props.astPlugins ? plugins.concat(props.astPlugins) : plugins;
}

ReactMarkdown.defaultProps = {
  renderers: {},
  escapeHtml: true,
  skipHtml: false,
  sourcePos: false,
  rawSourcePos: false,
  transformLinkUri: uriTransformer,
  astPlugins: [],
  plugins: []
};
ReactMarkdown.propTypes = {
  className: PropTypes.string,
  source: PropTypes.string,
  children: PropTypes.string,
  sourcePos: PropTypes.bool,
  rawSourcePos: PropTypes.bool,
  escapeHtml: PropTypes.bool,
  skipHtml: PropTypes.bool,
  allowNode: PropTypes.func,
  allowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
  disallowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  transformImageUri: PropTypes.func,
  astPlugins: PropTypes.arrayOf(PropTypes.func),
  unwrapDisallowed: PropTypes.bool,
  renderers: PropTypes.object,
  plugins: PropTypes.array
};
ReactMarkdown.types = allTypes;
ReactMarkdown.renderers = defaultRenderers;
ReactMarkdown.uriTransformer = uriTransformer;
module.exports = ReactMarkdown;
},{"xtend":"node_modules/xtend/immutable.js","unified":"node_modules/unified/index.js","remark-parse":"node_modules/remark-parse/index.js","prop-types":"node_modules/prop-types/index.js","mdast-add-list-metadata":"node_modules/mdast-add-list-metadata/index.js","./plugins/naive-html":"node_modules/react-markdown/lib/plugins/naive-html.js","./plugins/disallow-node":"node_modules/react-markdown/lib/plugins/disallow-node.js","./ast-to-react":"node_modules/react-markdown/lib/ast-to-react.js","./wrap-table-rows":"node_modules/react-markdown/lib/wrap-table-rows.js","./get-definitions":"node_modules/react-markdown/lib/get-definitions.js","./uri-transformer":"node_modules/react-markdown/lib/uri-transformer.js","./renderers":"node_modules/react-markdown/lib/renderers.js","./symbols":"node_modules/react-markdown/lib/symbols.js"}],"src/Video.tsx":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var ReactMarkdown = require('react-markdown');

exports["default"] = function (video, toggle) {
  return React.createElement("div", {
    className: "video",
    key: video.id
  }, React.createElement("h2", null, video.id, " - ", video.title, " ", React.createElement("a", {
    href: video.webPermalink
  }, "(video)"), React.createElement("span", null, " "), React.createElement("label", {
    className: "bookmark"
  }, "Bookmark ", React.createElement("input", {
    onChange: function onChange(e) {
      return toggle(video.id, e.target.checked);
    },
    type: "checkbox",
    checked: video.bookmarked
  }))), React.createElement("div", null, video.description), React.createElement("div", null, "Keywords: ", (video.keywords || []).map(function (key) {
    return React.createElement("span", {
      className: "keyword",
      key: key
    }, key);
  })), React.createElement("div", null, "Platforms: ", (video.platforms || []).map(function (key) {
    return React.createElement("span", {
      className: "keyword",
      key: key
    }, key);
  })), video.summary ? React.createElement("div", {
    className: "summary"
  }, React.createElement("h3", null, "Summary:"), " ", React.createElement(ReactMarkdown, {
    source: video.summary
  })) : React.createElement("div", null));
};
},{"react-markdown":"node_modules/react-markdown/lib/react-markdown.js"}],"review.json":[function(require,module,exports) {
module.exports = {
  "tags": {
    "like": {
      "name": "Recommended",
      "type": "state",
      "videos": ["wwdc2019-237"]
    },
    "dislike": {
      "name": "Discommend",
      "type": "state",
      "videos": []
    },
    "summarized": {
      "name": "With summary",
      "type": "state",
      "videos": []
    },
    "ios": {
      "name": "iOS developer",
      "type": "track",
      "videos": []
    },
    "ml": {
      "name": "ML enthousiast",
      "type": "track",
      "videos": []
    },
    "appleid": {
      "name": "Apple ID",
      "type": "track",
      "videos": []
    },
    "swiftui": {
      "name": "SwiftUI",
      "type": "track",
      "videos": []
    },
    "combine": {
      "name": "Combine",
      "type": "track",
      "videos": []
    },
    "xcode": {
      "name": "Xcode",
      "videos": ["wwdc2019-401", "wwdc2019-239", "wwdc2019-403"]
    }
  }
};
},{}],"contents.json":[function(require,module,exports) {
module.exports = {
  "updated": "2019-06-07T12:16:50-07:00",
  "snapshotId": 470,
  "events": [{
    "name": "WWDC 2019",
    "current": true,
    "id": "wwdc2019",
    "webUrlKey": "wwdc19",
    "startTime": "2019-06-03T10:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/48",
    "hashtag": "#WWDC19",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC19.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }, {
    "name": "WWDC 2018",
    "current": false,
    "id": "wwdc2018",
    "webUrlKey": "wwdc18",
    "startTime": "2018-06-04T10:00:00-07:00",
    "endTime": "2018-06-08T17:00:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/42",
    "hashtag": "#WWDC18",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC18.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }, {
    "name": "Developer Insights",
    "current": false,
    "id": "insights",
    "webUrlKey": "videos/play/insights",
    "startTime": "2018-05-07T00:00:00+00:00",
    "endTime": "2018-05-07T00:00:00+00:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/44",
    "hashtag": "#wwdcapp",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-DeveloperInsights.pdf",
    "sortOrder": "ungroupedPublishDateDescending"
  }, {
    "name": "App Store Connect",
    "current": false,
    "id": "app-store-connect",
    "webUrlKey": "videos/play/app-store-connect",
    "startTime": "2018-05-07T00:00:00+00:00",
    "endTime": "2018-05-07T00:00:00+00:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/45",
    "hashtag": "#wwdcapp",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-AppStoreConnect.pdf",
    "sortOrder": "ungroupedPublishDateDescending"
  }, {
    "name": "Tech Talks",
    "current": false,
    "id": "tech-talks",
    "webUrlKey": "videos/play/tech-talks",
    "startTime": "2017-07-01T00:00:00+00:00",
    "endTime": "2017-12-31T00:00:00+00:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/8",
    "hashtag": "#wwdcapp",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-TechTalks.pdf",
    "sortOrder": "ungroupedPublishDateDescending"
  }, {
    "name": "WWDC 2017",
    "current": false,
    "id": "wwdc2017",
    "webUrlKey": "wwdc17",
    "startTime": "2017-06-05T10:00:00-07:00",
    "endTime": "2017-06-09T15:30:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/7",
    "hashtag": "#WWDC17",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC17.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }, {
    "name": "WWDC 2016",
    "current": false,
    "id": "wwdc2016",
    "webUrlKey": "wwdc16",
    "startTime": "2016-06-13T10:00:00-07:00",
    "endTime": "2016-06-17T17:40:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/1",
    "hashtag": "#WWDC 2016",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC16.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }, {
    "name": "WWDC 2015",
    "current": false,
    "id": "wwdc2015",
    "webUrlKey": "wwdc15",
    "startTime": "2015-06-08T10:00:00-07:00",
    "endTime": "2015-06-12T16:10:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/2",
    "hashtag": "#WWDC 2015",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC15.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }, {
    "name": "WWDC 2014",
    "current": false,
    "id": "wwdc2014",
    "webUrlKey": "wwdc14",
    "startTime": "2014-06-02T10:00:00-07:00",
    "endTime": "2014-06-06T12:30:00-07:00",
    "imagesPath": "https://devimages-cdn.apple.com/wwdc-services/images/3",
    "hashtag": "#WWDC 2014",
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Source-WWDC14.pdf",
    "sortOrder": "groupedPublishDateAscending"
  }],
  "contents": [{
    "id": "wwdc2019-3320",
    "staticContentId": 3213,
    "eventContentId": 3320,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3320",
    "description": "Gain the flexibility to customize your workflows so you can focus on creating great apps. The App Store Connect REST API lets you automate tasks on App Store Connect for increased efficiency. Learn how to use it for development, testing, and reporting within your team’s internal workflow.",
    "title": "Getting Started with the App Store Connect API",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 37, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-7040",
    "staticContentId": 2985,
    "eventContentId": 7040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7040",
    "description": "Review your code with Apple Engineers and ask questions about the Contacts and EventKit frameworks. We're here to answer your questions, share the latest development techniques and tools, and help you improve your code and apps.",
    "title": "Contacts and EventKit Lab",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["addressbook", "address book", "addressbookui", "caldav", "calendar", "carddav", "contactsui", "eventkitui", "field", "notes"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 74
  }, {
    "id": "wwdc2019-2030",
    "staticContentId": 3042,
    "eventContentId": 2030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2030",
    "description": "Use Apple's accessibility APIs to deliver a seamless experience for a broad range of users. Whether you are working with VoiceOver, hearing aids, speech synthesis, or other accessibility features, be prepared to demo and fix issues in real time as you meet with Apple engineers. If you are just getting started, this is a perfect opportunity to get advice on making your app usable by everybody.",
    "title": "Accessibility Lab",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T11:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [8],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-6010",
    "staticContentId": 2946,
    "eventContentId": 6010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6010",
    "description": "Receive one-on-one technical assistance and troubleshooting advice from the Graphics and Imaging team. Get help with Core Animation, Core Graphics, Image Capture, Image I/O, ImageKit, PDFKit, ColorSync, and more. Bring your project and get your questions answered.",
    "title": "Core Animation and Quartz 2D Lab",
    "startTime": "2019-06-04T12:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 30],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-6150"]
    }
  }, {
    "id": "wwdc2019-715",
    "staticContentId": 2647,
    "eventContentId": 715,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/715",
    "description": "Learn how easy it is to add support for NFC in your app and take advantage of the newest capabilities such as NDEF writing and support for widely adopted native tag protocols.",
    "title": "Core NFC Enhancements",
    "startTime": "2019-06-07T16:20:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["nfc"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-7270", "tech-talks-702", "wwdc2017-718"],
      "resources": [535, 191, 59]
    }
  }, {
    "id": "wwdc2019-2330",
    "staticContentId": 3088,
    "eventContentId": 2330,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2330",
    "description": "Apple engineers from the CareKit, ResearchKit, and Health teams will be on hand to review your code and answer questions about how to implement the latests features, how you can participate in the open source community, and more. Or just drop by to bounce around ideas for your next great research or patient care app.",
    "title": "ResearchKit and CareKit Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [14],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-218"]
    }
  }, {
    "id": "wwdc2019-2020",
    "staticContentId": 2981,
    "eventContentId": 2020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2020",
    "description": "AppKit is a key building block for your macOS apps. Bring your laptop and your code and work with Apple engineers to resolve your AppKit issues and answer your questions.",
    "title": "AppKit Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-210"]
    }
  }, {
    "id": "wwdc2019-2360",
    "staticContentId": 2982,
    "eventContentId": 2360,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2360",
    "description": "AppKit is a key building block for your macOS apps. Bring your laptop and your code and work with Apple engineers to resolve your AppKit issues and answer your questions.",
    "title": "AppKit and Combine Lab",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-721"]
    }
  }, {
    "id": "wwdc2019-2350",
    "staticContentId": 2996,
    "eventContentId": 2350,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2350",
    "description": "The UIKit framework team will be on hand to answer questions you have about adopting the new multitasking life cycle in your App. This lab has a focus on Scene and WindowScene, so drop by to get advice from Apple's top experts on these powerful UIKit classes. There will also be engineers on hand to help you with other UIKit classes like view controllers, scroll views, and gesture recognizers in your apps.",
    "title": "UIKit and Multitasking Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-212"]
    }
  }, {
    "id": "wwdc2019-2460",
    "staticContentId": 2995,
    "eventContentId": 2460,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2460",
    "description": "Core Data is a framework that manages object graphs, relationships, and persistence of those objects. Apple engineers will be on hand to answer questions about Core Data and how it reduces the amount of code you have to write to manage your model. Bring your questions about the new Core Data features, including history tracking, change notifications, derived attributes, and batch operations.",
    "title": "Core Data Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["batch operations", "change notifications", "concurrency", "core", "core data", "data", "derived attributes", "history tracking", "model layer objects", "nskeyedarchiver", "object graph", "object life cycle", "performance", "persistence", "persistent history", "sqlite", "testing"],
    "topicIds": [67],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-202"]
    }
  }, {
    "id": "wwdc2019-4240",
    "staticContentId": 3171,
    "eventContentId": 4240,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4240",
    "description": "Bring your project to have our engineers help with advanced profiling and bulletproofing your app. Figure out what is using up that battery capacity, and what you can do about it. Learn how to use debugging tools like Instruments, LLDB, and memory graphs to track down problems. Get hands-on help analyzing your app with tools like the Address Sanitizer and Thread Sanitizer. Speak with an Apple engineer to find out how to best use signposts in your app and build a custom instrument of your own.",
    "title": "Performance, Power, Crashes, and Debugging Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 35],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-412", "wwdc2019-414", "wwdc2019-419", "wwdc2019-421", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-2490",
    "staticContentId": 2991,
    "eventContentId": 2490,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2490",
    "description": "Learn how to make your app more discoverable and provide more relevant Spotlight and Safari search results. Apple engineers will be available to review your code and answer your technical questions. Stop by and we'll work with you to make your app's search results the best they can be.",
    "title": "Core Spotlight and Search Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 76
  }, {
    "id": "wwdc2019-3630",
    "staticContentId": 3229,
    "eventContentId": 3630,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3630",
    "description": "Get details on offering auto-renewable subscriptions in your app. Bring your questions about strategy, set up, and implementation to attract and keep subscribers as you grow your business.",
    "title": "Monetizing with Subscriptions",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [69, 71, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-8050",
    "staticContentId": 3063,
    "eventContentId": 8050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8050",
    "description": "Get advice on creating delightful app interactions enabled by Siri. Consult with Siri designers to design or refine your app’s Siri Shortcuts, and discuss whether your app can benefit from a SiriKit extension. Come prepared with ideas, prototypes, flows, or scripts and learn about best practices for designing voice-initiated interactions across Apple platforms.",
    "title": "Siri Design Lab",
    "startTime": "2019-06-05T13:30:00-07:00",
    "endTime": "2019-06-05T15:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 5, 6, 7, 21],
    "type": "Lab",
    "roomId": 7,
    "related": {
      "activities": ["wwdc2019-207", "wwdc2019-213", "wwdc2019-243", "wwdc2019-804", "wwdc2019-805", "wwdc2019-806"]
    }
  }, {
    "id": "wwdc2019-8020",
    "staticContentId": 3061,
    "eventContentId": 8020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8020",
    "description": "Make your apps accessible and simple to use for everyone. Learn the basics of VoiceOver and other accessibility features to better understand how customers with varying needs use your products. Come prepared with a working prototype, development build, or your released app. You can drop in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Accessibility Design Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 8, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 27,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-429",
    "staticContentId": 2900,
    "eventContentId": 429,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/429",
    "description": "LLDB is a powerful tool for exploring and debugging your app at runtime. Discover the various ways to display values in your app, how to format custom data types, and how to extend LLDB using your own Python 3 scripts.",
    "title": "LLDB: Beyond \"po\"",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/429s7ksrdjsg3bql/429/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/429s7ksrdjsg3bql/429/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/429s7ksrdjsg3bql/429/429_lldb_beyond_po.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/429s7ksrdjsg3bql/429/429_hd_lldb_beyond_po.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/429s7ksrdjsg3bql/429/429_sd_lldb_beyond_po.mp4",
      "duration": 1244
    },
    "related": {
      "activities": ["wwdc2018-412"]
    }
  }, {
    "id": "wwdc2019-5060",
    "staticContentId": 3065,
    "eventContentId": 5060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5060",
    "description": "AVKit is a high-level framework to create view-level services for media playback, complete with user controls, chapter navigation, and support for subtitles and closed captioning. Get one-on-one technical guidance from Apple engineers about using AVKit in your apps to offer people an intuitive media playback experience. Bring your code and your questions.",
    "title": "AVKit Lab",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-501", "wwdc2019-503", "wwdc2019-5010", "wwdc2019-5100", "wwdc2019-5180"]
    }
  }, {
    "id": "wwdc2019-7170",
    "staticContentId": 2919,
    "eventContentId": 7170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7170",
    "description": "Meet with Apple’s Machine Learning engineers for expert advice on model training in Create ML or Turi Create, the Core ML Framework, model conversion, and domain APIs for Vision, Natural Language, Speech, and Sound. Bring your datasets, source code, and demos.",
    "title": "Machine Learning Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["convertors", "core ml", "core ml tools", "create ml", "model personalization", "models", "natural language", "neural networks", "nlp", "on-device training", "sound", "speech", "vision"],
    "topicIds": [16],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-222", "wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-406", "wwdc2019-407", "wwdc2019-420", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-430", "wwdc2019-704"]
    }
  }, {
    "id": "wwdc2019-3670",
    "staticContentId": 3231,
    "eventContentId": 3670,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3670",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how to start creating campaigns that efficiently drive app downloads or reengagements.",
    "title": "Getting Started with Apple Search Ads",
    "startTime": "2019-06-06T13:00:00-07:00",
    "endTime": "2019-06-06T13:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-3220",
    "staticContentId": 3203,
    "eventContentId": 3220,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3220",
    "description": "Get the technical details you need to implement commerce features, such as in-app purchase and subscriptions, in your app. Learn how to use StoreKit, receipt validation, subscription status polling, and much more to help bring value to your app and keep customers engaged.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Commerce Engineering & Technologies By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 25
  }, {
    "id": "wwdc2019-6130",
    "staticContentId": 3085,
    "eventContentId": 6130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6130",
    "description": "ARKit provides a cutting-edge platform for developing augmented reality (AR) apps for iPhone and iPad. Get expert tips and advice from ARKit engineers and designers about people occlusion, motion capture, collaborative experiences, and more. Bring your questions or work-in-progress.",
    "title": "ARKit Lab",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-604", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-6060", "wwdc2019-6070", "wwdc2019-6090", "wwdc2019-6140", "wwdc2019-6170"]
    }
  }, {
    "id": "wwdc2019-3100",
    "staticContentId": 3025,
    "eventContentId": 3100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3100",
    "description": "Find out what’s required for your apps to comply with U.S. export regulations for encryption and get details on how Apple reviews apps that use encryption technologies.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Export Compliance By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 29
  }, {
    "id": "wwdc2019-2400",
    "staticContentId": 2825,
    "eventContentId": 2400,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2400",
    "description": "The tvOS SDK allows you to create and build amazing apps and games for the big screen. And, with TVMLKit you can easily and quickly develop native tvOS apps with XML templates and JavaScript logic. Get one-on-one technical guidance from Apple engineers about your own apps. Bring your code and your questions.",
    "title": "tvOS Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["tvOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-240", "wwdc2019-503", "wwdc2019-616", "wwdc2019-2250"]
    }
  }, {
    "id": "wwdc2019-804",
    "staticContentId": 2651,
    "eventContentId": 804,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/804",
    "description": "In order to build a great Shortcuts experience, it’s essential to understand the voice design philosophy, and the opportunities available to you to expose shortcuts to your customers. Walk through how to design and implement shortcuts, from the planning phase, through dialog flows, to how your shortcuts can be used with actions from other apps. Join us on a tour of design concepts and implementation tips to help make your shortcuts indispensable to your customers.",
    "title": "Designing and Building Great Shortcuts",
    "startTime": "2019-06-07T17:20:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [3, 21],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-213", "wwdc2019-805", "wwdc2019-806", "wwdc2019-2010", "wwdc2019-2160", "wwdc2019-2310", "wwdc2019-2470", "wwdc2019-8050"],
      "resources": [350, 348, 12]
    }
  }, {
    "id": "wwdc2019-3660",
    "staticContentId": 3232,
    "eventContentId": 3660,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3660",
    "description": "TestFlight makes it easy to invite users to test your apps and collect feedback to improve app quality. Learn and ask questions about inviting testers, managing builds, and collecting feedback to gain valuable insights about your app before releasing it on the App Store.",
    "title": "Getting Started with TestFlight",
    "startTime": "2019-06-06T13:00:00-07:00",
    "endTime": "2019-06-06T15:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [71, 37],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-3150",
    "staticContentId": 3205,
    "eventContentId": 3150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3150",
    "description": "Gain a better understanding of the App Store Review Guidelines so you can plan and build great app experiences for Apple platforms.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Review By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 26
  }, {
    "id": "wwdc2019-506",
    "staticContentId": 3038,
    "eventContentId": 506,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/506",
    "description": "With the addition of alpha channel support for HEVC video, you can now composite video over custom backgrounds in both your apps and on the web. Learn how to author compatible media, and the best practices for playback.",
    "title": "HEVC Video with Alpha",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/506lqy7sprpfyo800/506/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/506lqy7sprpfyo800/506/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/506lqy7sprpfyo800/506/506_hevc_video_with_alpha.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/506lqy7sprpfyo800/506/506_hd_hevc_video_with_alpha.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/506lqy7sprpfyo800/506/506_sd_hevc_video_with_alpha.mp4",
      "duration": 890
    },
    "related": {
      "activities": ["wwdc2019-518", "wwdc2019-5050", "wwdc2019-5120", "wwdc2019-5170"],
      "resources": [559, 503]
    }
  }, {
    "id": "wwdc2019-3260",
    "staticContentId": 3207,
    "eventContentId": 3260,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3260",
    "description": "Gain a better understanding of the App Store Review Guidelines so you can plan and build great app experiences for Apple platforms.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Review By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T17:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 26
  }, {
    "id": "wwdc2019-2220",
    "staticContentId": 2835,
    "eventContentId": 2220,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2220",
    "description": "The Speech Recognition API allows you to perform rapid and contextually informed speech recognition in both file-based and realtime scenarios. Get one-on-one technical guidance from Apple engineers about using speech recognition in your apps. Bring your code and your questions.",
    "title": "Speech Recognition Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-256"]
    }
  }, {
    "id": "wwdc2019-3680",
    "staticContentId": 3233,
    "eventContentId": 3680,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3680",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how you can create highly effective campaigns using best practices for selecting keywords, expanding to new countries and regions, creating custom reports, structuring your account, and more.",
    "title": "Best Practices for Apple Search Ads",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T14:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-7150",
    "staticContentId": 2921,
    "eventContentId": 7150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7150",
    "description": "Meet with Apple’s Machine Learning engineers for expert advice on model training in Create ML or Turi Create, the Core ML Framework, model conversion, and domain APIs for Vision, Natural Language, Speech, and Sound. Bring your datasets, source code, and demos.",
    "title": "Machine Learning Lab",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["convertors", "core ml", "core ml tools", "create ml", "model personalization", "models", "natural language", "neural networks", "nlp", "on-device training", "sound", "speech", "vision"],
    "topicIds": [16],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-222", "wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-406", "wwdc2019-407", "wwdc2019-420", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-430", "wwdc2019-704"]
    }
  }, {
    "id": "wwdc2019-5050",
    "staticContentId": 3075,
    "eventContentId": 5050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5050",
    "description": "AVFoundation is a powerful framework for all types of media operations, including capture, editing, playback, and export. Get one-on-one technical guidance from Apple engineers about using AVFoundation in your apps. Bring your code and your questions.",
    "title": "AVFoundation Lab",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-502", "wwdc2019-506", "wwdc2019-5120", "wwdc2019-5130", "wwdc2019-5160", "wwdc2019-5170"]
    }
  }, {
    "id": "wwdc2019-614",
    "staticContentId": 2669,
    "eventContentId": 614,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/614",
    "description": "Metal Performance Shaders (MPS) includes a highly tuned library of data parallel primitives vital to machine learning and leveraging the tremendous power of the GPU. With iOS 13 and macOS Catalina, MPS improves performance, enables more neural networks, and is now even easier to use. Learn more about these advances in MPS and gain a practical understanding of how to implement innovative techniques such as Style Transfer.",
    "title": "Metal for Machine Learning",
    "startTime": "2019-06-07T15:20:00-07:00",
    "endTime": "2019-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [27, 16],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-601", "wwdc2019-606", "wwdc2019-608", "wwdc2019-611", "wwdc2019-613", "wwdc2019-6180", "wwdc2018-609"],
      "resources": [533, 56, 38]
    }
  }, {
    "id": "wwdc2019-4050",
    "staticContentId": 3074,
    "eventContentId": 4050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4050",
    "description": "Meet with experts from the Xcode team to discuss strategies for building your app and fix issues in real time. Bring your questions about the build system, code signing, and packaging apps. Whether you're working through a problem, or you just want a better understanding of how certificates and profiles work, you'll find Apple engineers who are eager to help.",
    "title": "Building, Signing, and Distributing Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32, 43, 38],
    "type": "Lab",
    "roomId": 75
  }, {
    "id": "wwdc2019-302",
    "staticContentId": 2644,
    "eventContentId": 302,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/302",
    "description": "Learn about the latest updates in StoreKit and dive deep into best practices for using server-to-server notifications to manage your subscribers.",
    "title": "In-App Purchases and Using Server-to-Server Notifications",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["in-app purchase", "storekit", "subscriptions"],
    "topicIds": [69],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-301", "wwdc2019-305", "wwdc2019-706", "wwdc2019-3010", "wwdc2019-3030", "wwdc2019-3050"],
      "resources": [491, 490, 479, 448, 105]
    }
  }, {
    "id": "wwdc2019-3530",
    "staticContentId": 3234,
    "eventContentId": 3530,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3530",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how to start creating campaigns that efficiently drive app downloads or reengagements.",
    "title": "Getting Started with Apple Search Ads",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T15:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-901",
    "staticContentId": 2820,
    "eventContentId": 901,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/901",
    "description": "Learn how to adopt privacy-enhancing changes in Core Bluetooth. Discover new possibilities with LE 2Mbps, advertising extensions, BR/EDR, and dual-mode devices. Understand how to debug your Core Bluetooth communication with the improvements to PacketLogger.",
    "title": "What's New in Core Bluetooth",
    "startTime": "2019-06-07T15:20:00-07:00",
    "endTime": "2019-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessories", "accessory", "ancs", "ble", "bleutooth", "bluetooth", "bluetooth 5", "bluetooth low energy", "br/edr", "bt", "btle", "cbcentral", "cbperipheral", "central", "characteristic", "classic", "corebluetooth", "core bluetooth", "gatt", "l2cap", "mfi", "packetlogger", "peripheral", "privacy", "service", "throughput", "wireless"],
    "topicIds": [9],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-708"],
      "resources": [555]
    }
  }, {
    "id": "wwdc2019-2390",
    "staticContentId": 2843,
    "eventContentId": 2390,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2390",
    "description": "With the addition of extended runtime use cases in watchOS 6, there are more runtime opportunities than ever before. Our engineers are ready and waiting to help you figure out how to build an awesome Watch experience, optimizing your app's wake times to keep your content up to date and accurate. From Bluetooth wake times, to complication updates, we'll help you figure out the best path forward.",
    "title": "watchOS Runtime Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "alarms", "apple watch", "audio", "bt", "btle", "clkcomplication", "clockkit", "complications", "digital crown", "extended runtime", "health monitoring", "heart rate", "mindfulness", "navigation", "physical therapy", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-251", "wwdc2019-253", "wwdc2019-716"]
    }
  }, {
    "id": "wwdc2019-259",
    "staticContentId": 2964,
    "eventContentId": 259,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/259",
    "description": "Learn how to target content for a specific window in your app. Find out how to identify which scene the system should open from a notification, a shortcut item, and other user activities.",
    "title": "Targeting Content with Multiple Windows",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video"
  }, {
    "id": "wwdc2019-204",
    "staticContentId": 2671,
    "eventContentId": 204,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/204",
    "description": "See SwiftUI in action! Watch as engineers from the SwiftUI team build a fully-functioning app from scratch. Understand the philosophy driving this new framework and learn about the benefits of declarative-style programming. Take a look under the hood to understand how SwiftUI operates and learn how SwiftUI and Xcode 11 work together to help you to build great apps, faster.",
    "title": "Introducing SwiftUI: Building Your First App",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/204isgnpbqud244/204/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/204isgnpbqud244/204/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/204isgnpbqud244/204/204_introducing_swiftui_building_your_first_app.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/204isgnpbqud244/204/204_hd_introducing_swiftui_building_your_first_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/204isgnpbqud244/204/204_sd_introducing_swiftui_building_your_first_app.mp4",
      "duration": 3256
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-216", "wwdc2019-219", "wwdc2019-226", "wwdc2019-231", "wwdc2019-233", "wwdc2019-237", "wwdc2019-238", "wwdc2019-240", "wwdc2019-401", "wwdc2019-402", "wwdc2019-404", "wwdc2019-2080", "wwdc2019-2180", "wwdc2019-2300", "wwdc2019-2440"]
    }
  }, {
    "id": "wwdc2019-242",
    "staticContentId": 2758,
    "eventContentId": 242,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/242",
    "description": "Hear lightning talks from experts on the System Experience team to help take your app to the next level. Learn how to structure your application to instantiate your UI, manage resources, and handle when windows come and go. Understand what the lifecycle of a window is, how to target content to a specific window, and how to ensure your content is always up to date.",
    "title": "Getting the Most out of Multitasking",
    "startTime": "2019-06-07T15:20:00-07:00",
    "endTime": "2019-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["clown town", "destruction", "multiple", "multitasking", "multiwindow", "refresh", "restoration", "scenes", "state", "uiscene", "uiwindowscene", "window creation", "windows"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-212"]
    }
  }, {
    "id": "wwdc2019-3560",
    "staticContentId": 3235,
    "eventContentId": 3560,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3560",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Taiwanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Taiwan",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-410",
    "staticContentId": 2742,
    "eventContentId": 410,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/410",
    "description": "Whether you want to publish code to share with the community, or you just want a convenient way to organize the code in your apps, Swift packages are here to help. Learn how to create local packages for your own development, how to customize your package via the manifest file, and how to go about publishing a package for others to use.",
    "title": "Creating Swift Packages",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/410p24ercmpgj258x/410/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/410p24ercmpgj258x/410/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/410p24ercmpgj258x/410/410_creating_swift_packages.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/410p24ercmpgj258x/410/410_hd_creating_swift_packages.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/410p24ercmpgj258x/410/410_sd_creating_swift_packages.mp4",
      "duration": 1865
    },
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-408", "wwdc2019-416", "wwdc2019-4160", "wwdc2019-4230", "wwdc2018-411"]
    }
  }, {
    "id": "wwdc2019-2100",
    "staticContentId": 2853,
    "eventContentId": 2100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2100",
    "description": "Meet with the Maps and Indoor Location engineers to discuss how you can best implement the latest features of MapKit and MapKit JS. Get advice on how to use the Indoor Mapping Data Format and GeoJSON to render highly customized indoor and outdoor map experiences in a power efficient and privacy conscious manner.",
    "title": "MapKit, MapKitJS, and Indoor Location Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-241", "wwdc2019-705"]
    }
  }, {
    "id": "wwdc2019-2040",
    "staticContentId": 2842,
    "eventContentId": 2040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2040",
    "description": "With great new watchOS features, new development complexities can arise. Apple engineers are here to help you successfully implement embedded groups in WatchKit to achieve specific UIs, generating your complication timeline entries, optimizing your runtime opportunities, and more. Bring your code and work with us to get your questions answered.",
    "title": "watchOS Lab",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "audio", "clkcomplication", "clockkit", "complications", "digital crown", "dynamic notifications", "extended runtime", "independence", "independent", "interactive notifications", "streaming", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-219", "wwdc2019-253", "wwdc2019-716"],
      "resources": [9]
    }
  }, {
    "id": "wwdc2019-706",
    "staticContentId": 2645,
    "eventContentId": 706,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/706",
    "description": "Sign In with Apple is the fast, easy way for people to sign in to apps using the Apple IDs they already have. Learn how easy it is to add a Sign In with Apple button to your app or website to acquire new customers and benefit from the built-in security, antifraud, and privacy that Sign In with Apple provides.",
    "title": "Introducing Sign In with Apple",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apple id", "sign in"],
    "topicIds": [11, 19],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/706sgor5wzq9m15o2r0/706/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/706sgor5wzq9m15o2r0/706/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/706sgor5wzq9m15o2r0/706/706_introducing_sign_in_with_apple.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/706sgor5wzq9m15o2r0/706/706_hd_introducing_sign_in_with_apple.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/706sgor5wzq9m15o2r0/706/706_sd_introducing_sign_in_with_apple.mp4",
      "duration": 2119
    },
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-302", "wwdc2019-305", "wwdc2019-504", "wwdc2019-516", "wwdc2019-708", "wwdc2019-7100"],
      "resources": [578, 527]
    }
  }, {
    "id": "wwdc2019-707",
    "staticContentId": 2858,
    "eventContentId": 707,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/707",
    "description": "Background execution is a powerful tool your app can leverage to provide a great user experience. Learn about best practices to follow when running in the background, especially if you use VoIP or silent pushes, and an all-new scheduling API that enables long running processing and maintenance tasks.",
    "title": "Advances in App Background Execution",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["background", "battery", "performance", "power"],
    "topicIds": [35],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/707smbqns2s4u1v49bn/707/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/707smbqns2s4u1v49bn/707/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/707smbqns2s4u1v49bn/707/707_advances_in_app_background_execution.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/707smbqns2s4u1v49bn/707/707_hd_advances_in_app_background_execution.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/707smbqns2s4u1v49bn/707/707_sd_advances_in_app_background_execution.mp4",
      "duration": 2347
    },
    "related": {
      "activities": ["wwdc2019-417", "wwdc2019-4110", "wwdc2019-4130", "wwdc2019-4170", "wwdc2019-4240", "wwdc2019-4260", "wwdc2019-7260"],
      "resources": [557, 523, 488]
    }
  }, {
    "id": "wwdc2019-210",
    "staticContentId": 2730,
    "eventContentId": 210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/210",
    "description": "Learn about the latest APIs in AppKit and associated frameworks. Get an overview of the enhancements coming in macOS Catalina to help you save time, take advantage of the latest hardware, and add polish to your application.",
    "title": "What’s New in AppKit for macOS",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/210fo5cr4fwdfn0/210/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/210fo5cr4fwdfn0/210/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/210fo5cr4fwdfn0/210/210_whats_new_in_appkit_for_macos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/210fo5cr4fwdfn0/210/210_hd_whats_new_in_appkit_for_macos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/210fo5cr4fwdfn0/210/210_sd_whats_new_in_appkit_for_macos.mp4",
      "duration": 2222
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-215", "wwdc2019-220", "wwdc2019-227", "wwdc2019-702", "wwdc2019-714", "wwdc2019-721", "wwdc2019-722", "wwdc2019-723", "wwdc2019-2020", "wwdc2019-2360"]
    }
  }, {
    "id": "wwdc2019-713",
    "staticContentId": 2635,
    "eventContentId": 713,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/713",
    "description": "Take your networking apps to the next level with advances in Bonjour, custom message framing handlers, and the latest in security. You’ll also learn how to understand your networking performance by collecting metrics, and how best to use the modern networking frameworks on Apple platforms.",
    "title": "Advances in Networking, Part 2",
    "startTime": "2019-06-06T17:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["network", "urlsession"],
    "topicIds": [18],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/713b310k72bjpcmz6xn/713/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/713b310k72bjpcmz6xn/713/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/713b310k72bjpcmz6xn/713/713_advances_in_networking_part_2.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/713b310k72bjpcmz6xn/713/713_hd_advances_in_networking_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/713b310k72bjpcmz6xn/713/713_sd_advances_in_networking_part_2.mp4",
      "duration": 3685
    },
    "related": {
      "activities": ["wwdc2019-422", "wwdc2019-712", "wwdc2019-714", "wwdc2019-716", "wwdc2019-7230"],
      "resources": [502, 501, 498, 137]
    }
  }, {
    "id": "wwdc2019-705",
    "staticContentId": 2766,
    "eventContentId": 705,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/705",
    "description": "Location technologies are core to delivering context-based services within your app. Discover how the latest features in the Core Location Framework lay the groundwork for advanced ranging capabilities and delivers more options for you to clearly communicate your location needs to your users, and allow them to provide more granular access authorization to your app.",
    "title": "What's New in Core Location",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/705lx74ghrsthpyfude/705/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/705lx74ghrsthpyfude/705/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/705lx74ghrsthpyfude/705/705_whats_new_in_core_location.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/705lx74ghrsthpyfude/705/705_hd_whats_new_in_core_location.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/705lx74ghrsthpyfude/705/705_sd_whats_new_in_core_location.mp4",
      "duration": 2145
    },
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-708", "wwdc2019-2100", "wwdc2019-2500", "wwdc2019-7120", "wwdc2019-7240"],
      "resources": [558]
    }
  }, {
    "id": "wwdc2019-4010",
    "staticContentId": 3077,
    "eventContentId": 4010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4010",
    "description": "Get expert help on how to use Auto Layout in your apps. Bring your code and talk with Interface Builder, Cocoa, and Cocoa Touch engineers on how to optimally structure your user interface.",
    "title": "Interface Builder and Auto Layout Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [34],
    "type": "Lab",
    "roomId": 73
  }, {
    "id": "wwdc2019-3730",
    "staticContentId": 3236,
    "eventContentId": 3730,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3730",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the European market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Europe",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-224",
    "staticContentId": 2725,
    "eventContentId": 224,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/224",
    "description": "iOS 13 combines powerful new multitasking and productivity technologies with a refreshed look and feel for all applications. Familiarize yourself with new requirements to keep your app ready for upcoming versions of iOS. Discover improvements to search fields and a totally new way to present UI. Learn how to adopt new gestures around selection, access peek and pop on all hardware, and how to renew your app's look for iOS 13.",
    "title": "Modernizing Your UI for iOS 13",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["borderless bars", "uitextinteraction"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/224xnuourakjstfak/224/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/224xnuourakjstfak/224/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/224xnuourakjstfak/224/224_modernizing_your_ui_for_ios_13.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/224xnuourakjstfak/224/224_hd_modernizing_your_ui_for_ios_13.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/224xnuourakjstfak/224/224_sd_modernizing_your_ui_for_ios_13.mp4",
      "duration": 3021
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2019-808", "wwdc2019-2430"],
      "resources": [542]
    }
  }, {
    "id": "wwdc2019-4030",
    "staticContentId": 3073,
    "eventContentId": 4030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4030",
    "description": "Join Apple engineering teams as they answer your questions about Swift. Whether you're just getting started, you're working on perfecting your protocols, or you just want to chat with someone who loves talking about opaque result types as much as you do, we'd love to meet you.",
    "title": "Swift Open Hours",
    "startTime": "2019-06-04T12:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-402"]
    }
  }, {
    "id": "wwdc2019-8110",
    "staticContentId": 3123,
    "eventContentId": 8110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8110",
    "description": "Get guidance on creating expressive and effective app icons and symbols for your app’s interface. Consult with Apple designers to refine your current icons or to discuss new directions. Come prepared with ideas or current designs, and learn about best practices for iconography across Apple platforms.",
    "title": "App Icon and SF Symbols Design Lab",
    "startTime": "2019-06-07T13:30:00-07:00",
    "endTime": "2019-06-07T15:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [6, 7],
    "type": "Lab",
    "roomId": 7,
    "related": {
      "activities": ["wwdc2019-206"]
    }
  }, {
    "id": "wwdc2019-206",
    "staticContentId": 2680,
    "eventContentId": 206,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/206",
    "description": "SF Symbols introduces a comprehensive library of vector-based symbols that you can incorporate into your app to simplify the layout of user interface elements through automatic alignment with surrounding text, and support for multiple weights and sizes. Learn how easy it is to adapt to different screen sizes and layouts, and improve the accessibility and localizability of your app. Get details on how to create new symbols for your specific needs that perfectly match the visual style of SF Symbols.",
    "title": "Introducing SF Symbols",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["baseline", "font", "san francisco", "scale", "sf hello", "uiimage", "weight"],
    "topicIds": [6, 7, 22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/206u451oe8jmzj52/206/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/206u451oe8jmzj52/206/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/206u451oe8jmzj52/206/206_introducing_sf_symbols.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/206u451oe8jmzj52/206/206_hd_introducing_sf_symbols.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/206u451oe8jmzj52/206/206_sd_introducing_sf_symbols.mp4",
      "duration": 2372
    },
    "related": {
      "activities": ["wwdc2019-201", "wwdc2019-227", "wwdc2019-403", "wwdc2019-801", "wwdc2019-2320", "wwdc2019-8110", "wwdc2017-823"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2019-6030",
    "staticContentId": 2941,
    "eventContentId": 6030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6030",
    "description": "Go hands-on with the Game Controller framework and get expert technical guidance for integrating with console game controllers. Bring your code and your questions.",
    "title": "Game Controllers Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [9, 26],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-616"]
    }
  }, {
    "id": "wwdc2019-5090",
    "staticContentId": 2916,
    "eventContentId": 5090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5090",
    "description": "Apple engineers will be on hand to review your code and answer questions from web content development and debugging to leveraging the latest native frameworks such as WKWebView, Safari View Controller, Universal Links, Authentication, and Safari Extensions. Whether you're a Swift developer looking to integrate web content and technologies into your app, or a web content developer looking to ensure implement cutting edge features, this lab is for you.",
    "title": "Safari, WebKit, and Authentication Services Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [20],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-203", "wwdc2019-504", "wwdc2019-717"]
    }
  }, {
    "id": "wwdc2019-3510",
    "staticContentId": 3237,
    "eventContentId": 3510,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3510",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Japanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Japan",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T13:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-6120",
    "staticContentId": 2942,
    "eventContentId": 6120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6120",
    "description": "SpriteKit makes it easy to create high-performance, power-efficient 2D games and more. Meet the SpriteKit engineering team to receive hands-on technical guidance. Come ready to code and get your questions answered.",
    "title": "SpriteKit Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [23, 24, 26],
    "type": "Lab",
    "roomId": 71
  }, {
    "id": "wwdc2019-2140",
    "staticContentId": 2840,
    "eventContentId": 2140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2140",
    "description": "With the ability to deliver an experience built only for Apple Watch, you may have some questions related to networking, runtime, and updated UI. Sit down with one of our watchOS engineers and get answers to the questions you have. We'll help you identify corner cases and configuration-specific considerations when building your watchOS app for an independent world.",
    "title": "watchOS Independence Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "clkcomplication", "clockkit", "complications", "digital crown", "dynamic notifications", "extended runtime", "independence", "independent", "interactive notifications", "notifications", "unnotification", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-251", "wwdc2019-253", "wwdc2019-716"]
    }
  }, {
    "id": "wwdc2019-428",
    "staticContentId": 2958,
    "eventContentId": 428,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/428",
    "description": "Create ML now enables you to create models for Natural Language that are built on state-of-the-art techniques. Learn how these models can be easily trained and tested with the Create ML app. Gain insight into the powerful new options for transfer learning, word embeddings, and text catalogs.",
    "title": "Training Text Classifiers in Create ML",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["ai", "artificial intelligence", "classifier", "core ml", "create ml", "gazetteer", "machine learning", "natural language", "nlp", "text", "text catalog", "training", "word embeddings"],
    "topicIds": [16],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/428c7jhmepea85p6tz/428/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/428c7jhmepea85p6tz/428/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/428c7jhmepea85p6tz/428/428_training_text_classifiers_in_create_ml.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/428c7jhmepea85p6tz/428/428_hd_training_text_classifiers_in_create_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/428c7jhmepea85p6tz/428/428_sd_training_text_classifiers_in_create_ml.mp4",
      "duration": 725
    },
    "related": {
      "activities": ["wwdc2019-232", "wwdc2019-407", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-713"]
    }
  }, {
    "id": "wwdc2019-704",
    "staticContentId": 2610,
    "eventContentId": 704,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/704",
    "description": "Core ML 3 now enables support for advanced model types that were never before available in on-device machine learning. Learn how model personalization brings amazing personalization opportunities to your app. Gain a deeper understanding of strategies for linking models and improvements to Core ML tools used for conversion of existing models.",
    "title": "Core ML 3 Framework",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ai", "artificial intelligence", "core ml", "core ml tools", "create ml", "deep learning", "learning", "machine learning", "model", "natural language", "neural network", "sound", "speech", "training", "vision"],
    "topicIds": [38, 16],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/704t1nfga5vi1x60x/704/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/704t1nfga5vi1x60x/704/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/704t1nfga5vi1x60x/704/704_core_ml_3_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/704t1nfga5vi1x60x/704/704_hd_core_ml_3_framework.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/704t1nfga5vi1x60x/704/704_sd_core_ml_3_framework.mp4",
      "duration": 2438
    },
    "related": {
      "activities": ["wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-256", "wwdc2019-420", "wwdc2019-425", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"],
      "resources": [27]
    }
  }, {
    "id": "wwdc2019-7160",
    "staticContentId": 3011,
    "eventContentId": 7160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7160",
    "description": "Meet the File Systems engineering team for expert advice and answers to your questions.",
    "title": "File Systems Lab",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [11],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-710"]
    }
  }, {
    "id": "wwdc2019-401",
    "staticContentId": 2874,
    "eventContentId": 401,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/401",
    "description": "Start the week with a tour of new features in Xcode 11, designed to help you get from idea to product faster than ever. Discover new ways to edit and organize your source code, new capabilities for designing and previewing user interfaces, and great improvements for debugging and testing. Get an overview for sessions covering developer tools this year.",
    "title": "What's New in Xcode 11",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 34, 37, 38],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/401dpvu3x1d3hgg5i6/401/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/401dpvu3x1d3hgg5i6/401/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/401dpvu3x1d3hgg5i6/401/401_whats_new_in_xcode_11.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/401dpvu3x1d3hgg5i6/401/401_hd_whats_new_in_xcode_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/401dpvu3x1d3hgg5i6/401/401_sd_whats_new_in_xcode_11.mp4",
      "duration": 1982
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-204", "wwdc2019-216", "wwdc2019-411", "wwdc2019-412", "wwdc2019-413", "wwdc2019-418", "wwdc2019-422", "wwdc2019-4020", "wwdc2019-4100", "wwdc2019-4190", "wwdc2019-4250"]
    }
  }, {
    "id": "wwdc2019-6070",
    "staticContentId": 2947,
    "eventContentId": 6070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6070",
    "description": "ARKit provides a cutting-edge platform for developing augmented reality (AR) apps for iPhone and iPad. Get expert tips and advice from ARKit engineers and designers about people occlusion, motion capture, collaborative experiences, and more. Bring your questions or work-in-progress.",
    "title": "ARKit Lab",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-604", "wwdc2019-605", "wwdc2019-6060", "wwdc2019-6090", "wwdc2019-6130", "wwdc2019-6140", "wwdc2019-6170"]
    }
  }, {
    "id": "wwdc2019-712",
    "staticContentId": 2634,
    "eventContentId": 712,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/712",
    "description": "Keep up with new and evolving networking protocols and standards by leveraging the modern networking frameworks on all Apple platforms and following best practices for efficiency and performance. In this session, learn about Low Data Mode, Combine in URLSession, WebSocket, and improvements to network mobility.",
    "title": "Advances in Networking, Part 1",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bonjour", "combine", "network", "urlsession", "websocket"],
    "topicIds": [18],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/712oixq9dtsljwqxm/712/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/712oixq9dtsljwqxm/712/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/712oixq9dtsljwqxm/712/712_advances_in_networking_part_1.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/712oixq9dtsljwqxm/712/712_hd_advances_in_networking_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/712oixq9dtsljwqxm/712/712_sd_advances_in_networking_part_1.mp4",
      "duration": 3418
    },
    "related": {
      "activities": ["wwdc2019-422", "wwdc2019-711", "wwdc2019-713", "wwdc2019-714", "wwdc2019-716", "wwdc2019-721", "wwdc2019-7230"],
      "resources": [498, 137]
    }
  }, {
    "id": "wwdc2019-5030",
    "staticContentId": 2932,
    "eventContentId": 5030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5030",
    "description": "iOS, macOS, watchOS and tvOS offer a rich set APIs for recording, processing, and playing back audio in your apps. Additionally, Audio Unit Extensions let you add sophisticated audio manipulation and processing capabilities to host apps. Get one-on-one technical guidance from Apple engineers about using Audio APIs and Audio Unit Extensions. Bring your code and your questions.",
    "title": "Audio Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-223", "wwdc2019-508", "wwdc2019-509", "wwdc2019-510", "wwdc2019-5080", "wwdc2019-5140", "wwdc2019-5150"]
    }
  }, {
    "id": "wwdc2019-3590",
    "staticContentId": 3238,
    "eventContentId": 3590,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3590",
    "description": "Apple Arcade is a game subscription service unlike any other. If you’re working on a groundbreaking, unreleased game and would like it to be considered for Apple Arcade, we’d love to hear from you. We appreciate any visuals you can bring, such as videos, screenshots, or playable builds. Please note that the Account Holder of your team needs to submit your game through https://developer.apple.com/apple-arcade/ before this lab.",
    "title": "Pitch to Apple Arcade",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "actionLinkPrompt": "Learn More",
    "actionLinkURL": "https://developer.apple.com/apple-arcade/",
    "roomId": 128
  }, {
    "id": "wwdc2019-211",
    "staticContentId": 2713,
    "eventContentId": 211,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/211",
    "description": "tvOS apps can deliver amazing experiences with stunning picture quality through 4K resolution, Dolby Vision and HDR10, and immersive sound through Dolby Atmos. Discover how to design beautiful, engaging, content-first experiences for your media applications. Learn about the new Top Shelf extension and styles to engage customers in your content before they even open your app. Take advantage of user profile support to offer an even more intuitive shared device experience.",
    "title": "Mastering the Living Room With tvOS",
    "startTime": "2019-06-04T17:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["📺", "actions carousel", "apple tv", "apple tv 4k", "carousel", "content", "content first", "living room", "mastering", "new", "new api", "preview", "remote", "top shelf", "top shelf new", "trailers", "tv app", "tv design", "tvos", "tvos13", "tvos 13", "tv remote", "tv room"],
    "topicIds": [3, 6, 13, 22],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/211p61zvgdkn99y/211/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/211p61zvgdkn99y/211/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/211p61zvgdkn99y/211/211_mastering_the_living_room_with_tvos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/211p61zvgdkn99y/211/211_hd_mastering_the_living_room_with_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/211p61zvgdkn99y/211/211_sd_mastering_the_living_room_with_tvos.mp4",
      "duration": 2914
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-2250", "wwdc2019-2400", "wwdc2019-5060", "wwdc2019-5100", "wwdc2019-5130", "wwdc2019-5160"],
      "resources": [552, 551, 550, 547, 526]
    }
  }, {
    "id": "wwdc2019-262",
    "staticContentId": 2896,
    "eventContentId": 262,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/262",
    "description": "The new Link Presentation framework enables app developers to easily present URLs in a rich, beautiful, and consistent way. Learn how to use Link Presentation to retrieve metadata from a URL, present the rich link content inside your app, and provide link metadata to the new share sheet experience in iOS.",
    "title": "Embedding and Sharing Visually Rich Links",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/262piyu998eqe22u/262/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/262piyu998eqe22u/262/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/262piyu998eqe22u/262/262_embedding_and_sharing_visually_rich_links.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/262piyu998eqe22u/262/262_hd_embedding_and_sharing_visually_rich_links.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/262piyu998eqe22u/262/262_sd_embedding_and_sharing_visually_rich_links.mp4",
      "duration": 403
    },
    "related": {
      "activities": ["tech-talks-205"]
    }
  }, {
    "id": "wwdc2019-116",
    "staticContentId": 3259,
    "eventContentId": 116,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/116",
    "description": "Open to all attendees, these informal breakfasts are a great way to meet some of the phenomenal people at WWDC while you start your day with a buffet. Gain insights from Latinx developers creating incredible apps for Apple platforms. Moderated by Melinda Borjon Heinlein, Apple Worldwide Developer Relations.\r\n\r\nThis event takes place at the Hilton San Jose in the Market Room, located on street level.",
    "title": "Latinx@WWDC Breakfast",
    "startTime": "2019-06-06T07:30:00-07:00",
    "endTime": "2019-06-06T08:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 132
  }, {
    "id": "wwdc2019-4260",
    "staticContentId": 3174,
    "eventContentId": 4260,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4260",
    "description": "Bring your project to have our engineers help with advanced profiling and bulletproofing your app. Figure out what is using up that battery capacity, and what you can do about it. Learn how to use debugging tools like Instruments, LLDB, and memory graphs to track down problems. Get hands-on help analyzing your app with tools like the Address Sanitizer and Thread Sanitizer. Speak with an Apple engineer to find out how to best use signposts in your app, and build a custom instrument of your own.",
    "title": "Performance, Power, Crashes, and Debugging Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 35],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-412", "wwdc2019-414", "wwdc2019-419", "wwdc2019-421", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-3490",
    "staticContentId": 3239,
    "eventContentId": 3490,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3490",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Chinese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to China",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-6180",
    "staticContentId": 3270,
    "eventContentId": 6180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6180",
    "description": "Metal Performance Shaders (MPS) harness the massive parallelism of the GPU to dramatically accelerate machine learning, ray tracing, and more. Meet the engineering team and get your questions answered.",
    "title": "Metal for Machine Learning and Ray Tracing Lab",
    "startTime": "2019-06-07T12:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 27, 16],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-606", "wwdc2019-613", "wwdc2019-614", "wwdc2019-6020", "wwdc2019-6080", "wwdc2019-6100", "wwdc2019-6160"]
    }
  }, {
    "id": "wwdc2019-213",
    "staticContentId": 2649,
    "eventContentId": 213,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/213",
    "description": "Parameters take Siri Shortcuts to the next level, enabling an interactive voice experience in Siri with follow-up questions, and allowing people to customize shortcuts in the Shortcuts app, now built into iOS. Walk through setting up your shortcuts to take advantage of parameters and learn how your shortcuts can pass output to other actions when creating multi-step shortcuts in the Shortcuts app.",
    "title": "Introducing Parameters for Shortcuts",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/213q1mftanbup84jc/213/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/213q1mftanbup84jc/213/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/213q1mftanbup84jc/213/213_introducing_parameters_for_shortcuts.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/213q1mftanbup84jc/213/213_hd_introducing_parameters_for_shortcuts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/213q1mftanbup84jc/213/213_sd_introducing_parameters_for_shortcuts.mp4",
      "duration": 1919
    },
    "related": {
      "activities": ["wwdc2019-804", "wwdc2019-805", "wwdc2019-806", "wwdc2019-2010", "wwdc2019-2160", "wwdc2019-2310", "wwdc2019-2470", "wwdc2019-8050"],
      "resources": [350, 348, 12]
    }
  }, {
    "id": "wwdc2019-424",
    "staticContentId": 2955,
    "eventContentId": 424,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/424",
    "description": "Custom Core ML models for Object Detection offer you an opportunity to add some real magic to your app. Learn how the Create ML app in Xcode makes it easy to train and evaluate these models. See how you can test the model performance directly within the app by taking advantage of Continuity Camera. It's never been easier to build and deploy great Object Detection models for Core ML.",
    "title": "Training Object Detection Models in Create ML",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["ai", "artificial intelligence", "camera", "classifier", "core ml", "core motion", "create ml", "images", "machine learning", "object detection", "photos", "training", "vision"],
    "topicIds": [16],
    "type": "Video",
    "related": {
      "activities": ["wwdc2019-406", "wwdc2019-420", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-717"]
    }
  }, {
    "id": "wwdc2019-4070",
    "staticContentId": 3080,
    "eventContentId": 4070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4070",
    "description": "Whether you're using Swift Playgrounds as part of your development workflow, or you're creating content to teach others, stop by and get expert help from Apple engineers.",
    "title": "Swift Playgrounds Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [36],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-405"]
    }
  }, {
    "id": "wwdc2019-3200",
    "staticContentId": 3210,
    "eventContentId": 3200,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3200",
    "description": "Receive guidance on choosing business models, launch planning, marketing, engaging your users, and localizing your app to reach a global audience. Bring any information that will help us assist you, such as a demo of your app or business and marketing plans.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Business & Marketing By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 29
  }, {
    "id": "wwdc2019-239",
    "staticContentId": 2723,
    "eventContentId": 239,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/239",
    "description": "Successful app development requires mastering a lot of different things. Discover practices you can incorporate into your development workflow to enhance your productivity, and improve your app’s performance and stability. Learn how to improve the quality of code you write with Xcode. Gain a practical understanding of some valuable development techniques.",
    "title": "Great Developer Habits",
    "startTime": "2019-06-07T10:00:00-07:00",
    "endTime": "2019-06-07T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 38, 22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"]
  }, {
    "id": "wwdc2019-7020",
    "staticContentId": 2918,
    "eventContentId": 7020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7020",
    "description": "Meet with Apple’s Machine Learning engineers for expert advice on model training in Create ML or Turi Create, the Core ML Framework, model conversion, and domain APIs for Vision, Natural Language, Speech, and Sound. Bring your datasets, source code, and demos.",
    "title": "Machine Learning Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["convertors", "core ml", "core ml tools", "create ml", "model personalization", "models", "natural language", "neural networks", "nlp", "on-device training", "sound", "speech", "vision"],
    "topicIds": [16],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-222", "wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-406", "wwdc2019-407", "wwdc2019-420", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-430", "wwdc2019-704"]
    }
  }, {
    "id": "wwdc2019-7270",
    "staticContentId": 3125,
    "eventContentId": 7270,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7270",
    "description": "Using or planning to use Core NFC in your apps? This is your opportunity to meet Apple’s Core NFC team and get your questions answered, including questions about the new capabilities such as NDEF writing and native tag protocols.",
    "title": "Core NFC Lab",
    "startTime": "2019-06-07T17:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["nfc"],
    "topicIds": [10],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-715"]
    }
  }, {
    "id": "wwdc2019-110",
    "staticContentId": 3185,
    "eventContentId": 110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/110",
    "description": "Celebrate Global Running Day with an invigorating run through San Jose led by the amazing Joan Benoit Samuelson, winner of the Boston Marathon, the Chicago Marathon, and the first ever Women’s Olympic Marathon. All levels are invited to join this out-and-back 5K run. Check-in starts at 6:30 a.m at the Activity Studio, located at 420 S First Street, San Jose CA, 95113.",
    "title": "WWDC Run with Joan Benoit Samuelson",
    "startTime": "2019-06-05T07:00:00-07:00",
    "endTime": "2019-06-05T08:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "actionLinkPrompt": "Register Now",
    "actionLinkURL": "https://developer.apple.com/wwdc19/fitness/wwdc-run/",
    "roomId": 130
  }, {
    "id": "wwdc2019-723",
    "staticContentId": 3188,
    "eventContentId": 723,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/723",
    "description": "The Foundation framework provides a base layer of functionality for apps and frameworks that's used throughout the macOS, iOS, watchOS, and tvOS SDKs. Hear about valuable enhancements to Foundation collections, performance, internationalization features, and Swift integration.",
    "title": "Advances in Foundation",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [67],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/723ijngq6f3vi97/723/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/723ijngq6f3vi97/723/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/723ijngq6f3vi97/723/723_advances_in_foundation.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/723ijngq6f3vi97/723/723_hd_advances_in_foundation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/723ijngq6f3vi97/723/723_sd_advances_in_foundation.mp4",
      "duration": 950
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-719", "wwdc2019-7110"]
    }
  }, {
    "id": "wwdc2019-7050",
    "staticContentId": 2998,
    "eventContentId": 7050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7050",
    "description": "Meet the Accelerate engineering team to get their expert advice on handling large-scale mathematical computations and optimal CPU-based image processing. The Accelerate framework and the associated SIMD library provide a comprehensive array of APIs that help you achieve best performance in iOS, macOS, tvOS, and watchOS.",
    "title": "Accelerate Lab",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "blas", "computation", "dft", "fft", "image processing", "lapack", "linear algebra", "neural network", "noise", "numerics", "performance", "quaternions", "real-time video", "simd", "slerp", "sparse solver", "spline", "swift", "vdsp", "vector", "vforce", "vimage"],
    "topicIds": [67],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-718"]
    }
  }, {
    "id": "wwdc2019-217",
    "staticContentId": 2633,
    "eventContentId": 217,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/217",
    "description": "The ResearchKit and CareKit frameworks are the fastest route to delivering powerful native iOS apps for the research and patient care field.  Learn about the newest audio and speech active-tasks, a completely redesigned user experience, and modular architecture designed to make it a breeze to create care plan apps for any use case.",
    "title": "ResearchKit and CareKit Reimagined",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [14, 22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/217hlrq3o5glluc/217/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/217hlrq3o5glluc/217/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/217hlrq3o5glluc/217/217_researchkit_and_carekit_reimagined.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/217hlrq3o5glluc/217/217_hd_researchkit_and_carekit_reimagined.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/217hlrq3o5glluc/217/217_sd_researchkit_and_carekit_reimagined.mp4",
      "duration": 3039
    },
    "related": {
      "activities": ["wwdc2019-218", "wwdc2019-2230"],
      "resources": [507, 506, 505, 233, 232, 231]
    }
  }, {
    "id": "wwdc2019-7230",
    "staticContentId": 3000,
    "eventContentId": 7230,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7230",
    "description": "Meet Apple’s networking engineers for answers and expert advice. This is your opportunity to make sure you understand and know how to take advantage of the new APIs and improvements discussed in the Networking sessions.",
    "title": "Networking Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bonjour", "combine", "network", "urlsession", "websocket"],
    "topicIds": [18],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-712", "wwdc2019-713", "wwdc2019-714"]
    }
  }, {
    "id": "wwdc2019-122",
    "staticContentId": 3180,
    "eventContentId": 122,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/122",
    "description": "From its 1969 origins as an experiment gauging the power of television to educate children and level the playing field for underserved preschoolers, Sesame Street has stretched to reach 150 countries, becoming the world’s largest informal educator and bringing learning and laughter to generations of children across the globe. Brown Johnson, EVP and Creative Director for Sesame Workshop, the nonprofit organization behind Sesame Street and much more, marks the iconic show’s 50th anniversary with a peek behind the scenes, including the ways Sesame Street uses media in new ways to stay vital and relevant for children in an evolving landscape.",
    "title": "Sesame Street: 50 Years and Counting",
    "startTime": "2019-06-07T12:30:00-07:00",
    "endTime": "2019-06-07T13:20:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [2],
    "type": "Special Event",
    "roomId": 62
  }, {
    "id": "wwdc2019-425",
    "staticContentId": 2956,
    "eventContentId": 425,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/425",
    "description": "Learn how to quickly and easily create Core ML models capable of classifying the sounds heard in audio files and live audio streams. In addition to providing you the ability to train and evaluate these models, the Create ML app allows you to test the model performance in real-time using the microphone on your Mac. Leverage these on-device models in your app using the new Sound Analysis framework.",
    "title": "Training Sound Classification Models in Create ML",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["ai", "artificial intelligence", "audio", "classifier", "core ml", "create ml", "machine learning", "sound", "training"],
    "topicIds": [16],
    "type": "Video",
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-406", "wwdc2019-430", "wwdc2019-704", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"]
    }
  }, {
    "id": "wwdc2019-3470",
    "staticContentId": 3241,
    "eventContentId": 3470,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3470",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Korean market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Korea",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T10:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-7060",
    "staticContentId": 3016,
    "eventContentId": 7060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7060",
    "description": "Engineers in Apple’s Core OS teams will be on hand to discuss System Extensions, DriverKit, GCD, XPC and other low-level technologies. Bring your code and your questions.",
    "title": "Core OS Lab",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["driver", "extensions", "gcd", "kernel", "xpc"],
    "topicIds": [35],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-702"]
    }
  }, {
    "id": "wwdc2019-4040",
    "staticContentId": 3082,
    "eventContentId": 4040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4040",
    "description": "New to developing for Apple platforms? Get your questions answered by engineers on the Xcode team. From getting started with a project, to running your app on a device, to testing and distribution, we're here to help.",
    "title": "Getting Started with Xcode Lab",
    "startTime": "2019-06-04T12:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-404"]
    }
  }, {
    "id": "wwdc2019-6060",
    "staticContentId": 2948,
    "eventContentId": 6060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6060",
    "description": "Architected for AR, RealityKit provides developers access to world-class capabilities for rendering, animation, physics, and spatial audio. Meet the RealityKit engineering team to get questions answered, and go hands-on with Reality Composer to quickly and easily prototype and build AR experiences.",
    "title": "RealityKit and Reality Composer Lab",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-605", "wwdc2019-6070", "wwdc2019-6090", "wwdc2019-6130", "wwdc2019-6140", "wwdc2019-6170"]
    }
  }, {
    "id": "wwdc2019-2440",
    "staticContentId": 3052,
    "eventContentId": 2440,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2440",
    "description": "Meet with the Engineers behind Apple’s new framework for building apps, SwiftUI. Get advice on how to begin building a new app with SwiftUI or begin incorporating SwiftUI into your existing app. Bring your questions and your code.",
    "title": "SwiftUI Lab",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [36, 38, 22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-219", "wwdc2019-226", "wwdc2019-231", "wwdc2019-233", "wwdc2019-237"]
    }
  }, {
    "id": "wwdc2019-109",
    "staticContentId": 3267,
    "eventContentId": 109,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/109",
    "description": "Enjoy live music, a selection of local beers, and the company of fellow developers. Attendees 21 years and older may drink alcohol and can pick up a wristband for drinks on Tuesday on the plaza outside McEnery Convention Center by showing their valid government-issued photo ID.",
    "title": "Music on the Plaza",
    "startTime": "2019-06-04T18:00:00-07:00",
    "endTime": "2019-06-04T20:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "roomId": 84
  }, {
    "id": "wwdc2019-7030",
    "staticContentId": 3007,
    "eventContentId": 7030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7030",
    "description": "Engineers from Apple’s Security team will be on hand to answer your questions and give you expert advice on all aspects of security: authorization and authentication, protecting data on device and in transit, cryptography, notarization for Mac apps, code signing, and more.",
    "title": "Security Lab",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-701", "wwdc2019-709"]
    }
  }, {
    "id": "wwdc2019-3550",
    "staticContentId": 3242,
    "eventContentId": 3550,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3550",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Chinese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to China",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T10:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-3050",
    "staticContentId": 3012,
    "eventContentId": 3050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3050",
    "description": "Members of App Store Engineering and App Store Operations will be on hand to answer your questions about StoreKit, in-app purchases, server-to-server notifications, receipt validation, subscriptions, ODR, payment queue and the sandbox environment.",
    "title": "In-App Purchases & Subscriptions Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [69],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-301", "wwdc2019-302", "wwdc2019-305"]
    }
  }, {
    "id": "wwdc2019-219",
    "staticContentId": 2606,
    "eventContentId": 219,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/219",
    "description": "SwiftUI allows a whole new world of possibilities when developing watchOS apps and notifications. From custom animations to providing an intuitive feel with Digital Crown haptics, SwiftUI helps you build exciting and immersive experiences for Apple Watch. See how easy it is to create custom elements with animations, embed gesture-driven animations within notifications, and learn about the enhanced debugging support to make watchOS app development faster than ever.",
    "title": "SwiftUI on watchOS",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "canvas", "clkcomplication", "clockkit", "complications", "declarative", "digital crown", "dynamic notifications", "extended runtime", "independence", "independent", "interactive notifications", "preview", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/219s60i7y7dovs8r4/219/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/219s60i7y7dovs8r4/219/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/219s60i7y7dovs8r4/219/219_swiftui_on_watchos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/219s60i7y7dovs8r4/219/219_hd_swiftui_on_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/219s60i7y7dovs8r4/219/219_sd_swiftui_on_watchos.mp4",
      "duration": 1853
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-208", "wwdc2019-216", "wwdc2019-226", "wwdc2019-231", "wwdc2019-237", "wwdc2019-240", "wwdc2019-251", "wwdc2019-2040", "wwdc2019-2080", "wwdc2019-2180", "wwdc2019-2300", "wwdc2019-2440"],
      "resources": [576, 572, 571, 9]
    }
  }, {
    "id": "wwdc2019-303",
    "staticContentId": 2812,
    "eventContentId": 303,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/303",
    "description": "Learn about the latest management enhancements for iOS, macOS, and tvOS and the evolution of management tools over the past year. You'll discover how new MDM features help administrators manage devices more effectively, how new technologies deliver support for centrally managed authorization, and how Apple Business Manager and Apple School Manager have been enhanced to streamline management of your organizations apps, content, and devices.",
    "title": "What’s New in Managing Apple Devices",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [70, 44, 12],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-304", "wwdc2019-3020", "wwdc2019-3040"],
      "resources": [586, 585, 583, 582, 581, 329, 146, 143]
    }
  }, {
    "id": "wwdc2019-258",
    "staticContentId": 2965,
    "eventContentId": 258,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/258",
    "description": "Dive into the details about what it means to support multitasking in iOS 13. Understand how previous best practices fit together with new ideas. Learn the nuances of structuring your application to support multiple windows, and how to instantiate your UI, handle windows coming and going, and manage your app’s underlying window resources.",
    "title": "Architecting Your App for Multiple Windows",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video"
  }, {
    "id": "wwdc2019-7080",
    "staticContentId": 3018,
    "eventContentId": 7080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7080",
    "description": "Questions about notarizing your apps for distribution outside the Mac App Store? Get together with the engineers who work on notarization for one-on-one assistance.",
    "title": "Mac App Notarization Lab",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [43],
    "type": "Lab",
    "roomId": 67
  }, {
    "id": "wwdc2019-9020",
    "staticContentId": 3083,
    "eventContentId": 9020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/9020",
    "description": "Bluetooth accessories extend the capabilities of Apple devices to health, education, music, and so much more. Want to see what new accessories are possible with BR/EDR and dual-mode devices? Have questions about privacy? Apple's Core Bluetooth engineers will be available to answer your questions and assist you.",
    "title": "Core Bluetooth Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessories", "accessory", "ancs", "ble", "bleutooth", "bluetooth", "bluetooth 5", "bluetooth low energy", "br/edr", "bt", "btle", "cbcentral", "cbperipheral", "central", "characteristic", "classic", "corebluetooth", "core bluetooth", "gatt", "l2cap", "mfi", "packetlogger", "peripheral", "privacy", "service", "throughput", "wireless"],
    "topicIds": [9],
    "type": "Lab",
    "roomId": 71
  }, {
    "id": "wwdc2019-3060",
    "staticContentId": 3022,
    "eventContentId": 3060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3060",
    "description": "Gain a better understanding of the App Store Review Guidelines so you can plan and build great app experiences for Apple platforms.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Review By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 26
  }, {
    "id": "wwdc2019-305",
    "staticContentId": 2864,
    "eventContentId": 305,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/305",
    "description": "Dive into implementation best practices for Subscription Offers using StoreKit and server-side logic. Learn how to generate signatures, determine customer eligibility, and reduce churn, plus gain insights into strategies for distributing offers to your customers and utilizing Subscription Offers to give your subscribers the best experience.",
    "title": "Subscription Offers Best Practices",
    "startTime": "2019-06-07T14:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["in-app purchase", "storekit", "subscription"],
    "topicIds": [69],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-301", "wwdc2019-302", "wwdc2019-706", "wwdc2019-3010", "wwdc2019-3030", "wwdc2019-3050"],
      "resources": [543, 496, 495, 494, 493, 466, 448]
    }
  }, {
    "id": "wwdc2019-3600",
    "staticContentId": 3243,
    "eventContentId": 3600,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3600",
    "description": "Meet one-on-one with members of the App Store team to find out what makes an app feature-worthy and discuss potential story ideas for the Today tab.",
    "title": "Learn More About the Today Tab",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-3130",
    "staticContentId": 3023,
    "eventContentId": 3130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3130",
    "description": "Learn how App Store Connect can help you manage your apps and provide great customer experiences. Get details on using TestFlight, Sales and Trends, and App Analytics. Receive guidance on responding to customer reviews, setting up in-app purchases, uploading builds, using the App Store Connect API, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Connect By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 24
  }, {
    "id": "wwdc2019-3080",
    "staticContentId": 3026,
    "eventContentId": 3080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3080",
    "description": "Learn how to promote your app at the top of relevant App Store search results.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Apple Search Ads By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 28
  }, {
    "id": "wwdc2019-612",
    "staticContentId": 2711,
    "eventContentId": 612,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/612",
    "description": "AR Quick Look is a built-in viewer for experiencing high-quality content in 3D and AR. See how integration with Reality Composer enables rich, interactive experiences to be displayed and shared more easily than ever before. Explore rendering improvements and multiple object viewing, then dive into the practical application of AR Quick Look in retail, education, and more.",
    "title": "Advances in AR Quick Look",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-602", "wwdc2019-603", "wwdc2019-604", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-6090", "wwdc2019-6170", "wwdc2018-603"],
      "resources": [508, 25]
    }
  }, {
    "id": "wwdc2019-241",
    "staticContentId": 2626,
    "eventContentId": 241,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/241",
    "description": "The Indoor Maps Program enables organizations with large public or private spaces to deliver user experiences that provide precise indoor location information and present stunning indoor maps. Discover the overall process in the indoor map enablement workflow then take deep dive into the technical details on how MapKit and MapKit JS use powerful APIs and geo-standards to rapidly integrate indoor maps into your app and website.",
    "title": "Adding Indoor Maps to your App and Website",
    "startTime": "2019-06-07T14:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [70, 17, 19, 20, 22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-245", "wwdc2019-2100", "wwdc2019-2500"],
      "resources": [588, 566, 414, 100]
    }
  }, {
    "id": "wwdc2019-714",
    "staticContentId": 2902,
    "eventContentId": 714,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/714",
    "description": "Learn about powerful new APIs in macOS that you can use to create apps that extend and customize the networking capabilities of macOS without using kernel extensions.",
    "title": "Network Extensions for the Modern Mac",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["extension", "kernel", "network"],
    "topicIds": [18],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-701", "wwdc2019-702", "wwdc2019-712", "wwdc2019-713", "wwdc2019-7230", "wwdc2015-717"],
      "resources": [504]
    }
  }, {
    "id": "wwdc2019-3370",
    "staticContentId": 3214,
    "eventContentId": 3370,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3370",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-805",
    "staticContentId": 3034,
    "eventContentId": 805,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/805",
    "description": "Shortcuts enable people to quickly and easily accomplish actions or get things done hands-free using Siri and the Shortcuts app. Join us for a tour of where shortcuts can appear, how you can customize the experience, and how your app’s shortcuts can be used with variables and actions from other apps.",
    "title": "Building Great Shortcuts",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [3, 21],
    "type": "Video",
    "related": {
      "activities": ["wwdc2019-213", "wwdc2019-804", "wwdc2019-806", "wwdc2019-2010", "wwdc2019-2160", "wwdc2019-2310", "wwdc2019-2470", "wwdc2019-8050"],
      "resources": [350, 348, 12]
    }
  }, {
    "id": "wwdc2019-3610",
    "staticContentId": 3244,
    "eventContentId": 3610,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3610",
    "description": "Meet one-on-one with members of the App Store team to find out what makes an app feature-worthy and discuss potential story ideas for the Today tab.",
    "title": "Learn More About the Today Tab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-7070",
    "staticContentId": 2877,
    "eventContentId": 7070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7070",
    "description": "Get help using motion and environment-related data from the onboard hardware of iOS devices as input in your App. Receive expert assistance and tips from the Core Motion engineers. Bring your code and your questions.",
    "title": "Core Motion Lab",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [14, 17],
    "type": "Lab",
    "roomId": 69
  }, {
    "id": "wwdc2019-7100",
    "staticContentId": 3014,
    "eventContentId": 7100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7100",
    "description": "Sign in with Apple is the fast, easy way for people to sign in to apps using the Apple IDs they already have. Meet the engineers who work on Sign In with Apple, bring your questions, and get started on implementing this feature in your apps.",
    "title": "Sign In with Apple Lab",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [11, 22],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-706"]
    }
  }, {
    "id": "wwdc2019-2470",
    "staticContentId": 2839,
    "eventContentId": 2470,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2470",
    "description": "Excited about SiriKit and shortcuts, but have some questions about them? Let our engineering team work with you and help you figure out the best path forward with either. Bring your laptop and sit with an Apple engineer who can work with you to create a great Siri-enabled experience with your app.",
    "title": "SiriKit and Shortcuts Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-207", "wwdc2019-213", "wwdc2019-804", "wwdc2019-805", "wwdc2019-806"]
    }
  }, {
    "id": "wwdc2019-2410",
    "staticContentId": 3050,
    "eventContentId": 2410,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2410",
    "description": "Meet with the iPad Apps for Mac team to discuss bringing your iPad app to the Mac. Get hands-on technical assistance and advice about using UIKit frameworks on the Mac. Get advice about using UIKit frameworks on the Mac and tailoring the user experience.",
    "title": "iPad Apps for Mac Lab",
    "startTime": "2019-06-07T10:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["catalyst", "checkbox", "ipad app", "project catalyst", "uikit"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-227", "wwdc2019-235", "wwdc2019-809"]
    }
  }, {
    "id": "wwdc2019-423",
    "staticContentId": 2662,
    "eventContentId": 423,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/423",
    "description": "Slow app launches are frustrating. Learn about the new app launch instrument and discover how to make your app launch fast. Gain insights into what happens during app launch and how to minimize, prioritize, and optimize work at this critical time. Hear tips and tricks from the engineers making iOS apps launch fast.",
    "title": "Optimizing App Launch",
    "startTime": "2019-06-07T16:20:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["dyld", "dyld3", "fast", "instruments", "launch", "measure", "performance", "rocket", "slow", "speed", "uikit", "xcode"],
    "topicIds": [35],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"]
  }, {
    "id": "wwdc2019-2230",
    "staticContentId": 2870,
    "eventContentId": 2230,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2230",
    "description": "Apple engineers will be on hand to review your code and answer questions about HealthKit, workouts, CareKit and ResearchKit. Any technical, code-based, or session follow-up question are fair game so don't be shy. We're here to answer your questions, help you learn about the latest development techniques and tools, and improve your code and apps.",
    "title": "Health and Fitness Technologies Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [14],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-217", "wwdc2019-218"]
    }
  }, {
    "id": "wwdc2019-212",
    "staticContentId": 2704,
    "eventContentId": 212,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/212",
    "description": "Multitasking is an exciting way to add power to your iPad app. It is easy to enable your app to run two instances of your interface side-by-side, and your customers will love it. Learn how to take your existing features like drag and drop and use them to easily create a second window. Find out how supporting multiple windows changes the app lifecycle and what that means for all applications. Hear about some common mistakes and how to solve them, setting you and your customers up for a fantastic experience.",
    "title": "Introducing Multiple Windows on iPad",
    "startTime": "2019-06-04T17:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["multiple", "multitasking", "multiwindow", "restoration", "scenes", "state", "uiscene", "uiwindowscene", "windows"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/212nyxqyrke8a9t/212/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/212nyxqyrke8a9t/212/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/212nyxqyrke8a9t/212/212_introducing_multiple_windows_on_ipad.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/212nyxqyrke8a9t/212/212_hd_introducing_multiple_windows_on_ipad.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/212nyxqyrke8a9t/212/212_sd_introducing_multiple_windows_on_ipad.mp4",
      "duration": 2532
    },
    "related": {
      "activities": ["wwdc2019-221", "wwdc2019-233", "wwdc2019-242", "wwdc2019-721", "wwdc2019-2350"]
    }
  }, {
    "id": "wwdc2019-8040",
    "staticContentId": 3045,
    "eventContentId": 8040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8040",
    "description": "Get advice on making your apps simple to use and visually compelling. Come prepared with a working prototype, development build, or your released app. You can walk in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nWalk-in chats are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes each and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per developer for the duration of the conference.",
    "title": "Design Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 7
  }, {
    "id": "wwdc2019-2070",
    "staticContentId": 2848,
    "eventContentId": 2070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2070",
    "description": "Talk with the experts about Business Chat and iMessage app's capabilities to extend your app into the Business Chat user experience without ever leaving the conversation. Whether you are a Customer Service Platform provider,  a commercial app developer, or simply looking to extend your app into messages conversations, iMessage and Business Chat engineers are here to answer your questions.",
    "title": "Business Chat Integration and iMessage App Lab",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [40, 70, 39, 13],
    "type": "Lab",
    "roomId": 72
  }, {
    "id": "wwdc2019-3740",
    "staticContentId": 3271,
    "eventContentId": 3740,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3740",
    "description": "Meet with our Apple Search Ads experts. Learn how to help people discover your app at the top of App Store search results and how to optimize your app promotion to reach engaged users.",
    "title": "Apple Search Ads Lab",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 70
  }, {
    "id": "wwdc2019-403",
    "staticContentId": 2753,
    "eventContentId": 403,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/403",
    "description": "Learn how your app can support per-app language settings in iOS 13. Get the details on localizing assets with asset catalogs and simplifying your localization workflow with Xcode 11. Understand how to generate screenshots in multiple languages for localization and testing.",
    "title": "Creating Great Localized Experiences with Xcode 11",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "i18n", "localization", "world"],
    "topicIds": [42],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/403n9n5z0vd71jw4q2/403/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/403n9n5z0vd71jw4q2/403/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/403n9n5z0vd71jw4q2/403/403_creating_great_localized_experiences_with_xcode_11.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/403n9n5z0vd71jw4q2/403/403_hd_creating_great_localized_experiences_with_xcode_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/403n9n5z0vd71jw4q2/403/403_sd_creating_great_localized_experiences_with_xcode_11.mp4",
      "duration": 2098
    },
    "related": {
      "activities": ["wwdc2019-206", "wwdc2019-227", "wwdc2019-413", "wwdc2019-2060", "wwdc2019-2450"],
      "resources": [512]
    }
  }, {
    "id": "wwdc2019-602",
    "staticContentId": 2686,
    "eventContentId": 602,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/602",
    "description": "Universal Scene Description (USD) enables the robust description of 3D scenes and empowers engineers and artists to seamlessly collaborate across the creative workflow. Get introduced to the powerful capabilities of USD and explore its incredible scalability. Gain a deeper understanding of how USD assets are created and learn about delivering usdz content for use with ARKit and RealityKit.",
    "title": "Working with USD",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/602ytoojud5i0kfnj4n/602/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/602ytoojud5i0kfnj4n/602/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/602ytoojud5i0kfnj4n/602/602_working_with_usd.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/602ytoojud5i0kfnj4n/602/602_hd_working_with_usd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/602ytoojud5i0kfnj4n/602/602_sd_working_with_usd.mp4",
      "duration": 1915
    },
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-604", "wwdc2019-609", "wwdc2019-612", "wwdc2019-6090"],
      "resources": [508]
    }
  }, {
    "id": "wwdc2019-603",
    "staticContentId": 2690,
    "eventContentId": 603,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/603",
    "description": "Architected for AR, RealityKit provides developers access to world-class capabilities for rendering, animation, physics, and spatial audio. See how RealityKit reimagines the traditional 3D engine to make AR development faster and easier for developers than ever before. Understand the building blocks of developing RealityKit based apps and games, and learn about prototyping and producing content for AR experiences with Reality Composer.",
    "title": "Introducing RealityKit and Reality Composer",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/603y6t9wal4i9m/603/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/603y6t9wal4i9m/603/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/603y6t9wal4i9m/603/603_introducing_realitykit_and_reality_composer.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/603y6t9wal4i9m/603/603_hd_introducing_realitykit_and_reality_composer.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/603y6t9wal4i9m/603/603_sd_introducing_realitykit_and_reality_composer.mp4",
      "duration": 2233
    },
    "related": {
      "activities": ["wwdc2019-415", "wwdc2019-602", "wwdc2019-604", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-612", "wwdc2019-6060", "wwdc2019-6090", "wwdc2019-6140", "wwdc2019-6170"],
      "resources": [568, 560, 25]
    }
  }, {
    "id": "wwdc2019-405",
    "staticContentId": 2770,
    "eventContentId": 405,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/405",
    "description": "Introducing Swift Playgrounds 3: the latest iteration of the revolutionary app for iPad that makes coding in Swift interactive and fun. Discover how you can use your own playgrounds to rapidly iterate on code that uses device features. Find out how the new modules feature both helps organize your own code and provides new opportunities for playground book authors.",
    "title": "Swift Playgrounds 3",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [36],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/405sz7ct71lrflqb/405/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/405sz7ct71lrflqb/405/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/405sz7ct71lrflqb/405/405_swift_playgrounds_3.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/405sz7ct71lrflqb/405/405_hd_swift_playgrounds_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/405sz7ct71lrflqb/405/405_sd_swift_playgrounds_3.mp4",
      "duration": 2479
    },
    "related": {
      "activities": ["wwdc2019-4070", "wwdc2018-413"]
    }
  }, {
    "id": "wwdc2019-3700",
    "staticContentId": 3246,
    "eventContentId": 3700,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3700",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-3710",
    "staticContentId": 3230,
    "eventContentId": 3710,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3710",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the U.S. market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to the United States",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-408",
    "staticContentId": 2741,
    "eventContentId": 408,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/408",
    "description": "Swift packages are a great way to organize and share code, and are now supported while building apps for all Apple platforms in Xcode 11. Find out how to use community-developed packages in your project, how Swift packages are structured, and how package versioning and dependencies work.",
    "title": "Adopting Swift Packages in Xcode",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 38],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/408bmshwds7eoqow1ud/408/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/408bmshwds7eoqow1ud/408/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/408bmshwds7eoqow1ud/408/408_adopting_swift_packages_in_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/408bmshwds7eoqow1ud/408/408_hd_adopting_swift_packages_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/408bmshwds7eoqow1ud/408/408_sd_adopting_swift_packages_in_xcode.mp4",
      "duration": 2004
    },
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-404", "wwdc2019-410", "wwdc2019-416", "wwdc2019-4120", "wwdc2019-4160", "wwdc2019-4230"]
    }
  }, {
    "id": "wwdc2019-710",
    "staticContentId": 2643,
    "eventContentId": 710,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/710",
    "description": "Learn about what's new in file system technology, including changes to file system layout and imaging technologies. If you are affected by the new Read Only System Volume, this is a session you will not want to miss.",
    "title": "What's New in Apple File Systems",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apfs", "file", "hfs"],
    "topicIds": [11],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/710_whats_new_in_apple_file_systems.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/710_hd_whats_new_in_apple_file_systems.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/710_sd_whats_new_in_apple_file_systems.mp4",
      "duration": 2047
    },
    "related": {
      "activities": ["wwdc2019-719", "wwdc2019-7160"],
      "resources": [481]
    }
  }, {
    "id": "wwdc2019-6090",
    "staticContentId": 2943,
    "eventContentId": 6090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6090",
    "description": "Universal Scene Description (USD) enables the production-grade description of 3D scenes and enables engineers and artists to collaborate across the creative workflow. The usdz delivery format packages USD models and AR scenes for delivery to your app. Receive hands-on technical guidance and development advice from USD experts and the Model I/O engineering team. Bring your assets and your questions.",
    "title": "USD and usdz Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-602", "wwdc2019-603", "wwdc2019-612", "wwdc2019-6060", "wwdc2019-6070", "wwdc2019-6130", "wwdc2019-6140", "wwdc2019-6170"]
    }
  }, {
    "id": "wwdc2019-2160",
    "staticContentId": 2838,
    "eventContentId": 2160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2160",
    "description": "iOS 13 brings even more power to shortcuts with parameters, allowing for follow-up questions which make shortcuts flexible like never before. Bring your code and get help from the Apple engineers who wrote shortcuts. Whether you seek help or just have questions about how your app and Siri work together, we're ready and waiting to assist you.",
    "title": "Siri Shortcuts Lab",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "donate", "donation", "inrelevant", "intents", "inui", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-207", "wwdc2019-213", "wwdc2019-804", "wwdc2019-805", "wwdc2019-806"]
    }
  }, {
    "id": "wwdc2019-3070",
    "staticContentId": 3020,
    "eventContentId": 3070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3070",
    "description": "Receive guidance on choosing business models, launch planning, marketing, engaging your users, and localizing your app to reach a global audience. Bring any information that will help us assist you, such as a demo of your app or business and marketing plans.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Business & Marketing By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 29
  }, {
    "id": "wwdc2019-7180",
    "staticContentId": 3017,
    "eventContentId": 7180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7180",
    "description": "Engineers in Apple’s Core OS teams will be on hand to discuss System Extensions, DriverKit, GCD, XPC and other low-level technologies. Bring your code and your questions.",
    "title": "Core OS Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["driver", "extension", "gcd", "kernel", "xpc"],
    "topicIds": [35],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-702"]
    }
  }, {
    "id": "wwdc2019-222",
    "staticContentId": 2611,
    "eventContentId": 222,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/222",
    "description": "Learn all about the many advances in the Vision Framework including effortless image classification, image saliency, determining image similarity, and improvements in facial feature detection, and face capture quality scoring. This packed session will show you how easy it is to bring powerful computer vision techniques to your apps.",
    "title": "Understanding Images in Vision Framework",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["camera", "core ml", "face capture quality", "face detection", "face landmarks", "image classification", "images", "image similarity", "machine learning", "photos", "saliency", "vision"],
    "topicIds": [30, 16],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/222z7uanb8bo1e/222/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/222z7uanb8bo1e/222/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/222z7uanb8bo1e/222/222_understanding_images_in_vision_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/222z7uanb8bo1e/222/222_hd_understanding_images_in_vision_framework.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/222z7uanb8bo1e/222/222_sd_understanding_images_in_vision_framework.mp4",
      "duration": 2390
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-228", "wwdc2019-234", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-716", "wwdc2018-717"],
      "resources": [567, 539, 538, 537, 464, 383, 379, 200, 134]
    }
  }, {
    "id": "wwdc2019-3110",
    "staticContentId": 3021,
    "eventContentId": 3110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3110",
    "description": "Receive help with updating your developer account information, managing your development devices and certificates, renewing your membership, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Apple Developer Program Support By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 44, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 8
  }, {
    "id": "wwdc2019-201",
    "staticContentId": 2734,
    "eventContentId": 201,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/201",
    "description": "Listen to four lightning talks from Apple Accessibility engineers to learn about how to make your app more inclusive and accessible. Get a tour of VoiceOver from an engineer who will demonstrate how descriptive labels make the difference between using an app and deleting an app. Hear about new API in iOS 13 that can make your app easier and better to use for people with motional sensitivity, color-blindness, and other visual disorders. Learn about how to reduce the number of swipes and taps for people who use assistive technologies and how to use the Accessibility Inspector to ensure that all parts of your app are accessible.",
    "title": "Accessibility Lessons",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["accessibility", "assistive", "blind", "color", "contrast", "deaf", "disability", "over", "physical", "switch", "tree", "vision", "voice", "voiceover"],
    "topicIds": [8],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-107", "wwdc2019-108", "wwdc2019-206", "wwdc2019-238", "wwdc2019-2030", "wwdc2019-2420", "wwdc2019-8020", "wwdc2019-8030", "wwdc2019-8060", "wwdc2019-8100"]
    }
  }, {
    "id": "wwdc2019-3720",
    "staticContentId": 3247,
    "eventContentId": 3720,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3720",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-801",
    "staticContentId": 2621,
    "eventContentId": 801,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/801",
    "description": "Discover how to update your app’s interface for Dark Mode to create beautiful and accessible apps. Learn how refinements to modal sheets and the new contextual menu UI can help improve usability and lead to more powerful and efficient workflows. And, gain key insights into how you can create a great Mac experience with your iPad app.",
    "title": "What’s New in iOS and macOS Design",
    "startTime": "2019-06-04T17:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [3, 6, 7],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-205", "wwdc2019-206", "wwdc2019-214"]
    }
  }, {
    "id": "wwdc2019-2120",
    "staticContentId": 2917,
    "eventContentId": 2120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2120",
    "description": "Get one-on-one technical guidance from Apple Camera engineers about all aspects of camera capture and photo access on iOS devices. Learn details of the new APIs for multi-camera support and semantic image segmentation. Come prepared with your code to get expert advice on fixing issues, optimizing performance, and creating great camera experiences in your app.",
    "title": "Camera Capture Lab",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["camera", "capture", "core image", "depth", "depth map", "effects", "hair", "image processing", "multi camera", "point cloud", "portrait effects matte", "portrait matte", "portrait mode", "portrait segmentation", "python", "real-time video", "segmentation", "skin", "teeth", "truedepth", "video"],
    "topicIds": [29, 30],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-249", "wwdc2019-260"]
    }
  }, {
    "id": "wwdc2019-7140",
    "staticContentId": 3009,
    "eventContentId": 7140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7140",
    "description": "Are you practicing the best principles for designing and building privacy into your apps?  Get together with Apple’s Privacy engineering team for answers and expert guidance.",
    "title": "Privacy Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-708"]
    }
  }, {
    "id": "wwdc2019-5140",
    "staticContentId": 3031,
    "eventContentId": 5140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5140",
    "description": "Core Haptics lets you design fully customized haptic patterns with synchronized audio. Experience demos of how haptics and audio enables you to create a greater sense of immersion in your app or game. Get one-on-one technical guidance from Apple engineers about your own apps. Bring your code and your questions.",
    "title": "Core Haptics Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-223", "wwdc2019-5030", "wwdc2019-5080", "wwdc2019-5150"]
    }
  }, {
    "id": "wwdc2019-507",
    "staticContentId": 3039,
    "eventContentId": 507,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/507",
    "description": "AirPlay 2 Video lets you share video from Apple devices to popular smart TVs. Learn about the special considerations for seamless delivery of high quality video to these TVs, and how to utilize the validation tools to ensure your content is ready for primetime.",
    "title": "HLS Authoring for AirPlay 2 Video",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/507fk9wyls0np6piwk/507/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/507fk9wyls0np6piwk/507/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/507fk9wyls0np6piwk/507/507_hls_authoring_for_airplay_2_video.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/507fk9wyls0np6piwk/507/507_hd_hls_authoring_for_airplay_2_video.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/507fk9wyls0np6piwk/507/507_sd_hls_authoring_for_airplay_2_video.mp4",
      "duration": 416
    },
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-502", "wwdc2019-5010", "wwdc2019-5130", "wwdc2019-5160", "wwdc2019-5180"],
      "resources": [553, 487, 486, 485, 175]
    }
  }, {
    "id": "wwdc2019-7260",
    "staticContentId": 2971,
    "eventContentId": 7260,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7260",
    "description": "Visit with the CallKit and Identity Lookup engineering teams to get expert technical guidance for integrating VoIP calls into your app, blocking and identifying calls, filtering SMS messages, and reporting junk communications. Get help adapting to new VoIP required practices to ensure that your app is behaving according to the App Store VoIP guidelines and will continue to work properly in iOS 13 and beyond.",
    "title": "CallKit, VOIP Pushes and Identity Lookup Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["background activity"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-703",
    "staticContentId": 2970,
    "eventContentId": 703,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/703",
    "description": "Notarization is all about identifying and blocking malicious Mac software prior to distribution, without requiring App Review or the Mac App Store.  Introduced last year and already widely adopted by Mac app developers, this is your opportunity to take an in depth tour of Notarization workflows and find out what’s new with the Notarization service.",
    "title": "All About Notarization",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["gatekeeper", "notarization"],
    "topicIds": [43, 38],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/703yqvyjv9mi5ur6/703/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/703yqvyjv9mi5ur6/703/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/703yqvyjv9mi5ur6/703/703_all_about_notarization.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/703yqvyjv9mi5ur6/703/703_hd_all_about_notarization.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/703yqvyjv9mi5ur6/703/703_sd_all_about_notarization.mp4",
      "duration": 2020
    },
    "related": {
      "activities": ["wwdc2019-701"],
      "resources": [474, 473, 472, 471]
    }
  }, {
    "id": "wwdc2019-808",
    "staticContentId": 3272,
    "eventContentId": 808,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/808",
    "description": "Discover how to update your app’s interface for Dark Mode to create beautiful and accessible apps. And learn how refinements to modal sheets and the new contextual menu UI can help improve usability and lead to more powerful and efficient workflows.",
    "title": "What's New in iOS Design",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["borderless bars", "dark mode", "sf symbols"],
    "topicIds": [3, 6, 7],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/808knty6w7kjssfl/808/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/808knty6w7kjssfl/808/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/808knty6w7kjssfl/808/808_whats_new_in_ios_design.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/808knty6w7kjssfl/808/808_hd_whats_new_in_ios_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/808knty6w7kjssfl/808/808_sd_whats_new_in_ios_design.mp4",
      "duration": 1672
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2019-224"]
    }
  }, {
    "id": "wwdc2019-407",
    "staticContentId": 2616,
    "eventContentId": 407,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/407",
    "description": "Create ML enables you to produce powerful Core ML models from more than just images. Learn all about creating production-class models for Activity Classification, Text Classification, and Recommendation systems. Explore considerations for gathering and preparing the data needed for these model types.",
    "title": "Create ML for Activity, Text, and Recommendations",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerometer", "activity", "ai", "artificial intelligence", "classifier", "core ml", "core motion", "create ml", "gazetteer", "gyroscope", "machine learning", "motion", "natural language", "nlp", "recommendation", "recommender", "sensors", "text", "text catalog", "training", "word embeddings"],
    "topicIds": [38, 16],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-406", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"],
      "resources": [443, 27]
    }
  }, {
    "id": "wwdc2019-701",
    "staticContentId": 2638,
    "eventContentId": 701,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/701",
    "description": "We are on a journey to continuously improve macOS security, with a particular focus on preventing malware and protecting user data. Join us on the next step and learn more about what’s new in Gatekeeper—for keeping malware out of macOS—as well as new protections that help keep users’ data and activity under their control.",
    "title": "Advances in macOS Security",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["data protection", "gatekeeper"],
    "topicIds": [19],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/701ngx868rfo8jlj/701/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/701ngx868rfo8jlj/701/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/701ngx868rfo8jlj/701/701_advances_in_macos_security.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/701ngx868rfo8jlj/701/701_hd_advances_in_macos_security.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/701ngx868rfo8jlj/701/701_sd_advances_in_macos_security.mp4",
      "duration": 2446
    },
    "related": {
      "activities": ["wwdc2019-702", "wwdc2019-703", "wwdc2019-708", "wwdc2019-709", "wwdc2019-714", "wwdc2019-7030", "wwdc2019-7210"],
      "resources": [471, 450]
    }
  }, {
    "id": "wwdc2019-616",
    "staticContentId": 2914,
    "eventContentId": 616,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/616",
    "description": "With iOS 13, macOS Catalina, and tvOS 13, the Game Controller framework adds support for several well-known console game controllers. Get briefed about the newly-added controllers and understand how their inputs are delivered. Learn recommended best practices for handling optional buttons, and understand the right approach for support on macOS.",
    "title": "Supporting New Game Controllers",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [9, 26],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/616my96cpgv09ab5lq/616/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/616my96cpgv09ab5lq/616/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/616my96cpgv09ab5lq/616/616_supporting_new_game_controllers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/616my96cpgv09ab5lq/616/616_hd_supporting_new_game_controllers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/616my96cpgv09ab5lq/616/616_sd_supporting_new_game_controllers.mp4",
      "duration": 1020
    },
    "related": {
      "activities": ["wwdc2019-2250", "wwdc2019-2400", "wwdc2019-6030"]
    }
  }, {
    "id": "wwdc2019-7090",
    "staticContentId": 2984,
    "eventContentId": 7090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7090",
    "description": "Whether you are new to development or just new to Apple platforms, the choices for building apps can sometimes be overwhelming. Get help taking that first step with insights and tips from Apple engineers. See how Swift Playgrounds can ease the onramp to learning to code. Talk with members of our Developer Publications team to understand how to get the most out of our documentation. Be inspired about development best practices by the engineers that build many of the apps included in iOS and macOS. Bring your ideas, questions, and code!",
    "title": "New to Apple Platforms Lab",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T17:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-404"]
    }
  }, {
    "id": "wwdc2019-2190",
    "staticContentId": 2875,
    "eventContentId": 2190,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2190",
    "description": "Meet with the Apple CarPlay engineers to get expert answers on supporting CarPlay in your audio, messaging, VoIP calling, navigation, or automaker app. Bring your code and fix bugs in real time. If you're interested in CarPlay but aren't sure where to start, this is a perfect opportunity to get advice. The CarPlay team will also be on hand to answer your questions about developing systems that work with CarPlay.",
    "title": "CarPlay Lab",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚙", "automotive", "car", "map"],
    "topicIds": [9, 68, 22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-252"],
      "resources": [509]
    }
  }, {
    "id": "wwdc2019-2430",
    "staticContentId": 2978,
    "eventContentId": 2430,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2430",
    "description": "The UIKit framework team will be on hand to answer questions you have about using UIKit and to help you with classes like view controllers, scroll views, and gesture recognizers.",
    "title": "UIKit and PencilKit Lab",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["pencil", "pencilkit", "pencil kit"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-221", "wwdc2019-224"]
    }
  }, {
    "id": "wwdc2019-6140",
    "staticContentId": 3084,
    "eventContentId": 6140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6140",
    "description": "Architected for AR, RealityKit provides developers access to world-class capabilities for rendering, animation, physics, and spatial audio. Meet the RealityKit engineering team to get questions answered, and go hands-on with Reality Composer to quickly and easily prototype and build AR experiences.",
    "title": "RealityKit and Reality Composer Lab",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-6060", "wwdc2019-6070", "wwdc2019-6090", "wwdc2019-6130", "wwdc2019-6170"]
    }
  }, {
    "id": "wwdc2019-3520",
    "staticContentId": 3240,
    "eventContentId": 3520,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3520",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Chinese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to China",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T13:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-9010",
    "staticContentId": 2913,
    "eventContentId": 9010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/9010",
    "description": "Meet with Apple's expert HomeKit engineers and get answers to your HomeKit app and accessory questions.",
    "title": "HomeKit Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "topicIds": [15],
    "type": "Lab",
    "roomId": 71
  }, {
    "id": "wwdc2019-3580",
    "staticContentId": 3245,
    "eventContentId": 3580,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3580",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T13:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-3030",
    "staticContentId": 2986,
    "eventContentId": 3030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3030",
    "description": "Meet with members of the App Store Connect, TestFlight, and App Store API teams for expert guidance on App Analytics, In-App Purchase, Subscriptions and metadata optimization techniques for publishing your apps on the App Store. Bring your questions about how best to automate loading information into App Store Connect, manage your testing workflows, and deliver your binary.",
    "title": "App Store Connect and TestFlight Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 37],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-301", "wwdc2019-302", "wwdc2019-305"]
    }
  }, {
    "id": "wwdc2019-8100",
    "staticContentId": 3058,
    "eventContentId": 8100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8100",
    "description": "Make your apps accessible and simple to use for everyone. Learn the basics of VoiceOver and other accessibility features to better understand how customers with varying needs use your products. Come prepared with a working prototype, development build, or your released app. You can drop in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Accessibility Design Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [8, 3, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 27,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-3500",
    "staticContentId": 3249,
    "eventContentId": 3500,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3500",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T14:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-8030",
    "staticContentId": 3060,
    "eventContentId": 8030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8030",
    "description": "Make your apps accessible and simple to use for everyone. Learn the basics of VoiceOver and other accessibility features to better understand how customers with varying needs use your products. Come prepared with a working prototype, development build, or your released app. You can drop in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Accessibility Design Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 8, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 27,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-5080",
    "staticContentId": 3030,
    "eventContentId": 5080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5080",
    "description": "Core Haptics lets you design fully customized haptic patterns with synchronized audio. Experience demos of how haptics and audio enables you to create a greater sense of immersion in your app or game. Get one-on-one technical guidance from Apple engineers about your own apps. Bring your code and your questions.",
    "title": "Core Haptics Lab",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-223", "wwdc2019-5030", "wwdc2019-5140", "wwdc2019-5150"]
    }
  }, {
    "id": "wwdc2019-3480",
    "staticContentId": 3248,
    "eventContentId": 3480,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3480",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-2250",
    "staticContentId": 2824,
    "eventContentId": 2250,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2250",
    "description": "The tvOS SDK allows you to create and build amazing apps and games for the big screen. And, with TVMLKit you can easily and quickly develop native tvOS apps with XML templates and JavaScript logic. Get one-on-one technical guidance from Apple engineers about your own apps. Bring your code and your questions.",
    "title": "tvOS Lab",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["tvOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-240", "wwdc2019-503", "wwdc2019-616", "wwdc2019-2400"]
    }
  }, {
    "id": "wwdc2019-2320",
    "staticContentId": 3037,
    "eventContentId": 2320,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2320",
    "description": "Meet with Apple engineers to learn how to use Text Kit and Core Text, or adapt your app to take advantage of SF Symbols in iOS 13. Get advice on achieving complex text layouts, and learn how to use text, fonts, and symbols to create compelling interfaces.",
    "title": "Text, Fonts, and SF Symbols Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["baseline", "font", "nsattributedstring", "rounded", "san francisco", "scale", "serif", "sf hello", "uiimage", "weight"],
    "topicIds": [42, 22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-206", "wwdc2019-227"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2019-5130",
    "staticContentId": 3069,
    "eventContentId": 5130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5130",
    "description": "HTTP Live Streaming enables the reliable delivery of audio and video over a wide variety of network conditions, including support for low-latency delivery at scale. FairPlay Streaming secures the transport of your content. Learn best practices, and get one-on-one technical guidance from Apple engineers about using these technologies in your apps. Bring your code and your questions.",
    "title": "HTTP Live Streaming Lab",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-502", "wwdc2019-503", "wwdc2019-507", "wwdc2019-716", "wwdc2019-5050", "wwdc2019-5120", "wwdc2019-5160", "wwdc2019-5170"]
    }
  }, {
    "id": "wwdc2019-2050",
    "staticContentId": 2992,
    "eventContentId": 2050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2050",
    "description": "Get expert answers about adopting Document Browser and Quicklook Previews inside your app. Bring your code and fix bugs in real-time to ensure a great USB and SMB experience on iOS. Get hands-on assistance from a cross-functional team of Apple engineers behind file providers, UIDocument, file coordination, and the other technologies involved in Document Management.",
    "title": "Documents, File Management and Quick Look Lab",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [11, 22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-719"]
    }
  }, {
    "id": "wwdc2019-7250",
    "staticContentId": 2920,
    "eventContentId": 7250,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7250",
    "description": "Meet with Apple’s Machine Learning engineers for expert advice on model training in Create ML or Turi Create, the Core ML Framework, model conversion, and domain APIs for Vision, Natural Language, Speech, and Sound. Bring your datasets, source code, and demos.",
    "title": "Machine Learning Lab",
    "startTime": "2019-06-07T14:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["convertors", "core ml", "core ml tools", "create ml", "model personalization", "models", "natural language", "neural networks", "nlp", "on-device training", "sound", "speech", "vision"],
    "topicIds": [16],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-222", "wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-406", "wwdc2019-407", "wwdc2019-420", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-430", "wwdc2019-704"]
    }
  }, {
    "id": "wwdc2019-3620",
    "staticContentId": 3228,
    "eventContentId": 3620,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3620",
    "description": "App Analytics, Sales and Trends, and Payments and Financial Reports allow you to measure your app’s performance and get unique insights with data you won’t find anywhere else. Meet with Apple experts to gain a general understanding of how to utilize these tools to track your app downloads, proceeds, subscriptions activity, user engagement, marketing campaigns, monetization, and more.",
    "title": "Getting Started with Reporting & Analytics",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-7110",
    "staticContentId": 2980,
    "eventContentId": 7110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7110",
    "description": "Meet one-on-one with the Foundation engineers to get answers to your questions about archiving, date and time calculations, internationalization, operating system utilities, core collection types, preferences, and more. Bring your questions to the authors of Apple's new Combine framework and receive guidance on how you can adopt it for your networking, key value observing, notification and callback needs.",
    "title": "Foundation and Combine Lab",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-711", "wwdc2019-721", "wwdc2019-722", "wwdc2019-723"]
    }
  }, {
    "id": "wwdc2019-2110",
    "staticContentId": 2988,
    "eventContentId": 2110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2110",
    "description": "Meet with Apple engineers from the Core Data and CloudKit teams for expert advice on how to easily build cloud-backed applications. Bring your code and get one-on-one technical advice for managing the flow of data through your application and CloudKit.",
    "title": "Core Data and CloudKit Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["backup", "batch operations", "change notifications", "cloud", "cloudkit", "concurrency", "core", "core data", "data", "derived attributes", "documents", "history tracking", "icloud", "model layer objects", "nskeyedarchiver", "object graph", "object life cycle", "performance", "persistence", "persistent history", "record", "records", "server", "sharing", "sqlite", "testing", "zone"],
    "topicIds": [11, 67],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-202"]
    }
  }, {
    "id": "wwdc2019-4130",
    "staticContentId": 3172,
    "eventContentId": 4130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4130",
    "description": "Bring your project to have our engineers help with advanced profiling and bulletproofing your app. Figure out what is using up that battery capacity, and what you can do about it. Learn how to use debugging tools like Instruments, LLDB, and memory graphs to track down problems. Get hands-on help analyzing your app with tools like the Address Sanitizer and Thread Sanitizer. Speak with an Apple engineer to find out how to best use signposts in your app, and build a custom instrument of your own.",
    "title": "Performance, Power, Crashes, and Debugging Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 35],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-412", "wwdc2019-414", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-2270",
    "staticContentId": 2841,
    "eventContentId": 2270,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2270",
    "description": "Work side by side with Apple Watch engineers to polish the experience you want to achieve in your app, and to get help with runtime opportunities, notification interactivity, or anything else related to development on watchOS.",
    "title": "watchOS Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "audio", "clkcomplication", "clockkit", "complications", "digital crown", "dynamic notifications", "extended runtime", "independence", "independent", "interactive notifications", "streaming", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-251", "wwdc2019-253", "wwdc2019-716"]
    }
  }, {
    "id": "wwdc2019-3540",
    "staticContentId": 3250,
    "eventContentId": 3540,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3540",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how you can create highly effective campaigns using best practices for selecting keywords, expanding to new countries and regions, creating custom reports, structuring your account, and more.",
    "title": "Best Practices for Apple Search Ads",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-2260",
    "staticContentId": 2976,
    "eventContentId": 2260,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2260",
    "description": "The UIKit framework team will be on hand to answer Collections questions you may have about collection views, layouts, and diffable data sources, and other UIKit classes like view controllers, scroll views, and gesture recognizers.",
    "title": "UIKit and Collection Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-215", "wwdc2019-220"]
    }
  }, {
    "id": "wwdc2019-9030",
    "staticContentId": 3087,
    "eventContentId": 9030,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/9030",
    "description": "Bluetooth accessories extend the capabilities of Apple devices to health, education, music, and so much more. Want to see what new accessories are possible with BR/EDR and dual-mode devices? Have questions about privacy? Apple's Core Bluetooth engineers will be available to answer your questions and assist you.",
    "title": "Core Bluetooth Lab",
    "startTime": "2019-06-07T16:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessories", "accessory", "ancs", "ble", "bleutooth", "bluetooth", "bluetooth 5", "bluetooth low energy", "br/edr", "bt", "btle", "cbcentral", "cbperipheral", "central", "characteristic", "classic", "corebluetooth", "core bluetooth", "gatt", "l2cap", "mfi", "packetlogger", "peripheral", "privacy", "service", "throughput", "wireless"],
    "topicIds": [9],
    "type": "Lab",
    "roomId": 68
  }, {
    "id": "wwdc2019-3420",
    "staticContentId": 3219,
    "eventContentId": 3420,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3420",
    "description": "Apple Arcade is a game subscription service unlike any other. If you’re working on a groundbreaking, unreleased game and would like it to be considered for Apple Arcade, we’d love to hear from you. We appreciate any visuals you can bring, such as videos, screenshots, or playable builds. Please note that the Account Holder of your team needs to submit your game through https://developer.apple.com/apple-arcade/ before this lab.",
    "title": "Pitch to Apple Arcade",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "actionLinkPrompt": "Learn More",
    "actionLinkURL": "https://developer.apple.com/apple-arcade/",
    "roomId": 128
  }, {
    "id": "wwdc2019-5160",
    "staticContentId": 3070,
    "eventContentId": 5160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5160",
    "description": "HTTP Live Streaming enables the reliable delivery of audio and video over a wide variety of network conditions, including support for low-latency delivery at scale. FairPlay Streaming secures the transport of your content. Learn best practices, and get one-on-one technical guidance from Apple engineers about using these technologies in your apps. Bring your code and your questions.",
    "title": "HTTP Live Streaming Lab",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-502", "wwdc2019-503", "wwdc2019-507", "wwdc2019-716", "wwdc2019-5050", "wwdc2019-5120", "wwdc2019-5130", "wwdc2019-5170"]
    }
  }, {
    "id": "wwdc2019-709",
    "staticContentId": 2637,
    "eventContentId": 709,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/709",
    "description": "System frameworks encrypt both data at rest and data in transit in a transparent way for you. This functionality is available by simply setting an attribute. However you may want to do more to protect your users’ data. CryptoKit is a new Swift framework that makes it easier and safer than ever to perform cryptographic operations, whether you simply need to compute a hash or are implementing a more advanced authentication protocol.",
    "title": "Cryptography and Your Apps",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["cryptography", "cryptokit", "security"],
    "topicIds": [19],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/709uek5h4l7kaefk2oh/709/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/709uek5h4l7kaefk2oh/709/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/709uek5h4l7kaefk2oh/709/709_cryptography_and_your_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/709uek5h4l7kaefk2oh/709/709_hd_cryptography_and_your_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/709uek5h4l7kaefk2oh/709/709_sd_cryptography_and_your_apps.mp4",
      "duration": 2332
    },
    "related": {
      "activities": ["wwdc2019-701", "wwdc2019-7030", "wwdc2019-7210"],
      "resources": [536, 480]
    }
  }, {
    "id": "wwdc2019-3570",
    "staticContentId": 3251,
    "eventContentId": 3570,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3570",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Taiwanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Taiwan",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T14:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-3290",
    "staticContentId": 3209,
    "eventContentId": 3290,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3290",
    "description": "Receive guidance on choosing business models, launch planning, marketing, engaging your users, and localizing your app to reach a global audience. Bring any information that will help us assist you, such as a demo of your app or business and marketing plans.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Business & Marketing By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 29
  }, {
    "id": "wwdc2019-6160",
    "staticContentId": 2938,
    "eventContentId": 6160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6160",
    "description": "Metal is the foundation for accelerated graphics and compute on Apple platforms, enabling apps and games to tap into the incredible power of the GPU. Meet the Metal engineering teams to receive hands-on technical guidance and assistance adopting Metal capabilities. Bring your code and your questions.",
    "title": "Metal Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 25, 26, 27],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-606", "wwdc2019-608", "wwdc2019-611", "wwdc2019-6020", "wwdc2019-6080", "wwdc2019-6100", "wwdc2019-6180"]
    }
  }, {
    "id": "wwdc2019-5180",
    "staticContentId": 3072,
    "eventContentId": 5180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5180",
    "description": "AirPlay lets you share videos, photos, music, and more from Apple devices to your Apple TV, favorite speakers, and popular smart TVs. And if you have more than one HomePod or AirPlay 2–enabled speaker, you can enjoy your favorite music or podcasts throughout your house — in perfect sync. You can even play different songs in different rooms. Learn best practices, and get one-on-one development advice and technical assistance directly from the AirPlay engineering team. Bring your code and your questions.",
    "title": "AirPlay Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-507", "wwdc2019-5010", "wwdc2019-5060", "wwdc2019-5100"]
    }
  }, {
    "id": "wwdc2019-3400",
    "staticContentId": 3212,
    "eventContentId": 3400,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3400",
    "description": "App Analytics, Sales and Trends, and Payments and Financial Reports allow you to measure your app’s performance and get unique insights with data you won’t find anywhere else. Meet with Apple experts to gain a general understanding of how to utilize these tools to track your app downloads, proceeds, subscriptions activity, user engagement, marketing campaigns, monetization, and more.",
    "title": "Getting Started with Reporting & Analytics",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-2240",
    "staticContentId": 2993,
    "eventContentId": 2240,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2240",
    "description": "Get expert answers about adopting Document Browser and Quicklook Previews inside your app. Bring your code and fix bugs in real-time to ensure a great USB and SMB experience on iOS. Get hands-on assistance from a cross-functional team of Apple engineers behind file providers, UIDocument, file coordination, and the other technologies involved in Document Management.",
    "title": "Documents, File Management and Quick Look Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [11, 22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-719"]
    }
  }, {
    "id": "wwdc2019-2080",
    "staticContentId": 3053,
    "eventContentId": 2080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2080",
    "description": "Meet with the Engineers behind Apple’s new framework for building apps, SwiftUI. Get advice on how to begin building a new app with SwiftUI or begin incorporating SwiftUI into your existing app. Bring your questions and your code.",
    "title": "SwiftUI Lab",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [36, 38, 22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-219", "wwdc2019-233"]
    }
  }, {
    "id": "wwdc2019-2300",
    "staticContentId": 3051,
    "eventContentId": 2300,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2300",
    "description": "Meet with the Engineers behind Apple’s new framework for building apps, SwiftUI. Get advice on how to begin building a new app with SwiftUI or begin incorporating SwiftUI into your existing app. Bring your questions and your code.",
    "title": "SwiftUI Lab",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [36, 38, 22],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-219", "wwdc2019-226", "wwdc2019-233"]
    }
  }, {
    "id": "wwdc2019-7240",
    "staticContentId": 2852,
    "eventContentId": 7240,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7240",
    "description": "Meet with the Location engineers to discuss how you can use Core Location in your app. Get advice on choosing the best and most power-efficient API for accessing user location information. Learn the best practices for continuous updates, event-based location information, and how to provide location-based services in a privacy-conscious manner.",
    "title": "Core Location Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-705"]
    }
  }, {
    "id": "wwdc2019-5120",
    "staticContentId": 3066,
    "eventContentId": 5120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5120",
    "description": "AVFoundation is a powerful framework for all types of media operations, including capture, editing, playback, and export. Get one-on-one technical guidance from Apple engineers about using AVFoundation in your apps. Bring your code and your questions.",
    "title": "AVFoundation Lab",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-502", "wwdc2019-506", "wwdc2019-5050", "wwdc2019-5130", "wwdc2019-5160", "wwdc2019-5170"]
    }
  }, {
    "id": "wwdc2019-6080",
    "staticContentId": 2939,
    "eventContentId": 6080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6080",
    "description": "Learn more about the tools and approach for optimizing performance and using memory efficiently in Metal apps and games. Meet the Metal engineering teams to receive hands-on technical guidance and assistance adopting Metal capabilities. Bring your code and your questions.",
    "title": "Metal Optimization Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 35, 27, 38],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-606", "wwdc2019-6020", "wwdc2019-6100", "wwdc2019-6160", "wwdc2019-6180"]
    }
  }, {
    "id": "wwdc2019-3210",
    "staticContentId": 3195,
    "eventContentId": 3210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3210",
    "description": "Receive help with updating your developer account information, managing your development devices and certificates, renewing your membership, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Apple Developer Program Support By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 44, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 8
  }, {
    "id": "wwdc2019-3240",
    "staticContentId": 3201,
    "eventContentId": 3240,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3240",
    "description": "Learn how App Store Connect can help you manage your apps and provide great customer experiences. Get details on using TestFlight, Sales and Trends, and App Analytics. Receive guidance on responding to customer reviews, setting up in-app purchases, uploading builds, using the App Store Connect API, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Connect By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 24
  }, {
    "id": "wwdc2019-615",
    "staticContentId": 2924,
    "eventContentId": 615,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/615",
    "description": "Game Center now supports persistent player identifiers scoped to individual games or to a developer team ID. Understand how scoped identifiers enhance player privacy and see how to transition your apps and games onto the recommended API.",
    "title": "Game Center Player Identifiers",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [26],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/615zdym8i4v282u/615/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/615zdym8i4v282u/615/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/615zdym8i4v282u/615/615_game_center_player_identifiers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/615zdym8i4v282u/615/615_hd_game_center_player_identifiers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/615zdym8i4v282u/615/615_sd_game_center_player_identifiers.mp4",
      "duration": 618
    },
    "related": {
      "activities": ["wwdc2019-708", "wwdc2019-6040"]
    }
  }, {
    "id": "wwdc2019-209",
    "staticContentId": 2613,
    "eventContentId": 209,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/209",
    "description": "Core ML 3 has been greatly expanded to enable even more amazing, on-device machine learning capabilities in your app. Learn about the new Create ML app which makes it easy to build Core ML models for many tasks. Get an overview of model personalization; exciting updates in Vision, Natural Language, Sound, and Speech; and added support for cutting-edge model types.",
    "title": "What's New in Machine Learning",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["convertors", "core ml", "core ml tools", "create ml", "model personalization", "models", "natural language", "neural networks", "nlp", "on-device training", "sound", "speech", "vision"],
    "topicIds": [38, 16],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/209w6qieg12bqlrpjzu/209/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/209w6qieg12bqlrpjzu/209/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/209w6qieg12bqlrpjzu/209/209_whats_new_in_machine_learning.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/209w6qieg12bqlrpjzu/209/209_hd_whats_new_in_machine_learning.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/209w6qieg12bqlrpjzu/209/209_sd_whats_new_in_machine_learning.mp4",
      "duration": 889
    },
    "related": {
      "activities": ["wwdc2019-218", "wwdc2019-222", "wwdc2019-228", "wwdc2019-232", "wwdc2019-234", "wwdc2019-256", "wwdc2019-406", "wwdc2019-407", "wwdc2019-420", "wwdc2019-425", "wwdc2019-426", "wwdc2019-430", "wwdc2019-614", "wwdc2019-708", "wwdc2019-803", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"],
      "resources": [443, 134, 88, 27]
    }
  }, {
    "id": "wwdc2019-3640",
    "staticContentId": 3252,
    "eventContentId": 3640,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3640",
    "description": "Find out what you can do to help your app align with the App Store Review Guidelines and gain a better understanding of how the review process works. Get answers to your questions on guidelines for iOS, macOS, tvOS, watchOS, extensions, in-app purchase, TestFlight, and more.",
    "title": "Discuss Your App with App Review",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-118",
    "staticContentId": 3179,
    "eventContentId": 118,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/118",
    "description": "At 27, Dr. Ayanna Howard was hired by NASA to lead a team designing a robot for future Mars missions that could “think like a human and adapt to change.” Her accomplishments since then include being named as one of 2015’s most powerful women engineers in the world and as one of Forbes’ 2018 U.S. Top 50 Women in Tech. From creating robots to studying the impact of global warming on the Antarctic ice shelves to founding a company that develops STEM education and therapy products for children and those with varying needs, Ayanna personifies the responsible global citizen. Hear as she delves into the implications of recent advances in robotics and AI and explains the critical importance of ensuring diversity and inclusion at all stages to reduce the risk of unconscious bias and ensuring robots are designed to be accessible to all.",
    "title": "Roving for a Better World",
    "startTime": "2019-06-06T12:30:00-07:00",
    "endTime": "2019-06-06T13:20:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [2],
    "type": "Special Event",
    "roomId": 62
  }, {
    "id": "wwdc2019-806",
    "staticContentId": 3033,
    "eventContentId": 806,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/806",
    "description": "Shortcuts allow people to access information and actions on the go or in the Shortcuts app. The best shortcuts take careful design planning to hone in on what can help expedite a person’s workflow with your app. Gain insights as to what makes a great shortcut and how to design the experience to be useful, beautiful, and responsive. See examples of how to map out the Siri dialog flow when using parameters to make your shortcuts flexible and helpful.",
    "title": "Designing Great Shortcuts",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [3, 21],
    "type": "Video",
    "related": {
      "activities": ["wwdc2019-213", "wwdc2019-804", "wwdc2019-805", "wwdc2019-2010", "wwdc2019-2160", "wwdc2019-2310", "wwdc2019-2470", "wwdc2019-8050"],
      "resources": [350, 348, 12]
    }
  }, {
    "id": "wwdc2019-2450",
    "staticContentId": 3036,
    "eventContentId": 2450,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2450",
    "description": "Prepare your app for a global audience. Meet the Apple teams working on internationalization and localization technologies and get a head start in making your app world-ready. If you have code-level questions, or simply want to learn more about the new localization features in Xcode 11, bring your project and we'll work with you one-on-one to answer questions. If you are just getting started, come to get general advice on preparing your app for international markets.",
    "title": "Internationalization Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T14:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "i18n", "localization", "world"],
    "topicIds": [42, 22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-403"]
    }
  }, {
    "id": "wwdc2019-5010",
    "staticContentId": 3071,
    "eventContentId": 5010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5010",
    "description": "AirPlay lets you share videos, photos, music, and more from Apple devices to your Apple TV, favorite speakers, and popular smart TVs. And if you have more than one HomePod or AirPlay 2–enabled speaker, you can enjoy your favorite music or podcasts throughout your house — in perfect sync. You can even play different songs in different rooms. Learn best practices, and get one-on-one development advice and technical assistance directly from the AirPlay engineering team. Bring your code and your questions.",
    "title": "AirPlay Lab",
    "startTime": "2019-06-04T12:00:00-07:00",
    "endTime": "2019-06-04T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-507", "wwdc2019-5060", "wwdc2019-5100", "wwdc2019-5180"]
    }
  }, {
    "id": "wwdc2019-2290",
    "staticContentId": 2990,
    "eventContentId": 2290,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2290",
    "description": "Get one-on-one technical guidance from Apple Camera engineers about all aspects of camera capture and photo access on iOS devices. Learn details of the new APIs for multi-camera support and semantic image segmentation. Come prepared with your code to get expert advice on fixing issues, optimizing performance, and creating great camera experiences in your app.",
    "title": "Camera Capture Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["camera", "capture", "core image", "depth", "depth map", "effects", "hair", "image processing", "multi camera", "point cloud", "portrait effects matte", "portrait matte", "portrait mode", "portrait segmentation", "python", "real-time video", "segmentation", "skin", "teeth", "truedepth", "video"],
    "topicIds": [29, 30],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-249", "wwdc2019-260"]
    }
  }, {
    "id": "wwdc2019-3160",
    "staticContentId": 3208,
    "eventContentId": 3160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3160",
    "description": "Receive guidance on choosing business models, launch planning, marketing, engaging your users, and localizing your app to reach a global audience. Bring any information that will help us assist you, such as a demo of your app or business and marketing plans.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Business & Marketing By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 28
  }, {
    "id": "wwdc2019-3360",
    "staticContentId": 3222,
    "eventContentId": 3360,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3360",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Japanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Japan",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-2060",
    "staticContentId": 3035,
    "eventContentId": 2060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2060",
    "description": "Prepare your app for a global audience. Meet the Apple teams working on internationalization and localization technologies and get a head start in making your app world-ready. If you have code-level questions, or simply want to learn more about the new localization features in Xcode 11, bring your project and we'll work with you one-on-one to answer questions. If you are just getting started, come to get general advice on preparing your app for international markets.",
    "title": "Internationalization Lab",
    "startTime": "2019-06-04T11:30:00-07:00",
    "endTime": "2019-06-04T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "i18n", "localization", "world"],
    "topicIds": [42, 22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-403"]
    }
  }, {
    "id": "wwdc2019-8010",
    "staticContentId": 3044,
    "eventContentId": 8010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8010",
    "description": "Get advice on making your apps simple to use and visually compelling. Come prepared with a working prototype, development build, or your released app. You can walk in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Design Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 7
  }, {
    "id": "wwdc2019-3090",
    "staticContentId": 3019,
    "eventContentId": 3090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3090",
    "description": "Discover how your app could be included in Apple’s next marketing campaign and other promotional opportunities outside of the App Store. This includes potential featuring on Apple.com, Apple Stores, TV, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Apple Marketing Communications By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 28
  }, {
    "id": "wwdc2019-3650",
    "staticContentId": 3253,
    "eventContentId": 3650,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3650",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Middle Eastern market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to the Middle East",
    "startTime": "2019-06-06T13:00:00-07:00",
    "endTime": "2019-06-06T14:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-6110",
    "staticContentId": 2878,
    "eventContentId": 6110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6110",
    "description": "SceneKit is a high-level 3D graphics framework that enables your apps and games to create immersive scenes and effects. Learn more about ARKit integration and get helpful tips from the SceneKit engineering team about physically-based rendering and more. Bring your work-in-progress and get your questions answered.",
    "title": "SceneKit Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2017-604", "wwdc2017-605"]
    }
  }, {
    "id": "wwdc2019-5100",
    "staticContentId": 3064,
    "eventContentId": 5100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5100",
    "description": "AVKit is a high-level framework to create view-level services for media playback, complete with user controls, chapter navigation, and support for subtitles and closed captioning. Get one-on-one technical guidance from Apple engineers about using AVKit in your apps to offer people an intuitive media playback experience. Bring your code and your questions.",
    "title": "AVKit Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-211", "wwdc2019-501", "wwdc2019-503", "wwdc2019-5010", "wwdc2019-5060", "wwdc2019-5180"]
    }
  }, {
    "id": "wwdc2019-3340",
    "staticContentId": 3218,
    "eventContentId": 3340,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3340",
    "description": "Get details on offering auto-renewable subscriptions in your app. Bring your questions about strategy, set up, and implementation to attract and keep subscribers as you grow your business.",
    "title": "Monetizing with Subscriptions",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T16:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [69, 71, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-8060",
    "staticContentId": 3059,
    "eventContentId": 8060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8060",
    "description": "Make your apps accessible and simple to use for everyone. Learn the basics of VoiceOver and other accessibility features to better understand how customers with varying needs use your products. Come prepared with a working prototype, development build, or your released app. You can drop in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Accessibility Design Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T15:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 8, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 27,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-248",
    "staticContentId": 2818,
    "eventContentId": 248,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/248",
    "description": "The styling and layout of text is a hallmark feature of an outstanding reading experience. Technologies such as CoreText and TextKit give you the tools you need to create a great text layout. Learn how to make an equally great accessible experience for VoiceOver by adopting the accessibility reading content protocol, adding automatic page turning, and customizing speech output.",
    "title": "Creating an Accessible Reading Experience",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [8, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/248ts94v3ev4q5/248/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/248ts94v3ev4q5/248/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/248ts94v3ev4q5/248/248_creating_an_accessible_reading_experience.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/248ts94v3ev4q5/248/248_hd_creating_an_accessible_reading_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/248ts94v3ev4q5/248/248_sd_creating_an_accessible_reading_experience.mp4",
      "duration": 527
    }
  }, {
    "id": "wwdc2019-5040",
    "staticContentId": 2821,
    "eventContentId": 5040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5040",
    "description": "MusicKit lets you bring the content of Apple Music and key functionality from the Music app into your own apps. With MusicKit on the web, you can also bring Apple Music powered experiences to your website. And now, you can bring your Apple Music enabled experiences to Android as well. Get one-on-one technical guidance from Apple engineers about using these technologies. Bring your code and your questions.",
    "title": "MusicKit Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-5110"]
    }
  }, {
    "id": "wwdc2019-3690",
    "staticContentId": 3254,
    "eventContentId": 3690,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3690",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Japanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Japan",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 131
  }, {
    "id": "wwdc2019-2090",
    "staticContentId": 3047,
    "eventContentId": 2090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2090",
    "description": "Meet with the iPad Apps for Mac team and Xcode engineers to discuss bringing your iPad app to the Mac. Get hands-on technical assistance and advice about using UIKit frameworks on the Mac. The Xcode team will be on hand to help you set up your build environment. Get advice about using UIKit frameworks on the Mac and tailoring the user experience.",
    "title": "iPad Apps for Mac Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["catalyst", "checkbox", "ipad app", "project catalyst", "uikit"],
    "topicIds": [38, 22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-227", "wwdc2019-809"]
    }
  }, {
    "id": "wwdc2019-2380",
    "staticContentId": 2922,
    "eventContentId": 2380,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2380",
    "description": "Meet with the Photos engineering team to get answers to your questions about PhotoKit, Photos Project Extensions, Edit extensions, and integrations with Photos on iOS and macOS. Also get expert advice on performance improvements and best practices. Come prepared with your code and a demo of what you're working on.",
    "title": "PhotoKit & Photos Extensions Lab",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["drag", "drop", "extensions", "file promises", "file provider", "file receiver", "photo extensions", "photography", "photokit", "photo library", "photos", "photos api", "print products", "project extensions"],
    "topicIds": [30],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "resources": [374]
    }
  }, {
    "id": "wwdc2019-2170",
    "staticContentId": 2977,
    "eventContentId": 2170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2170",
    "description": "The UIKit framework team will be on hand to answer questions you have about implementing Dark Mode in your App. This lab has a focus on adoption of semantic system colors, dynamic colors and dynamic images, so drop by to get advice from Apple's top experts. There will also be engineers on hand to help you with other UIKit classes like view controllers, scroll views, and gesture recognizers in your apps.",
    "title": "UIKit and Dark Mode Lab",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-214"]
    }
  }, {
    "id": "wwdc2019-2310",
    "staticContentId": 2837,
    "eventContentId": 2310,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2310",
    "description": "Siri and your app can work together to create intelligent and hands-free experience across Apple devices. You may have some code you need a second pair of eyes on, or a deeper question about creating donations in your app at the right moment. Either way, drop by with your code and work through your questions together with a Siri engineer.",
    "title": "SiriKit, Shortcuts, and Siri Event Suggestions Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "calendar", "donate", "donation", "eventkit", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-207", "wwdc2019-213", "wwdc2019-243", "wwdc2019-804", "wwdc2019-805", "wwdc2019-806"]
    }
  }, {
    "id": "wwdc2019-2510",
    "staticContentId": 3269,
    "eventContentId": 2510,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2510",
    "description": "Feedback Assistant is a new way to report issues with Apple software and services, request enhancements to APIs and tools, and track the status of feedback. Learn about how you can easily communicate with engineers at Apple, get a curated status on your issues, and automatically gather logs on device and remotely. Talk to the teams that build and maintain Feedback Assistant. Speak with the engineers who see your bug reports and get tips for submitting helpful and actionable feedback.",
    "title": "Feedback Assistant Lab",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🐛", "🐜", "🐞", "🔬", "🕷", "bug", "bugs", "feedback", "filing", "logging", "radar", "report", "sysdiagnose"],
    "topicIds": [33],
    "type": "Lab",
    "roomId": 77
  }, {
    "id": "wwdc2019-803",
    "staticContentId": 2618,
    "eventContentId": 803,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/803",
    "description": "Machine learning enables new experiences that understand what we say, suggest things that we may love, and allow us to express ourselves in new, rich ways. Machine learning can make existing experiences better by automating mundane tasks and improving the accuracy and speed of interactions. Learn how to incorporate ML experiences into your apps, and gain practical approaches to designing user interfaces that feel effortlessly helpful.",
    "title": "Designing Great ML Experiences",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [3, 16],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-228", "wwdc2019-708"]
    }
  }, {
    "id": "wwdc2019-4100",
    "staticContentId": 3158,
    "eventContentId": 4100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4100",
    "description": "Stop by during Open Hours to talk with Apple engineers about things you learned during the week, to get answers to questions about new technologies you're experimenting with, or to find a fix for a difficult bug.",
    "title": "Xcode Open Hours",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-401"]
    }
  }, {
    "id": "wwdc2019-6170",
    "staticContentId": 3255,
    "eventContentId": 6170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6170",
    "description": "Meet with AR Quick Look and Reality Composer engineers to get questions answered and learn about viewing and creating AR experiences. Bring your Reality files and your questions.",
    "title": "AR Quick Look and Reality Composer Lab",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-604", "wwdc2019-609", "wwdc2019-612", "wwdc2019-6060", "wwdc2019-6070", "wwdc2019-6090", "wwdc2019-6130", "wwdc2019-6140"]
    }
  }, {
    "id": "wwdc2019-422",
    "staticContentId": 2873,
    "eventContentId": 422,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/422",
    "description": "World-class apps deliver a great user experience, even in the most strenuous environments. Learn how to use Xcode to simulate adverse network and temperature conditions. Put your app through its paces and get a firsthand view of how it performs. Hear about best practices that you can adopt to respond to challenging conditions.",
    "title": "Designing for Adverse Network and Temperature Conditions",
    "startTime": "2019-06-07T16:20:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["conditioner", "test", "thermal"],
    "topicIds": [35, 37],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-401", "wwdc2019-412", "wwdc2019-413", "wwdc2019-712", "wwdc2019-713"],
      "resources": [521, 484]
    }
  }, {
    "id": "wwdc2019-3040",
    "staticContentId": 2869,
    "eventContentId": 3040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3040",
    "description": "Meet the engineers creating the technologies to configure, deploy, and manage Apple devices in business and education. If you're a SysAdmin or educator deploying macOS, iOS and tvOS in your environment, this lab will help answer questions and guide you through the process. Learn best practices for design, development, and distribution of in-house apps.",
    "title": "App Distribution and Device Management Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [43, 44, 12],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-303", "wwdc2019-304"]
    }
  }, {
    "id": "wwdc2019-717",
    "staticContentId": 2891,
    "eventContentId": 717,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/717",
    "description": "Universal Links allow your users to intelligently follow links to content inside your app or to your website. Learn how the latest enhancements in Universal Links give your users the most integrated mobile and desktop experience, even when your app isn’t installed on their device.",
    "title": "What's New in Universal Links",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [67, 18, 20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/717b3lem5m2glj/717/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/717b3lem5m2glj/717/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/717b3lem5m2glj/717/717_whats_new_in_universal_links.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/717b3lem5m2glj/717/717_hd_whats_new_in_universal_links.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/717b3lem5m2glj/717/717_sd_whats_new_in_universal_links.mp4",
      "duration": 1029
    },
    "related": {
      "activities": ["wwdc2019-515", "wwdc2019-516", "wwdc2019-5020", "wwdc2019-5090"],
      "resources": [517, 516, 515, 446, 310]
    }
  }, {
    "id": "wwdc2019-4190",
    "staticContentId": 3159,
    "eventContentId": 4190,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4190",
    "description": "Stop by during Open Hours to talk with Apple engineers about things you learned during the week, to get answers to questions about new technologies you're experimenting with, or to find a fix for a difficult bug.",
    "title": "Xcode Open Hours",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-401"]
    }
  }, {
    "id": "wwdc2019-413",
    "staticContentId": 2745,
    "eventContentId": 413,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/413",
    "description": "Unit testing is an essential tool to consistently verify your code works correctly. Learn about the built-in testing features in Xcode, using XCTest. Find out how to organize your tests and run them under different configurations using test plans, new in Xcode 11. Discover how to automate testing and efficiently work with the results.",
    "title": "Testing in Xcode",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [37],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/413kpguqjv5fqp9/413/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/413kpguqjv5fqp9/413/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/413kpguqjv5fqp9/413/413_testing_in_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/413kpguqjv5fqp9/413/413_hd_testing_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/413kpguqjv5fqp9/413/413_sd_testing_in_xcode.mp4",
      "duration": 3210
    },
    "related": {
      "activities": ["wwdc2019-401", "wwdc2019-403", "wwdc2019-404", "wwdc2019-417", "wwdc2019-422", "wwdc2019-4090", "wwdc2019-4220", "wwdc2018-403"]
    }
  }, {
    "id": "wwdc2019-417",
    "staticContentId": 2847,
    "eventContentId": 417,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/417",
    "description": "Learn about new ways to find and fix performance issues during daily development, beta testing, and public release on the App Store. Learn how to catch performance issues during daily development by measuring CPU, memory, and more in your XCTests. Discover how to find issues in the field during beta testing and public release using MetricKit. See how the Xcode Organizer now displays the most important metrics from your app aggregated from each version on the App Store.",
    "title": "Improving Battery Life and Performance",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["analytics", "battery", "beta testing", "data", "energy", "field data", "instruments", "measure", "metrickit", "metrics", "performance", "xcode", "xctest"],
    "topicIds": [35, 37, 38],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/417vjfis9nusyysvl/417/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/417vjfis9nusyysvl/417/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/417vjfis9nusyysvl/417/417_improving_battery_life_and_performance.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/417vjfis9nusyysvl/417/417_hd_improving_battery_life_and_performance.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/417vjfis9nusyysvl/417/417_sd_improving_battery_life_and_performance.mp4",
      "duration": 2373
    },
    "related": {
      "activities": ["wwdc2019-413", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-243",
    "staticContentId": 2759,
    "eventContentId": 243,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/243",
    "description": "Siri is the intelligence behind displaying what someone needs to know about at just the right moment. In iOS 13, we’re extending this capability to allow your apps to let Siri know when a reservation has been made and Siri can elevate checking in at the right time. Siri can also provide directions to the reservation in Maps, add the event to Calendar, and more. Discover how you can add the power of Siri Event Suggestions to your apps.",
    "title": "Integrating with Siri Event Suggestions",
    "startTime": "2019-06-07T16:20:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-2310", "wwdc2019-8050"],
      "resources": [548, 348, 12]
    }
  }, {
    "id": "wwdc2019-3350",
    "staticContentId": 3221,
    "eventContentId": 3350,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3350",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Taiwanese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Taiwan",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-4120",
    "staticContentId": 3161,
    "eventContentId": 4120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4120",
    "description": "Join Apple engineering teams as they answer your questions about Swift. Whether you're just getting started, you're working on perfecting your protocols, or you just want to chat with someone who loves talking about opaque result types as much as you do, we'd love to meet you.",
    "title": "Swift Open Hours",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-408"]
    }
  }, {
    "id": "wwdc2019-711",
    "staticContentId": 2815,
    "eventContentId": 711,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/711",
    "description": "Combine is a unified declarative framework for processing values over time. Learn how it can simplify asynchronous code like networking, key value observing, notifications and callbacks. Hear about improvements to Foundation collections, performance, internationalization features and Swift integration.",
    "title": "Introducing Combine and Advances in Foundation",
    "startTime": "2019-06-06T10:00:00-07:00",
    "endTime": "2019-06-06T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [67],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-230", "wwdc2019-712", "wwdc2019-721", "wwdc2019-722", "wwdc2019-7110"]
    }
  }, {
    "id": "wwdc2019-247",
    "staticContentId": 2653,
    "eventContentId": 247,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/247",
    "description": "The ClassKit framework helps you surface your app's valuable educational content for inclusion in a teacher's classroom curriculum. Get an overview of the ClassKit integration workflow, debugging instructor and student roles with the Schoolwork app, and new features designed to make publishing to ClassKit easier than ever.",
    "title": "What’s New in ClassKit",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [12],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/247cie5skcsefhpnhxq/247/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/247cie5skcsefhpnhxq/247/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/247cie5skcsefhpnhxq/247/247_whats_new_in_classkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/247cie5skcsefhpnhxq/247/247_hd_whats_new_in_classkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/247cie5skcsefhpnhxq/247/247_sd_whats_new_in_classkit.mp4",
      "duration": 1682
    }
  }, {
    "id": "wwdc2019-3120",
    "staticContentId": 3024,
    "eventContentId": 3120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3120",
    "description": "Get the technical details you need to implement commerce features, such as in-app purchase and subscriptions, in your app. Learn how to use StoreKit, receipt validation, subscription status polling, and much more to help bring value to your app and keep customers engaged.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Commerce & Features By Appointment Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 25
  }, {
    "id": "wwdc2019-4250",
    "staticContentId": 3160,
    "eventContentId": 4250,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4250",
    "description": "Stop by during Open Hours to talk with Apple engineers about things you learned during the week, to get answers to questions about new technologies you're experimenting with, or to find a fix for a difficult bug.",
    "title": "Xcode Open Hours",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-401"]
    }
  }, {
    "id": "wwdc2019-207",
    "staticContentId": 2650,
    "eventContentId": 207,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/207",
    "description": "iOS 13 enhances SiriKit by bringing all new support for audio content playback. See how to provide an excellent, hands-free experience for playing your music, audiobooks, podcasts, radio, and more. Dive into best practices for handling search terms, discover how to provide a complete experience with playback speeds, adding to playlists, and allowing customers to tell you if they like or dislike content.",
    "title": "Introducing SiriKit Media Intents",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "audio", "audiobooks", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "podcasts", "radio", "shortcut", "siri", "sirikit", "streaming", "suggestion", "voice"],
    "topicIds": [28, 21],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/207k9p5h61k6sovy6hr/207/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/207k9p5h61k6sovy6hr/207/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/207k9p5h61k6sovy6hr/207/207_introducing_sirikit_media_intents.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/207k9p5h61k6sovy6hr/207/207_hd_introducing_sirikit_media_intents.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/207k9p5h61k6sovy6hr/207/207_sd_introducing_sirikit_media_intents.mp4",
      "duration": 1697
    },
    "related": {
      "activities": ["wwdc2019-2010", "wwdc2019-2160", "wwdc2019-2310", "wwdc2019-2470", "wwdc2019-8050"],
      "resources": [549, 12]
    }
  }, {
    "id": "wwdc2019-101",
    "staticContentId": 2826,
    "eventContentId": 101,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/101",
    "description": "WWDC 2019 Keynote",
    "title": "Keynote",
    "startTime": "2019-06-03T10:00:00-07:00",
    "endTime": "2019-06-03T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://p-events-delivery.akamaized.net/3004qzusahnbjppuwydgjzsdyzsippar/m3u8/hls_vod_mvp.m3u8",
      "tvOShls": "https://p-events-delivery.akamaized.net/3004qzusahnbjppuwydgjzsdyzsippar/m3u8/atv_vod_mvp.m3u8",
      "duration": 8253
    }
  }, {
    "id": "wwdc2019-7130",
    "staticContentId": 3006,
    "eventContentId": 7130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7130",
    "description": "Questions about, or problems with, installing the new seeds of iOS, macOS, tvOS or watchOS? Bring your devices to the lab where the Installer team will be on hand to help you.",
    "title": "Installer Lab",
    "startTime": "2019-06-05T13:30:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [37],
    "type": "Lab",
    "roomId": 67
  }, {
    "id": "wwdc2019-3430",
    "staticContentId": 3227,
    "eventContentId": 3430,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3430",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Canadian market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Canada",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-4160",
    "staticContentId": 3079,
    "eventContentId": 4160,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4160",
    "description": "With Swift package support in Xcode 11, it's never been a better time to be writing code to share with others. Get started with using Swift packages in your app with the help of Apple engineers. Bring your questions about creating mixed-language packages and configuring the package manifest.",
    "title": "Swift Packages Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-408", "wwdc2019-410"]
    }
  }, {
    "id": "wwdc2019-3440",
    "staticContentId": 3223,
    "eventContentId": 3440,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3440",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Korean market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Korea",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-4180",
    "staticContentId": 3162,
    "eventContentId": 4180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4180",
    "description": "Join Apple engineering teams as they answer your questions about Swift. Whether you're just getting started, you're working on perfecting your protocols, or you just want to chat with someone who loves talking about opaque result types as much as you do, we'd love to meet you.",
    "title": "Swift Open Hours",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-415", "wwdc2019-416"]
    }
  }, {
    "id": "wwdc2019-504",
    "staticContentId": 2755,
    "eventContentId": 504,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/504",
    "description": "Three lightning talks designed for web and app developers working with web content or any developer looking to use web techniques to secure resource access. Learn new Safari Extension features, including powerful new APIs for tab management and content blocking, and how to make link following in your Mac and UIKit for Mac apps great. See how to integrate your web content with powerful new platform features such as Dark Mode, Share Sheet, Apple Pay, and more. And, discover how to improve your app login experiences with new sign-in features from Sign in with Apple to new APIs for streamlined password sign-in.",
    "title": "What’s New in Authentication, Safari, and WebKit",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [19, 20, 22],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-203", "wwdc2019-511", "wwdc2019-513", "wwdc2019-706", "wwdc2019-5020", "wwdc2019-5090"]
    }
  }, {
    "id": "wwdc2019-802",
    "staticContentId": 2724,
    "eventContentId": 802,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/802",
    "description": "Through stories, interviews, and artifacts we will uncover valuable design processes, techniques, and best practices of Apple Design Award winning apps and games.",
    "title": "Designing Award Winning Apps and Games",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessibility", "ada", "ada games", "adas", "aesthetics", "app design", "apple design", "apple design awards", "apple design awards 2019", "apple designers", "color", "consistency", "design", "design best practices", "designer", "designing games", "design themes", "design winners", "discoverability", "discovery", "ease of use", "easy", "ergonomics", "feedback", "form", "games", "iconography", "intent", "intentionality", "ios design", "macos design", "meaningfulness", "metaphors", "mobile games", "mobile game ui", "mobile gaming", "narrative", "object model", "onboarding", "platform conventions", "story", "style", "texture", "thoughtfulness", "tone", "typography", "ui design", "user experience", "user experience best practices", "ux design", "watchos design"],
    "topicIds": [3, 4, 5, 26, 6, 7],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/802lc4xsb0ixszml/802/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/802lc4xsb0ixszml/802/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/802lc4xsb0ixszml/802/802_designing_award_winning_apps_and_games.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/802lc4xsb0ixszml/802/802_hd_designing_award_winning_apps_and_games.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/802lc4xsb0ixszml/802/802_sd_designing_award_winning_apps_and_games.mp4",
      "duration": 2803
    },
    "related": {
      "activities": ["wwdc2019-104"],
      "resources": [408, 90, 14, 13, 11, 10]
    }
  }, {
    "id": "wwdc2019-238",
    "staticContentId": 2733,
    "eventContentId": 238,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/238",
    "description": "Making your app accessible is critical, but just as important is designing a fantastic accessibility experience. Learn what makes a great experience and how to make your app understandable, navigable, and interactable. SwiftUI builds accessibility into your app for you! Discover how much you get with no extra adoption, like accessible images and controls. Identify where you can add supplemental accessibility information with the new SwiftUI Accessibility API, which gives you the tools to add information to elements such as labels, values, and hints.",
    "title": "Accessibility in SwiftUI",
    "startTime": "2019-06-07T10:00:00-07:00",
    "endTime": "2019-06-07T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["accessibility", "assistive", "better apps faster", "blind", "canvas", "color", "contrast", "control", "deaf", "declarative", "disability", "over", "physical", "previews", "switch", "tree", "view", "vision", "voice", "voiceover"],
    "topicIds": [8, 22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-201", "wwdc2019-204", "wwdc2019-216", "wwdc2019-231", "wwdc2019-237", "wwdc2019-257", "wwdc2019-2420", "wwdc2018-230", "wwdc2017-215", "wwdc2016-407", "wwdc2015-201"],
      "resources": [569]
    }
  }, {
    "id": "wwdc2019-607",
    "staticContentId": 2688,
    "eventContentId": 607,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/607",
    "description": "ARKit 3 enables a revolutionary capability for robust integration of real people into AR scenes. Learn how apps can use live motion capture to animate virtual characters or be applied to 2D and 3D simulation. See how People Occlusion enables even more immersive AR experiences by enabling virtual content to pass behind people in the real world.",
    "title": "Bringing People into AR",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 24, 25, 26],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/607a2lcl8lpd7fnidym/607/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/607a2lcl8lpd7fnidym/607/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/607a2lcl8lpd7fnidym/607/607_bringing_people_into_ar.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/607a2lcl8lpd7fnidym/607/607_hd_bringing_people_into_ar.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/607a2lcl8lpd7fnidym/607/607_sd_bringing_people_into_ar.mp4",
      "duration": 2366
    },
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-604", "wwdc2019-605", "wwdc2019-609", "wwdc2019-610", "wwdc2019-612", "wwdc2019-6130", "wwdc2019-6140"],
      "resources": [592, 544, 25]
    }
  }, {
    "id": "wwdc2019-2280",
    "staticContentId": 3049,
    "eventContentId": 2280,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2280",
    "description": "Meet with the iPad Apps for Mac team to discuss bringing your iPad app to the Mac. Get hands-on technical assistance and advice about using UIKit frameworks on the Mac. Get advice about using UIKit frameworks on the Mac and tailoring the user experience.",
    "title": "iPad Apps for Mac Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["catalyst", "checkbox", "ipad app", "project catalyst", "uikit"],
    "topicIds": [38, 22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-227", "wwdc2019-809"]
    }
  }, {
    "id": "wwdc2019-240",
    "staticContentId": 2827,
    "eventContentId": 240,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/240",
    "description": "Once you’ve learned the basics of SwiftUI, you’ve learned what you need to know to use SwiftUI anywhere. You can use the same SwiftUI skills for making an iOS app as you would for making an app on watchOS, tvOS or macOS. We'll cover the basics, and then dig into more detail about how  SwiftUI can help you make changes to your app on every Apple device. Hear about design principles for each platform and learn about how much code you can share across platforms. See how to incorporate device-specific features and how to make changes in SwiftUI by following along with a starter project, available for download.",
    "title": "SwiftUI On All Devices",
    "startTime": "2019-06-07T14:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-216", "wwdc2019-219", "wwdc2019-226", "wwdc2019-231", "wwdc2019-237", "wwdc2019-2250", "wwdc2019-2400"]
    }
  }, {
    "id": "wwdc2019-4210",
    "staticContentId": 3163,
    "eventContentId": 4210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4210",
    "description": "Join Apple engineering teams as they answer your questions about Swift. Whether you're just getting started, you're working on perfecting your protocols, or you just want to chat with someone who loves talking about opaque result types as much as you do, we'd love to meet you.",
    "title": "Swift Open Hours",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-415"]
    }
  }, {
    "id": "wwdc2019-223",
    "staticContentId": 2760,
    "eventContentId": 223,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/223",
    "description": "Core Haptics lets you design your own haptics with synchronized audio on iPhone. In this two part session, learn essential sound and haptic design principles and concepts for creating meaningful and delightful experiences that engage a wider range of human senses. Discover how to combine visuals, audio and haptics, using the Taptic Engine, to add a new level of realism and improve feedback in your app or game. Understand how to create and play back content, and where Core Haptics fits in with other audio and haptic APIs.",
    "title": "Expanding the Sensory Experience with Core Haptics",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28, 3, 5, 26],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/223ignoocw8xnuqx5di/223/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/223ignoocw8xnuqx5di/223/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/223ignoocw8xnuqx5di/223/223_expanding_the_sensory_experience_with_core_haptics.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/223ignoocw8xnuqx5di/223/223_hd_expanding_the_sensory_experience_with_core_haptics.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/223ignoocw8xnuqx5di/223/223_sd_expanding_the_sensory_experience_with_core_haptics.mp4",
      "duration": 3364
    },
    "related": {
      "activities": ["wwdc2019-5030", "wwdc2019-5080", "wwdc2019-5140", "wwdc2019-5150", "wwdc2018-804", "wwdc2017-803"],
      "resources": [594, 593, 591, 393]
    }
  }, {
    "id": "wwdc2019-6040",
    "staticContentId": 2944,
    "eventContentId": 6040,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6040",
    "description": "Get one-on-one technical assistance and advice from Apple engineers about using Game Center in your titles. Get answers about leaderboards, achievements, challenges, multi-player games, scoped player identifiers, and more. Bring your code and your questions.",
    "title": "Game Center Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [26],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-615"]
    }
  }, {
    "id": "wwdc2019-419",
    "staticContentId": 2747,
    "eventContentId": 419,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/419",
    "description": "How you store data in your app affects not only disk footprint, but also the performance of your app and the battery life of the device. Learn techniques for optimizing data serialization, working with images, and syncing to disk. Find out how to take advantage of features in SQLite to improve performance and safety.",
    "title": "Optimizing Storage in Your App",
    "startTime": "2019-06-07T10:00:00-07:00",
    "endTime": "2019-06-07T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [35],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-202", "wwdc2019-230", "wwdc2019-4240", "wwdc2019-4260", "wwdc2017-503"]
    }
  }, {
    "id": "wwdc2019-4090",
    "staticContentId": 3076,
    "eventContentId": 4090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4090",
    "description": "Talk with Apple engineers about testing with Simulator, how to create test plans using Unit and UI Testing, or how to set up continuous integration workflows. Bring your code and your questions.",
    "title": "Simulator, Testing, and Continuous Integration Lab",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [37, 38],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-413", "wwdc2019-418"]
    }
  }, {
    "id": "wwdc2019-8080",
    "staticContentId": 3122,
    "eventContentId": 8080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8080",
    "description": "Get guidance in creating great experiences on Apple Watch. Consult with watchOS designers to evaluate your current Apple Watch experience, or to determine how you can make the best use of the core components of watchOS — notifications, complications, and watch apps. Bring your ideas, prototypes or flows, and learn about best practices in designing for Apple Watch.",
    "title": "watchOS Design Lab",
    "startTime": "2019-06-06T13:30:00-07:00",
    "endTime": "2019-06-06T15:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "topicIds": [3, 4, 5, 6, 7, 22],
    "type": "Lab",
    "roomId": 7,
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-251", "wwdc2019-253", "wwdc2019-716"]
    }
  }, {
    "id": "wwdc2019-2340",
    "staticContentId": 2855,
    "eventContentId": 2340,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2340",
    "description": "Meet with the Apple engineers and experts with a passion for education. Get advice on a broad set of topics including how to implement the latest ClassKit APIs to surface your app's rich curriculum for use in the Schoolwork and Classroom apps, how to configure your app to ensure compatibility in a shared iPad classroom, which is the appropriate app-lock technique for assessment, and how to use Swift Playgrounds to teach coding skills to a new generation.",
    "title": "ClassKit and Education Technologies Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [12],
    "type": "Lab",
    "roomId": 72
  }, {
    "id": "wwdc2019-2480",
    "staticContentId": 2834,
    "eventContentId": 2480,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2480",
    "description": "The Speech Recognition API allows you to perform rapid and contextually informed speech recognition in both file-based and realtime scenarios. Get one-on-one technical guidance from Apple engineers about using speech recognition in your apps. Bring your code and your questions.",
    "title": "Speech Recognition Lab",
    "startTime": "2019-06-07T14:30:00-07:00",
    "endTime": "2019-06-07T16:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-256"]
    }
  }, {
    "id": "wwdc2019-5190",
    "staticContentId": 3181,
    "eventContentId": 5190,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5190",
    "description": "Reserve time in our fully outfitted studio to record the latest episode of your audio podcast, right here at WWDC. Each 60 minute session can accommodate up to four contributors, with Apple experts on hand to help get your session up and running. You will receive a copy of your session for post-production and distribution.\r\n\r\nReserving time in the Apple Podcasts studio is by appointment only and is limited to one per person for the duration of the conference.",
    "title": "Apple Podcasts Studio",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 60
  }, {
    "id": "wwdc2019-502",
    "staticContentId": 2702,
    "eventContentId": 502,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/502",
    "description": "Since its introduction in 2009, HTTP Live Streaming (HLS) has enabled the delivery of countless live and on‐demand audio and video streams globally. With the introduction of a new Low-Latency mode, latencies of less than two seconds are now achievable over public networks at scale, while still offering backwards compatibility to existing clients. Learn about how to develop and configure your content delivery systems to take advantage of this new technology.",
    "title": "Introducing Low-Latency HLS",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28, 31],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/502gzyuhh8p2r8g8/502/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/502gzyuhh8p2r8g8/502/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/502gzyuhh8p2r8g8/502/502_introducing_lowlatency_hls.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/502gzyuhh8p2r8g8/502/502_hd_introducing_lowlatency_hls.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/502gzyuhh8p2r8g8/502/502_sd_introducing_lowlatency_hls.mp4",
      "duration": 2526
    },
    "related": {
      "activities": ["wwdc2019-507", "wwdc2019-5050", "wwdc2019-5120", "wwdc2019-5130", "wwdc2019-5160", "wwdc2019-5170", "wwdc2018-502"],
      "resources": [587, 485, 175]
    }
  }, {
    "id": "wwdc2019-514",
    "staticContentId": 2952,
    "eventContentId": 514,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/514",
    "description": "Discover a new way to ensure your web content meets team coding standards and that you can deliver better code even without reliance on automated test systems. Find out how to use the Audit tool in Web Inspector to quickly and easily audit your web content during development so important compliance details don't slip by.",
    "title": "Auditing Web Content with Web Inspector",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/514u8cpyqzkiznkm1/514/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/514u8cpyqzkiznkm1/514/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/514u8cpyqzkiznkm1/514/514_auditing_web_content_with_web_inspector.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/514u8cpyqzkiznkm1/514/514_hd_auditing_web_content_with_web_inspector.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/514u8cpyqzkiznkm1/514/514_sd_auditing_web_content_with_web_inspector.mp4",
      "duration": 495
    },
    "related": {
      "activities": ["wwdc2019-518"]
    }
  }, {
    "id": "wwdc2019-216",
    "staticContentId": 2672,
    "eventContentId": 216,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/216",
    "description": "Take your first deep-dive into building an app with SwiftUI. Learn about Views and how they work. From basic controls to sophisticated containers like lists and navigation stacks, SwiftUI enables the creation of great user interfaces, faster and more easily. See how basic controls like Button are both simple yet versatile. Discover how to compose these pieces into larger, full-featured user interfaces that facilitate building great apps with SwiftUI. Build your SwiftUI skills as you learn the essentials of Apple’s new declarative framework.",
    "title": "SwiftUI Essentials",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["avocado toast", "better apps faster", "canvas", "compose", "compositional", "control", "declarative", "previews", "view"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/216oe5ad0gu7zw8cqfd/216/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/216oe5ad0gu7zw8cqfd/216/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/216oe5ad0gu7zw8cqfd/216/216_swiftui_essentials.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/216oe5ad0gu7zw8cqfd/216/216_hd_swiftui_essentials.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/216oe5ad0gu7zw8cqfd/216/216_sd_swiftui_essentials.mp4",
      "duration": 3508
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-219", "wwdc2019-226", "wwdc2019-231", "wwdc2019-233", "wwdc2019-237", "wwdc2019-238", "wwdc2019-240", "wwdc2019-401", "wwdc2019-402", "wwdc2019-415"]
    }
  }, {
    "id": "wwdc2019-5200",
    "staticContentId": 3182,
    "eventContentId": 5200,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5200",
    "description": "Reserve time in our fully outfitted studio to record the latest episode of your audio podcast, right here at WWDC. Each 60 minute session can accommodate up to four contributors, with Apple experts on hand to help get your session up and running. You will receive a copy of your session for post-production and distribution.\r\n\r\nReserving time in the Apple Podcasts studio is by appointment only and is limited to one per person for the duration of the conference.",
    "title": "Apple Podcasts Studio",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 60
  }, {
    "id": "wwdc2019-4150",
    "staticContentId": 3164,
    "eventContentId": 4150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4150",
    "description": "Meet with experts from the Xcode team to discuss strategies for building your app and fix issues in real time. Bring your questions about the build system, code signing, and packaging apps. Whether you're working through a problem, or you just want a better understanding of how certificates and profiles work, you'll find Apple engineers who are eager to help.",
    "title": "Building, Signing, and Distributing Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32, 43, 38],
    "type": "Lab",
    "roomId": 75
  }, {
    "id": "wwdc2019-7210",
    "staticContentId": 3008,
    "eventContentId": 7210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7210",
    "description": "Engineers from Apple’s Security team will be on hand to answer your questions and give you expert advice on all aspects of security: authorization and authentication, protecting data on device and in transit, cryptography, notarization for Mac apps, code signing, and more.",
    "title": "Security Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Lab",
    "roomId": 67,
    "related": {
      "activities": ["wwdc2019-701", "wwdc2019-709"]
    }
  }, {
    "id": "wwdc2019-2130",
    "staticContentId": 3048,
    "eventContentId": 2130,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2130",
    "description": "Meet with the iPad Apps for Mac team and Xcode engineers to discuss bringing your iPad app to the Mac. Get hands-on technical assistance and advice about using UIKit frameworks on the Mac. The Xcode team will be on hand to help you set up your build environment. Get advice about using UIKit frameworks on the Mac and tailoring the user experience.",
    "title": "iPad Apps for Mac Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["checkbox", "ipad app", "uikit"],
    "topicIds": [38, 22],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-227", "wwdc2019-809"]
    }
  }, {
    "id": "wwdc2019-4200",
    "staticContentId": 3165,
    "eventContentId": 4200,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4200",
    "description": "Meet with experts from the Xcode team to discuss strategies for building your app and fix issues in real time. Bring your questions about the build system, code signing, and packaging apps. Whether you're working through a problem, or you just want a better understanding of how certificates and profiles work, you'll find Apple engineers who are eager to help.",
    "title": "Building, Signing, and Distributing Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32, 43, 38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-416"]
    }
  }, {
    "id": "wwdc2019-716",
    "staticContentId": 2609,
    "eventContentId": 716,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/716",
    "description": "Streaming audio on Apple Watch allows customers to enjoy your content wherever they go without their iPhone. Learn about the streaming APIs brought over from iOS to allow watchOS apps to create independent audio consumption experiences. Find out how to set up your audio session for streaming and explore best practices to provide the best experience for people moving between different network conditions.",
    "title": "Streaming Audio on watchOS 6",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "audio", "avfoundation", "avplayer", "avqueueplayer", "backgraound", "background", "coremedia", "core media", "digital crown", "network", "networking", "streaming", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [28, 18],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/716z5h7lh9mzhl/716/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/716z5h7lh9mzhl/716/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/716z5h7lh9mzhl/716/716_streaming_audio_on_watchos_6.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/716z5h7lh9mzhl/716/716_hd_streaming_audio_on_watchos_6.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/716z5h7lh9mzhl/716/716_sd_streaming_audio_on_watchos_6.mp4",
      "duration": 534
    },
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-712", "wwdc2019-713", "wwdc2019-2040", "wwdc2019-2140", "wwdc2019-2270", "wwdc2019-2390", "wwdc2019-5130", "wwdc2019-5160", "wwdc2019-8080"],
      "resources": [574, 498, 138, 52, 9]
    }
  }, {
    "id": "wwdc2019-3460",
    "staticContentId": 3224,
    "eventContentId": 3460,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3460",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the European market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to Europe",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T10:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-4080",
    "staticContentId": 3166,
    "eventContentId": 4080,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4080",
    "description": "Get expert help on how to use Auto Layout in your apps. Bring your code and talk with Interface Builder, Cocoa, and Cocoa Touch engineers on how to optimally structure your user interface.",
    "title": "Interface Builder and Auto Layout Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [34],
    "type": "Lab",
    "roomId": 73
  }, {
    "id": "wwdc2019-237",
    "staticContentId": 2675,
    "eventContentId": 237,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/237",
    "description": "Learn how to build custom views and controls in SwiftUI with advanced composition, layout, graphics, and animation. See a demo of a high performance, animatable control and watch it made step by step in code. Gain a deeper understanding of the layout system of SwiftUI.",
    "title": "Building Custom Views with SwiftUI",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bar chart", "dynamic"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-216", "wwdc2019-219", "wwdc2019-226", "wwdc2019-231", "wwdc2019-233", "wwdc2019-238", "wwdc2019-240", "wwdc2019-402", "wwdc2019-415", "wwdc2019-2440"],
      "resources": [546]
    }
  }, {
    "id": "wwdc2019-421",
    "staticContentId": 2860,
    "eventContentId": 421,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/421",
    "description": "Custom instruments make it possible to profile your app your way, telling the story of what your app is doing at runtime. At the center of each custom instrument is a modeler. Find out how to build your own modelers that translate from signpost output to the data you want to show in your instrument. Learn how the Instruments rules engine works and how to optimize your instrument for maximum efficiency. This session builds on Creating Custom Instruments from WWDC 2018.",
    "title": "Modeling in Custom Instruments",
    "startTime": "2019-06-07T15:20:00-07:00",
    "endTime": "2019-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [35],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-414", "wwdc2019-4240", "wwdc2019-4260", "wwdc2018-410"],
      "resources": [590, 513]
    }
  }, {
    "id": "wwdc2019-105",
    "staticContentId": 3184,
    "eventContentId": 105,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/105",
    "description": "Start your day with the fantastic trainers of Aaptiv, the number one audio fitness app on the App Store. This 40-minute high intensity interval training workout will wake you up and push you to your limits leaving you energized and ready to take on the day. All levels are welcome. Check-in starts at 6:30 a.m at the Activity Studio, located at 420 S First Street, San Jose CA, 95113.",
    "title": "Morning HIIT Workout with Aaptiv",
    "startTime": "2019-06-04T07:00:00-07:00",
    "endTime": "2019-06-04T08:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "actionLinkPrompt": "Register Now",
    "actionLinkURL": "https://developer.apple.com/wwdc19/fitness/aaptiv/",
    "roomId": 130
  }, {
    "id": "wwdc2019-5210",
    "staticContentId": 3183,
    "eventContentId": 5210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5210",
    "description": "Reserve time in our fully outfitted studio to record the latest episode of your audio podcast, right here at WWDC. Each 60 minute session can accommodate up to four contributors, with Apple experts on hand to help get your session up and running. You will receive a copy of your session for post-production and distribution.\r\n\r\nReserving time in the Apple Podcasts studio is by appointment only and is limited to one per person for the duration of the conference.",
    "title": "Apple Podcasts Studio",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 60
  }, {
    "id": "wwdc2019-215",
    "staticContentId": 2728,
    "eventContentId": 215,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/215",
    "description": "Collection View Layouts make it easy to build rich interactive collections. Learn how to make dynamic and responsive layouts that range in complexity from basic lists to an advanced, multi-dimensional browsing experience.",
    "title": "Advances in Collection View Layout",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["app store", "browse", "custom layouts", "layouts"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/215wh1hurdxwcctfc8/215/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/215wh1hurdxwcctfc8/215/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/215wh1hurdxwcctfc8/215/215_advances_in_collection_view_layout.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/215wh1hurdxwcctfc8/215/215_hd_advances_in_collection_view_layout.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/215wh1hurdxwcctfc8/215/215_sd_advances_in_collection_view_layout.mp4",
      "duration": 3013
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-220", "wwdc2019-2260", "wwdc2018-225", "wwdc2018-229"],
      "resources": [530]
    }
  }, {
    "id": "wwdc2019-103",
    "staticContentId": 3028,
    "eventContentId": 103,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/103",
    "description": "WWDC 2019 Platforms State of the Union",
    "title": "Platforms State of the Union",
    "startTime": "2019-06-03T14:30:00-07:00",
    "endTime": "2019-06-03T16:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/103bax22h2udxu0n/103/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/103bax22h2udxu0n/103/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/103bax22h2udxu0n/103/103_hd_platforms_state_of_the_union.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/103bax22h2udxu0n/103/103_sd_platforms_state_of_the_union.mp4",
      "duration": 7039
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-205", "wwdc2019-210", "wwdc2019-211", "wwdc2019-401", "wwdc2019-604", "wwdc2019-801"]
    }
  }, {
    "id": "wwdc2019-252",
    "staticContentId": 2691,
    "eventContentId": 252,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/252",
    "description": "CarPlay is a smarter, safer way to use your iPhone in the car. Learn how to update your vehicle system to take advantage of new features in iOS 13. Add support for dynamically changing screen sizes, second screens such as instrument clusters, and even irregularly shaped displays. Learn how to support \"Hey Siri\" for hands-free voice activation.",
    "title": "Advances in CarPlay Systems",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚙", "automotive", "car", "map"],
    "topicIds": [68],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/252ogueb17a2lv/252/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/252ogueb17a2lv/252/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/252ogueb17a2lv/252/252_advances_in_carplay_systems.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/252ogueb17a2lv/252/252_hd_advances_in_carplay_systems.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/252ogueb17a2lv/252/252_sd_advances_in_carplay_systems.mp4",
      "duration": 960
    },
    "related": {
      "activities": ["wwdc2019-2190", "wwdc2019-2370", "wwdc2017-717", "wwdc2016-722", "wwdc2016-723"],
      "resources": [509]
    }
  }, {
    "id": "wwdc2019-7190",
    "staticContentId": 3002,
    "eventContentId": 7190,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7190",
    "description": "Using Core NFC in your apps? This is your opportunity to meet Apple’s Core NFC team and get your questions answered. The Apple Pay and Wallet teams will also be in the lab to talk with you about using Apple Pay in your apps and your websites and creating great user experiences using passes.",
    "title": "Core NFC, Apple Pay & Wallet Lab",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [10],
    "type": "Lab",
    "roomId": 67
  }, {
    "id": "wwdc2019-414",
    "staticContentId": 2859,
    "eventContentId": 414,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/414",
    "description": "Learn how to add useful tracing to your reusable classes, subsystems, or frameworks. By making it easy to trace your code, you provide adopters with valuable insight and confidence. We'll show you best practices for tracing your Swift and Objective-C code, building custom instruments, and visualizing data in Instruments 11. Share your expertise in a tools experience so others can understand the contracts of your APIs and avoid anti-patterns that impact performance.",
    "title": "Developing a Great Profiling Experience",
    "startTime": "2019-06-07T14:00:00-07:00",
    "endTime": "2019-06-07T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["debugging", "frameworks", "instruments", "performance", "profiling", "sdk", "signposts", "tools", "xcode"],
    "topicIds": [33, 35],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-421", "wwdc2019-4110", "wwdc2019-4130", "wwdc2019-4170", "wwdc2019-4240", "wwdc2019-4260"],
      "resources": [424, 323]
    }
  }, {
    "id": "wwdc2019-809",
    "staticContentId": 3273,
    "eventContentId": 809,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/809",
    "description": "Discover how you can create a great Mac experience with your iPad app. Learn about essential techniques for adapting your iPad app's layout and architecture for Mac, considerations for type and color, and how you can take advantage of macOS interfaces such as the menu bar, sidebar and window toolbar.",
    "title": "Designing iPad Apps for Mac",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["catalyst", "project catalyst"],
    "topicIds": [3, 6, 7],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/809fdcsntdrt6yhjk/809/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/809fdcsntdrt6yhjk/809/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/809fdcsntdrt6yhjk/809/809_designing_ipad_apps_for_mac.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/809fdcsntdrt6yhjk/809/809_hd_designing_ipad_apps_for_mac.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/809fdcsntdrt6yhjk/809/809_sd_designing_ipad_apps_for_mac.mp4",
      "duration": 1818
    },
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-235", "wwdc2019-2090", "wwdc2019-2130", "wwdc2019-2280", "wwdc2019-2410"]
    }
  }, {
    "id": "wwdc2019-509",
    "staticContentId": 2865,
    "eventContentId": 509,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/509",
    "description": "Audio Unit app extensions gives users a convenient way to create or modify audio in any iOS or macOS app that uses sound, including music production apps such as GarageBand or Logic Pro X. And now, with iOS 13, you can store user presets for your extensions that are accessible across applications.",
    "title": "AUv3 Extensions User Presets",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [28],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/509tdjld4pedsigr9/509/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/509tdjld4pedsigr9/509/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/509tdjld4pedsigr9/509/509_auv3_extensions_user_presets.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/509tdjld4pedsigr9/509/509_hd_auv3_extensions_user_presets.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/509tdjld4pedsigr9/509/509_sd_auv3_extensions_user_presets.mp4",
      "duration": 332
    },
    "related": {
      "activities": ["wwdc2019-5030", "wwdc2019-5150"],
      "resources": [477, 476]
    }
  }, {
    "id": "wwdc2019-8090",
    "staticContentId": 3057,
    "eventContentId": 8090,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8090",
    "description": "Get advice on making your apps simple to use and visually compelling. Come prepared with a working prototype, development build, or your released app. You can walk in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Design Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 7
  }, {
    "id": "wwdc2019-4220",
    "staticContentId": 3167,
    "eventContentId": 4220,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4220",
    "description": "Talk with Apple engineers about testing with Simulator, how to create test plans using Unit and UI Testing, or how to set up continuous integration workflows. Bring your code and your questions.",
    "title": "Simulator, Testing, and Continuous Integration Lab",
    "startTime": "2019-06-07T12:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [37, 38],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-413", "wwdc2019-418"]
    }
  }, {
    "id": "wwdc2019-106",
    "staticContentId": 3256,
    "eventContentId": 106,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/106",
    "description": "Open to all attendees, these informal breakfasts are a great way to meet some of the phenomenal people at WWDC while you start your day with a buffet. This engaging panel discussion features Apple Entrepreneur Camp alumni and female WWDC Scholarship recipients. Moderated by Dawn Dagucon, Program Manager, Apple Entrepreneur Camp.\r\n\r\nThis event takes place at the Hilton San Jose in the Market Room, located on street level.",
    "title": "Women@WWDC Breakfast",
    "startTime": "2019-06-04T07:30:00-07:00",
    "endTime": "2019-06-04T08:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 132
  }, {
    "id": "wwdc2019-2420",
    "staticContentId": 3055,
    "eventContentId": 2420,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2420",
    "description": "Use Apple's accessibility APIs to deliver a seamless experience for a broad range of users. Whether you are working with VoiceOver, hearing aids, speech synthesis, or other accessibility features, be prepared to demo and fix issues in real time as you meet with Apple engineers. Bring your questions about the new Accessibility APIs in SwiftUI and get advice for how to build them into your new app from the ground up or incorporate them into your existing app.",
    "title": "Accessibility Lab",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [8, 22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-201", "wwdc2019-238"]
    }
  }, {
    "id": "wwdc2019-4230",
    "staticContentId": 3168,
    "eventContentId": 4230,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4230",
    "description": "With Swift package support in Xcode 11, it's never been a better time to be writing code to share with others. Get started with using Swift packages in your app with the help of Apple engineers. Bring your questions about creating mixed-language packages and configuring the package manifest.",
    "title": "Swift Packages Lab",
    "startTime": "2019-06-07T12:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-408", "wwdc2019-410"]
    }
  }, {
    "id": "wwdc2019-202",
    "staticContentId": 2764,
    "eventContentId": 202,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/202",
    "description": "CloudKit offers powerful, cloud-syncing technology while Core Data provides extensive data modeling and persistence APIs. Learn about combining these complementary technologies to easily build cloud-backed applications. See how new Core Data APIs make it easy to manage the flow of data through your application, as well as in and out of CloudKit. Join us to learn more about combining these frameworks to provide a great experience across all your customers’ devices.",
    "title": "Using Core Data With CloudKit",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["backup", "batch operations", "change notifications", "cloud", "cloudkit", "concurrency", "core", "core data", "data", "derived attributes", "documents", "history tracking", "icloud", "model layer objects", "nskeyedarchiver", "object graph", "object life cycle", "performance", "persistence", "persistent history", "record", "records", "server", "sharing", "sqlite", "testing", "zone"],
    "topicIds": [11, 22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/202mm1h4jl4wiz1h3/202/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/202mm1h4jl4wiz1h3/202/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/202mm1h4jl4wiz1h3/202/202_using_core_data_with_cloudkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/202mm1h4jl4wiz1h3/202/202_hd_using_core_data_with_cloudkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/202mm1h4jl4wiz1h3/202/202_sd_using_core_data_with_cloudkit.mp4",
      "duration": 1909
    },
    "related": {
      "activities": ["wwdc2019-230", "wwdc2019-419", "wwdc2019-2110", "wwdc2019-2150", "wwdc2019-2210", "wwdc2019-2460"]
    }
  }, {
    "id": "wwdc2019-721",
    "staticContentId": 2813,
    "eventContentId": 721,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/721",
    "description": "Expand your knowledge of Combine, Apple's new unified, declarative framework for processing values over time. Learn about how to correctly handle errors, schedule work and integrate Combine into your app today.",
    "title": "Combine in Practice",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [67],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/721ga0kflgr4ypfx/721/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/721ga0kflgr4ypfx/721/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/721ga0kflgr4ypfx/721/721_combine_in_practice.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/721ga0kflgr4ypfx/721/721_hd_combine_in_practice.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/721ga0kflgr4ypfx/721/721_sd_combine_in_practice.mp4",
      "duration": 2081
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-212", "wwdc2019-226", "wwdc2019-415", "wwdc2019-711", "wwdc2019-712", "wwdc2019-722", "wwdc2019-2360", "wwdc2019-7110", "wwdc2017-241"]
    }
  }, {
    "id": "wwdc2019-115",
    "staticContentId": 3186,
    "eventContentId": 115,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/115",
    "description": "Make space in your week to reflect and recharge with instructors from the wildly popular Glo — Yoga and Meditation app. This gentle flow practice combines mindfulness and movement to leave you feeling fully reset and inspired. All levels are welcome. Check-in starts at 6:30 a.m at the Activity Studio, located at 420 S First Street, San Jose CA, 95113.",
    "title": "Yoga Mind-Body Reboot with Glo",
    "startTime": "2019-06-06T07:00:00-07:00",
    "endTime": "2019-06-06T08:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "actionLinkPrompt": "Register Now",
    "actionLinkURL": "https://developer.apple.com/wwdc19/fitness/glo/",
    "roomId": 130
  }, {
    "id": "wwdc2019-7010",
    "staticContentId": 3005,
    "eventContentId": 7010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7010",
    "description": "Questions about, or problems with, installing the new seeds of iOS, macOS, tvOS or watchOS? Bring your devices to the lab where the Installer team will be on hand to help you.",
    "title": "Installer Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["beta", "install"],
    "topicIds": [37],
    "type": "Lab",
    "roomId": 67
  }, {
    "id": "wwdc2019-6050",
    "staticContentId": 2945,
    "eventContentId": 6050,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6050",
    "description": "Check out the capabilities of ReplayKit for recording, sharing, and live broadcasting and see how to access its rich functionality right from Control Center. Meet the ReplayKit engineering team to receive hands-on technical guidance. Bring your code and get your questions answered.",
    "title": "ReplayKit Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "topicIds": [28, 26, 31],
    "type": "Lab",
    "roomId": 71,
    "related": {
      "activities": ["wwdc2018-601"]
    }
  }, {
    "id": "wwdc2019-511",
    "staticContentId": 2915,
    "eventContentId": 511,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/511",
    "description": "With system-wide Dark Mode support in iOS and macOS, you'll want to make sure your web content is appropriately styled to reflect your users'  preference. Learn techniques to ensure your content looks its best when presented in Safari, embedded in other apps such as Mail, or when used in your apps. Discover the details and best practices for this new pillar in responsive web design.",
    "title": "Supporting Dark Mode in Your Web Content",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/511e9x950grweijpm9y/511/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/511e9x950grweijpm9y/511/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/511e9x950grweijpm9y/511/511_supporting_dark_mode_in_your_web_content.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/511e9x950grweijpm9y/511/511_hd_supporting_dark_mode_in_your_web_content.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/511e9x950grweijpm9y/511/511_sd_supporting_dark_mode_in_your_web_content.mp4",
      "duration": 639
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2019-504", "wwdc2019-518"]
    }
  }, {
    "id": "wwdc2019-2150",
    "staticContentId": 2989,
    "eventContentId": 2150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2150",
    "description": "Meet with CloudKit engineers to understand how you can leverage the CloudKit APIs in your app. Get advice on how to model your data, save and query records, subscribe to updates, create custom record zones, and share your records with other users. Talk to Apple experts about how to make the most of all the iCloud technologies. Bring all your CloudKit and iCloud questions, your laptop, and your code.",
    "title": "iCloud and CloudKit Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["backup", "cloud", "cloudkit", "documents", "icloud", "record", "records", "server", "sharing", "zone"],
    "topicIds": [11],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-202"]
    }
  }, {
    "id": "wwdc2019-613",
    "staticContentId": 2664,
    "eventContentId": 613,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/613",
    "description": "Metal Performance Shaders (MPS) harness the massive parallelism of the GPU to dramatically accelerate calculations at the heart of modern ray tracing and ray casting techniques. Understand how MPS accelerates calculations for dynamic scenes, and dive into practical examples for implementing soft shadows, ambient occlusion, and global illumination. Learn how to enable hybrid rendering applications, and explore new techniques to extend your app across multiple GPUs.",
    "title": "Ray Tracing with Metal",
    "startTime": "2019-06-07T11:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-606", "wwdc2019-608", "wwdc2019-611", "wwdc2019-614", "wwdc2019-6180"],
      "resources": [525, 56, 38]
    }
  }, {
    "id": "wwdc2019-113",
    "staticContentId": 3178,
    "eventContentId": 113,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/113",
    "description": "Coming out of surgery to remove a brain tumor, Chris Downey found himself facing a new reality at the age of 45 — total and unexpected sight loss. Unfazed by the apparent paradox of being a “blind architect”, Chris returned to work one month later. While Chris still thinks, creates, and works visually in his mind, his blind persona continually fascinates him with surprising “outsights” — special insights about architecture, technology, and the world around him gained as a result of losing his sight. Join Chris as he shares his newly-found vision and the positive impact his experience has had, and hear his challenge to all to realize a truly smart world through universal inclusive design.",
    "title": "Outsights from My Blind Avatar: An Architect’s New Vision Without Sight",
    "startTime": "2019-06-05T12:30:00-07:00",
    "endTime": "2019-06-05T13:20:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [2],
    "type": "Special Event",
    "roomId": 62
  }, {
    "id": "wwdc2019-205",
    "staticContentId": 2706,
    "eventContentId": 205,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/205",
    "description": "iPad Apps for Mac is an easy way to bring your iPad app to the Mac while maintaining your single code-base. Learn about common Mac features that are automatically implemented for you. Find out how to work with iOS-only frameworks and what using them could mean for your app. Hear about some common usage patterns including how to use third-party frameworks and some setup tips and tricks. Get a taste for how you can make your new Mac app feel like a Mac app by incorporating platform-specific features.",
    "title": "Introducing iPad Apps for Mac",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["checkbox", "ipad app", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/205uk2opbsrhdunlbn/205/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/205uk2opbsrhdunlbn/205/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/205uk2opbsrhdunlbn/205/205_introducing_ipad_apps_for_mac.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/205uk2opbsrhdunlbn/205/205_hd_introducing_ipad_apps_for_mac.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/205uk2opbsrhdunlbn/205/205_sd_introducing_ipad_apps_for_mac.mp4",
      "duration": 2487
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-227", "wwdc2019-235", "wwdc2019-801", "wwdc2019-809", "wwdc2019-2090", "wwdc2019-2130", "wwdc2019-2280", "wwdc2019-2410"]
    }
  }, {
    "id": "wwdc2019-257",
    "staticContentId": 2968,
    "eventContentId": 257,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/257",
    "description": "The Accessibility Inspector enables you to identify parts of your app that are not accessible. It provides feedback on how you can make them accessible, as well as simulating voice-over to help you identify what a Voice Over user would experience. Watch a live-demo of an app being fully debugged in the Accessibility Inspector, and learn how to leverage this powerful tool to make your apps better for everyone.",
    "title": "Accessibility Inspector",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [8, 33, 38, 22],
    "type": "Video",
    "related": {
      "activities": ["wwdc2019-238"]
    }
  }, {
    "id": "wwdc2019-3310",
    "staticContentId": 3225,
    "eventContentId": 3310,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3310",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Middle Eastern market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to the Middle East",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-3450",
    "staticContentId": 3217,
    "eventContentId": 3450,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3450",
    "description": "Meet one-on-one with members of the App Store team to find out what makes an app feature-worthy and discuss potential story ideas for the Today tab.",
    "title": "Learn More About the Today Tab",
    "startTime": "2019-06-04T14:00:00-07:00",
    "endTime": "2019-06-04T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Lab",
    "roomId": 129
  }, {
    "id": "wwdc2019-609",
    "staticContentId": 2687,
    "eventContentId": 609,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/609",
    "description": "Reality Composer is a tool that lets anyone quickly prototype and build AR scenes ready to integrate into apps or experience with AR Quick Look. Walk through the powerful and intuitive capabilities of Reality Composer and discover hundreds of ready-to-use virtual objects in its built-in AR library. See how easy it is to build animations and interactions to enrich your 3D content, and get details about integrating Reality files right into your apps.",
    "title": "Building AR Experiences with Reality Composer",
    "startTime": "2019-06-06T11:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/609zbao33tlyym/609/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/609zbao33tlyym/609/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/609zbao33tlyym/609/609_building_ar_experiences_with_reality_composer.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/609zbao33tlyym/609/609_hd_building_ar_experiences_with_reality_composer.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/609zbao33tlyym/609/609_sd_building_ar_experiences_with_reality_composer.mp4",
      "duration": 3545
    },
    "related": {
      "activities": ["wwdc2019-602", "wwdc2019-603", "wwdc2019-604", "wwdc2019-605", "wwdc2019-607", "wwdc2019-610", "wwdc2019-612", "wwdc2019-6130", "wwdc2019-6140", "wwdc2019-6170"],
      "resources": [560]
    }
  }, {
    "id": "wwdc2019-4140",
    "staticContentId": 3169,
    "eventContentId": 4140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4140",
    "description": "Bring your C, Objective-C, and C++ questions to discuss with the LLVM teams. Work out issues you're having building and linking C language code.",
    "title": "LLVM Compiler, Objective-C, C++, and Linking Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-409"]
    }
  }, {
    "id": "wwdc2019-722",
    "staticContentId": 3187,
    "eventContentId": 722,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/722",
    "description": "Combine is a unified declarative framework for processing values over time. Learn how it can simplify asynchronous code like networking, key value observing, notifications and callbacks.",
    "title": "Introducing Combine",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [67],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/722l6blhn0efespfgx/722/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/722l6blhn0efespfgx/722/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/722l6blhn0efespfgx/722/722_introducing_combine.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/722l6blhn0efespfgx/722/722_hd_introducing_combine.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/722l6blhn0efespfgx/722/722_sd_introducing_combine.mp4",
      "duration": 1132
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-226", "wwdc2019-711", "wwdc2019-721", "wwdc2019-7110"]
    }
  }, {
    "id": "wwdc2019-260",
    "staticContentId": 2961,
    "eventContentId": 260,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/260",
    "description": "Photos captured in Portrait Mode on iOS 12 contain an embedded person segmentation matte that made it easy to create creative visual effects like background replacement. iOS 13 leverages on-device machine to provide new segmentation mattes for any captured photo. Learn about the new semantic segmentation mattes available to you from both AVCapture and Core Image to isolate a person's hair, skin, and teeth. Using any of these individual mattes or combining all of them, your app can now offer a tremendous amount of photo editing control.",
    "title": "Introducing Photo Segmentation Mattes",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["avcapture", "camera", "core image", "hair", "images", "matte", "photos", "portrait effects", "segmentation", "skin", "teeth"],
    "topicIds": [29, 30],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/260dn5488jol0b/260/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/260dn5488jol0b/260/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/260dn5488jol0b/260/260_introducing_photo_segmentation_mattes.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/260dn5488jol0b/260/260_hd_introducing_photo_segmentation_mattes.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/260dn5488jol0b/260/260_sd_introducing_photo_segmentation_mattes.mp4",
      "duration": 933
    },
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-2120", "wwdc2019-2290", "wwdc2019-7200", "wwdc2018-503"]
    }
  }, {
    "id": "wwdc2019-4170",
    "staticContentId": 3170,
    "eventContentId": 4170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4170",
    "description": "Bring your project to have our engineers help with advanced profiling and bulletproofing your app. Figure out what is using up that battery capacity, and what you can do about it. Learn how to use debugging tools like Instruments, LLDB, and memory graphs to track down problems. Get hands-on help analyzing your app with tools like the Address Sanitizer and Thread Sanitizer. Speak with an Apple engineer to find out how to best use signposts in your app, and build a custom instrument of your own.",
    "title": "Performance, Power, Crashes, and Debugging Lab",
    "startTime": "2019-06-06T12:00:00-07:00",
    "endTime": "2019-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 35],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-411", "wwdc2019-412", "wwdc2019-414", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-420",
    "staticContentId": 2617,
    "eventContentId": 420,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/420",
    "description": "Apple’s open source toolset, Turi Create, recently added tasks for Core ML model creation including Drawing Classification and One-Shot Object Detection. Learn how to quickly use these capabilities in your apps as well as new techniques for visualizing and evaluating the performance of your custom models.",
    "title": "Drawing Classification and One-Shot Object Detection in Turi Create",
    "startTime": "2019-06-07T10:00:00-07:00",
    "endTime": "2019-06-07T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ai", "artificial intelligence", "core ml", "drawing classification", "machine learning", "object detection", "open source", "pencil kit", "python", "style transfer", "training", "turi"],
    "topicIds": [16],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-221", "wwdc2019-424", "wwdc2019-704", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-712", "wwdc2018-717"],
      "resources": [478]
    }
  }, {
    "id": "wwdc2019-214",
    "staticContentId": 2949,
    "eventContentId": 214,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/214",
    "description": "Hear from the UIKit engineering team about the principles and concepts that anchor Dark Mode on iOS. Get introduced to the principles of enhancing your app with this new appearance using dynamic colors and images, and add an experience that people are sure to love.",
    "title": "Implementing Dark Mode on iOS",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/214iqtpuhih53fw2/214/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/214iqtpuhih53fw2/214/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/214iqtpuhih53fw2/214/214_implementing_dark_mode_on_ios.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/214iqtpuhih53fw2/214/214_hd_implementing_dark_mode_on_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/214iqtpuhih53fw2/214/214_sd_implementing_dark_mode_on_ios.mp4",
      "duration": 2338
    },
    "related": {
      "activities": ["wwdc2019-224", "wwdc2019-412", "wwdc2019-511", "wwdc2019-801", "wwdc2019-808", "wwdc2019-2170", "wwdc2018-210", "wwdc2018-218"],
      "resources": [554]
    }
  }, {
    "id": "wwdc2019-2180",
    "staticContentId": 3054,
    "eventContentId": 2180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2180",
    "description": "Meet with the Engineers behind Apple’s new framework for building apps, SwiftUI. Get advice on how to begin building a new app with SwiftUI or begin incorporating SwiftUI into your existing app. Bring your questions and your code.",
    "title": "SwiftUI Lab",
    "startTime": "2019-06-05T12:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["better apps faster", "canvas", "control", "declarative", "previews", "view"],
    "topicIds": [36, 38, 22],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-219", "wwdc2019-233"]
    }
  }, {
    "id": "wwdc2019-2200",
    "staticContentId": 3041,
    "eventContentId": 2200,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2200",
    "description": "Feedback Assistant is a new way to report issues with Apple software and services, request enhancements to APIs and tools, and track the status of feedback. Learn about how you can easily communicate with engineers at Apple, get a curated status on your issues, and automatically gather logs on device and remotely. Talk to the teams that build and maintain Feedback Assistant. Speak with the engineers who see your bug reports and get tips for submitting helpful and actionable feedback.",
    "title": "Feedback Assistant Lab",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🐛", "🐜", "🐞", "🔬", "🕷", "bug", "bugs", "feedback", "filing", "logging", "radar", "report", "sysdiagnose"],
    "topicIds": [33],
    "type": "Lab",
    "roomId": 72
  }, {
    "id": "wwdc2019-6100",
    "staticContentId": 2936,
    "eventContentId": 6100,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6100",
    "description": "Metal is the GPU-accelerated graphics and compute framework that helps developers build everything from pro apps to console-style games. Meet the Metal engineering teams for technical guidance about adopting Metal capabilities into pro apps and workflows. Bring your code and your questions.",
    "title": "Metal for Pro Apps Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [24, 25, 31, 26, 27],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-608", "wwdc2019-6020", "wwdc2019-6080", "wwdc2019-6160", "wwdc2019-6180"]
    }
  }, {
    "id": "wwdc2019-5170",
    "staticContentId": 3068,
    "eventContentId": 5170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5170",
    "description": "AVFoundation is a powerful framework for all types of media operations, including capture, editing, playback, and export. Get one-on-one technical guidance from Apple engineers about using AVFoundation in your apps. Bring your code and your questions.",
    "title": "AVFoundation Lab",
    "startTime": "2019-06-07T13:00:00-07:00",
    "endTime": "2019-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-502", "wwdc2019-506", "wwdc2019-5050", "wwdc2019-5120", "wwdc2019-5130", "wwdc2019-5160"]
    }
  }, {
    "id": "wwdc2019-3300",
    "staticContentId": 3226,
    "eventContentId": 3300,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3300",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the U.S. market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to the United States",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T11:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-3380",
    "staticContentId": 3220,
    "eventContentId": 3380,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3380",
    "description": "Meet with Apple experts to get your questions answered and gain insights about expanding to the Chinese market, including information on market opportunity, cultural considerations, pricing best practices, localization needs, and more.",
    "title": "Expanding to China",
    "startTime": "2019-06-06T13:00:00-07:00",
    "endTime": "2019-06-06T15:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 128
  }, {
    "id": "wwdc2019-3010",
    "staticContentId": 3175,
    "eventContentId": 3010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3010",
    "description": "Members of App Store Engineering and App Store Operations will be on hand to answer your questions about StoreKit, in-app purchases, server-to-server notifications, receipt validation, subscriptions, ODR, payment queue and the sandbox environment.",
    "title": "In-App Purchases & Subscriptions Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [69],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-302", "wwdc2019-305"],
      "resources": [496, 495, 494, 493, 466, 448]
    }
  }, {
    "id": "wwdc2019-111",
    "staticContentId": 3258,
    "eventContentId": 111,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/111",
    "description": "Open to all attendees, these informal breakfasts are a great way to meet some of the phenomenal people at WWDC while you start your day with a buffet. Hear from talented developers who use technology to help individuals from underrepresented communities pursue careers in tech. Moderated by Stacy Ishmael, Senior Editor, App Store.\r\n\r\nThis event takes place at the Hilton San Jose in the Market Room, located on street level.",
    "title": "Black@WWDC Breakfast",
    "startTime": "2019-06-05T07:30:00-07:00",
    "endTime": "2019-06-05T08:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 132
  }, {
    "id": "wwdc2019-2500",
    "staticContentId": 2854,
    "eventContentId": 2500,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2500",
    "description": "Meet with the Maps and Indoor Location engineers to discuss how you can best implement the latest features of MapKit and MapKit JS. Get advice on how to use the Indoor Mapping Data Format and GeoJSON to render highly customized indoor and outdoor map experiences in a power efficient and privacy conscious manner.",
    "title": "MapKit, MapKitJS, and Indoor Location Lab",
    "startTime": "2019-06-07T15:00:00-07:00",
    "endTime": "2019-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-241", "wwdc2019-705"]
    }
  }, {
    "id": "wwdc2019-221",
    "staticContentId": 2682,
    "eventContentId": 221,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/221",
    "description": "Meet PencilKit, Apple's feature-rich drawing and annotation framework. With just a few lines of code, you can add a full drawing experience to your app — with access to a canvas, responsive inks, rich tool palette and drawing model. Hear the technical details that make a great Apple Pencil experience. Learn about the new screenshot editor and how you can adopt just a few small APIs to enable your full content to be captured beyond the size of the screen, with or without your app's user interface.",
    "title": "Introducing PencilKit",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["pencil", "stylus", "tablet"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/221xy1ko7h8ub79is/221/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/221xy1ko7h8ub79is/221/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/221xy1ko7h8ub79is/221/221_introducing_pencilkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/221xy1ko7h8ub79is/221/221_hd_introducing_pencilkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/221xy1ko7h8ub79is/221/221_sd_introducing_pencilkit.mp4",
      "duration": 2091
    },
    "related": {
      "activities": ["wwdc2019-212", "wwdc2019-228", "wwdc2019-420", "wwdc2019-2430", "wwdc2017-219", "wwdc2017-241", "wwdc2017-706", "wwdc2016-220", "wwdc2015-610"],
      "resources": [534]
    }
  }, {
    "id": "wwdc2019-5110",
    "staticContentId": 2822,
    "eventContentId": 5110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5110",
    "description": "MusicKit lets you bring the content of Apple Music and key functionality from the Music app into your own apps. With MusicKit on the web, you can also bring Apple Music powered experiences to your website. And now, you can bring your Apple Music enabled experiences to Android as well. Get one-on-one technical guidance from Apple engineers about using these technologies. Bring your code and your questions.",
    "title": "MusicKit Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-5040"]
    }
  }, {
    "id": "wwdc2019-5150",
    "staticContentId": 2933,
    "eventContentId": 5150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5150",
    "description": "iOS, macOS, watchOS and tvOS offer a rich set APIs for recording, processing, and playing back audio in your apps. Additionally, Audio Unit Extensions let you add sophisticated audio manipulation and processing capabilities to host apps. Get one-on-one technical guidance from Apple engineers about using Audio APIs and Audio Unit Extensions. Bring your code and your questions.",
    "title": "Audio Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-223", "wwdc2019-508", "wwdc2019-509", "wwdc2019-510", "wwdc2019-5030", "wwdc2019-5080", "wwdc2019-5140"]
    }
  }, {
    "id": "wwdc2019-3410",
    "staticContentId": 3215,
    "eventContentId": 3410,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3410",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how to start creating campaigns that efficiently drive app downloads or reengagements.",
    "title": "Getting Started with Apple Search Ads",
    "startTime": "2019-06-05T13:00:00-07:00",
    "endTime": "2019-06-05T13:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-114",
    "staticContentId": 3265,
    "eventContentId": 114,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/114",
    "description": "Learn about the development of Apple’s ECG app for Apple Watch, directly from leaders of the Apple health team, followed by a discussion on heart health.",
    "title": "Wellness Get-Together",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79
  }, {
    "id": "wwdc2019-6020",
    "staticContentId": 2935,
    "eventContentId": 6020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6020",
    "description": "Metal is the foundation for accelerated graphics and compute on Apple platforms, enabling apps and games to tap into the incredible power of the GPU. Meet the Metal engineering teams to receive hands-on technical guidance and assistance adopting Metal capabilities. Bring your code and your questions.",
    "title": "Metal Lab",
    "startTime": "2019-06-04T12:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 27],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-6080", "wwdc2019-6100", "wwdc2019-6160", "wwdc2019-6180"]
    }
  }, {
    "id": "wwdc2019-7200",
    "staticContentId": 2923,
    "eventContentId": 7200,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7200",
    "description": "The Core Image engineering team will be happy to answer any questions you have on getting optimal performance in Core Image including creating CIKernels using the Metal Shading Language. It is also the perfect opportunity to get help with bugs you may be encountering in your app, so come prepared with your source code and demos.",
    "title": "Core Image Lab",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["", "batch processing", "composite", "compositing", "core image", "data boosting", "filters", "hair", "image", "matte", "metal", "performance", "photo", "photo effects", "photos", "prototyping", "python", "segmentation", "skin", "teeth", "tips and tricks"],
    "topicIds": [24, 30],
    "type": "Lab",
    "roomId": 74,
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-260"]
    }
  }, {
    "id": "wwdc2019-7220",
    "staticContentId": 3003,
    "eventContentId": 7220,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7220",
    "description": "Get one-on-one help to implement Spoken Notifications, push to Watch, and answers to general questions about Local and Remote Notifications, Content Extensions, Today Widgets. Engineers from Apple’s Notifications, APNS, Watch and Siri teams are looking forward to helping you.",
    "title": "Notifications Lab",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apns", "notifications", "widget"],
    "topicIds": [22],
    "type": "Lab",
    "roomId": 67
  }, {
    "id": "wwdc2019-708",
    "staticContentId": 2640,
    "eventContentId": 708,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/708",
    "description": "Privacy is a more important issue than ever for your users. Learn about new features and privacy engineering techniques that can help you earn customer trust, create more personal experiences, and improve user engagement.",
    "title": "Designing for Privacy",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/708pnd9swz5hx9anljy/708/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/708pnd9swz5hx9anljy/708/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/708pnd9swz5hx9anljy/708/708_designing_for_privacy.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/708pnd9swz5hx9anljy/708/708_hd_designing_for_privacy.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/708pnd9swz5hx9anljy/708/708_sd_designing_for_privacy.mp4",
      "duration": 2299
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-615", "wwdc2019-701", "wwdc2019-705", "wwdc2019-706", "wwdc2019-803", "wwdc2019-901", "wwdc2019-7140"],
      "resources": [475]
    }
  }, {
    "id": "wwdc2019-254",
    "staticContentId": 2966,
    "eventContentId": 254,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/254",
    "description": "Great accessibility labels are the difference between someone using and loving your app or someone deleting your app. Experience VoiceOver as demonstrated by an Apple Accessibility engineer as she navigates complex UI and demonstrates how descriptive labels are an easy way to ensure your app is for everyone.",
    "title": "Writing Great Accessibility Labels",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [8, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/254fml0e526wtu2/254/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/254fml0e526wtu2/254/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/254fml0e526wtu2/254/254_writing_great_accessibility_labels.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/254fml0e526wtu2/254/254_hd_writing_great_accessibility_labels.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/254fml0e526wtu2/254/254_sd_writing_great_accessibility_labels.mp4",
      "duration": 623
    }
  }, {
    "id": "wwdc2019-3280",
    "staticContentId": 3196,
    "eventContentId": 3280,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3280",
    "description": "Receive help with updating your developer account information, managing your development devices and certificates, renewing your membership, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Apple Developer Program Support By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T17:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 44, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 8
  }, {
    "id": "wwdc2019-117",
    "staticContentId": 3262,
    "eventContentId": 117,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/117",
    "description": "Bring your lunch and engage in casual conversations with fellow developers and members of the Apple education team. Topics include coding education, games in education, augmented reality in education, and more.",
    "title": "Education Lunchtime Get-Together",
    "startTime": "2019-06-06T11:30:00-07:00",
    "endTime": "2019-06-06T12:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79
  }, {
    "id": "wwdc2019-121",
    "staticContentId": 3263,
    "eventContentId": 121,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/121",
    "description": "Bring your lunch and engage in casual conversations with fellow developers and Apple staff on designing apps for everyone. You can ask questions, and share your learnings or success stories. Get inspired, share experiences, and envision new possibilities together.",
    "title": "Gender Inclusive App Design Get-Together",
    "startTime": "2019-06-07T11:30:00-07:00",
    "endTime": "2019-06-07T12:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79
  }, {
    "id": "wwdc2019-8070",
    "staticContentId": 3056,
    "eventContentId": 8070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/8070",
    "description": "Get advice on making your apps simple to use and visually compelling. Come prepared with a working prototype, development build, or your released app. You can walk in to ask a quick question, or schedule an appointment for a longer review.\r\n\r\nDrop-in chats for user interface design and accessibility design are 5-10 minutes long, and are on a first come, first served basis. Appointments are 30 minutes long and are assigned by random selection. You can submit a request from 7:00-7:30 a.m. each morning, and you’ll get an email letting you know whether you received an appointment for that day shortly after 7:30 a.m. If you do not receive an appointment, you can submit a request again on another day. Appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Design Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [3, 4, 5, 6, 7],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 7
  }, {
    "id": "wwdc2019-3270",
    "staticContentId": 3197,
    "eventContentId": 3270,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3270",
    "description": "Discover how your app could be included in Apple’s next marketing campaign and other promotional opportunities outside of the App Store. This includes potential featuring on Apple.com, Apple Stores, TV, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only. Business and Marketing and Apple Marketing Communications appointments are limited to one per person per lab for the duration of the conference.",
    "title": "Apple Marketing Communications By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 28
  }, {
    "id": "wwdc2019-251",
    "staticContentId": 2607,
    "eventContentId": 251,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/251",
    "description": "watchOS 6 introduces new background modes for apps that need extended runtime beyond workout, audio, and navigation sessions. Find out how to preserve battery life and provide a great app experience by using the new background modes for mindfulness, alarms, physical therapy and more.",
    "title": "Extended Runtime for watchOS Apps",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "alarms", "apple watch", "digital crown", "extended runtime", "health monitoring", "heart rate", "independence", "independent", "mindfulness", "physical therapy", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/251jiw68lhjtoxak/251/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/251jiw68lhjtoxak/251/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/251jiw68lhjtoxak/251/251_extended_runtime_for_watchos_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/251jiw68lhjtoxak/251/251_hd_extended_runtime_for_watchos_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/251jiw68lhjtoxak/251/251_sd_extended_runtime_for_watchos_apps.mp4",
      "duration": 531
    },
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-219", "wwdc2019-2140", "wwdc2019-2270", "wwdc2019-2390", "wwdc2019-8080"],
      "resources": [573, 9]
    }
  }, {
    "id": "wwdc2019-402",
    "staticContentId": 2739,
    "eventContentId": 402,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/402",
    "description": "Swift is now the language of choice for a number of major frameworks across all of Apple's platforms, including SwiftUI, RealityKit and Create ML. Join us for a review of Swift 5.0 and an exploration of Swift 5.1, new in Xcode 11. Find out about the latest advancements in performance and safety. Discover new features in the language, and how they have enabled the development of these new frameworks.",
    "title": "What's New in Swift",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/402fd460n3p3w5c/402/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/402fd460n3p3w5c/402/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/402fd460n3p3w5c/402/402_whats_new_in_swift.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/402fd460n3p3w5c/402/402_hd_whats_new_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/402fd460n3p3w5c/402/402_sd_whats_new_in_swift.mp4",
      "duration": 2204
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-216", "wwdc2019-226", "wwdc2019-237", "wwdc2019-404", "wwdc2019-408", "wwdc2019-410", "wwdc2019-415", "wwdc2019-416", "wwdc2019-4030", "wwdc2019-4120", "wwdc2019-4180", "wwdc2019-4210"],
      "resources": [45]
    }
  }, {
    "id": "wwdc2019-112",
    "staticContentId": 3261,
    "eventContentId": 112,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/112",
    "description": "Bring your lunch and your passion for health and fitness to casual conversations with fellow developers and Apple staff. Discuss the many ways HealthKit, ResearchKit, and CareKit can be used to create outstanding wellness apps for iPhone and Apple Watch.",
    "title": "Wellness Lunchtime Get-Together",
    "startTime": "2019-06-05T11:30:00-07:00",
    "endTime": "2019-06-05T12:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79
  }, {
    "id": "wwdc2019-409",
    "staticContentId": 2740,
    "eventContentId": 409,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/409",
    "description": "Keep up with the latest enhancements to C, Objective-C, and C++ made possible by advancements in the Clang compiler and LLVM. Find out about new static analyzer features and how to use them to improve your code. Learn how to take advantage of new optimizations for code size.",
    "title": "What's New in Clang and LLVM",
    "startTime": "2019-06-05T16:00:00-07:00",
    "endTime": "2019-06-05T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/409t7ah0xy3ocqab4a/409/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/409t7ah0xy3ocqab4a/409/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/409t7ah0xy3ocqab4a/409/409_whats_new_in_clang_and_llvm.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/409t7ah0xy3ocqab4a/409/409_hd_whats_new_in_clang_and_llvm.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/409t7ah0xy3ocqab4a/409/409_sd_whats_new_in_clang_and_llvm.mp4",
      "duration": 2463
    },
    "related": {
      "activities": ["wwdc2019-702", "wwdc2019-4060", "wwdc2019-4110", "wwdc2019-4140", "wwdc2017-411", "wwdc2016-405"]
    }
  }, {
    "id": "wwdc2019-231",
    "staticContentId": 2673,
    "eventContentId": 231,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/231",
    "description": "SwiftUI is designed to integrate with your existing code base on any of Apple’s platforms. Learn how to adopt SwiftUI on any Apple platform by adding SwiftUI views into your app’s hierarchy, leveraging your existing data model and more.",
    "title": "Integrating SwiftUI",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/231qbm6xl2bbd5t/231/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/231qbm6xl2bbd5t/231/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/231qbm6xl2bbd5t/231/231_integrating_swiftui.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/231qbm6xl2bbd5t/231/231_hd_integrating_swiftui.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/231qbm6xl2bbd5t/231/231_sd_integrating_swiftui.mp4",
      "duration": 2302
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-216", "wwdc2019-219", "wwdc2019-226", "wwdc2019-230", "wwdc2019-233", "wwdc2019-237", "wwdc2019-238", "wwdc2019-240", "wwdc2019-2440"]
    }
  }, {
    "id": "wwdc2019-107",
    "staticContentId": 3260,
    "eventContentId": 107,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/107",
    "description": "Bring your lunch and engage in casual conversations about accessibility with fellow developers, Apple engineers, and members of the Apple accessibility team. Meet Apple engineers who regularly use VoiceOver and Switch Control to chat about apps they use at work and how they recommend developing accessibility features. Set up the Accessibility Shortcut and show us how you can use VoiceOver to navigate your app or any app you choose. Successful navigators earn an accessibility pin.",
    "title": "Accessibility Lunchtime Get-Together",
    "startTime": "2019-06-04T11:30:00-07:00",
    "endTime": "2019-06-04T12:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-108",
    "staticContentId": 3264,
    "eventContentId": 108,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/108",
    "description": "Join fellow developers and Apple experts to explore the many ways that apps can be accessible and inclusive. Discover how Siri Shortcuts, ARKit, the TrueDepth Camera, and CoreML can be leveraged for accessibility, and see examples of apps that have taken care to design excellent experiences for VoiceOver and Switch Control users. Set up the Accessibility Shortcut and show us how you can use VoiceOver to navigate your app or any app you choose. Successful navigators earn an accessibility pin.",
    "title": "Accessibility Get-Together",
    "startTime": "2019-06-04T16:00:00-07:00",
    "endTime": "2019-06-04T17:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79,
    "related": {
      "activities": ["wwdc2019-201"]
    }
  }, {
    "id": "wwdc2019-119",
    "staticContentId": 3266,
    "eventContentId": 119,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/119",
    "description": "Join fellow developers and Apple experts to experience and discuss innovations in education technology. Explore apps that use ARKit to create delightful and immersive learning experiences, and see how CoreML can be leveraged to benefit learners. Try out robotics coding challenges with Swift Playgrounds, and learn how teachers can use Schoolwork to assign students activities within apps.",
    "title": "Education Get-Together",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T17:30:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Get-Together",
    "roomId": 79
  }, {
    "id": "wwdc2019-3170",
    "staticContentId": 3199,
    "eventContentId": 3170,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3170",
    "description": "Learn how App Store Connect can help you manage your apps and provide great customer experiences. Get details on using TestFlight, Sales and Trends, and App Analytics. Receive guidance on responding to customer reviews, setting up in-app purchases, uploading builds, using the App Store Connect API, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Connect By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 24
  }, {
    "id": "wwdc2019-3180",
    "staticContentId": 3194,
    "eventContentId": 3180,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3180",
    "description": "Receive help with updating your developer account information, managing your development devices and certificates, renewing your membership, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "Apple Developer Program Support By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 44, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 8
  }, {
    "id": "wwdc2019-3190",
    "staticContentId": 3200,
    "eventContentId": 3190,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3190",
    "description": "Learn how App Store Connect can help you manage your apps and provide great customer experiences. Get details on using TestFlight, Sales and Trends, and App Analytics. Receive guidance on responding to customer reviews, setting up in-app purchases, uploading builds, using the App Store Connect API, and more.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Connect By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 24
  }, {
    "id": "wwdc2019-104",
    "staticContentId": 3029,
    "eventContentId": 104,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/104",
    "description": "Join us for an unforgettable award ceremony celebrating developers and their outstanding work. The 2019 Apple Design Awards recognize state of the art iOS, macOS, watchOS, and tvOS apps that reflect excellence in design and innovation.",
    "title": "Apple Design Awards",
    "startTime": "2019-06-03T17:00:00-07:00",
    "endTime": "2019-06-03T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/104d6zyhb21vki/104/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/104d6zyhb21vki/104/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/104d6zyhb21vki/104/104_hd_apple_design_awards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/104d6zyhb21vki/104/104_sd_apple_design_awards.mp4",
      "duration": 2955
    },
    "related": {
      "activities": ["wwdc2019-802"]
    }
  }, {
    "id": "wwdc2019-418",
    "staticContentId": 2861,
    "eventContentId": 418,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/418",
    "description": "Join us for a deep dive into the world of Simulator. Find out how Simulator works, discover features you might not know exist, and get a tour of the command-line interface to Simulator for automation. Learn about native GPU acceleration in Simulator via Metal, and how to optimize your Metal code to take advantage of it.",
    "title": "Getting the Most Out of Simulator",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "topicIds": [27, 37, 38],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "related": {
      "activities": ["wwdc2019-401", "wwdc2019-4090", "wwdc2019-4220"],
      "resources": [532]
    }
  }, {
    "id": "wwdc2019-501",
    "staticContentId": 2661,
    "eventContentId": 501,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/501",
    "description": "AirPlay lets you share videos, photos, music, and more from Apple devices to your Apple TV, favorite speakers, and popular smart TVs. Learn how to deliver the best possible experience for AirPlay video, including automatic route selection for long form content, remote control, now playing metadata, and video quality considerations.",
    "title": "Reaching the Big Screen with AirPlay 2",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28, 31],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/501psbqh02kzce/501/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/501psbqh02kzce/501/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/501psbqh02kzce/501/501_reaching_the_big_screen_with_airplay_2.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/501psbqh02kzce/501/501_hd_reaching_the_big_screen_with_airplay_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/501psbqh02kzce/501/501_sd_reaching_the_big_screen_with_airplay_2.mp4",
      "duration": 2149
    },
    "related": {
      "activities": ["wwdc2019-503", "wwdc2019-507", "wwdc2019-5010", "wwdc2019-5050", "wwdc2019-5060", "wwdc2019-5100", "wwdc2019-5120", "wwdc2019-5170", "wwdc2019-5180"],
      "resources": [553, 541, 511, 510]
    }
  }, {
    "id": "wwdc2019-4110",
    "staticContentId": 3078,
    "eventContentId": 4110,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4110",
    "description": "Bring your project to have our engineers help with advanced profiling and bulletproofing your app. Figure out what is using up that battery capacity, and what you can do about it. Learn how to use debugging tools like Instruments, LLDB, and memory graphs to track down problems. Get hands-on help analyzing your app with tools like the Address Sanitizer and Thread Sanitizer. Speak with an Apple engineer to find out how to best use signposts in your app, and build a custom instrument of your own.",
    "title": "Performance, Power, Crashes, and Debugging Lab",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 35],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-409", "wwdc2019-411", "wwdc2019-412", "wwdc2019-414", "wwdc2019-707"]
    }
  }, {
    "id": "wwdc2019-4060",
    "staticContentId": 3081,
    "eventContentId": 4060,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4060",
    "description": "Bring your C, Objective-C, and C++ questions to discuss with the LLVM teams. Work out issues you're having building and linking C language code.",
    "title": "LLVM Compiler, Objective-C, C++, and Linking Lab",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32],
    "type": "Lab",
    "roomId": 73,
    "related": {
      "activities": ["wwdc2019-409"]
    }
  }, {
    "id": "wwdc2019-5070",
    "staticContentId": 2823,
    "eventContentId": 5070,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5070",
    "description": "Podcasts reach millions of listeners around the world every year, and Podcast Analytics help you understand your listening audience. Meet the engineering team behind the Apple Podcasts app and get your questions answered on how to achieve the best success with your own podcast using Podcast Analytics.",
    "title": "Apple Podcasts Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Lab",
    "roomId": 68
  }, {
    "id": "wwdc2019-4020",
    "staticContentId": 3067,
    "eventContentId": 4020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/4020",
    "description": "Stop by during Open Hours to talk with Apple engineers about things you learned during the week, to get answers to questions about new technologies you're experimenting with, or to find a fix for a difficult bug.",
    "title": "Xcode Open Hours",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Lab",
    "roomId": 75,
    "related": {
      "activities": ["wwdc2019-401"]
    }
  }, {
    "id": "wwdc2019-2210",
    "staticContentId": 2983,
    "eventContentId": 2210,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2210",
    "description": "Core Data is a framework that manages object graphs, relationships, and persistence of those objects. Apple engineers will be on hand to answer questions about Core Data and how it reduces the amount of code you have to write to manage your model. Bring your questions about the new Core Data features, including history tracking, change notifications, derived attributes, and batch operations.",
    "title": "Core Data Lab",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["batch operations", "change notifications", "concurrency", "core", "core data", "data", "derived attributes", "history tracking", "model layer objects", "nskeyedarchiver", "object graph", "object life cycle", "performance", "persistence", "persistent history", "sqlite", "testing"],
    "topicIds": [67],
    "type": "Lab",
    "roomId": 77,
    "related": {
      "activities": ["wwdc2019-202"]
    }
  }, {
    "id": "wwdc2019-6150",
    "staticContentId": 3086,
    "eventContentId": 6150,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/6150",
    "description": "Receive one-on-one technical assistance and troubleshooting advice from the Graphics and Imaging team. Get help with Core Animation, Core Graphics, Image Capture, Image I/O, ImageKit, PDFKit, ColorSync, and more. Bring your project and get your questions answered.",
    "title": "Core Animation and Quartz 2D Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 30],
    "type": "Lab",
    "roomId": 70,
    "related": {
      "activities": ["wwdc2019-6010"]
    }
  }, {
    "id": "wwdc2019-2010",
    "staticContentId": 2836,
    "eventContentId": 2010,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2010",
    "description": "Shortcuts and SiriKit allow people to have rich interactions with your apps through Siri when they're on the go. You may have questions about how to get the most out of them and we're here to help. Meet with an Apple engineer to review your code and talk about your resolve method, configuring your custom intents, or any facet of Shortcuts or SiriKit you may be stuck on.",
    "title": "Siri Shortcuts and SiriKit Lab",
    "startTime": "2019-06-04T09:00:00-07:00",
    "endTime": "2019-06-04T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "add to siri", "donate", "donation", "inrelevant", "intents", "inui", "parameters", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [21],
    "type": "Lab",
    "roomId": 76,
    "related": {
      "activities": ["wwdc2019-207", "wwdc2019-213", "wwdc2019-804", "wwdc2019-805", "wwdc2019-806"]
    }
  }, {
    "id": "wwdc2019-510",
    "staticContentId": 3040,
    "eventContentId": 510,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/510",
    "description": "AVAudioEngine enables the realtime capture, processing, and playback of audio. Learn how to take advantage of enhancements to this powerful API, such as support for voice processing and spatial rendering mode selection, in your own audio app.",
    "title": "What's New in AVAudioEngine",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/510v8txdlekug3npw2m/510/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/510v8txdlekug3npw2m/510/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/510v8txdlekug3npw2m/510/510_whats_new_in_avaudioengine.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/510v8txdlekug3npw2m/510/510_hd_whats_new_in_avaudioengine.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/510v8txdlekug3npw2m/510/510_sd_whats_new_in_avaudioengine.mp4",
      "duration": 533
    },
    "related": {
      "activities": ["wwdc2019-5030", "wwdc2019-5150"],
      "resources": [565, 564]
    }
  }, {
    "id": "wwdc2019-120",
    "staticContentId": 3268,
    "eventContentId": 120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/120",
    "description": "Experience incredible music, food, and drinks at Discovery Meadow, just steps away from the McEnery Convention Center. Attendees 21 years and older may drink alcohol and can pick up a wristband for drinks on Thursday either on the plaza outside McEnery Convention Center or at the tent inside Discovery Meadow by showing their valid government-issued photo ID. Bag check is not available at the bash, so please leave your bags at the hotel.",
    "title": "Bash",
    "startTime": "2019-06-06T19:00:00-07:00",
    "endTime": "2019-06-06T22:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "roomId": 81
  }, {
    "id": "wwdc2019-3390",
    "staticContentId": 3211,
    "eventContentId": 3390,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3390",
    "description": "TestFlight makes it easy to invite users to test your apps and collect feedback to improve app quality. Learn and ask questions about inviting testers, managing builds, and collecting feedback to gain valuable insights about your app before releasing it on the App Store.",
    "title": "Getting Started with TestFlight",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T17:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [71, 37],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-246",
    "staticContentId": 2963,
    "eventContentId": 246,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/246",
    "description": "Dive into the details of window management in your Multitasking app, including how to properly handle creating, refreshing, and closing windows. Hear about best practices for when to refresh the content in your window and learn how to ensure your app’s visual state is up-to-date in the switcher.",
    "title": "Window Management in Your Multitasking App",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video"
  }, {
    "id": "wwdc2019-7120",
    "staticContentId": 2851,
    "eventContentId": 7120,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/7120",
    "description": "Meet with the Location engineers to discuss how you can use Core Location in your app. Get advice on choosing the best and most power-efficient API for accessing user location information. Learn the best practices for continuous updates, event-based location information, and how to provide location-based services in a privacy-conscious manner.",
    "title": "Core Location Lab",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T13:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-705"]
    }
  }, {
    "id": "wwdc2019-3230",
    "staticContentId": 3206,
    "eventContentId": 3230,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3230",
    "description": "Gain a better understanding of the App Store Review Guidelines so you can plan and build great app experiences for Apple platforms.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Review By Appointment Lab",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 43, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 26
  }, {
    "id": "wwdc2019-5020",
    "staticContentId": 2857,
    "eventContentId": 5020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/5020",
    "description": "Apple engineers will be on hand to review your code and answer questions from web content development and debugging to leveraging the latest native frameworks such as WKWebView, Safari View Controller, Universal Links, Authentication, and Safari Extensions. Whether you're a Swift developer looking to integrate web content and technologies into your app, or a web content developer looking to ensure implement cutting edge features, this lab is for you.",
    "title": "Safari, WebKit, and Authentication Services Lab",
    "startTime": "2019-06-04T13:00:00-07:00",
    "endTime": "2019-06-04T15:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [20],
    "type": "Lab",
    "roomId": 68,
    "related": {
      "activities": ["wwdc2019-203", "wwdc2019-504", "wwdc2019-717"]
    }
  }, {
    "id": "wwdc2019-2370",
    "staticContentId": 2876,
    "eventContentId": 2370,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/2370",
    "description": "Meet with the Apple CarPlay engineers to get expert answers on supporting CarPlay in your audio, messaging, VoIP calling, navigation, or automaker app. Bring your code to fix bugs in real time. If you're interested in CarPlay but aren't sure where to start, this is a perfect opportunity to get advice. The CarPlay team will also be on hand to answer your questions about developing systems that work with CarPlay.",
    "title": "CarPlay Lab",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚙", "automotive", "car", "map"],
    "topicIds": [9, 68, 22],
    "type": "Lab",
    "roomId": 72,
    "related": {
      "activities": ["wwdc2019-252"],
      "resources": [509]
    }
  }, {
    "id": "wwdc2019-208",
    "staticContentId": 2604,
    "eventContentId": 208,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/208",
    "description": "watchOS 6 enables a whole new level of watchOS experiences by allowing fully independent apps and apps built just for Apple Watch, and by bringing the App Store to Apple Watch. Discover how to leverage the power of many iOS frameworks and technologies, now on watchOS, to create fully independent experiences on Apple Watch.",
    "title": "Creating Independent Watch Apps",
    "startTime": "2019-06-04T15:00:00-07:00",
    "endTime": "2019-06-04T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "clkcomplication", "clockkit", "cloudkit", "complications", "digital crown", "dynamic notifications", "extended runtime", "independence", "independent", "interactive notifications", "notifications", "sign in with apple", "unnotification", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/208ryw5t6xyu0a6/208/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/208ryw5t6xyu0a6/208/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/208ryw5t6xyu0a6/208/208_creating_independent_watch_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/208ryw5t6xyu0a6/208/208_hd_creating_independent_watch_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/208ryw5t6xyu0a6/208/208_sd_creating_independent_watch_apps.mp4",
      "duration": 1683
    },
    "related": {
      "activities": ["wwdc2019-219", "wwdc2019-251", "wwdc2019-516", "wwdc2019-706", "wwdc2019-716", "wwdc2019-2040", "wwdc2019-2140", "wwdc2019-2270", "wwdc2019-8080"],
      "resources": [570, 9]
    }
  }, {
    "id": "wwdc2019-3250",
    "staticContentId": 3204,
    "eventContentId": 3250,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3250",
    "description": "Get the technical details you need to implement commerce features, such as in-app purchase and subscriptions, in your app. Learn how to use StoreKit, receipt validation, subscription status polling, and much more to help bring value to your app and keep customers engaged.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Commerce & Features By Appointment Lab",
    "startTime": "2019-06-07T09:00:00-07:00",
    "endTime": "2019-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 25
  }, {
    "id": "wwdc2019-304",
    "staticContentId": 2754,
    "eventContentId": 304,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/304",
    "description": "Whether you want to share your app with a few colleagues, deliver it to employees within an organization, or release it to the world, there's a distribution mechanism designed to fit your needs. Familiarize yourself with each app deployment model, learn how to choose the one that's best for you, and learn about essential testing and distribution tools.",
    "title": "App Distribution – From Ad-hoc to Enterprise",
    "startTime": "2019-06-05T15:00:00-07:00",
    "endTime": "2019-06-05T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [43, 70, 44, 71],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/304uxy73xvmgt37/304/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/304uxy73xvmgt37/304/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/304uxy73xvmgt37/304/304_app_distribution__from_adhoc_to_enterprise.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/304uxy73xvmgt37/304/304_hd_app_distribution__from_adhoc_to_enterprise.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/304uxy73xvmgt37/304/304_sd_app_distribution__from_adhoc_to_enterprise.mp4",
      "duration": 2091
    },
    "related": {
      "activities": ["wwdc2019-303", "wwdc2019-3020", "wwdc2019-3040"]
    }
  }, {
    "id": "wwdc2019-3330",
    "staticContentId": 3216,
    "eventContentId": 3330,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3330",
    "description": "Apple Search Ads is an efficient and easy way to help people discover your app on the App Store. Meet one-on-one with Search Ads experts to get questions answered about how you can create highly effective campaigns using best practices for selecting keywords, expanding to new countries and regions, creating custom reports, structuring your account, and more.",
    "title": "Best Practices for Apple Search Ads",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T14:45:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Lab",
    "roomId": 127
  }, {
    "id": "wwdc2019-3140",
    "staticContentId": 3202,
    "eventContentId": 3140,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3140",
    "description": "Get the technical details you need to implement commerce features, such as in-app purchase and subscriptions, in your app. Learn how to use StoreKit, receipt validation, subscription status polling, and much more to help bring value to your app and keep customers engaged.\r\n\r\nAppointments are recommended, but not required — you may drop in anytime during these hours. Appointment requests are accepted starting at 7:00 a.m. for that day only.",
    "title": "App Store Commerce & Features By Appointment Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Lab by Appointment",
    "actionLinkPrompt": "Request Appointment",
    "actionLinkURL": "https://developer.apple.com/wwdc19/consultations/request/",
    "roomId": 25
  }, {
    "id": "wwdc2019-3020",
    "staticContentId": 2868,
    "eventContentId": 3020,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/3020",
    "description": "Meet the engineers creating the technologies to configure, deploy, and manage Apple devices in business and education. If you're a SysAdmin or educator deploying macOS, iOS and tvOS in your environment, this lab will help answer questions and guide you through the process. Learn best practices for design, development, and distribution of in-house apps.",
    "title": "App Distribution and Device Management Lab",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [43, 70, 44],
    "type": "Lab",
    "roomId": 69,
    "related": {
      "activities": ["wwdc2019-303", "wwdc2019-304"]
    }
  }, {
    "id": "wwdc2019-719",
    "staticContentId": 2934,
    "eventContentId": 719,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/719",
    "description": "Your iOS app can now access files stored on external devices via USB and SMB. Understand best practices for creating a document-based app that reads, writes, and manages files on physical media or networked storage. Learn about enhancements to Quick Look on iOS and macOS that help you access and display file thumbnails.",
    "title": "What’s New in File Management and Quick Look",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["apfs", "exfat", "fat", "hfs+", "qlpreviewcontroller", "qlthumbnailgenerator", "uidocumentbrowserviewcontroller", "uidocumentpickerviewcontroller"],
    "topicIds": [9, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/719dyb631z49zpjzk/719/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/719dyb631z49zpjzk/719/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/719dyb631z49zpjzk/719/719_whats_new_in_file_management_and_quick_look.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/719dyb631z49zpjzk/719/719_hd_whats_new_in_file_management_and_quick_look.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/719dyb631z49zpjzk/719/719_sd_whats_new_in_file_management_and_quick_look.mp4",
      "duration": 1435
    },
    "related": {
      "activities": ["wwdc2019-710", "wwdc2019-723", "wwdc2019-2050", "wwdc2019-2240", "wwdc2018-237"]
    }
  }, {
    "id": "wwdc2019-253",
    "staticContentId": 2901,
    "eventContentId": 253,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/253",
    "description": "Many Watch faces in watchOS 6 allow for customizing the tint color of content, allowing for even more personalization of Apple’s most personal device. Discover how you can use ClockKit data providers to offer full color and tint-ready options for each complication family type. This gives customers the ability to get up to date, important information at a glance, no matter which Watch face they choose.",
    "title": "Exploring Tinted Graphic Complications",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "apple watch", "clkcomplication", "clockkit", "complications", "digital crown", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/253llfvak2onhcnjf3w/253/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/253llfvak2onhcnjf3w/253/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/253llfvak2onhcnjf3w/253/253_exploring_tinted_graphic_complications.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/253llfvak2onhcnjf3w/253/253_hd_exploring_tinted_graphic_complications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/253llfvak2onhcnjf3w/253/253_sd_exploring_tinted_graphic_complications.mp4",
      "duration": 428
    },
    "related": {
      "activities": ["wwdc2019-2040", "wwdc2019-2140", "wwdc2019-2270", "wwdc2019-2390", "wwdc2019-8080", "tech-talks-208", "wwdc2015-209"],
      "resources": [5]
    }
  }, {
    "id": "wwdc2019-606",
    "staticContentId": 2676,
    "eventContentId": 606,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/606",
    "description": "Optimizing performance, memory, and bandwidth are important considerations for resource-intensive Metal apps and games. Learn key best practices to streamline your rendering and attain high frame rates. Understand powerful tools that can help you pinpoint expensive or unexpected GPU work. Dive into GPU capabilities that can yield performance gains and get expert guidance about using memory efficiently.",
    "title": "Delivering Optimized Metal Apps and Games",
    "startTime": "2019-06-05T11:00:00-07:00",
    "endTime": "2019-06-05T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "topicIds": [25, 26, 35, 27, 38],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/606j537qmnh6o6/606/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/606j537qmnh6o6/606/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/606j537qmnh6o6/606/606_delivering_optimized_metal_apps_and_games.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/606j537qmnh6o6/606/606_hd_delivering_optimized_metal_apps_and_games.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/606j537qmnh6o6/606/606_sd_delivering_optimized_metal_apps_and_games.mp4",
      "duration": 2964
    },
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-608", "wwdc2019-611", "wwdc2019-613", "wwdc2019-614", "wwdc2019-6080", "wwdc2019-6160", "wwdc2019-6180"],
      "resources": [38]
    }
  }, {
    "id": "wwdc2019-404",
    "staticContentId": 2767,
    "eventContentId": 404,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/404",
    "description": "Xcode is the development environment for creating great apps for Apple platforms. Find out how to take advantage of Xcode features to go all the way from a new project to App Store distribution. Along the way, you'll learn how to navigate the Xcode user interface, how to take advantage of the source editor and live user interface previews, how to incorporate community-developed Swift packages into your app, and how to refactor and test your code, all while developing a working SwiftUI app.",
    "title": "Getting Started with Xcode",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/404w05ssefca567rh/404/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/404w05ssefca567rh/404/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/404w05ssefca567rh/404/404_getting_started_with_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/404w05ssefca567rh/404/404_hd_getting_started_with_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/404w05ssefca567rh/404/404_sd_getting_started_with_xcode.mp4",
      "duration": 3265
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-402", "wwdc2019-408", "wwdc2019-413", "wwdc2019-4040", "wwdc2019-7090", "wwdc2018-412", "wwdc2018-418", "wwdc2017-403"],
      "resources": [483, 309, 48, 45, 44]
    }
  }, {
    "id": "wwdc2019-508",
    "staticContentId": 2668,
    "eventContentId": 508,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/508",
    "description": "Apple platforms provide a comprehensive set of audio frameworks and technologies that are essential to creating a rich app experience. Learn about which frameworks and APIs are recommended to ensure that your app is well positioned for the future.",
    "title": "Modernizing Your Audio App",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/508kk896m9xoeaz1a/508/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/508kk896m9xoeaz1a/508/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/508kk896m9xoeaz1a/508/508_modernizing_your_audio_app.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/508kk896m9xoeaz1a/508/508_hd_modernizing_your_audio_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/508kk896m9xoeaz1a/508/508_sd_modernizing_your_audio_app.mp4",
      "duration": 106
    },
    "related": {
      "activities": ["wwdc2019-5030", "wwdc2019-5150"]
    }
  }, {
    "id": "wwdc2019-220",
    "staticContentId": 2814,
    "eventContentId": 220,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/220",
    "description": "Use UI Data Sources to simplify updating your table view and collection view items using automatic diffing. High fidelity, quality animations of set changes are automatic and require no extra code! This improved data source mechanism completely avoids synchronization bugs, exceptions, and crashes! Learn about this simplified data model that uses on identifiers and snapshots so that you can focus on your app’s dynamic data and content instead of the minutia of UI data synchronization.",
    "title": "Advances in UI Data Sources",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["diffable"],
    "topicIds": [67, 22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/220xl4hxzzr7b19/220/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/220xl4hxzzr7b19/220/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/220xl4hxzzr7b19/220/220_advances_in_ui_data_sources.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/220xl4hxzzr7b19/220/220_hd_advances_in_ui_data_sources.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/220xl4hxzzr7b19/220/220_sd_advances_in_ui_data_sources.mp4",
      "duration": 2175
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-215", "wwdc2019-230", "wwdc2019-2260"],
      "resources": [530]
    }
  }, {
    "id": "wwdc2019-203",
    "staticContentId": 2757,
    "eventContentId": 203,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/203",
    "description": "iOS 13 brings desktop-class browsing to iPad. With blazing-fast performance, industry-leading security, and modern desktop features, Safari on iPad supports the latest web standards designed and automatically adapts desktop sites and web apps to touch in order to deliver a rich browsing experience. Learn how your site or embedded WebView can take advantage of powerful new features and coding best practices to deliver a best-in class user experience for iPad.",
    "title": "Introducing Desktop-class Browsing on iPad",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [20, 22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/203d4wzq0eky2pgtir3/203/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/203d4wzq0eky2pgtir3/203/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/203d4wzq0eky2pgtir3/203/203_introducing_desktopclass_browsing_on_ipad.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/203d4wzq0eky2pgtir3/203/203_hd_introducing_desktopclass_browsing_on_ipad.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/203d4wzq0eky2pgtir3/203/203_sd_introducing_desktopclass_browsing_on_ipad.mp4",
      "duration": 2984
    },
    "related": {
      "activities": ["wwdc2019-504", "wwdc2019-515", "wwdc2019-518", "wwdc2019-5020", "wwdc2019-5090"],
      "resources": [582, 556, 452, 330, 329, 152, 150, 148, 143]
    }
  }, {
    "id": "wwdc2019-608",
    "staticContentId": 2684,
    "eventContentId": 608,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/608",
    "description": "Metal is the platform-optimized graphics and compute framework at the heart of GPU acceleration on Apple platforms. Learn key aspects of the Metal architecture that support the techniques for modern high-performance pro applications and workflows. Learn how to leverage Metal capabilities to optimize performance and maintain a steady frame rate in video editing pipelines. Understand how to leverage CPU and GPU parallelism, and dive into best practices for efficient data throughput.",
    "title": "Metal for Pro Apps",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [24, 25, 31, 26, 27],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/608ycxyv84z8ap14wot/608/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/608ycxyv84z8ap14wot/608/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/608ycxyv84z8ap14wot/608/608_metal_for_pro_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/608ycxyv84z8ap14wot/608/608_hd_metal_for_pro_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/608ycxyv84z8ap14wot/608/608_sd_metal_for_pro_apps.mp4",
      "duration": 3536
    },
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-606", "wwdc2019-611", "wwdc2019-613", "wwdc2019-614", "wwdc2019-6100", "wwdc2019-6160"],
      "resources": [38]
    }
  }, {
    "id": "wwdc2019-225",
    "staticContentId": 2811,
    "eventContentId": 225,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/225",
    "description": "Powerful new features in the AVCapture API let you capture photos and video from multiple cameras simultaneously. Photos now benefit from semantic segmentation that allows you to isolate hair, skin, and teeth in a photo. Learn how these advances enable you to create great camera apps and easily achieve stunning photo effects.",
    "title": "Advances in Camera Capture & Photo Segmentation",
    "startTime": "2019-06-05T17:00:00-07:00",
    "endTime": "2019-06-05T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["avcapture", "avfoundation", "camera", "core image", "hair", "images", "microphone", "multi camera", "photos", "portrait effects", "segmentation", "skin", "spatial audio", "teeth", "video"],
    "topicIds": [29, 30],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/225dh4oy0vvscxxr/225/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/225dh4oy0vvscxxr/225/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/225dh4oy0vvscxxr/225/225_advances_in_camera_capture__photo_segmentation.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/225dh4oy0vvscxxr/225/225_hd_advances_in_camera_capture__photo_segmentation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/225dh4oy0vvscxxr/225/225_sd_advances_in_camera_capture__photo_segmentation.mp4",
      "duration": 3634
    },
    "related": {
      "activities": ["wwdc2019-249", "wwdc2019-260", "wwdc2019-2120", "wwdc2019-2290", "wwdc2019-7200", "wwdc2018-503", "wwdc2017-507"],
      "resources": [545, 227, 52, 28]
    }
  }, {
    "id": "wwdc2019-702",
    "staticContentId": 2712,
    "eventContentId": 702,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/702",
    "description": "One of the next steps in modernizing and improving the security and reliability of macOS is to provide a better architecture for kernel extensions and drivers.  Learn how to make this transition with System Extensions and DriverKit.",
    "title": "System Extensions and DriverKit",
    "startTime": "2019-06-04T10:00:00-07:00",
    "endTime": "2019-06-04T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["driver", "extension", "kernel"],
    "topicIds": [67],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/702vygott3n041/702/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/702vygott3n041/702/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/702vygott3n041/702/702_system_extensions_and_driverkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/702vygott3n041/702/702_hd_system_extensions_and_driverkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/702vygott3n041/702/702_sd_system_extensions_and_driverkit.mp4",
      "duration": 2221
    },
    "related": {
      "activities": ["wwdc2019-210", "wwdc2019-409", "wwdc2019-701", "wwdc2019-714", "wwdc2019-7060", "wwdc2019-7180"],
      "resources": [579]
    }
  }, {
    "id": "wwdc2019-245",
    "staticContentId": 2627,
    "eventContentId": 245,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/245",
    "description": "The Indoor Maps Program enables organizations with large public or private spaces to deliver user experiences that leverage precise location information and present stunning indoor maps. Learn the entire enablement workflow including, creation of a standards-based map definition, map validation, testing and calibration, and details on how to use MapKit and MapKit JS to integrate it all into your app or website.",
    "title": "Introducing the Indoor Maps Program",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [70, 17, 19, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/245hrnwbhlkgmim8y/245/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/245hrnwbhlkgmim8y/245/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/245hrnwbhlkgmim8y/245/245_introducing_the_indoor_maps_program.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/245hrnwbhlkgmim8y/245/245_hd_introducing_the_indoor_maps_program.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/245hrnwbhlkgmim8y/245/245_sd_introducing_the_indoor_maps_program.mp4",
      "duration": 1577
    },
    "related": {
      "activities": ["wwdc2019-236", "wwdc2019-241"],
      "resources": [588, 566, 414, 100]
    }
  }, {
    "id": "wwdc2019-513",
    "staticContentId": 2898,
    "eventContentId": 513,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/513",
    "description": "As a developer of web content, you play an important role in fulfilling customer expectations for a high performance web experience while minimizing power use across all their devices. Discover new insights on how you can improve the power efficiency of your webpages in Safari, or embedded web content in your apps, by using this powerful new tool in Web Inspector. Learn new strategies to help you deliver dynamic experiences that use less CPU and save battery life.",
    "title": "Understanding CPU Usage with Web Inspector",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/513w02gjyhgbk02/513/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/513w02gjyhgbk02/513/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/513w02gjyhgbk02/513/513_understanding_cpu_usage_with_web_inspector.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/513w02gjyhgbk02/513/513_hd_understanding_cpu_usage_with_web_inspector.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/513w02gjyhgbk02/513/513_sd_understanding_cpu_usage_with_web_inspector.mp4",
      "duration": 803
    },
    "related": {
      "activities": ["wwdc2019-504", "wwdc2019-518"]
    }
  }, {
    "id": "wwdc2019-406",
    "staticContentId": 2612,
    "eventContentId": 406,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/406",
    "description": "Create ML enables you to create, evaluate, and test powerful, production-class Core ML models. See how easy it is to create your own Object Detection and Sound Classification models for use in your apps. Learn strategies for balancing your training data to achieve great model accuracy.",
    "title": "Create ML for Object Detection and Sound Classification",
    "startTime": "2019-06-05T09:00:00-07:00",
    "endTime": "2019-06-05T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["audio", "camera", "classification", "core ml", "create ml", "images", "learning", "machine learning", "object detection", "photos", "sound", "sound analysis", "training"],
    "topicIds": [38, 16],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/406yjhugjymfic5/406/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/406yjhugjymfic5/406/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/406yjhugjymfic5/406/406_create_ml_for_object_detection_and_sound_classification.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/406yjhugjymfic5/406/406_hd_create_ml_for_object_detection_and_sound_classification.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/406yjhugjymfic5/406/406_sd_create_ml_for_object_detection_and_sound_classification.mp4",
      "duration": 2161
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-228", "wwdc2019-407", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"],
      "resources": [443, 27]
    }
  }, {
    "id": "wwdc2019-605",
    "staticContentId": 2685,
    "eventContentId": 605,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/605",
    "description": "Gain a practical understanding of RealityKit capabilities by developing a game using its easy-to-learn API. Learn the recommended approach for loading assets, building a scene, applying animations, and handling game input. See how entities and components express the powerful elements of RealityKit while providing flexibility for customization. Find out how to take advantage of built-in networking and get details about extending the game into an immersive muliti-player experience.",
    "title": "Building Apps with RealityKit",
    "startTime": "2019-06-05T10:00:00-07:00",
    "endTime": "2019-06-05T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/605a9razz1cphz/605/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/605a9razz1cphz/605/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/605a9razz1cphz/605/605_building_apps_with_realitykit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/605a9razz1cphz/605/605_hd_building_apps_with_realitykit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/605a9razz1cphz/605/605_sd_building_apps_with_realitykit.mp4",
      "duration": 2387
    },
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-604", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-612", "wwdc2019-6060", "wwdc2019-6070", "wwdc2019-6130", "wwdc2019-6140"],
      "resources": [568, 560, 25]
    }
  }, {
    "id": "wwdc2019-218",
    "staticContentId": 2632,
    "eventContentId": 218,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/218",
    "description": "Discover how HealthKit is enriching and expanding the health data types available to the users of your app. Learn about modern storage for high-frequency health data types, accessing beat-to-beat heart rate data, and how to bring an entire new dimension of health to your users with new support for hearing health.",
    "title": "Exploring New Data Representations in HealthKit",
    "startTime": "2019-06-05T14:00:00-07:00",
    "endTime": "2019-06-05T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [14],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/218cnjfazt0v1am/218/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/218cnjfazt0v1am/218/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/218cnjfazt0v1am/218/218_exploring_new_data_representations_in_healthkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/218cnjfazt0v1am/218/218_hd_exploring_new_data_representations_in_healthkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/218cnjfazt0v1am/218/218_sd_exploring_new_data_representations_in_healthkit.mp4",
      "duration": 2047
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-217", "wwdc2019-2230", "wwdc2019-2330"],
      "resources": [540, 87]
    }
  }, {
    "id": "wwdc2019-604",
    "staticContentId": 2689,
    "eventContentId": 604,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/604",
    "description": "ARKit is the groundbreaking augmented reality (AR) platform for iOS that can transform how people connect with the world around them. Explore the state-of-the-art capabilities of ARKit 3 and discover the innovative foundation it provides for RealityKit. Learn how ARKit makes AR even more immersive through understanding of body position and movement for motion capture and people occlusion. Check out additions for multiple face tracking, collaborative session building, a coaching UI for on-boarding, and much more.",
    "title": "Introducing ARKit 3",
    "startTime": "2019-06-04T17:00:00-07:00",
    "endTime": "2019-06-04T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/604o2yt9ky18mbyd/604/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/604o2yt9ky18mbyd/604/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/604o2yt9ky18mbyd/604/604_introducing_arkit_3.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/604o2yt9ky18mbyd/604/604_hd_introducing_arkit_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/604o2yt9ky18mbyd/604/604_sd_introducing_arkit_3.mp4",
      "duration": 3087
    },
    "related": {
      "activities": ["wwdc2019-103", "wwdc2019-602", "wwdc2019-603", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-610", "wwdc2019-612", "wwdc2019-6070", "wwdc2019-6130", "wwdc2019-6170"],
      "resources": [568, 529, 25]
    }
  }, {
    "id": "wwdc2019-261",
    "staticContentId": 2819,
    "eventContentId": 261,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/261",
    "description": "Tab Bars can't grow with dynamic text, but the Large Content Viewer helps them to be seen by people with low vision. [iOS 13] brings this feature to custom tab bars. Learn how to enable Large Content Viewer on your custom tab bars and ensure the right vector image is featured in the heads-up display.",
    "title": "Large Content Viewer- Ensuring Readability for Everyone",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [8, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/261p8np41tos4h2/261/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/261p8np41tos4h2/261/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/261p8np41tos4h2/261/261_large_content_viewer_ensuring_readability_for_everyone.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/261p8np41tos4h2/261/261_hd_large_content_viewer_ensuring_readability_for_everyone.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/261p8np41tos4h2/261/261_sd_large_content_viewer_ensuring_readability_for_everyone.mp4",
      "duration": 788
    }
  }, {
    "id": "wwdc2019-601",
    "staticContentId": 2663,
    "eventContentId": 601,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/601",
    "description": "Metal is the GPU-accelerated graphics and compute framework that helps developers build everything from pro apps to console-style games. Learn how to apply Metal features to implement modern graphics techniques including deferred and tiled-forward rendering. See how GPU-driven capabilities enable Metal to schedule work for itself, allowing complete scenes and compute workloads to be built and executed with little to no CPU interaction. Understand how GPU Families make it easier for you to build apps that scale across Apple platforms, and explore how Metal lets your apps and games realize entirely new levels of performance and capability.",
    "title": "Modern Rendering with Metal",
    "startTime": "2019-06-04T11:00:00-07:00",
    "endTime": "2019-06-04T12:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/601fthb9otw94fg/601/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/601fthb9otw94fg/601/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/601fthb9otw94fg/601/601_modern_rendering_with_metal.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/601fthb9otw94fg/601/601_hd_modern_rendering_with_metal.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/601fthb9otw94fg/601/601_sd_modern_rendering_with_metal.mp4",
      "duration": 3328
    },
    "related": {
      "activities": ["wwdc2019-606", "wwdc2019-608", "wwdc2019-611", "wwdc2019-613", "wwdc2019-614", "wwdc2019-6020", "wwdc2019-6080", "wwdc2019-6160"],
      "resources": [263, 38]
    }
  }, {
    "id": "wwdc2019-718",
    "staticContentId": 2845,
    "eventContentId": 718,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/718",
    "description": "Accelerate framework provides hundreds of computational functions that are highly optimized to the system architecture your device is running on. Learn how to access all of these powerful functions directly in Swift. Understand how the power of vector programming can deliver incredible performance to your iOS, macOS, tvOS, and watchOS apps.",
    "title": "Introducing Accelerate for Swift",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "blas", "computation", "dft", "fft", "image processing", "lapack", "linear algebra", "neural network", "noise", "numerics", "performance", "quaternions", "real-time video", "simd", "slerp", "sparse solver", "spline", "swift", "vdsp", "vector", "vforce", "vimage"],
    "topicIds": [36, 67],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/718sn5zybluwhbuq/718/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/718sn5zybluwhbuq/718/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/718sn5zybluwhbuq/718/718_introducing_accelerate_for_swift.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/718sn5zybluwhbuq/718/718_hd_introducing_accelerate_for_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/718sn5zybluwhbuq/718/718_sd_introducing_accelerate_for_swift.mp4",
      "duration": 1282
    },
    "related": {
      "activities": ["wwdc2019-7050", "wwdc2018-701"],
      "resources": [370, 366, 185]
    }
  }, {
    "id": "wwdc2019-256",
    "staticContentId": 2615,
    "eventContentId": 256,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/256",
    "description": "Speech Recognizer can now be used locally on iOS or macOS devices with no network connection. Learn how you can bring text-to-speech support to your app while maintaining privacy and eliminating the limitations of server-based processing. Speech recognition API has also been enhanced to provide richer analytics including speaking rate, pause duration, and voice quality.",
    "title": "Advances in Speech Recognition",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["machine learning", "natural language", "speech", "speech recognition", "speech-to-text", "voice", "voice analysis"],
    "topicIds": [16, 21],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/256p7m9z4yst71ai/256/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/256p7m9z4yst71ai/256/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/256p7m9z4yst71ai/256/256_advances_in_speech_recognition.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/256p7m9z4yst71ai/256/256_hd_advances_in_speech_recognition.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/256p7m9z4yst71ai/256/256_sd_advances_in_speech_recognition.mp4",
      "duration": 370
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-228", "wwdc2019-704", "wwdc2019-2220", "wwdc2019-2480", "wwdc2016-509"],
      "resources": [524]
    }
  }, {
    "id": "wwdc2019-411",
    "staticContentId": 2746,
    "eventContentId": 411,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/411",
    "description": "The Instruments app in Xcode provides a rich set of tools and templates for profiling your app performance. Learn all about Instruments and gain strategies for identifying bottlenecks in your code. See just how to leverage the power of time profiling and points of interest tracking to make meaningful changes to your code that can dramatically improve app responsiveness.",
    "title": "Getting Started with Instruments",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["debugging", "instruments", "performance", "profiling", "signposts", "tools", "xcode"],
    "topicIds": [33, 35],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/411cbc60y12x68arcof/411/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/411cbc60y12x68arcof/411/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/411cbc60y12x68arcof/411/411_getting_started_with_instruments.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/411cbc60y12x68arcof/411/411_hd_getting_started_with_instruments.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/411cbc60y12x68arcof/411/411_sd_getting_started_with_instruments.mp4",
      "duration": 2094
    },
    "related": {
      "activities": ["wwdc2019-401", "wwdc2019-414", "wwdc2019-421", "wwdc2019-4110", "wwdc2019-4130", "wwdc2019-4170", "wwdc2019-4240", "wwdc2019-4260"],
      "resources": [424, 323]
    }
  }, {
    "id": "wwdc2019-412",
    "staticContentId": 2751,
    "eventContentId": 412,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/412",
    "description": "Xcode 11 introduces new features for finding and fixing bugs fast. Discover how to simulate network conditions and thermal states, and how to override your app's runtime environment while debugging. See how the debugging features work with Xcode previews to identify issues before Build & Run. Learn how to work with the View Debugger to troubleshoot your SwiftUI views.",
    "title": "Debugging in Xcode 11",
    "startTime": "2019-06-06T10:00:00-07:00",
    "endTime": "2019-06-06T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [32, 33, 27],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/412g1eatropvik82vk/412/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/412g1eatropvik82vk/412/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/412g1eatropvik82vk/412/412_debugging_in_xcode_11.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/412g1eatropvik82vk/412/412_hd_debugging_in_xcode_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/412g1eatropvik82vk/412/412_sd_debugging_in_xcode_11.mp4",
      "duration": 2229
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2019-233", "wwdc2019-401", "wwdc2019-422", "wwdc2019-4110", "wwdc2019-4130", "wwdc2019-4170", "wwdc2019-4240", "wwdc2019-4260", "wwdc2018-412"]
    }
  }, {
    "id": "wwdc2019-226",
    "staticContentId": 2828,
    "eventContentId": 226,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/226",
    "description": "SwiftUI was built from the ground up to let you write beautiful and correct user interfaces free of inconsistencies. Learn how to connect your data as dependencies while keeping the UI fully predictable and error free. Familiarize yourself with SwiftUI’s powerful data flow tools and understand what the best tool is for each situation.",
    "title": "Data Flow Through SwiftUI",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/226mq9pvm28zqfqer2a/226/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/226mq9pvm28zqfqer2a/226/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/226mq9pvm28zqfqer2a/226/226_data_flow_through_swiftui.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/226mq9pvm28zqfqer2a/226/226_hd_data_flow_through_swiftui.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/226mq9pvm28zqfqer2a/226/226_sd_data_flow_through_swiftui.mp4",
      "duration": 2240
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-216", "wwdc2019-219", "wwdc2019-231", "wwdc2019-233", "wwdc2019-237", "wwdc2019-240", "wwdc2019-402", "wwdc2019-415", "wwdc2019-721", "wwdc2019-722", "wwdc2019-2300", "wwdc2019-2440"]
    }
  }, {
    "id": "wwdc2019-516",
    "staticContentId": 2974,
    "eventContentId": 516,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/516",
    "description": "Secure sign-in and authentication is a key feature of a secure account-based app design. Learn how you can improve your app's login experiences through an overview of the available authentications services and details on specific technologies such as Sign In with Apple ID, Password AutoFill for iPad Apps for Mac, advances in OAuth and WebAuthentication, and a new API for streamlined password sign-in.",
    "title": "What's New in Authentication",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [20],
    "type": "Video",
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/516sogw464mg6d4uv/516/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/516sogw464mg6d4uv/516/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/516sogw464mg6d4uv/516/516_whats_new_in_authentication.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/516sogw464mg6d4uv/516/516_hd_whats_new_in_authentication.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/516sogw464mg6d4uv/516/516_sd_whats_new_in_authentication.mp4",
      "duration": 1152
    },
    "related": {
      "activities": ["wwdc2019-208", "wwdc2019-706", "wwdc2019-717"]
    }
  }, {
    "id": "wwdc2019-234",
    "staticContentId": 2830,
    "eventContentId": 234,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/234",
    "description": "Document Camera and Text Recognition features in Vision Framework enable you to extract text data from images. Learn how to leverage this built-in machine learning technology in your app. Gain a deeper understanding of the differences between fast versus accurate processing as well as character-based versus language-based recognition.",
    "title": "Text Recognition in Vision Framework",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["camera", "document camera", "images", "natural language", "photos", "recognition", "text", "vision"],
    "topicIds": [16],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/234rye7511ohnx5dmvl/234/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/234rye7511ohnx5dmvl/234/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/234rye7511ohnx5dmvl/234/234_text_recognition_in_vision_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/234rye7511ohnx5dmvl/234/234_hd_text_recognition_in_vision_framework.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/234rye7511ohnx5dmvl/234/234_sd_text_recognition_in_vision_framework.mp4",
      "duration": 2295
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-222", "wwdc2019-232", "wwdc2019-704", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-717", "wwdc2017-506"],
      "resources": [563, 562, 561]
    }
  }, {
    "id": "wwdc2019-228",
    "staticContentId": 2832,
    "eventContentId": 228,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/228",
    "description": "Take a journey through the creation of an educational game that brings together Core ML, ARKit, and other app frameworks. Discover opportunities for magical interactions in your app through the power of machine learning. Gain a deeper understanding of approaches to solving challenging computer vision problems. See it all come to life in an interactive coding session.",
    "title": "Creating Great Apps Using Core ML and ARKit",
    "startTime": "2019-06-06T10:00:00-07:00",
    "endTime": "2019-06-06T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["", "arkit", "core ml", "create ml", "drawing classification", "machine learning", "object detection", "pencil kit", "speech recognition"],
    "topicIds": [23, 16],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/228l55lz3fc9f4/228/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/228l55lz3fc9f4/228/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/228l55lz3fc9f4/228/228_creating_great_apps_using_core_ml_and_arkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/228l55lz3fc9f4/228/228_hd_creating_great_apps_using_core_ml_and_arkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/228l55lz3fc9f4/228/228_sd_creating_great_apps_using_core_ml_and_arkit.mp4",
      "duration": 1783
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-221", "wwdc2019-222", "wwdc2019-256", "wwdc2019-406", "wwdc2019-430", "wwdc2019-704", "wwdc2019-803", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250", "wwdc2018-717", "wwdc2017-602"],
      "resources": [528, 27, 25]
    }
  }, {
    "id": "wwdc2019-250",
    "staticContentId": 2969,
    "eventContentId": 250,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/250",
    "description": "Custom Actions simplify the experience for people using assistive technologies with your app and they can help you reduce the number of swipes and taps that are required to navigate through your interface and perform interactions. Learn how to leverage custom actions for use in VoiceOver and Switch Control. New in iOS 13, bring custom actions to Full Keyboard Access and Voice Control on iOS.",
    "title": "Making Apps More Accessible With Custom Actions",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [8, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/250iaz7b18msfiy/250/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/250iaz7b18msfiy/250/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/250iaz7b18msfiy/250/250_making_apps_more_accessible_with_custom_actions.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/250iaz7b18msfiy/250/250_hd_making_apps_more_accessible_with_custom_actions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/250iaz7b18msfiy/250/250_sd_making_apps_more_accessible_with_custom_actions.mp4",
      "duration": 565
    }
  }, {
    "id": "wwdc2019-416",
    "staticContentId": 2768,
    "eventContentId": 416,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/416",
    "description": "Xcode 11 now fully supports using and creating binary frameworks in Swift. Find out how to simultaneously support devices and Simulator with the new XCFramework bundle type, how Swift module interfaces work, and how to manage changes to your framework over time.",
    "title": "Binary Frameworks in Swift",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 38],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/416h8485aty341c2/416/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/416h8485aty341c2/416/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/416h8485aty341c2/416/416_binary_frameworks_in_swift.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/416h8485aty341c2/416/416_hd_binary_frameworks_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/416h8485aty341c2/416/416_sd_binary_frameworks_in_swift.mp4",
      "duration": 2432
    },
    "related": {
      "activities": ["wwdc2019-402", "wwdc2019-408", "wwdc2019-410", "wwdc2019-4180", "wwdc2019-4200"]
    }
  }, {
    "id": "wwdc2019-610",
    "staticContentId": 2867,
    "eventContentId": 610,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/610",
    "description": "With iOS 13, ARKit and RealityKit enable apps to establish shared AR experiences faster and easier than ever. Understand how collaborative sessions allow multiple devices to build a combined world map and share AR anchors and updates in real-time. Learn how to incorporate collaborative sessions into ARKit-based apps, then roll into SwiftStrike, an engaging and immersive multiplayer AR game built using RealityKit and Swift.",
    "title": "Building Collaborative AR Experiences",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 26],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/610bh5ws7sw7lxoo/610/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/610bh5ws7sw7lxoo/610/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/610bh5ws7sw7lxoo/610/610_building_collaborative_ar_experiences.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/610bh5ws7sw7lxoo/610/610_hd_building_collaborative_ar_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/610bh5ws7sw7lxoo/610/610_sd_building_collaborative_ar_experiences.mp4",
      "duration": 2117
    },
    "related": {
      "activities": ["wwdc2019-603", "wwdc2019-604", "wwdc2019-605", "wwdc2019-607", "wwdc2019-609", "wwdc2019-612", "wwdc2019-6130", "wwdc2019-6140"],
      "resources": [568, 560, 25]
    }
  }, {
    "id": "wwdc2019-415",
    "staticContentId": 2769,
    "eventContentId": 415,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/415",
    "description": "Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API design, with examples from new APIs like SwiftUI, Combine, and RealityKit. Whether you're developing an app as part of a team, or you're publishing a library for others to use, find out how to use new features of Swift to ensure clarity and correct use of your APIs.",
    "title": "Modern Swift API Design",
    "startTime": "2019-06-06T14:00:00-07:00",
    "endTime": "2019-06-06T14:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [35, 36],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/415zrx4f6t10b2/415/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/415zrx4f6t10b2/415/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/415zrx4f6t10b2/415/415_modern_swift_api_design.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/415zrx4f6t10b2/415/415_hd_modern_swift_api_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/415zrx4f6t10b2/415/415_sd_modern_swift_api_design.mp4",
      "duration": 2466
    },
    "related": {
      "activities": ["wwdc2019-216", "wwdc2019-226", "wwdc2019-237", "wwdc2019-402", "wwdc2019-603", "wwdc2019-721", "wwdc2019-4180", "wwdc2019-4210"],
      "resources": [483, 45]
    }
  }, {
    "id": "wwdc2019-235",
    "staticContentId": 2707,
    "eventContentId": 235,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/235",
    "description": "macOS Catalina provides an easy way to bring your iPad app to the Mac while maintaining your single code-base. Hear about ways in which you can take your app beyond the default behaviors to optimize its interface for the Mac. Get an overview of APIs you can use and macOS design guidelines that need to be considered. Learn how the iPad app lifecycle comes across on the Mac, and get distribution details for your application.",
    "title": "Taking iPad Apps for Mac to the Next Level",
    "startTime": "2019-06-06T17:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["catalyst", "project catalyst"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/235piwr25l1xxn6/235/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/235piwr25l1xxn6/235/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/235piwr25l1xxn6/235/235_taking_ipad_apps_for_mac_to_the_next_level.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/235piwr25l1xxn6/235/235_hd_taking_ipad_apps_for_mac_to_the_next_level.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/235piwr25l1xxn6/235/235_sd_taking_ipad_apps_for_mac_to_the_next_level.mp4",
      "duration": 3248
    },
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-809", "wwdc2019-2410"]
    }
  }, {
    "id": "wwdc2019-515",
    "staticContentId": 2975,
    "eventContentId": 515,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/515",
    "description": "The latest version of Safari on macOS and iOS is packed with new capabilities that both web developers and their customers will love. Discover how to take advantage of new features including powerful new Safari Extensions APIs for window, tab, and popover management, content blocking notifications, and enhancements to make link following in your Mac apps and iPad Apps for Mac a great experience.",
    "title": "What's New in Safari",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/515nm8yj4zy65h15/515/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/515nm8yj4zy65h15/515/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/515nm8yj4zy65h15/515/515_whats_new_in_safari.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/515nm8yj4zy65h15/515/515_hd_whats_new_in_safari.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/515nm8yj4zy65h15/515/515_sd_whats_new_in_safari.mp4",
      "duration": 514
    },
    "related": {
      "activities": ["wwdc2019-203", "wwdc2019-717"]
    }
  }, {
    "id": "wwdc2019-244",
    "staticContentId": 2967,
    "eventContentId": 244,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/244",
    "description": "Learn about the importance of supporting Large Text. Hear about Differentiate Without Color, a new API on iOS which can enable people with vision disorders such as color-blindness to easily use your app. Learn how to use it and how it can bring inclusivity to your app. Find how how to enable new Reduce Motion API to stop auto-play in your app for people who may be sensitive to motion.",
    "title": "Visual Design and Accessibility",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [8, 6, 22],
    "type": "Video",
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/244gmopitz5ezs2kkq/244/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/244gmopitz5ezs2kkq/244/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/244gmopitz5ezs2kkq/244/244_visual_design_and_accessibility.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/244gmopitz5ezs2kkq/244/244_hd_visual_design_and_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/244gmopitz5ezs2kkq/244/244_sd_visual_design_and_accessibility.mp4",
      "duration": 613
    }
  }, {
    "id": "wwdc2019-249",
    "staticContentId": 2960,
    "eventContentId": 249,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/249",
    "description": "In AVCapture on iOS 13 it is now possible to simultaneously capture photos and video from multiple cameras on iPhone XS, iPhone XS Max, iPhone XR, and the latest iPad Pro. It is also possible to configure the multiple microphones on the device to shape the sound that is captured. Learn how to leverage these powerful capabilities to bring creative new features like picture-in-picture and spatial audio to your camera apps. Gain a deeper understanding of the performance considerations that may influence your app design.",
    "title": "Introducing Multi-Camera Capture for iOS",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["avcapture", "avfoundation", "capture", "core image", "depth", "disparity", "hair", "microphone", "multi camera", "parallax", "photo effects", "photography", "photos", "photos api", "portrait mode", "segmentation", "skin", "spatial audio", "teeth"],
    "topicIds": [29, 30],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/249a0jw909n3uq0/249/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/249a0jw909n3uq0/249/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/249a0jw909n3uq0/249/249_introducing_multicamera_capture_for_ios.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/249a0jw909n3uq0/249/249_hd_introducing_multicamera_capture_for_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/249a0jw909n3uq0/249/249_sd_introducing_multicamera_capture_for_ios.mp4",
      "duration": 2708
    },
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-2120", "wwdc2019-2290", "wwdc2018-503", "wwdc2017-507"]
    }
  }, {
    "id": "wwdc2019-430",
    "staticContentId": 3189,
    "eventContentId": 430,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/430",
    "description": "Bringing the power of Core ML to your app begins with one challenge. How do you create your model? The new Create ML app provides an intuitive workflow for model creation. See how to train, evaluate, test, and preview your models quickly in this easy-to-use tool. Get started with one of the many available templates handling a number of powerful machine learning tasks. Learn more about the many features for continuous model improvement and experimentation.",
    "title": "Introducing the Create ML App",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["activity", "ai", "artificial intelligence", "classifier", "core ml", "create ml", "detection", "image classification", "learning", "machine learning", "model", "motion", "natural language", "recommender", "sound", "tools", "training", "vision", "xcode"],
    "topicIds": [38, 16],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/430tw6e8xtxo3btga2/430/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/430tw6e8xtxo3btga2/430/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/430tw6e8xtxo3btga2/430/430_introducing_the_create_ml_app.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/430tw6e8xtxo3btga2/430/430_hd_introducing_the_create_ml_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/430tw6e8xtxo3btga2/430/430_sd_introducing_the_create_ml_app.mp4",
      "duration": 874
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-228", "wwdc2019-232", "wwdc2019-406", "wwdc2019-407", "wwdc2019-424", "wwdc2019-425", "wwdc2019-426", "wwdc2019-427", "wwdc2019-428", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"]
    }
  }, {
    "id": "wwdc2019-427",
    "staticContentId": 2959,
    "eventContentId": 427,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/427",
    "description": "Recommendation models for Core ML can enable a very personal experience for the customers using your app. They power suggestions for what music to play or what movie to see in the apps you use every day. Learn how you can easily create a custom Recommendation model from all sorts of data sources using the Create ML app. Gain a deeper understanding of how this kind of personalization is possible while maintaining user privacy. See an example of one of these recommenders in action.",
    "title": "Training Recommendation Models in Create ML",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["ai", "artificial intelligence", "classifier", "core ml", "create ml", "machine learning", "object detection", "personalization", "recommendation", "recommender", "table", "text", "training"],
    "topicIds": [16],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/427quw6yo5agrbit/427/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/427quw6yo5agrbit/427/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/427quw6yo5agrbit/427/427_training_recommendation_models_in_create_ml.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/427quw6yo5agrbit/427/427_hd_training_recommendation_models_in_create_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/427quw6yo5agrbit/427/427_sd_training_recommendation_models_in_create_ml.mp4",
      "duration": 631
    },
    "related": {
      "activities": ["wwdc2019-407", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"]
    }
  }, {
    "id": "wwdc2019-611",
    "staticContentId": 2665,
    "eventContentId": 611,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/611",
    "description": "Metal is the modern foundation for GPU-accelerated graphics and compute on Apple platforms, superseding OpenGL, OpenGL ES, and OpenCL. Get introduced to the architecture and feature set of Metal and learn a step-by-step approach for transitioning OpenGL-based apps to the Metal API.",
    "title": "Bringing OpenGL Apps to Metal",
    "startTime": "2019-06-06T17:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 25, 26, 27],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/611h7e9ka5i87k5ya/611/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/611h7e9ka5i87k5ya/611/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/611h7e9ka5i87k5ya/611/611_bringing_opengl_apps_to_metal.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/611h7e9ka5i87k5ya/611/611_hd_bringing_opengl_apps_to_metal.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/611h7e9ka5i87k5ya/611/611_sd_bringing_opengl_apps_to_metal.mp4",
      "duration": 3433
    },
    "related": {
      "activities": ["wwdc2019-601", "wwdc2019-606", "wwdc2019-608", "wwdc2019-613", "wwdc2019-614", "wwdc2019-6160"],
      "resources": [38]
    }
  }, {
    "id": "wwdc2019-426",
    "staticContentId": 2957,
    "eventContentId": 426,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/426",
    "description": "Your iPhone and Apple Watch are loaded with a number of powerful sensors including an accelerometer and gyroscope. Activity Classifiers can be trained on data from these sensors to bring some magic to your app, such as knowing when someone is running or swinging a bat. Learn how the Create ML app makes it easy to train and evaluate one of these Core ML models. Gain a deeper understanding of how to collect the raw data needed for training. See the use of these models in action.",
    "title": "Building Activity Classification Models in Create ML",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["accelerometer", "activity", "ai", "artificial intelligence", "classifier", "core ml", "core motion", "create ml", "gyroscope", "machine learning", "motion", "training"],
    "topicIds": [16],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/426s9m91e962yqv9/426/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/426s9m91e962yqv9/426/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/426s9m91e962yqv9/426/426_building_activity_classification_models_in_create_ml.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/426s9m91e962yqv9/426/426_hd_building_activity_classification_models_in_create_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/426s9m91e962yqv9/426/426_sd_building_activity_classification_models_in_create_ml.mp4",
      "duration": 901
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-406", "wwdc2019-407", "wwdc2019-430", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"]
    }
  }, {
    "id": "wwdc2019-227",
    "staticContentId": 2726,
    "eventContentId": 227,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/227",
    "description": "Starting with iOS 13, your iOS app can contribute fonts for systemwide use. Understand how fonts are managed on iOS, and learn how to install and access fonts. Get details on the font picker interface that allows users to choose fonts, and the System UI fonts that are now available for use in your app. Review best practices for text scaling that works regardless of device.",
    "title": "Font Management and Text Scaling",
    "startTime": "2019-06-06T09:00:00-07:00",
    "endTime": "2019-06-06T09:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["nsattributedstring", "rounded", "serif"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/227a5yni0swztyj0/227/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/227a5yni0swztyj0/227/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/227a5yni0swztyj0/227/227_font_management_and_text_scaling.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/227a5yni0swztyj0/227/227_hd_font_management_and_text_scaling.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/227a5yni0swztyj0/227/227_sd_font_management_and_text_scaling.mp4",
      "duration": 2385
    },
    "related": {
      "activities": ["wwdc2019-205", "wwdc2019-206", "wwdc2019-210", "wwdc2019-403", "wwdc2019-2090", "wwdc2019-2130", "wwdc2019-2280", "wwdc2019-2320", "wwdc2019-2410"]
    }
  }, {
    "id": "wwdc2019-503",
    "staticContentId": 2720,
    "eventContentId": 503,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/503",
    "description": "AVKit is a high-level framework for building media user interfaces, complete with playback controls, chapter navigation, Picture-in-Picture, audio routing, support for subtitles and closed captioning, Siri and Now Playing integration, and support for keyboard, Touch Bar, and remote control. Learn best practices in how to integrate these technologies into your own apps on iOS, tvOS, and iPad apps on Mac.",
    "title": "Delivering Intuitive Media Playback with AVKit",
    "startTime": "2019-06-06T10:00:00-07:00",
    "endTime": "2019-06-06T10:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["airplay", "avfoundation", "avkit", "avplayer", "avplayerviewcontroller", "content", "controls", "externalmetadata", "media", "metadata", "picture in picture", "pip", "player"],
    "topicIds": [28, 31],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/503tnc2gfty50jit92m/503/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/503tnc2gfty50jit92m/503/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/503tnc2gfty50jit92m/503/503_delivering_intuitive_media_playback_with_avkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/503tnc2gfty50jit92m/503/503_hd_delivering_intuitive_media_playback_with_avkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/503tnc2gfty50jit92m/503/503_sd_delivering_intuitive_media_playback_with_avkit.mp4",
      "duration": 2405
    },
    "related": {
      "activities": ["wwdc2019-501", "wwdc2019-2250", "wwdc2019-2400", "wwdc2019-5060", "wwdc2019-5100", "wwdc2019-5130", "wwdc2019-5160"],
      "resources": [276]
    }
  }, {
    "id": "wwdc2019-301",
    "staticContentId": 2844,
    "eventContentId": 301,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/301",
    "description": "App Store Connect continues to improve its role in each step of your app's lifecycle with new features that make your app submission, management, and distribution experience better than ever. Learn about the latest enhancements and discover new ways to ensure each release of your app is better than the last.",
    "title": "What's New in App Store Connect",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69, 71, 37, 39],
    "type": "Session",
    "roomId": 63,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/301xxdtu2sikt7naxe/301/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/301xxdtu2sikt7naxe/301/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/301xxdtu2sikt7naxe/301/301_whats_new_in_app_store_connect.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/301xxdtu2sikt7naxe/301/301_hd_whats_new_in_app_store_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/301xxdtu2sikt7naxe/301/301_sd_whats_new_in_app_store_connect.mp4",
      "duration": 1834
    },
    "related": {
      "activities": ["wwdc2019-302", "wwdc2019-305", "wwdc2019-3030", "wwdc2019-3050"],
      "resources": [44]
    }
  }, {
    "id": "wwdc2019-230",
    "staticContentId": 2731,
    "eventContentId": 230,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/230",
    "description": "Core Data helps manage the flow of data throughout your app. Hear about new features in Core Data that make your code simpler and more powerful, including derived attributes, history tracking, change notifications and batch operations. Learn more about using these facilities and the new diffing APIs in UIKit and Foundation to make your apps run more efficiently.",
    "title": "Making Apps with Core Data",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["batch operations", "change notifications", "concurrency", "core", "core data", "data", "derived attributes", "history tracking", "model layer objects", "nskeyedarchiver", "object graph", "object life cycle", "performance", "persistence", "persistent history", "sqlite", "testing"],
    "topicIds": [22],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/230p2cw8ht4ow4invto/230/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/230p2cw8ht4ow4invto/230/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/230p2cw8ht4ow4invto/230/230_making_apps_with_core_data.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/230p2cw8ht4ow4invto/230/230_hd_making_apps_with_core_data.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/230p2cw8ht4ow4invto/230/230_sd_making_apps_with_core_data.mp4",
      "duration": 1991
    },
    "related": {
      "activities": ["wwdc2019-202", "wwdc2019-220", "wwdc2019-231", "wwdc2019-419", "wwdc2019-711"]
    }
  }, {
    "id": "wwdc2019-232",
    "staticContentId": 2614,
    "eventContentId": 232,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/232",
    "description": "Natural Language is a framework designed to provide high-performance, on-device APIs for natural language processing tasks across all Apple platforms. Learn about the addition of Sentiment Analysis and Text Catalog support in the framework. Gain a deeper understanding of transfer learning for text-based models and the new support for Word Embeddings which can power great search experiences in your app.",
    "title": "Advances in Natural Language Framework",
    "startTime": "2019-06-06T15:00:00-07:00",
    "endTime": "2019-06-06T15:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["classifier", "core ml", "language", "machine learning", "natural language", "nlp", "sentiment", "text analysis", "text catalog", "transfer learning", "word embeddings"],
    "topicIds": [16],
    "type": "Session",
    "roomId": 61,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/232kg63jt891ci/232/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/232kg63jt891ci/232/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/232kg63jt891ci/232/232_advances_in_natural_language_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/232kg63jt891ci/232/232_hd_advances_in_natural_language_framework.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/232kg63jt891ci/232/232_sd_advances_in_natural_language_framework.mp4",
      "duration": 2359
    },
    "related": {
      "activities": ["wwdc2019-209", "wwdc2019-234", "wwdc2019-428", "wwdc2019-430", "wwdc2019-704", "wwdc2019-7020", "wwdc2019-7150", "wwdc2019-7170", "wwdc2019-7250"]
    }
  }, {
    "id": "wwdc2019-233",
    "staticContentId": 2674,
    "eventContentId": 233,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/233",
    "description": "Xcode 11 displays previews of your user interface right in the editor, streamlining the edit-debug-run cycle into a seamless workflow. Learn how previews work, how to optimize the structure of your SwiftUI app for previews, and how to add preview support to your existing views and view controllers.",
    "title": "Mastering Xcode Previews",
    "startTime": "2019-06-06T16:00:00-07:00",
    "endTime": "2019-06-06T16:40:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [38, 22],
    "type": "Session",
    "roomId": 62,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/233zklqtgixxmuulng/233/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/233zklqtgixxmuulng/233/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/233zklqtgixxmuulng/233/233_mastering_xcode_previews.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/233zklqtgixxmuulng/233/233_hd_mastering_xcode_previews.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/233zklqtgixxmuulng/233/233_sd_mastering_xcode_previews.mp4",
      "duration": 2649
    },
    "related": {
      "activities": ["wwdc2019-204", "wwdc2019-212", "wwdc2019-216", "wwdc2019-226", "wwdc2019-231", "wwdc2019-237", "wwdc2019-412", "wwdc2019-2080", "wwdc2019-2180", "wwdc2019-2300", "wwdc2019-2440"]
    }
  }, {
    "id": "wwdc2019-236",
    "staticContentId": 2625,
    "eventContentId": 236,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/236",
    "description": "MapKit and MapKit JS bring fully featured Apple Maps to your app and website. See how the latest features give you more control over the base map presentation, finer-grained search and result filtering of points of interest and address information, and integration with standard data formats for custom overlays and annotations.",
    "title": "What’s New in MapKit and MapKit JS",
    "startTime": "2019-06-06T17:00:00-07:00",
    "endTime": "2019-06-06T18:00:00-07:00",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [70, 17, 19, 22],
    "type": "Session",
    "roomId": 66,
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/236an22jpbgtmv9ya/236/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/236an22jpbgtmv9ya/236/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/236an22jpbgtmv9ya/236/236_whats_new_in_mapkit_and_mapkit_js.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/236an22jpbgtmv9ya/236/236_hd_whats_new_in_mapkit_and_mapkit_js.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/236an22jpbgtmv9ya/236/236_sd_whats_new_in_mapkit_and_mapkit_js.mp4",
      "duration": 3068
    },
    "related": {
      "activities": ["wwdc2019-241", "wwdc2019-245", "wwdc2019-705", "wwdc2019-2100", "wwdc2019-2500", "wwdc2019-7120", "wwdc2019-7240"],
      "resources": [589, 566, 531, 414, 100]
    }
  }, {
    "id": "wwdc2019-518",
    "staticContentId": 2973,
    "eventContentId": 518,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/518",
    "description": "WebKit provides a rich set of classes designed to load, display, and manage web content in your app. Discover how to integrate your web content into powerful platform features including Dark Mode, new presentation features in Share Sheet, JavaScript payment APIs for Apple Pay, and more.",
    "title": "What's New for Web Developers",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/518lfev1wbktx9/518/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/518lfev1wbktx9/518/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/518lfev1wbktx9/518/518_whats_new_for_web_developers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/518lfev1wbktx9/518/518_hd_whats_new_for_web_developers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/518lfev1wbktx9/518/518_sd_whats_new_for_web_developers.mp4",
      "duration": 748
    },
    "related": {
      "activities": ["wwdc2019-203", "wwdc2019-506", "wwdc2019-511", "wwdc2019-513", "wwdc2019-514"]
    }
  }, {
    "id": "wwdc2019-720",
    "staticContentId": 2894,
    "eventContentId": 720,
    "eventId": "wwdc2019",
    "webPermalink": "https://developer.apple.com/wwdc19/720",
    "description": "Safari Extensions surface your app's unique capabilities within Safari. Discover how the latest features such as content blocking notifications and user interface management and control innovations for pages, tabs, and popovers make your Safari App Extensions and Content Blockers even more powerful. Learn about the latest APIs and best practices for communicating between your extension and your app.",
    "title": "What's New in Safari Extensions",
    "publishingExpiryDate": "2024-06-08T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [20],
    "type": "Video",
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/720yo3jm1qljmlbddac/720/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/720yo3jm1qljmlbddac/720/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/720yo3jm1qljmlbddac/720/720_whats_new_in_safari_extensions.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/720yo3jm1qljmlbddac/720/720_hd_whats_new_in_safari_extensions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/720yo3jm1qljmlbddac/720/720_sd_whats_new_in_safari_extensions.mp4",
      "duration": 1193
    },
    "related": {
      "activities": ["wwdc2016-214", "wwdc2015-511"],
      "resources": [580, 514, 431]
    }
  }, {
    "id": "wwdc2018-226",
    "staticContentId": 2184,
    "eventContentId": 226,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/226",
    "description": "VoiceOver provides spoken descriptions and braille output of onscreen elements. Learn how to go beyond the visuals to identify VoiceOver and functional issues to help improve the experience for all users.",
    "title": "VoiceOver: App Testing Beyond The Visuals",
    "originalPublishingDate": "2018-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["assistive", "audit", "blind", "disability", "keyboard", "motor", "rotor", "spoken", "switch"],
    "topicIds": [8],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/226s1li4vc2mjvj4j/226/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/226s1li4vc2mjvj4j/226/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/226s1li4vc2mjvj4j/226/226_voiceover_app_testing_beyond_the_visuals.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/226s1li4vc2mjvj4j/226/226_hd_voiceover_app_testing_beyond_the_visuals.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/226s1li4vc2mjvj4j/226/226_sd_voiceover_app_testing_beyond_the_visuals.mp4",
      "duration": 1899
    },
    "related": {
      "activities": ["wwdc2018-108", "wwdc2018-230", "wwdc2018-2360", "wwdc2018-2410", "wwdc2017-806"]
    }
  }, {
    "id": "wwdc2018-304",
    "staticContentId": 2093,
    "eventContentId": 304,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/304",
    "description": "Search Ads is a great way to help people discover your app in App Store search results. Learn how new market expansion will give you greater opportunities to reach high quality customers. See how Search Ads Advanced new creative variations will help make your app promotion even more effective.",
    "title": "What's New in Search Ads",
    "originalPublishingDate": "2018-06-08T15:20:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["advertising", "itunesconnect", "itunes connect"],
    "topicIds": [40, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/304o1mulfeyvd4wd/304/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/304o1mulfeyvd4wd/304/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/304o1mulfeyvd4wd/304/304_whats_new_in_search_ads.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/304o1mulfeyvd4wd/304/304_hd_whats_new_in_search_ads.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/304o1mulfeyvd4wd/304/304_sd_whats_new_in_search_ads.mp4",
      "duration": 1126
    },
    "related": {
      "activities": ["wwdc2018-3130"]
    }
  }, {
    "id": "wwdc2018-721",
    "staticContentId": 2232,
    "eventContentId": 721,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/721",
    "description": "Password AutoFill delivers the ability to fill passwords seamlessly within iOS apps and Safari. Join us to learn how app developers who provide credential management can surface their credentials during sign-in within apps and on the web.",
    "title": "Implementing AutoFill Credential Provider Extensions",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [19, 20, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/721w2b36lz4yno7f4/721/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/721w2b36lz4yno7f4/721/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/721w2b36lz4yno7f4/721/721_implementing_autofill_credential_provider_extensions.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/721w2b36lz4yno7f4/721/721_hd_implementing_autofill_credential_provider_extensions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/721w2b36lz4yno7f4/721/721_sd_implementing_autofill_credential_provider_extensions.mp4",
      "duration": 1558
    },
    "related": {
      "activities": ["wwdc2018-204", "wwdc2018-234", "wwdc2018-2040", "wwdc2018-2230", "wwdc2018-2470", "wwdc2017-206"],
      "resources": [426]
    }
  }, {
    "id": "wwdc2018-804",
    "staticContentId": 2137,
    "eventContentId": 804,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/804",
    "description": "An in-depth exploration of essential interaction, visual and sound design principles and techniques through the design of a simple button.",
    "title": "The Life of a Button",
    "originalPublishingDate": "2018-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["color", "composition", "copy", "design", "editorial", "interaction", "interactive", "layout", "shape", "sound", "ui", "ux"],
    "topicIds": [3, 5, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/804hwsr1us28uuau99o/804/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/804hwsr1us28uuau99o/804/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/804hwsr1us28uuau99o/804/804_the_life_of_a_button.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/804hwsr1us28uuau99o/804/804_hd_the_life_of_a_button.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/804hwsr1us28uuau99o/804/804_sd_the_life_of_a_button.mp4",
      "duration": 2158
    },
    "related": {
      "activities": ["wwdc2019-223"],
      "resources": [389, 352]
    }
  }, {
    "id": "wwdc2018-104",
    "staticContentId": 2336,
    "eventContentId": 104,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/104",
    "description": "UNICEF works in more than 190 countries and territories to put children first and has helped save more children’s lives than any other humanitarian organization. Today, UNICEF is leveraging real-time data and emerging technologies to not only protect children’s lives and rights but also empower them to drive change in their own communities. Rajesh Anandan, founder of UNICEF USA’s Ventures group, will share insights from innovative youth empowerment programs from Kampala to Kathmandu to Klamath Falls, including UNICEF Kid Power, which launched the world’s first Wearable-for-Good® that was named one of Time’s 25 Best Inventions.",
    "title": "Unleashing the Power of Kids",
    "originalPublishingDate": "2018-06-07T12:30:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1, 2, 12],
    "type": "Special Event"
  }, {
    "id": "wwdc2018-103",
    "staticContentId": 2201,
    "eventContentId": 103,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/103",
    "description": "Join us for an unforgettable award ceremony celebrating developers and their outstanding work. The 2018 Apple Design Awards recognize state of the art iOS, macOS, watchOS, and tvOS apps that reflect excellence in design and innovation.",
    "title": "Apple Design Awards",
    "originalPublishingDate": "2018-06-04T16:30:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1, 3, 26, 6],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/103zvtnsrnrijr/103/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/103zvtnsrnrijr/103/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/103zvtnsrnrijr/103/103_hd_apple_design_awards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/103zvtnsrnrijr/103/103_sd_apple_design_awards.mp4",
      "duration": 2946
    },
    "related": {
      "activities": ["wwdc2016-103", "wwdc2015-103", "wwdc2014-103", "wwdc2013-102"]
    }
  }, {
    "id": "wwdc2018-235",
    "staticContentId": 2505,
    "eventContentId": 235,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/235",
    "description": "Ground-up coverage of how to make an app that can fit on devices of every size and shape. Make your app fit beautifully on Apple's full range of devices with the minimum amount of effort, future-proofing your user experience along the way.",
    "title": "UIKit: Apps for Every Size and Shape",
    "originalPublishingDate": "2018-06-08T15:20:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["iphone x", "layoutmargins", "layout margins", "safe area", "safeareainsets"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/235gkyrtsva0gy/235/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/235gkyrtsva0gy/235/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/235gkyrtsva0gy/235/235_uikit_apps_for_every_size_and_shape.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/235gkyrtsva0gy/235/235_hd_uikit_apps_for_every_size_and_shape.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/235gkyrtsva0gy/235/235_sd_uikit_apps_for_every_size_and_shape.mp4",
      "duration": 2417
    },
    "related": {
      "activities": ["wwdc2018-202", "tech-talks-201", "tech-talks-207", "tech-talks-209", "tech-talks-801", "wwdc2017-204"]
    }
  }, {
    "id": "wwdc2018-238",
    "staticContentId": 2510,
    "eventContentId": 238,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/238",
    "description": "With TVMLKit you can quickly and easily develop tvOS apps that deliver intuitive and engaging media experiences. Learn about enhancements to data binding that allow you to separate your application logic and user interface, and new features and functions to customize the media playback experience.",
    "title": "What's New in TVMLKit",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["avfoundation", "avkit", "javascript", "javascriptcore", "media", "tvml", "tvmljs", "tvmlkit", "web inspector"],
    "topicIds": [20, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/238l85zhwz7192hqb/238/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/238l85zhwz7192hqb/238/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/238l85zhwz7192hqb/238/238_whats_new_in_tvmlkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/238l85zhwz7192hqb/238/238_hd_whats_new_in_tvmlkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/238l85zhwz7192hqb/238/238_sd_whats_new_in_tvmlkit.mp4",
      "duration": 1184
    },
    "related": {
      "activities": ["wwdc2018-208", "wwdc2018-2110", "wwdc2018-2320"]
    }
  }, {
    "id": "wwdc2018-710",
    "staticContentId": 2087,
    "eventContentId": 710,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/710",
    "description": "Local and push notifications enable your app to keep users informed with timely and relevant content, by displaying messages and accepting users’ actions, or playing distinctive sounds, or updating the badge on your app icon. Improvements to rich notifications help you create more engaging content and better manage notifications. Find out what’s new and get expert advice on implementing user notifications in your app.",
    "title": "What’s New in User Notifications",
    "originalPublishingDate": "2018-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/710kz0ncc1u8bfxn6/710/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/710kz0ncc1u8bfxn6/710/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/710kz0ncc1u8bfxn6/710/710_whats_new_in_user_notifications.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/710kz0ncc1u8bfxn6/710/710_hd_whats_new_in_user_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/710kz0ncc1u8bfxn6/710/710_sd_whats_new_in_user_notifications.mp4",
      "duration": 2369
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-206", "wwdc2018-711", "wwdc2018-806", "wwdc2018-2380", "wwdc2018-7090", "wwdc2018-7120"],
      "resources": [237, 193, 16, 4]
    }
  }, {
    "id": "wwdc2018-225",
    "staticContentId": 2212,
    "eventContentId": 225,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/225",
    "description": "UICollectionView is a flexible, powerful tool to help you achieve great user experiences in your applications. Hear how you can leverage these rich APIs to rapidly move from initial design ideas to polished shipping applications. Topics range from getting started to advanced update animations and layouts.",
    "title": "A Tour of UICollectionView",
    "originalPublishingDate": "2018-06-07T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["custom layouts"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/225s90wcvt1fjg6b/225/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/225s90wcvt1fjg6b/225/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/225s90wcvt1fjg6b/225/225_a_tour_of_uicollectionview.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/225s90wcvt1fjg6b/225/225_hd_a_tour_of_uicollectionview.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/225s90wcvt1fjg6b/225/225_sd_a_tour_of_uicollectionview.mp4",
      "duration": 2422
    },
    "related": {
      "activities": ["wwdc2019-215", "wwdc2018-2290", "wwdc2018-2400", "wwdc2017-223", "wwdc2016-219", "wwdc2015-225", "wwdc2014-232"]
    }
  }, {
    "id": "wwdc2018-241",
    "staticContentId": 2431,
    "eventContentId": 241,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/241",
    "description": "Drag and Drop is a powerful API that allows apps to share and communicate data. No matter how you decide to implement Drag and Drop, there's a way to make it work for people with accessibility needs. Learn the details as we dive into accessible Drag and Drop for iOS.",
    "title": "Accessible Drag and Drop",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["accessibility", "assistive", "blind", "disability"],
    "topicIds": [8],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/241fyqqiogmd6sv/241/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/241fyqqiogmd6sv/241/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/241fyqqiogmd6sv/241/241_accessible_drag_and_drop.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/241fyqqiogmd6sv/241/241_hd_accessible_drag_and_drop.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/241fyqqiogmd6sv/241/241_sd_accessible_drag_and_drop.mp4",
      "duration": 553
    },
    "related": {
      "activities": ["wwdc2018-108"]
    }
  }, {
    "id": "wwdc2018-809",
    "staticContentId": 2571,
    "eventContentId": 809,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/809",
    "description": "Make your apps even more powerful and expressive with Apple Pencil. Learn Apple Pencil design best practices such as correctly balancing touch and pencil interactions, fully harnessing Apple Pencil sensors, and creating more efficient and natural user flows.",
    "title": "Apple Pencil Design Essentials",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["apple pencil", "design", "design studio", "design studio shorts", "games", "interaction", "interaction design", "pencil", "prototyping", "short", "shorts"],
    "topicIds": [3],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/809kx2o95wevp48/809/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/809kx2o95wevp48/809/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/809kx2o95wevp48/809/809_apple_pencil_design_essentials.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/809kx2o95wevp48/809/809_hd_apple_pencil_design_essentials.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/809kx2o95wevp48/809/809_sd_apple_pencil_design_essentials.mp4",
      "duration": 647
    },
    "related": {
      "activities": ["wwdc2018-807", "wwdc2018-808", "wwdc2018-810", "wwdc2018-811"]
    }
  }, {
    "id": "wwdc2018-301",
    "staticContentId": 2100,
    "eventContentId": 301,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/301",
    "description": "App Store Connect is constantly evolving to improve the experience of managing and deploying your app on App Store. Learn about the new App Store Connect API for managing frequently modified data such as users and groups, see the latest updates to Sales Trends and Analytics reporting, and TestFlight features enhanced to help you test and deploy your next masterpiece.",
    "title": "What's New in App Store Connect",
    "originalPublishingDate": "2018-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["distribution", "json", "webservice"],
    "topicIds": [71, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/301k4gd0t7y955ppg/301/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/301k4gd0t7y955ppg/301/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/301k4gd0t7y955ppg/301/301_whats_new_in_app_store_connect.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/301k4gd0t7y955ppg/301/301_hd_whats_new_in_app_store_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/301k4gd0t7y955ppg/301/301_sd_whats_new_in_app_store_connect.mp4",
      "duration": 2222
    },
    "related": {
      "activities": ["wwdc2018-303", "wwdc2018-704", "wwdc2018-705", "wwdc2018-3210", "wwdc2018-3290"],
      "resources": [309, 246]
    }
  }, {
    "id": "wwdc2018-409",
    "staticContentId": 2234,
    "eventContentId": 409,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/409",
    "description": "The LLVM suite of compiler tools in Xcode 10 have new language features, improved diagnostics, and more powerful optimizations. Find out about improvements to ARC for Objective-C, keep up with the newest additions to C++, get an overview of new and improved diagnostics and static analyzer checks, and learn about how LLVM compiler technology is delivering faster build times and better runtime performance for your apps.",
    "title": "What's New in LLVM",
    "originalPublishingDate": "2018-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["a11", "arc", "arm8.1", "armv8.1", "asynchronous", "atomics", "autoreleasepool", "autoreleasing", "avx512", "avx-512", "bionic", "clang", "fp16", "gcd", "grand central dispatch", "heap", "monsoon", "noescape", "ns_noescape", "paging", "release", "retain count", "semaphores", "simd", "skylake", "stack clash", "structs", "synchronous", "sysctlbyname", "vector", "xeon"],
    "topicIds": [32, 35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/409t8zw7rumablsh/409/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/409t8zw7rumablsh/409/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/409t8zw7rumablsh/409/409_whats_new_in_llvm.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/409t8zw7rumablsh/409/409_hd_whats_new_in_llvm.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/409t8zw7rumablsh/409/409_sd_whats_new_in_llvm.mp4",
      "duration": 2535
    },
    "related": {
      "activities": ["wwdc2018-401", "wwdc2018-4180", "wwdc2017-411"]
    }
  }, {
    "id": "wwdc2018-719",
    "staticContentId": 2152,
    "eventContentId": 719,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/719",
    "description": "Core Image is the essential framework for handling image processing tasks in your photo and video apps. In this session, we'll explore new additions to the framework that allow you to achieve great performance in your filter chains and custom CIKernels. We'll also demo a new approach to prototyping in Core Image through the use of an interactive Python environment. Through these techniques you'll discover new ideas for building new creative effects as well as practical approaches to batch processing images for tasks such as image compositing and data boosting for machine learning.",
    "title": "Core Image: Performance, Prototyping, and Python",
    "originalPublishingDate": "2018-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["batch processing", "composite", "compositing", "core image", "data boosting", "image", "metal", "performance", "photo", "photo effects", "photos", "prototyping", "python", "tips and tricks"],
    "topicIds": [4, 30, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/719mml6x0gqj3b7udf/719/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/719mml6x0gqj3b7udf/719/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/719mml6x0gqj3b7udf/719/719_core_image_performance_prototyping_and_python.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/719mml6x0gqj3b7udf/719/719_hd_core_image_performance_prototyping_and_python.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/719mml6x0gqj3b7udf/719/719_sd_core_image_performance_prototyping_and_python.mp4",
      "duration": 2685
    },
    "related": {
      "activities": ["wwdc2018-110", "wwdc2018-219", "wwdc2018-503", "wwdc2018-712", "wwdc2018-5050", "wwdc2018-5160", "wwdc2017-510", "wwdc2016-505", "wwdc2015-510"]
    }
  }, {
    "id": "wwdc2018-203",
    "staticContentId": 2211,
    "eventContentId": 203,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/203",
    "description": "Do you have an idea for an app that you think would be useful to others, but you don't know how to make it a reality? You're not alone! Lots of people are interested in app development, but they aren't sure how to turn their idea to code and then into a finished app. From first steps to Xcode, we'll explain the building blocks you need to turn your iOS app idea into reality.",
    "title": "I Have This Idea For An App...",
    "originalPublishingDate": "2018-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["app development", "auto layout", "beginner", "first app", "ios", "learning", "swift", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/203zyni18c4phf/203/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/203zyni18c4phf/203/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/203zyni18c4phf/203/203_i_have_this_idea_for_an_app.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/203zyni18c4phf/203/203_hd_i_have_this_idea_for_an_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/203zyni18c4phf/203/203_sd_i_have_this_idea_for_an_app.mp4",
      "duration": 3272
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-220", "wwdc2018-224", "wwdc2018-417", "wwdc2018-2200", "wwdc2018-2290", "wwdc2018-2400", "wwdc2018-4010", "wwdc2018-4020", "wwdc2018-4090", "wwdc2018-4160", "wwdc2017-412", "wwdc2017-502", "wwdc2017-704", "wwdc2015-218", "wwdc2015-219", "wwdc2015-711", "wwdc2014-208", "wwdc2014-224", "wwdc2013-502"],
      "resources": [411, 410, 409, 408, 407, 335, 334, 333, 332, 331, 322]
    }
  }, {
    "id": "wwdc2018-612",
    "staticContentId": 2177,
    "eventContentId": 612,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/612",
    "description": "Realize the full potential of your Metal-based games by tackling common issues that cause frame rate slowdowns, stutters, and stalls. Discover how to clear up jitter and maintain a silky-smooth frame rate with simple changes in frame pacing. Get introduced to new tools for analyzing rendering passes and pinpoint expensive or unexpected work. Learn how to avoid thread stalls and get specific advice about handling thermal notifications.",
    "title": "Metal Game Performance Optimization",
    "originalPublishingDate": "2018-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [25, 26, 35, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/612wlpc4tnd47e9245/612/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/612wlpc4tnd47e9245/612/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/612wlpc4tnd47e9245/612/612_metal_game_performance_optimization.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/612wlpc4tnd47e9245/612/612_hd_metal_game_performance_optimization.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/612wlpc4tnd47e9245/612/612_sd_metal_game_performance_optimization.mp4",
      "duration": 2015
    },
    "related": {
      "activities": ["wwdc2018-604", "wwdc2018-607", "wwdc2018-608", "wwdc2018-611"],
      "resources": [358, 357, 356]
    }
  }, {
    "id": "wwdc2018-720",
    "staticContentId": 2083,
    "eventContentId": 720,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/720",
    "description": "Get the latest news and updates from the Wallet and Apple Pay team. Learn how iPhone and Apple Watch can power innovative commerce experiences. Hear about the latest design best practices for Apple Pay. And discover how to create your own contactless passes for rewards cards, gift cards, tickets and more.",
    "title": "Wallet and Apple Pay: Creating Great Customer Experiences",
    "originalPublishingDate": "2018-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/720gofzcqcp431kcasf/720/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/720gofzcqcp431kcasf/720/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/720gofzcqcp431kcasf/720/720_wallet_and_apple_pay_creating_great_customer_experiences.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/720gofzcqcp431kcasf/720/720_hd_wallet_and_apple_pay_creating_great_customer_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/720gofzcqcp431kcasf/720/720_sd_wallet_and_apple_pay_creating_great_customer_experiences.mp4",
      "duration": 2325
    },
    "related": {
      "activities": ["wwdc2018-7160", "wwdc2017-714", "wwdc2016-703", "wwdc2016-704"],
      "resources": [157, 103, 102, 101, 66]
    }
  }, {
    "id": "wwdc2018-215",
    "staticContentId": 2108,
    "eventContentId": 215,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/215",
    "description": "The new ClassKit framework lets you organize educational content in your app so that teachers can discover and assign specific activities and view students’ progress in the new Schoolwork app. Learn how to adopt ClassKit to your content structure, declare assignable content, and share student progress on activities teachers assign in Schoolwork.",
    "title": "Introducing ClassKit",
    "originalPublishingDate": "2018-06-06T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/215xraudwwyzg2lgu2l/215/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/215xraudwwyzg2lgu2l/215/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/215xraudwwyzg2lgu2l/215/215_introducing_classkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/215xraudwwyzg2lgu2l/215/215_hd_introducing_classkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/215xraudwwyzg2lgu2l/215/215_sd_introducing_classkit.mp4",
      "duration": 2305
    },
    "related": {
      "activities": ["wwdc2018-302", "wwdc2018-2160", "wwdc2018-2270"],
      "resources": [386, 385]
    }
  }, {
    "id": "wwdc2018-714",
    "staticContentId": 2088,
    "eventContentId": 714,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/714",
    "description": "Learn what Apple has been doing to help your app get the most out of the network with the least effort. Let Apple’s networking APIs do the heavy lifting for you. Learn best practices for getting top networking performance from your app using the URLSession APIs.",
    "title": "Optimizing Your App for Today’s Internet",
    "originalPublishingDate": "2018-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/714px070n75l8ri/714/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/714px070n75l8ri/714/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/714px070n75l8ri/714/714_optimizing_your_app_for_todays_internet.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/714px070n75l8ri/714/714_hd_optimizing_your_app_for_todays_internet.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/714px070n75l8ri/714/714_sd_optimizing_your_app_for_todays_internet.mp4",
      "duration": 2291
    },
    "related": {
      "activities": ["wwdc2018-715", "wwdc2018-7130", "wwdc2018-7150"],
      "resources": [147, 145, 144, 137, 135]
    }
  }, {
    "id": "wwdc2018-403",
    "staticContentId": 2238,
    "eventContentId": 403,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/403",
    "description": "Hear about exciting improvements to code coverage, including how you can build your own automation on top of Xcode’s coverage reports. Learn how to dramatically speed up the execution of your tests by leveraging distributed parallel testing, new in Xcode 10.",
    "title": "What's New in Testing",
    "originalPublishingDate": "2018-06-06T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["cloning", "randomization", "simulator", "xccovarchive", "xccovreport", "xcodebuild"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/403r3eh2u29dfeml/403/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/403r3eh2u29dfeml/403/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/403r3eh2u29dfeml/403/403_whats_new_in_testing.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/403r3eh2u29dfeml/403/403_hd_whats_new_in_testing.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/403r3eh2u29dfeml/403/403_sd_whats_new_in_testing.mp4",
      "duration": 1855
    },
    "related": {
      "activities": ["wwdc2019-413", "wwdc2018-407", "wwdc2018-417", "wwdc2018-4100", "wwdc2018-4200", "wwdc2017-409", "wwdc2016-409"]
    }
  }, {
    "id": "wwdc2018-711",
    "staticContentId": 2202,
    "eventContentId": 711,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/711",
    "description": "Grouping the notifications your app sends helps people get more information at a glance and manage multiple notifications at once. Learn how to implement Grouped Notifications in your app.",
    "title": "Using Grouped Notifications",
    "originalPublishingDate": "2018-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/711c5be5c6ma8yy/711/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/711c5be5c6ma8yy/711/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/711c5be5c6ma8yy/711/711_using_grouped_notifications.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/711c5be5c6ma8yy/711/711_hd_using_grouped_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/711c5be5c6ma8yy/711/711_sd_using_grouped_notifications.mp4",
      "duration": 1917
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-206", "wwdc2018-710", "wwdc2018-806", "wwdc2018-2380", "wwdc2018-7090", "wwdc2018-7120"],
      "resources": [237, 193, 16, 4]
    }
  }, {
    "id": "wwdc2018-408",
    "staticContentId": 2161,
    "eventContentId": 408,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/408",
    "description": "Build your apps faster in Xcode 10. Learn how to structure your projects and tweak your code to take full advantage of all processor cores. Whether you've made a few small code changes you want to give a try, or you're building your full app for release, these techniques will cut the time it takes to build a running app.",
    "title": "Building Faster in Xcode",
    "originalPublishingDate": "2018-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["anyobject", "batch", "bridging header", "categories", "codegen", "cycle", "dependencies", "dependency", "explicit", "file list", "implicit", "incremental", "inference", "objc", "objectivec", "objective-c", "parallelized", "private", "serialized", "swift", "whole module optimization", "wmo", "xcfilelist"],
    "topicIds": [32, 35, 36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/408bhgyeffq8acmv/408/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/408bhgyeffq8acmv/408/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/408bhgyeffq8acmv/408/408_building_faster_in_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/408bhgyeffq8acmv/408/408_hd_building_faster_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/408bhgyeffq8acmv/408/408_sd_building_faster_in_xcode.mp4",
      "duration": 2388
    },
    "related": {
      "activities": ["wwdc2018-401", "wwdc2018-415", "wwdc2018-4150", "wwdc2018-4240"]
    }
  }, {
    "id": "wwdc2018-204",
    "staticContentId": 2114,
    "eventContentId": 204,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/204",
    "description": "Passwords and security codes are a modern necessity required for security and privacy. iOS 12 eases the tedious aspects of account setup and sign-in by automatically suggesting and using strong, unique passwords — even from within apps —  and by bringing one-time codes to the QuickType bar so users can fill them with one tap. Learn how to optimize your app to ensure that password, security code, and other AutoFill features provide a seamless way for your users to be more secure.",
    "title": "Automatic Strong Passwords and Security Code AutoFill",
    "originalPublishingDate": "2018-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/204jfuuku83cex/204/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/204jfuuku83cex/204/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/204jfuuku83cex/204/204_automatic_strong_passwords_and_security_code_autofill.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/204jfuuku83cex/204/204_hd_automatic_strong_passwords_and_security_code_autofill.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/204jfuuku83cex/204/204_sd_automatic_strong_passwords_and_security_code_autofill.mp4",
      "duration": 2202
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-208", "wwdc2018-234", "wwdc2018-302", "wwdc2018-721", "wwdc2018-2040", "wwdc2018-2230", "wwdc2018-2470", "wwdc2017-206"],
      "resources": [412]
    }
  }, {
    "id": "wwdc2018-603",
    "staticContentId": 2120,
    "eventContentId": 603,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/603",
    "description": "With iOS 12, ARKit includes a built-in viewer for displaying and sharing high-quality 3D content using Pixar's usdz file format. Get introduced to the capabilities of AR Quick Look and see how to easily integrate AR into your app. Learn best practices for preparing 3D models for AR, and see how to deliver usdz content for viewing across Safari, Mail, Messages, and other built-in apps.",
    "title": "Integrating Apps and Content with AR Quick Look",
    "originalPublishingDate": "2018-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["arkit", "chatterbot", "gramophone", "quicklook", "quick look", "usd", "usdz"],
    "topicIds": [23, 25, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/603augiuv41xoowslk8/603/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/603augiuv41xoowslk8/603/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/603augiuv41xoowslk8/603/603_integrating_apps_and_content_with_ar_quick_look.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/603augiuv41xoowslk8/603/603_hd_integrating_apps_and_content_with_ar_quick_look.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/603augiuv41xoowslk8/603/603_sd_integrating_apps_and_content_with_ar_quick_look.mp4",
      "duration": 2514
    },
    "related": {
      "activities": ["wwdc2019-612", "wwdc2018-106", "wwdc2018-234", "wwdc2018-602", "wwdc2018-605", "wwdc2018-610", "wwdc2018-805", "wwdc2018-6030", "wwdc2018-6090", "wwdc2018-6160"],
      "resources": [346]
    }
  }, {
    "id": "wwdc2018-604",
    "staticContentId": 2176,
    "eventContentId": 604,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/604",
    "description": "Metal is the foundation for accelerated graphics and compute on Apple platforms, enabling your apps and games to tap into the incredible power of the GPU. Get introduced to essential Metal capabilities and understand the recommended approach for transitioning OpenGL-based apps onto the Metal API.",
    "title": "Metal for OpenGL Developers",
    "originalPublishingDate": "2018-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/604lh97z18yv96g6nhf/604/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/604lh97z18yv96g6nhf/604/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/604lh97z18yv96g6nhf/604/604_metal_for_opengl_developers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/604lh97z18yv96g6nhf/604/604_hd_metal_for_opengl_developers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/604lh97z18yv96g6nhf/604/604_sd_metal_for_opengl_developers.mp4",
      "duration": 3352
    },
    "related": {
      "activities": ["wwdc2018-209", "wwdc2018-607", "wwdc2018-608", "wwdc2018-612", "wwdc2018-6070", "wwdc2017-607", "wwdc2016-602", "wwdc2016-603"],
      "resources": [355, 38]
    }
  }, {
    "id": "wwdc2018-706",
    "staticContentId": 2098,
    "eventContentId": 706,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/706",
    "description": "HealthKit provides a consolidated repository for a variety of data including health records containing information such as lab results, immunizations, and medications downloaded directly from institutions. Discover new health records classes and types created to provide easy access to high-level record types without preventing access to the underlying raw data.  Learn new authorization techniques that allows your app to access health record data for analysis and presentation in a manner that respects your customer's privacy.",
    "title": "Accessing Health Records with HealthKit",
    "originalPublishingDate": "2018-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["fitness", "health", "healthkit", "health records", "workouts"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/706pjh63zj75v07w6/706/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/706pjh63zj75v07w6/706/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/706pjh63zj75v07w6/706/706_accessing_health_records_with_healthkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/706pjh63zj75v07w6/706/706_hd_accessing_health_records_with_healthkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/706pjh63zj75v07w6/706/706_sd_accessing_health_records_with_healthkit.mp4",
      "duration": 2281
    },
    "related": {
      "activities": ["wwdc2018-205", "wwdc2018-707", "wwdc2018-718", "wwdc2018-2100", "wwdc2018-2210", "wwdc2018-2500", "wwdc2016-209", "wwdc2014-203"],
      "resources": [422, 413, 406, 405]
    }
  }, {
    "id": "wwdc2018-201",
    "staticContentId": 2105,
    "eventContentId": 201,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/201",
    "description": "Common assumptions can break when your app is used by a global audience. Learn about the many aspects of creating apps for different regions and languages. Understand how to use fonts and typography, layout techniques, and support text input so your app shines in all languages.",
    "title": "Creating Apps for a Global Audience",
    "originalPublishingDate": "2018-06-05T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "i18n", "international", "internationalization", "localization", "world"],
    "topicIds": [42, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/201bam0z9pcq7bs5km/201/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/201bam0z9pcq7bs5km/201/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/201bam0z9pcq7bs5km/201/201_creating_apps_for_a_global_audience.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/201bam0z9pcq7bs5km/201/201_hd_creating_apps_for_a_global_audience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/201bam0z9pcq7bs5km/201/201_sd_creating_apps_for_a_global_audience.mp4",
      "duration": 2307
    },
    "related": {
      "activities": ["wwdc2018-220", "wwdc2018-221", "wwdc2018-404", "wwdc2018-2010", "wwdc2018-2170", "wwdc2018-2260", "wwdc2018-2330", "wwdc2017-218", "wwdc2017-245", "wwdc2017-801", "wwdc2017-805", "wwdc2017-806", "wwdc2017-815", "wwdc2016-201", "wwdc2016-232", "wwdc2016-236", "wwdc2016-803"]
    }
  }, {
    "id": "wwdc2018-405",
    "staticContentId": 2254,
    "eventContentId": 405,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/405",
    "description": "Learn how to use signposts and logging to measure performance.  Understand how the Points of Interest instrument can be used to examine logged data. Get an introduction into creating and using custom instruments.",
    "title": "Measuring Performance Using Logging",
    "originalPublishingDate": "2018-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["instrument", "instruments", "os_signpost", "os_signposts", "signpost", "signposts"],
    "topicIds": [33, 37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/405bjty1j94taqv8ii/405/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/405bjty1j94taqv8ii/405/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/405bjty1j94taqv8ii/405/405_measuring_performance_using_logging.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/405bjty1j94taqv8ii/405/405_hd_measuring_performance_using_logging.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/405bjty1j94taqv8ii/405/405_sd_measuring_performance_using_logging.mp4",
      "duration": 2125
    },
    "related": {
      "activities": ["wwdc2018-407", "wwdc2018-410", "wwdc2018-2080", "wwdc2018-2390", "wwdc2018-4110", "wwdc2018-4170", "wwdc2016-721"],
      "resources": [424]
    }
  }, {
    "id": "wwdc2018-227",
    "staticContentId": 2192,
    "eventContentId": 227,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/227",
    "description": "Learn how to use assets to bring visually compelling and data efficient artwork to your apps, leveraging new features in iOS 12. Gain insight into organizing, optimizing, and authoring artwork assets by using asset catalogs to their fullest. Learn techniques to better streamline workflows between designers and developers. Ensure better app delivery and a smaller footprint, maximizing target audiences of your app with full artwork asset fidelity.",
    "title": "Optimizing App Assets",
    "originalPublishingDate": "2018-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["1x", "2x", "3x", "app thinning", "asset catalog", "asset catalogue", "catalog", "catalogs", "catalogue", "compression", "heif", "heiff", "thinning"],
    "topicIds": [34, 35, 38, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/227r61xi77ucgjz6zm/227/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/227r61xi77ucgjz6zm/227/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/227r61xi77ucgjz6zm/227/227_optimizing_app_assets.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/227r61xi77ucgjz6zm/227/227_hd_optimizing_app_assets.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/227r61xi77ucgjz6zm/227/227_sd_optimizing_app_assets.mp4",
      "duration": 2805
    },
    "related": {
      "activities": ["wwdc2018-219", "wwdc2017-503", "wwdc2017-511", "wwdc2017-513", "wwdc2016-712"],
      "resources": [430]
    }
  }, {
    "id": "wwdc2018-230",
    "staticContentId": 2183,
    "eventContentId": 230,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/230",
    "description": "Go beyond the basics and create apps with an exceptional accessibility experience. Learn how to design elements that appear in your app for maximum clarity and accessibility. Discover how to enhance the way users interact with your app even when presenting custom views, or drawing complex UI.",
    "title": "Deliver an Exceptional Accessibility Experience",
    "originalPublishingDate": "2018-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["assistive", "blind", "color", "contrast", "deaf", "disability", "physical", "vision", "voiceover"],
    "topicIds": [8],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/230bqynnqagiq4p8/230/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/230bqynnqagiq4p8/230/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/230bqynnqagiq4p8/230/230_deliver_an_exceptional_accessibility_experience.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/230bqynnqagiq4p8/230/230_hd_deliver_an_exceptional_accessibility_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/230bqynnqagiq4p8/230/230_sd_deliver_an_exceptional_accessibility_experience.mp4",
      "duration": 2430
    },
    "related": {
      "activities": ["wwdc2019-238", "wwdc2018-108", "wwdc2018-226", "wwdc2018-2360", "wwdc2018-2410", "wwdc2017-806"],
      "resources": [391]
    }
  }, {
    "id": "wwdc2018-609",
    "staticContentId": 2123,
    "eventContentId": 609,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/609",
    "description": "Metal Performance Shaders (MPS) includes a highly tuned library of machine learning primitives leveraging the tremendous power of the GPU. With iOS 12 and macOS Mojave, MPS adds capabilities to accelerate the computationally intensive task of training a neural network. Learn performance optimizations for inference, and understand the training process for both convolutional and recurrent neural networks (CNNs and RNNs).",
    "title": "Metal for Accelerating Machine Learning",
    "originalPublishingDate": "2018-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [35, 27, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/609yyw42hw6wq6mte8p/609/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/609yyw42hw6wq6mte8p/609/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/609yyw42hw6wq6mte8p/609/609_metal_for_accelerating_machine_learning.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/609yyw42hw6wq6mte8p/609/609_hd_metal_for_accelerating_machine_learning.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/609yyw42hw6wq6mte8p/609/609_sd_metal_for_accelerating_machine_learning.mp4",
      "duration": 2306
    },
    "related": {
      "activities": ["wwdc2019-614", "wwdc2018-6060", "wwdc2018-6170"],
      "resources": [56, 38]
    }
  }, {
    "id": "wwdc2018-608",
    "staticContentId": 2252,
    "eventContentId": 608,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/608",
    "description": "Metal provides powerful tools for analyzing shader behavior and optimizing performance. Dive into troubleshooting vertex-stage problems with new geometry viewing capabilities in Xcode. Use the shader debugger to step through vertex, fragment, and compute shader execution line-by-line. Get details about analyzing GPU workload, and check out shader profiler enhancements for A11 Bionic.",
    "title": "Metal Shader Debugging and Profiling",
    "originalPublishingDate": "2018-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 35, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/608_metal_shader_debugging_and_profiling.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/subtitles/eng/608_sd_metal_shader_debugging_and_profiling.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/608_hd_metal_shader_debugging_and_profiling.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/608u6qpg6mh0uq/608/608_sd_metal_shader_debugging_and_profiling.mp4",
      "duration": 2293
    },
    "related": {
      "activities": ["wwdc2018-604", "wwdc2018-612", "wwdc2018-6190"],
      "resources": [358, 357, 356]
    }
  }, {
    "id": "wwdc2018-406",
    "staticContentId": 2235,
    "eventContentId": 406,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/406",
    "description": "Generics are one of the most powerful features of Swift, enabling you to write flexible, reusable components while maintaining static type information. Learn about the design of Swift's generics, including how to generalize protocols, leverage protocol inheritance to express the varying capabilities of related types, build composable generic components with conditional conformances, and reason about the interaction between class inheritance and generics. This expanded version of the WWDC 2018 session includes a brand-new discussion of recursive constraints.",
    "title": "Swift Generics (Expanded)",
    "originalPublishingDate": "2018-10-21T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["algorithms", "buffer", "classes", "codable", "collections", "conformance", "constraints", "countablerange", "customization points", "decodable", "encodable", "extensions", "mutation", "parametric", "polymorphism", "protocol", "random", "range", "shuffled", "subtype"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/406z8wpyv2jdenet9rc/406/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/406z8wpyv2jdenet9rc/406/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/406z8wpyv2jdenet9rc/406/406_swift_generics.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/406z8wpyv2jdenet9rc/406/406_hd_swift_generics.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/406z8wpyv2jdenet9rc/406/406_sd_swift_generics.mp4",
      "duration": 3415
    },
    "related": {
      "activities": ["wwdc2018-223", "wwdc2018-229", "wwdc2018-401", "wwdc2018-4130", "wwdc2018-4230"]
    }
  }, {
    "id": "wwdc2018-101",
    "staticContentId": 2200,
    "eventContentId": 101,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/101",
    "description": "WWDC 2018 Keynote",
    "title": "WWDC 2018 Keynote",
    "originalPublishingDate": "2018-06-04T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://p-events-delivery.akamaized.net/18oijbasfvuhbfsdvoijhbsdfvljkb6/m3u8/hls_vod_mvp.m3u8",
      "tvOShls": "https://p-events-delivery.akamaized.net/18oijbasfvuhbfsdvoijhbsdfvljkb6/m3u8/atv_vod_mvp.m3u8",
      "duration": 8181
    },
    "related": {
      "activities": ["wwdc2017-101", "wwdc2016-101", "wwdc2015-101", "wwdc2014-101", "wwdc2013-100"]
    }
  }, {
    "id": "wwdc2018-803",
    "staticContentId": 2247,
    "eventContentId": 803,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/803",
    "description": "Discover the techniques used to create the fluid gestural interface of iPhone X. Learn how to design with gestures and motion that feel intuitive and natural, making your app a delight to use.",
    "title": "Designing Fluid Interfaces",
    "originalPublishingDate": "2018-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["animation", "behavior", "design", "fluid", "gesture", "iphone x", "motion", "physics", "smooth"],
    "topicIds": [3, 4, 5, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/803lpnlacvg2jsndx/803/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/803lpnlacvg2jsndx/803/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/803lpnlacvg2jsndx/803/803_designing_fluid_interfaces.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/803lpnlacvg2jsndx/803/803_hd_designing_fluid_interfaces.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/803lpnlacvg2jsndx/803/803_sd_designing_fluid_interfaces.mp4",
      "duration": 3881
    },
    "related": {
      "resources": [389, 354, 353]
    }
  }, {
    "id": "wwdc2018-229",
    "staticContentId": 2187,
    "eventContentId": 229,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/229",
    "description": "Every app uses collections! Go beyond the basics with specific tips on how best to use indices, slices, bridging, laziness, and reference types. Gain better understanding of when to use each collection for best performance.",
    "title": "Using Collections Effectively",
    "originalPublishingDate": "2018-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["array", "bears", "bridging", "hash", "index", "obj-c", "objective-c", "swift"],
    "topicIds": [36, 67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/229aa99vrkiplc/229/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/229aa99vrkiplc/229/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/229aa99vrkiplc/229/229_using_collections_effectively.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/229aa99vrkiplc/229/229_hd_using_collections_effectively.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/229aa99vrkiplc/229/229_sd_using_collections_effectively.mp4",
      "duration": 2273
    },
    "related": {
      "activities": ["wwdc2019-215", "wwdc2018-223", "wwdc2018-406"]
    }
  }, {
    "id": "wwdc2018-810",
    "staticContentId": 2572,
    "eventContentId": 810,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/810",
    "description": "Maps are powerful tools for conveying information. Learn key cartographic principles that will help you create beautiful, useful maps so that your users can get the most out of your apps.",
    "title": "Tips for Great Maps",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["best practices", "design", "design studio", "design studio shorts", "map", "maps", "short", "shorts", "ui design"],
    "topicIds": [3, 17],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/810yhhz7j3k7d7y/810/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/810yhhz7j3k7d7y/810/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/810yhhz7j3k7d7y/810/810_tips_for_great_maps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/810yhhz7j3k7d7y/810/810_hd_tips_for_great_maps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/810yhhz7j3k7d7y/810/810_sd_tips_for_great_maps.mp4",
      "duration": 1019
    },
    "related": {
      "activities": ["wwdc2018-807", "wwdc2018-808", "wwdc2018-809", "wwdc2018-811"]
    }
  }, {
    "id": "wwdc2018-704",
    "staticContentId": 2203,
    "eventContentId": 704,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/704",
    "description": "Learn about the latest updates in StoreKit, including offering introductory pricing for subscriptions, requesting ratings and reviews, promoting your in-app purchases within the App Store, and developing in the sandbox environment. Dive deep into best practices for processing transactions and validating receipts.",
    "title": "Best Practices and What’s New with In-App Purchases",
    "originalPublishingDate": "2018-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/704n9oeu4famgn/704/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/704n9oeu4famgn/704/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/704n9oeu4famgn/704/704_best_practices_and_whats_new_with_inapp_purchases.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/704n9oeu4famgn/704/704_hd_best_practices_and_whats_new_with_inapp_purchases.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/704n9oeu4famgn/704/704_sd_best_practices_and_whats_new_with_inapp_purchases.mp4",
      "duration": 2495
    },
    "related": {
      "activities": ["wwdc2018-301", "wwdc2018-705", "wwdc2018-3210", "wwdc2018-3290", "wwdc2018-7030", "wwdc2018-7110"],
      "resources": [105, 53]
    }
  }, {
    "id": "wwdc2018-234",
    "staticContentId": 2113,
    "eventContentId": 234,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/234",
    "description": "Safari and WebKit are continually evolving with new features, APIs, and cutting edge web standards. Learn about this year’s biggest feature highlights, designed to help you create richer experiences with better performance and security — whether you are developing content for a browser or developing an app with embedded web content.",
    "title": "What’s New in Safari and WebKit",
    "originalPublishingDate": "2018-06-08T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/234iphi7iwpe8ew16w/234/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/234iphi7iwpe8ew16w/234/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/234iphi7iwpe8ew16w/234/234_whats_new_in_safari_and_webkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/234iphi7iwpe8ew16w/234/234_hd_whats_new_in_safari_and_webkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/234iphi7iwpe8ew16w/234/234_sd_whats_new_in_safari_and_webkit.mp4",
      "duration": 2725
    },
    "related": {
      "activities": ["wwdc2018-204", "wwdc2018-207", "wwdc2018-239", "wwdc2018-602", "wwdc2018-603", "wwdc2018-721", "wwdc2018-2040", "wwdc2018-2230", "wwdc2018-2470"],
      "resources": [436, 435, 434, 433, 432, 431, 426, 412, 338, 245]
    }
  }, {
    "id": "wwdc2018-418",
    "staticContentId": 2237,
    "eventContentId": 418,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/418",
    "description": "Xcode integrates with GitHub, Bitbucket, and GitLab to help you manage your source code, back up your files, and collaborate with others. Find out how to easily see the changes in your project right in the source editor, and learn how to use Xcode for common source control workflows with Git. See how conflicts occur, how to resolve them, and how to avoid them before they even happen.",
    "title": "Source Control Workflows in Xcode",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["scm"],
    "topicIds": [38],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/418ernlc0c54xrb8sn/418/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/418ernlc0c54xrb8sn/418/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/418ernlc0c54xrb8sn/418/418_source_control_workflows_in_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/418ernlc0c54xrb8sn/418/418_hd_source_control_workflows_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/418ernlc0c54xrb8sn/418/418_sd_source_control_workflows_in_xcode.mp4",
      "duration": 1290
    },
    "related": {
      "activities": ["wwdc2019-404", "wwdc2018-413", "wwdc2017-405"]
    }
  }, {
    "id": "wwdc2018-802",
    "staticContentId": 2136,
    "eventContentId": 802,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/802",
    "description": "Great app experiences leap off the screen. They are dynamic, immersive, personal, and, above all else, the result of a strong and clear intent. Learn key techniques for being intentional with your design by choosing appropriate metaphors, making extreme choices, and making every interaction feel more authentic and natural.",
    "title": "Intentional Design",
    "originalPublishingDate": "2018-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["behavior", "dad jokes", "design", "editorial", "experience", "interaction", "ui", "ux", "visual"],
    "topicIds": [3, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/802shgxe9sj19r/802/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/802shgxe9sj19r/802/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/802shgxe9sj19r/802/802_intentional_design.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/802shgxe9sj19r/802/802_hd_intentional_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/802shgxe9sj19r/802/802_sd_intentional_design.mp4",
      "duration": 2404
    }
  }, {
    "id": "wwdc2018-805",
    "staticContentId": 2135,
    "eventContentId": 805,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/805",
    "description": "Engaging AR experiences are easy to start and navigate, persuasively realistic, and highly immersive. Learn best practices for successfully bringing people into an AR experience, teaching them about how to interact and engage with virtual content, and making your AR content look beautiful and grounded in the real world.",
    "title": "Creating Great AR Experiences",
    "originalPublishingDate": "2018-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["ar", "environment", "lighting", "maps", "maya", "mesh", "modeling", "normals", "polygon", "reflection", "reflectivity", "render", "shader", "shading", "unity", "unreal"],
    "topicIds": [23, 3, 25, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/805llmiw0zwkox4zhuc/805/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/805llmiw0zwkox4zhuc/805/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/805llmiw0zwkox4zhuc/805/805_creating_great_ar_experiences.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/805llmiw0zwkox4zhuc/805/805_hd_creating_great_ar_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/805llmiw0zwkox4zhuc/805/805_sd_creating_great_ar_experiences.mp4",
      "duration": 3757
    },
    "related": {
      "activities": ["wwdc2018-602", "wwdc2018-603"],
      "resources": [393, 388, 275, 25]
    }
  }, {
    "id": "wwdc2018-705",
    "staticContentId": 2206,
    "eventContentId": 705,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/705",
    "description": "Learn the best practices for architecting your subscription infrastructure using StoreKit and server-side logic. Find out about simple engineering techniques to keep your subscribers longer, and how to utilize new tools and APIs to give your subscribers the best experience.",
    "title": "Engineering Subscriptions",
    "originalPublishingDate": "2018-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/705_engineering_subscriptions.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/705_hd_engineering_subscriptions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/705_sd_engineering_subscriptions.mp4",
      "duration": 2675
    },
    "related": {
      "activities": ["wwdc2018-301", "wwdc2018-704", "wwdc2018-3210", "wwdc2018-3290", "wwdc2018-7030", "wwdc2018-7110"],
      "resources": [105, 53]
    }
  }, {
    "id": "wwdc2018-701",
    "staticContentId": 2198,
    "eventContentId": 701,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/701",
    "description": "Learn how to use sophisticated Signal and Image Processing techniques to bring higher performance to your apps while lowering battery consumption.  See compelling use cases for the Accelerate framework with interactive demos. Explore using simd—a valuable addition that effortlessly brings vector programming to your apps.",
    "title": "Using Accelerate and simd",
    "originalPublishingDate": "2018-06-05T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "blas", "computation", "dft", "fft", "image processing", "lapack", "linear algebra", "neural network", "noise", "numerics", "performance", "quaternions", "real-time video", "simd", "slerp", "sparse solver", "spline", "vdsp", "vector", "vforce", "vimage"],
    "topicIds": [67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/701bd0jri1hppm1q4/701/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/701bd0jri1hppm1q4/701/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/701bd0jri1hppm1q4/701/701_using_accelerate_and_simd.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/701bd0jri1hppm1q4/701/701_hd_using_accelerate_and_simd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/701bd0jri1hppm1q4/701/701_sd_using_accelerate_and_simd.mp4",
      "duration": 2208
    },
    "related": {
      "activities": ["wwdc2019-718", "wwdc2018-219", "wwdc2018-7080", "wwdc2017-711", "wwdc2016-715", "wwdc2015-712", "wwdc2014-703"],
      "resources": [373, 372, 371, 370, 369, 368, 367, 366]
    }
  }, {
    "id": "wwdc2018-206",
    "staticContentId": 2126,
    "eventContentId": 206,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/206",
    "description": "watchOS 5 makes creating great experiences on Apple Watch easier than ever before. Learn about robust capabilities to create rich and interactive notifications, a new background mode and controls for audio playback, shortcuts that bring your apps to the Siri watch face, and more. See what’s new in watchOS and discover how to expand your app’s presence on the wrist.",
    "title": "What's New in watchOS",
    "originalPublishingDate": "2018-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "audio", "background", "clkcomplication", "clockkit", "notifications", "watch", "watchkit", "wkinterface"],
    "topicIds": [28, 13, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/206jn5qnngdzy9/206/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/206jn5qnngdzy9/206/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/206jn5qnngdzy9/206/206_whats_new_in_watchos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/206jn5qnngdzy9/206/206_hd_whats_new_in_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/206jn5qnngdzy9/206/206_sd_whats_new_in_watchos.mp4",
      "duration": 1765
    },
    "related": {
      "activities": ["wwdc2018-217", "wwdc2018-504", "wwdc2018-707", "wwdc2018-710", "wwdc2018-711", "wwdc2018-806", "wwdc2018-2030", "wwdc2018-2250", "wwdc2018-2310", "wwdc2018-2380", "tech-talks-203", "tech-talks-208", "wwdc2017-216", "wwdc2017-221", "wwdc2017-808"],
      "resources": [138, 20, 14, 9]
    }
  }, {
    "id": "wwdc2018-811",
    "staticContentId": 2573,
    "eventContentId": 811,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/811",
    "description": "Ideas can live or die by their presentation. Learn indispensable and proven techniques for presenting your design work to better communicate your objectives and receive helpful, valuable and constructive feedback.",
    "title": "Presenting Design Work",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["design", "design short", "design studio shorts", "presentation", "presentations", "short", "shorts"],
    "topicIds": [6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/811tcr2wk13t3uq/811/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/811tcr2wk13t3uq/811/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/811tcr2wk13t3uq/811/811_presenting_design_work.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/811tcr2wk13t3uq/811/811_hd_presenting_design_work.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/811tcr2wk13t3uq/811/811_sd_presenting_design_work.mp4",
      "duration": 921
    },
    "related": {
      "activities": ["wwdc2018-807", "wwdc2018-808", "wwdc2018-809", "wwdc2018-810"]
    }
  }, {
    "id": "wwdc2018-712",
    "staticContentId": 2186,
    "eventContentId": 712,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/712",
    "description": "Turi Create is an open source toolset for creating Core ML models, for tasks such as image classification, object detection, style transfers, recommendations, and more. Learn how you can use Turi Create to build models for your apps.",
    "title": "A Guide to Turi Create",
    "originalPublishingDate": "2018-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/712rgcvlbuehdk/712/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/712rgcvlbuehdk/712/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/712rgcvlbuehdk/712/712_a_guide_to_turi_create.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/712rgcvlbuehdk/712/712_hd_a_guide_to_turi_create.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/712rgcvlbuehdk/712/712_sd_a_guide_to_turi_create.mp4",
      "duration": 2177
    },
    "related": {
      "activities": ["wwdc2019-420", "wwdc2018-110", "wwdc2018-703", "wwdc2018-708", "wwdc2018-709", "wwdc2018-717", "wwdc2018-719", "wwdc2018-7100", "wwdc2018-7180"],
      "resources": [27]
    }
  }, {
    "id": "wwdc2018-102",
    "staticContentId": 2199,
    "eventContentId": 102,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/102",
    "description": "2018 Platforms State of the Union",
    "title": "Platforms State of the Union",
    "originalPublishingDate": "2018-06-04T14:30:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/102ly3xmvz1ssb1ill/102/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/102ly3xmvz1ssb1ill/102/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/102ly3xmvz1ssb1ill/102/102_hd_platforms_state_of_the_union.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/102ly3xmvz1ssb1ill/102/102_sd_platforms_state_of_the_union.mp4",
      "duration": 5654
    },
    "related": {
      "activities": ["wwdc2017-102", "wwdc2016-102", "wwdc2015-102", "wwdc2014-102", "wwdc2013-101"]
    }
  }, {
    "id": "wwdc2018-702",
    "staticContentId": 2085,
    "eventContentId": 702,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/702",
    "description": "Apple is on a mission to advance the state of Mac security, and we want your apps to be there with us. Learn about new protections for user data, new capabilities with Developer ID, and how you can best secure your apps.",
    "title": "Your Apps and the Future of macOS Security",
    "originalPublishingDate": "2018-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/702zi9t7twhu9310kz5/702/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/702zi9t7twhu9310kz5/702/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/702zi9t7twhu9310kz5/702/702_your_apps_and_the_future_of_macos_security.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/702zi9t7twhu9310kz5/702/702_hd_your_apps_and_the_future_of_macos_security.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/702zi9t7twhu9310kz5/702/702_sd_your_apps_and_the_future_of_macos_security.mp4",
      "duration": 2418
    },
    "related": {
      "activities": ["wwdc2018-718", "wwdc2018-7020", "wwdc2018-7050"],
      "resources": [387]
    }
  }, {
    "id": "wwdc2018-506",
    "staticContentId": 2174,
    "eventContentId": 506,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/506",
    "description": "MusicKit has enabled the creation of new, compelling, and engaging Apple Music powered app experiences. With the introduction of MusicKit on the web, as a developer, you can now bring Apple Music powered experiences to the web. Learn how to use declarative markup or javascript to enable Apple Music on your website.",
    "title": "MusicKit on the Web",
    "originalPublishingDate": "2018-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["apple music", "musickit", "musickitjs"],
    "topicIds": [28, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/506dgb08enfpgn2c58s/506/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/506dgb08enfpgn2c58s/506/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/506dgb08enfpgn2c58s/506/506_musickit_on_the_web.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/506dgb08enfpgn2c58s/506/506_hd_musickit_on_the_web.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/506dgb08enfpgn2c58s/506/506_sd_musickit_on_the_web.mp4",
      "duration": 1497
    },
    "related": {
      "activities": ["wwdc2018-5150", "wwdc2017-502"],
      "resources": [428]
    }
  }, {
    "id": "wwdc2018-239",
    "staticContentId": 2233,
    "eventContentId": 239,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/239",
    "description": "watchOS 5 brings web content to Apple Watch by rendering rich HTML in Messages and Mail. Gain insights into how watchOS maintains compatibility with existing web content, and find out what you can do to optimize your web content for Apple Watch.",
    "title": "Designing Web Content for watchOS",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["watchOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/239oqke16leldnu3010/239/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/239oqke16leldnu3010/239/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/239oqke16leldnu3010/239/239_designing_web_content_for_watchos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/239oqke16leldnu3010/239/239_hd_designing_web_content_for_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/239oqke16leldnu3010/239/239_sd_designing_web_content_for_watchos.mp4",
      "duration": 480
    },
    "related": {
      "activities": ["wwdc2018-234", "wwdc2018-2040", "wwdc2018-2230", "wwdc2018-2470", "tech-talks-205"]
    }
  }, {
    "id": "wwdc2018-207",
    "staticContentId": 2266,
    "eventContentId": 207,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/207",
    "description": "Whether you use web content in your app via an embedded WebKit view, deliver pure web apps, or create web content to be embedded by others, it's important to ensure that you are using the most current web security standards. Learn techniques like such as special cookie attributes and HTTP response headers designed to secure your web content against the latest threats that include cross-site scripting, cross-site request forgeries, and speculative execution attacks, commonly known as Spectre.",
    "title": "Strategies for Securing Web Content",
    "originalPublishingDate": "2018-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/207m5757sq9wfhvby/207/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/207m5757sq9wfhvby/207/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/207m5757sq9wfhvby/207/207_strategies_for_securing_web_content.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/207m5757sq9wfhvby/207/207_hd_strategies_for_securing_web_content.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/207m5757sq9wfhvby/207/207_sd_strategies_for_securing_web_content.mp4",
      "duration": 2669
    },
    "related": {
      "activities": ["wwdc2018-234", "wwdc2018-718", "wwdc2018-2040", "wwdc2018-2230", "wwdc2018-2470"]
    }
  }, {
    "id": "wwdc2018-708",
    "staticContentId": 2080,
    "eventContentId": 708,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/708",
    "description": "Introduced just one year ago, Core ML has already revolutionized the way apps can benefit from machine learning, by enabling fast and private on device machine learning features for your app. Find out how new Core ML features let you reduce the size of models, make them more flexible, and dramatically improve performance.",
    "title": "What’s New in Core ML, Part 1",
    "originalPublishingDate": "2018-06-06T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/708ax570wjtpxze/708/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/708ax570wjtpxze/708/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/708ax570wjtpxze/708/708_whats_new_in_core_ml_part_1.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/708ax570wjtpxze/708/708_hd_whats_new_in_core_ml_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/708ax570wjtpxze/708/708_sd_whats_new_in_core_ml_part_1.mp4",
      "duration": 2245
    },
    "related": {
      "activities": ["wwdc2018-110", "wwdc2018-703", "wwdc2018-709", "wwdc2018-712", "wwdc2018-713", "wwdc2018-717", "wwdc2018-7100", "wwdc2018-7180"],
      "resources": [200, 88, 27]
    }
  }, {
    "id": "wwdc2018-212",
    "staticContentId": 2094,
    "eventContentId": 212,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/212",
    "description": "MapKit JS brings Apple Maps to your website. See how MapKit JS provides map rendering that is optimized for various browsers and devices, and supports native gestures such as pinch-to-zoom, two-finger rotate, and more. Learn how to add annotations and overlays, and how to use JavaScript interfaces to Apple Maps services such as Search and Directions to deliver an amazing map experience on your website.",
    "title": "Introducing MapKit JS",
    "originalPublishingDate": "2018-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["location", "map", "mapkit", "maps", "web"],
    "topicIds": [17, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/212nan45edr4qp/212/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/212nan45edr4qp/212/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/212nan45edr4qp/212/212_introducing_mapkit_js.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/212nan45edr4qp/212/212_hd_introducing_mapkit_js.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/212nan45edr4qp/212/212_sd_introducing_mapkit_js.mp4",
      "duration": 3434
    },
    "related": {
      "activities": ["wwdc2018-508", "wwdc2018-2150", "wwdc2018-2490"],
      "resources": [414]
    }
  }, {
    "id": "wwdc2018-232",
    "staticContentId": 2323,
    "eventContentId": 232,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/232",
    "description": "Business Chat is a powerful way for organizations to connect with customers directly from within Messages. Whether you are a Customer Service Platform provider, a brand looking to integrate chat for customer communication, or a brand app developer looking to extend your iOS app to enhance Business Chat conversations, you'll receive concrete guidance and learn the baseline requirements necessary to ensure you are ready to go live.",
    "title": "Getting Ready for Business Chat",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/232mj2p4q92uls5n/232/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/232mj2p4q92uls5n/232/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/232mj2p4q92uls5n/232/232_getting_ready_for_business_chat.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/232mj2p4q92uls5n/232/232_hd_getting_ready_for_business_chat.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/232mj2p4q92uls5n/232/232_sd_getting_ready_for_business_chat.mp4",
      "duration": 2604
    },
    "related": {
      "activities": ["wwdc2018-2430", "tech-talks-205", "wwdc2017-234", "wwdc2017-240", "wwdc2016-204", "wwdc2016-224"],
      "resources": [419, 418, 417, 416, 415]
    }
  }, {
    "id": "wwdc2018-611",
    "staticContentId": 2122,
    "eventContentId": 611,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/611",
    "description": "On macOS, Metal 2 adds specialized support for virtual reality (VR) rendering and external GPUs. Learn about new features and optimizations to take advantage of these technologies within your Metal 2-based apps and games. Understand best practices for scheduling workloads across multiple GPUs and techniques for frame pacing while multi-threading.",
    "title": "Metal for VR",
    "originalPublishingDate": "2018-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [23, 25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/611q31k82j69jxqw/611/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/611q31k82j69jxqw/611/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/611q31k82j69jxqw/611/611_metal_for_vr.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/611q31k82j69jxqw/611/611_hd_metal_for_vr.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/611q31k82j69jxqw/611/611_sd_metal_for_vr.mp4",
      "duration": 2076
    },
    "related": {
      "activities": ["wwdc2018-612", "wwdc2018-6060", "wwdc2018-6180", "wwdc2017-603"],
      "resources": [38]
    }
  }, {
    "id": "wwdc2018-501",
    "staticContentId": 2078,
    "eventContentId": 501,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/501",
    "description": "Podcasts are created and enjoyed by millions of people around the world. With the addition of Podcast Analytics, podcasters can gather actionable and insightful intelligence into how their show is consumed, while respecting the privacy of their listeners. Learn how to interpret and use these new analytics to improve your show.",
    "title": "Introducing Podcast Analytics",
    "originalPublishingDate": "2018-06-05T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["analytics", "audience", "audio", "data", "podcast", "podcaster", "podcasting", "podcasts"],
    "topicIds": [28, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/501rzej45eysiycpu/501/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/501rzej45eysiycpu/501/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/501rzej45eysiycpu/501/501_introducing_podcast_analytics.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/501rzej45eysiycpu/501/501_hd_introducing_podcast_analytics.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/501rzej45eysiycpu/501/501_sd_introducing_podcast_analytics.mp4",
      "duration": 2109
    },
    "related": {
      "activities": ["wwdc2018-5010", "wwdc2017-512"],
      "resources": [442, 238]
    }
  }, {
    "id": "wwdc2018-228",
    "staticContentId": 2255,
    "eventContentId": 228,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/228",
    "description": "People expect long battery life on their mobile devices, and apps play a vital role in achieving that experience. Understand how app behavior affects battery consumption, and learn strategies to conserve energy while providing the best experience for your app. Find out how Xcode Energy Reports can help you tune your app to use the least amount of power possible.",
    "title": "What’s New in Energy Debugging",
    "originalPublishingDate": "2018-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/228cp3feot1iav3gy4x/228/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/228cp3feot1iav3gy4x/228/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/228cp3feot1iav3gy4x/228/228_whats_new_in_energy_debugging.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/228cp3feot1iav3gy4x/228/228_hd_whats_new_in_energy_debugging.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/228cp3feot1iav3gy4x/228/228_sd_whats_new_in_energy_debugging.mp4",
      "duration": 3052
    },
    "related": {
      "activities": ["wwdc2018-2080", "wwdc2018-2390"]
    }
  }, {
    "id": "wwdc2018-606",
    "staticContentId": 2303,
    "eventContentId": 606,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/606",
    "description": "Metal Performance Shaders (MPS) harnesses the massive parallelism of the GPU to dramatically accelerate calculations at the heart of modern ray tracing and ray casting techniques. See how ray tracing can provide greater realism in 3D scenes through improved shading, soft shadows, and global illumination. Understand how MPS accelerates ray-triangle intersections while enabling dynamic scene updates, and learn how to extend your app across multiple GPUs for even greater performance.",
    "title": "Metal for Ray Tracing Acceleration",
    "originalPublishingDate": "2018-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [23, 25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/606id8hzoex3kf/606/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/606id8hzoex3kf/606/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/606id8hzoex3kf/606/606_metal_for_ray_tracing_acceleration.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/606id8hzoex3kf/606/606_hd_metal_for_ray_tracing_acceleration.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/606id8hzoex3kf/606/606_sd_metal_for_ray_tracing_acceleration.mp4",
      "duration": 2236
    },
    "related": {
      "activities": ["wwdc2018-6060", "wwdc2018-6120"],
      "resources": [365]
    }
  }, {
    "id": "wwdc2018-504",
    "staticContentId": 2127,
    "eventContentId": 504,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/504",
    "description": "Apps in watchOS 5 have control over audio playback like never before.  With a full-fledged background mode for local audio playback using AVFoundation, people can listen to content on the go right from Apple Watch. Learn how to use the new volume control and how to respond to MediaRemote commands. Dive into best practices for getting audio onto Apple Watch with URLSession and update progress when using WatchConnectivity to transfer files from iPhone. Explore how to control playback on iPhone from your app with the new Now Playing view.",
    "title": "Creating Audio Apps for watchOS",
    "originalPublishingDate": "2018-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "audio", "background", "frontmost", "urlsession", "watch", "watchconnectivity", "watchkit", "wkinterface"],
    "topicIds": [28, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/504uv2gj8r9250n/504/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/504uv2gj8r9250n/504/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/504uv2gj8r9250n/504/504_creating_audio_apps_for_watchos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/504uv2gj8r9250n/504/504_hd_creating_audio_apps_for_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/504uv2gj8r9250n/504/504_sd_creating_audio_apps_for_watchos.mp4",
      "duration": 1929
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-2030", "wwdc2018-2250", "wwdc2018-2310", "wwdc2018-2380", "wwdc2018-5030", "wwdc2018-5070", "wwdc2018-5100", "wwdc2018-5110", "tech-talks-203", "wwdc2017-216", "wwdc2017-808"],
      "resources": [54, 14, 9]
    }
  }, {
    "id": "wwdc2018-210",
    "staticContentId": 2195,
    "eventContentId": 210,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/210",
    "description": "Hear from the Apple design team about the principles and concepts that anchor Dark Mode. Learn the basics of enhancing your app with this new appearance, and add an experience that people are sure to love.",
    "title": "Introducing Dark Mode",
    "originalPublishingDate": "2018-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["aqua", "dark", "dark appearance", "dark aqua", "dark mode", "light appearance", "materials", "system colors", "vibrancy"],
    "topicIds": [34, 6, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/210y2fene7yk01/210/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/210y2fene7yk01/210/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/210y2fene7yk01/210/210_introducing_dark_mode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/210y2fene7yk01/210/210_hd_introducing_dark_mode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/210y2fene7yk01/210/210_sd_introducing_dark_mode.mp4",
      "duration": 3549
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2018-209", "wwdc2018-218", "wwdc2018-412", "wwdc2018-2130", "wwdc2018-2220", "wwdc2018-2420"],
      "resources": [11]
    }
  }, {
    "id": "wwdc2018-237",
    "staticContentId": 2227,
    "eventContentId": 237,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/237",
    "description": "Quicklook Previews are an easy way preview documents in your app. Hear about the basics as well as some advanced implementations. Learn to present a variety of types of documents from within your app without reinventing the wheel, and make sure your custom file format works great with the built-in support offered by iOS.",
    "title": "Quick Look Previews from the Ground Up",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [67, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/237fjfpla4kbr1m/237/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/237fjfpla4kbr1m/237/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/237fjfpla4kbr1m/237/237_quick_look_previews_from_the_ground_up.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/237fjfpla4kbr1m/237/237_hd_quick_look_previews_from_the_ground_up.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/237fjfpla4kbr1m/237/237_sd_quick_look_previews_from_the_ground_up.mp4",
      "duration": 2543
    },
    "related": {
      "activities": ["wwdc2019-719"],
      "resources": [403]
    }
  }, {
    "id": "wwdc2018-806",
    "staticContentId": 2225,
    "eventContentId": 806,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/806",
    "description": "Thoughtfully designed notifications are a powerful way to communicate timely information to people that they will find valuable and useful. Learn how you can design notifications people want to receive by making them beautiful, helpful, actionable, and respectful of their valuable time and attention.",
    "title": "Designing Notifications",
    "originalPublishingDate": "2018-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["alert", "banners", "do not disturb", "grouping", "ios", "lock screen", "notification", "push", "rich", "thread", "threading", "watch"],
    "topicIds": [3, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/806d34jrsj444iqhb/806/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/806d34jrsj444iqhb/806/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/806d34jrsj444iqhb/806/806_designing_notifications.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/806d34jrsj444iqhb/806/806_hd_designing_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/806d34jrsj444iqhb/806/806_sd_designing_notifications.mp4",
      "duration": 2314
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-710", "wwdc2018-711"]
    }
  }, {
    "id": "wwdc2018-221",
    "staticContentId": 2193,
    "eventContentId": 221,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/221",
    "description": "Leverage the abilities of TextKit to provide the best experience possible displaying and editing text. Get the best performance out of your app by using TextKit effectively. Learn the concepts to do more complex handling, layout and presentation.",
    "title": "TextKit Best Practices",
    "originalPublishingDate": "2018-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/221dm4k4kaqjqapkxt/221/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/221dm4k4kaqjqapkxt/221/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/221dm4k4kaqjqapkxt/221/221_textkit_best_practices.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/221dm4k4kaqjqapkxt/221/221_hd_textkit_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/221dm4k4kaqjqapkxt/221/221_sd_textkit_best_practices.mp4",
      "duration": 2275
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2018-209", "wwdc2018-2010", "wwdc2018-2130", "wwdc2018-2170", "wwdc2018-2220", "wwdc2018-2260", "wwdc2018-2290", "wwdc2018-2400", "wwdc2018-2420", "wwdc2013-210", "wwdc2013-220", "wwdc2013-223"],
      "resources": [429, 402, 401, 400, 399, 398, 397, 396, 395]
    }
  }, {
    "id": "wwdc2018-402",
    "staticContentId": 2155,
    "eventContentId": 402,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/402",
    "description": "Discover major advancements in Xcode playgrounds. Learn advanced tips and techniques, hear about new and often overlooked workflows, and rediscover the tools provided when coding in playgrounds.",
    "title": "Getting the Most out of Playgrounds in Xcode",
    "originalPublishingDate": "2018-06-05T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["convertible", "customplaygrounddisplayconvertible", "customplaygroundquicklookable", "frameworks", "helmholtz", "keyboard", "markdown", "markup", "music", "playgroundquicklook", "quicklook", "repl", "tictactoe", "tic-tac-toe"],
    "topicIds": [36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/402ta235oio1spobfi/402/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/402ta235oio1spobfi/402/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/402ta235oio1spobfi/402/402_getting_the_most_out_of_playgrounds_in_xcode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/402ta235oio1spobfi/402/402_hd_getting_the_most_out_of_playgrounds_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/402ta235oio1spobfi/402/402_sd_getting_the_most_out_of_playgrounds_in_xcode.mp4",
      "duration": 2299
    },
    "related": {
      "activities": ["wwdc2018-413", "wwdc2018-703", "wwdc2018-4090", "wwdc2018-4160"],
      "resources": [95]
    }
  }, {
    "id": "wwdc2018-220",
    "staticContentId": 2256,
    "eventContentId": 220,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/220",
    "description": "Get a glimpse inside to find out what happens when you add a constraint! Dive into the internals of Auto Layout to develop intuition for how your code affects what happens under the hood. Learn how to measure and refine your approach to Auto Layout and see how its improved performance in iOS 12 will speed up your app.",
    "title": "High Performance Auto Layout",
    "originalPublishingDate": "2018-06-06T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["auto", "instrument", "layout", "layout engine", "performance", "under the hood"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/220f49ijgby0rma/220/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/220f49ijgby0rma/220/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/220f49ijgby0rma/220/220_high_performance_auto_layout.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/220f49ijgby0rma/220/220_hd_high_performance_auto_layout.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/220f49ijgby0rma/220/220_sd_high_performance_auto_layout.mp4",
      "duration": 2455
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2018-202", "wwdc2018-203", "wwdc2018-2060", "wwdc2018-2180", "wwdc2018-2290", "wwdc2018-2400", "wwdc2018-4070", "wwdc2018-4250", "tech-talks-207", "wwdc2015-218", "wwdc2015-219"]
    }
  }, {
    "id": "wwdc2018-410",
    "staticContentId": 2165,
    "eventContentId": 410,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/410",
    "description": "Understand how custom instruments are useful and when they should be used. Get an in-depth view of the architecture of custom instruments and how to create them. Understand the attributes of a good instrument. Dive into advanced modeling and how to use the CLIPS language.",
    "title": "Creating Custom Instruments",
    "originalPublishingDate": "2018-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["instrument", "instruments", "os_signpost", "os_signposts", "signpost", "signposts"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/410naz8a8zy0rq9cg/410/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/410naz8a8zy0rq9cg/410/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/410naz8a8zy0rq9cg/410/410_creating_custom_instruments.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/410naz8a8zy0rq9cg/410/410_hd_creating_custom_instruments.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/410naz8a8zy0rq9cg/410/410_sd_creating_custom_instruments.mp4",
      "duration": 3340
    },
    "related": {
      "activities": ["wwdc2019-421", "wwdc2018-405", "wwdc2018-2080", "wwdc2018-2390", "wwdc2018-4120", "wwdc2018-4190"]
    }
  }, {
    "id": "wwdc2018-507",
    "staticContentId": 2229,
    "eventContentId": 507,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/507",
    "description": "AVContentKeySession allows for the management of FairPlay content decryption keys for HTTP Live Streaming. It offers a simplified key loading process that provides applications with control over the lifecycle of content keys, and features such as dual-expiry keys for offline movie rentals. Learn about best practices and recommended patterns for adopting this API.",
    "title": "AVContentKeySession Best Practices",
    "originalPublishingDate": "2018-06-05T17:26:27-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "topicIds": [31, 19],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/507axjplrd0yjzixfz/507/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/507axjplrd0yjzixfz/507/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/507axjplrd0yjzixfz/507/507_avcontentkeysession_best_practices.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/507axjplrd0yjzixfz/507/507_hd_avcontentkeysession_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/507axjplrd0yjzixfz/507/507_sd_avcontentkeysession_best_practices.mp4",
      "duration": 923
    },
    "related": {
      "activities": ["wwdc2018-502", "wwdc2018-5040", "wwdc2018-5090", "wwdc2017-504"]
    }
  }, {
    "id": "wwdc2018-808",
    "staticContentId": 2570,
    "eventContentId": 808,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/808",
    "description": "Designing for AR can be intimidating and discovering design flaws late in the process can be costly. See how low-tech traditional prototyping techniques can help you validate and refine your AR app and game design ideas.",
    "title": "Prototyping for AR",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["ar", "arkit", "design", "design studio", "design studio shorts", "prototyping", "screen space", "short", "shorts", "ui design", "ux design", "world view"],
    "topicIds": [23, 4],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/808j4pqwu6uymymjq/808/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/808j4pqwu6uymymjq/808/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/808j4pqwu6uymymjq/808/808_prototyping_for_ar.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/808j4pqwu6uymymjq/808/808_hd_prototyping_for_ar.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/808j4pqwu6uymymjq/808/808_sd_prototyping_for_ar.mp4",
      "duration": 638
    },
    "related": {
      "activities": ["wwdc2018-807", "wwdc2018-809", "wwdc2018-810", "wwdc2018-811"]
    }
  }, {
    "id": "wwdc2018-213",
    "staticContentId": 2111,
    "eventContentId": 213,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/213",
    "description": "Learn how to update your audio or navigation app to support CarPlay. Apps in CarPlay are optimized for use in the car, and automatically adapt to available vehicle screens and input controls. Audio apps can deliver music, news, podcasts, and more. With the new CarPlay framework, Navigation apps can provide detailed maps, destination search, turn-by-turn guidance, and user notifications.",
    "title": "CarPlay Audio and Navigation Apps",
    "originalPublishingDate": "2018-06-06T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚙", "car", "map"],
    "topicIds": [68, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/213ivbgp77y4z4/213/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/213ivbgp77y4z4/213/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/213ivbgp77y4z4/213/213_carplay_audio_and_navigation_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/213ivbgp77y4z4/213/213_hd_carplay_audio_and_navigation_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/213ivbgp77y4z4/213/213_sd_carplay_audio_and_navigation_apps.mp4",
      "duration": 2313
    },
    "related": {
      "activities": ["wwdc2018-2240", "wwdc2017-719"],
      "resources": [347]
    }
  }, {
    "id": "wwdc2018-605",
    "staticContentId": 2172,
    "eventContentId": 605,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/605",
    "description": "Developed by Apple, SwiftShot is an energetic and immersive multiplayer AR game built with key iOS technologies. Glimpse behind the curtain and see how SwiftShot was designed and developed using ARKit, SceneKit, and Swift. Understand the intricacies of designing great gameplay for AR, and learn practical techniques for multiplayer synchronization and physics simulation.",
    "title": "Inside SwiftShot: Creating an AR Game",
    "originalPublishingDate": "2018-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/605sgm2hb3oxmy/605/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/605sgm2hb3oxmy/605/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/605sgm2hb3oxmy/605/605_inside_swiftshot_creating_an_ar_game.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/605sgm2hb3oxmy/605/605_hd_inside_swiftshot_creating_an_ar_game.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/605sgm2hb3oxmy/605/605_sd_inside_swiftshot_creating_an_ar_game.mp4",
      "duration": 2575
    },
    "related": {
      "activities": ["wwdc2018-106", "wwdc2018-602", "wwdc2018-603", "wwdc2018-610", "wwdc2018-6090", "wwdc2018-6160"],
      "resources": [393, 25]
    }
  }, {
    "id": "wwdc2018-718",
    "staticContentId": 2185,
    "eventContentId": 718,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/718",
    "description": "At Apple, we believe in building products with both great features and great privacy. Learn how to apply privacy engineering techniques to your apps so you can build trust with users to unlock better experiences and engagement.  And find out how new privacy features can benefit you and your users.",
    "title": "Better Apps through Better Privacy",
    "originalPublishingDate": "2018-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/718twnl0ca4qp1rrm7/718/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/718twnl0ca4qp1rrm7/718/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/718twnl0ca4qp1rrm7/718/718_better_apps_through_better_privacy.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/718twnl0ca4qp1rrm7/718/718_hd_better_apps_through_better_privacy.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/718twnl0ca4qp1rrm7/718/718_sd_better_apps_through_better_privacy.mp4",
      "duration": 2186
    },
    "related": {
      "activities": ["wwdc2018-207", "wwdc2018-702", "wwdc2018-706", "wwdc2018-7140", "wwdc2018-7190"],
      "resources": [181, 76]
    }
  }, {
    "id": "wwdc2018-407",
    "staticContentId": 2156,
    "eventContentId": 407,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/407",
    "description": "All apps benefit from a focus on performance and an increase in overall responsiveness. This information packed session gives you strategies for fixing performance problems using Instruments and other tools. Additionally, get practical advice based on experience in tuning Apple's own apps including Xcode and Photos on iOS.",
    "title": "Practical Approaches to Great App Performance",
    "originalPublishingDate": "2018-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["debugging", "dispatch", "instruments", "launch", "memory", "notification center", "photos", "scrolling", "testing", "time profiler"],
    "topicIds": [33, 35, 37],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/407akll3nbwls9yn4qt/407/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/407akll3nbwls9yn4qt/407/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/407akll3nbwls9yn4qt/407/407_practical_approaches_to_great_app_performance.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/407akll3nbwls9yn4qt/407/407_hd_practical_approaches_to_great_app_performance.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/407akll3nbwls9yn4qt/407/407_sd_practical_approaches_to_great_app_performance.mp4",
      "duration": 3021
    },
    "related": {
      "activities": ["wwdc2018-219", "wwdc2018-403", "wwdc2018-405", "wwdc2018-417", "wwdc2018-2180", "wwdc2018-2350", "wwdc2018-2390", "wwdc2016-411", "wwdc2016-418", "wwdc2015-409"]
    }
  }, {
    "id": "wwdc2018-715",
    "staticContentId": 2205,
    "eventContentId": 715,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/715",
    "description": "The new Network.framework API gives you direct access to the same high-performance user-space networking stack used by URLSession. If you’re considering using Berkeley Sockets in your app or library, learn what better options are available to you.",
    "title": "Introducing Network.framework: A modern alternative to Sockets",
    "originalPublishingDate": "2018-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/715_introducing_networkframework_a_modern_alternative_to_sockets.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/715_hd_introducing_networkframework_a_modern_alternative_to_sockets.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/715_sd_introducing_networkframework_a_modern_alternative_to_sockets.mp4",
      "duration": 3703
    },
    "related": {
      "activities": ["wwdc2018-714", "wwdc2018-7130", "wwdc2018-7150"],
      "resources": [392, 147, 145, 144, 137, 135]
    }
  }, {
    "id": "wwdc2018-709",
    "staticContentId": 2082,
    "eventContentId": 709,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/709",
    "description": "The Core ML tools ecosystem gives you many options for building and optimizing models to meet your app requirements. Learn how to add flexibility to existing models, quantize them, and take advantage of Core ML's support for customization.",
    "title": "What’s New in Core ML, Part 2",
    "originalPublishingDate": "2018-06-06T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/709ofa44hqrgje7a4c/709/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/709ofa44hqrgje7a4c/709/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/709ofa44hqrgje7a4c/709/709_whats_new_in_core_ml_part_2.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/709ofa44hqrgje7a4c/709/709_hd_whats_new_in_core_ml_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/709ofa44hqrgje7a4c/709/709_sd_whats_new_in_core_ml_part_2.mp4",
      "duration": 2077
    },
    "related": {
      "activities": ["wwdc2018-110", "wwdc2018-703", "wwdc2018-708", "wwdc2018-712", "wwdc2018-713", "wwdc2018-717", "wwdc2018-7100", "wwdc2018-7180"],
      "resources": [200, 88, 27]
    }
  }, {
    "id": "wwdc2018-713",
    "staticContentId": 2084,
    "eventContentId": 713,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/713",
    "description": "Natural Language is a redesigned framework designed to provide high-performance, on-device APIs for fundamental NLP tasks across all Apple platforms. Through the deep integration of the framework with Core ML and Create ML, you now have the ability to train custom NLP models to perform many different inferences and leverage the power of NLP in your apps. Join us for this exciting session to learn all the details and to see it in action.",
    "title": "Introducing Natural Language Framework",
    "originalPublishingDate": "2018-06-06T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["classification", "classifier", "create ml", "language", "language detection", "machine learning", "sentiment", "tagging", "text analysis", "text processing", "tokenization", "word"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/713u3ysohtlec95j3ir/713/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/713u3ysohtlec95j3ir/713/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/713u3ysohtlec95j3ir/713/713_introducing_natural_language_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/713u3ysohtlec95j3ir/713/713_hd_introducing_natural_language_framework.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/713u3ysohtlec95j3ir/713/713_sd_introducing_natural_language_framework.mp4",
      "duration": 2303
    },
    "related": {
      "activities": ["wwdc2019-428", "wwdc2018-110", "wwdc2018-703", "wwdc2018-708", "wwdc2018-709", "wwdc2018-2480", "wwdc2017-208"]
    }
  }, {
    "id": "wwdc2018-610",
    "staticContentId": 2118,
    "eventContentId": 610,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/610",
    "description": "With ARKit your app can see the world and place virtual objects on horizontal and vertical surfaces and recognize images and objects. Go beyond the API to gain insights into the innovative methods and techniques underlying these capabilities. See how ARKit combines device motion with the camera to provide accurate tracking and plane detection. Get a deeper understanding of persistence and multi-device AR and learn the recommended approach for image tracking and object detection.",
    "title": "Understanding ARKit Tracking and Detection",
    "originalPublishingDate": "2018-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/610qbth3em1ngixst/610/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/610qbth3em1ngixst/610/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/610qbth3em1ngixst/610/610_understanding_arkit_tracking_and_detection.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/610qbth3em1ngixst/610/610_hd_understanding_arkit_tracking_and_detection.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/610qbth3em1ngixst/610/610_sd_understanding_arkit_tracking_and_detection.mp4",
      "duration": 3479
    },
    "related": {
      "activities": ["wwdc2018-106", "wwdc2018-602", "wwdc2018-603", "wwdc2018-605", "wwdc2018-6160", "tech-talks-601", "wwdc2017-602"],
      "resources": [393, 388, 345, 344, 343, 342, 341, 274]
    }
  }, {
    "id": "wwdc2018-414",
    "staticContentId": 2167,
    "eventContentId": 414,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/414",
    "description": "Sudden app crashes are a source of bad user experience and app review rejections. Learn how crash logs can be analyzed, what information they contain and how to diagnose the causes of crashes, including hard-to-reproduce memory corruptions and multithreading issues.",
    "title": "Understanding Crashes and Crash Logs",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["💥", "🧟‍♀️", "🧟‍♂️", "0x8badf00d", "address", "assertion", "caseiterable", "destroyer", "disassemble", "disassembly", "dispatchqueue", "free", "gcd", "grand central dispatch", "isa", "ivar", "lldb", "malloc", "objc_msgsend", "organizer", "pointers", "precondition", "race", "rotated", "sanitizers", "stack", "testflight", "thread", "trace", "unrecognized selector", "use after free", "zombies"],
    "topicIds": [33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/414djzbkfdpkvf50/414/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/414djzbkfdpkvf50/414/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/414djzbkfdpkvf50/414/414_understanding_crashes_and_crash_logs.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/414djzbkfdpkvf50/414/414_hd_understanding_crashes_and_crash_logs.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/414djzbkfdpkvf50/414/414_sd_understanding_crashes_and_crash_logs.mp4",
      "duration": 3437
    },
    "related": {
      "activities": ["wwdc2018-401", "wwdc2018-412", "wwdc2018-416", "wwdc2018-4220", "wwdc2017-406", "wwdc2016-412"],
      "resources": [440, 439, 438, 437]
    }
  }, {
    "id": "wwdc2018-223",
    "staticContentId": 2214,
    "eventContentId": 223,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/223",
    "description": "When you imagine building a new app, what do you think about? Models, views, and controllers deserve their prominent place in the design process, but we don't often give the same attention to the underlying work our apps need to do. Understand how to identify and optimize the algorithms in your app, and discover how implementing algorithms as generic protocol extensions results in efficient, effective, and maintainable code.",
    "title": "Embracing Algorithms",
    "originalPublishingDate": "2018-06-07T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/223plbqb0sfpv80/223/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/223plbqb0sfpv80/223/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/223plbqb0sfpv80/223/223_embracing_algorithms.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/223plbqb0sfpv80/223/223_hd_embracing_algorithms.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/223plbqb0sfpv80/223/223_sd_embracing_algorithms.mp4",
      "duration": 2413
    },
    "related": {
      "activities": ["wwdc2018-229", "wwdc2018-406", "wwdc2018-4030", "wwdc2018-4080", "wwdc2018-4130", "wwdc2018-4230"]
    }
  }, {
    "id": "wwdc2018-217",
    "staticContentId": 2128,
    "eventContentId": 217,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/217",
    "description": "Learn how to use Siri Shortcuts to bring glanceable information and custom interactions to the Siri watch face. Walk through how to create a compelling user experience by providing relevant shortcuts and by donating interactions from your app. See how these experiences can be created from both watchOS and iOS.",
    "title": "Siri Shortcuts on the Siri Watch Face",
    "originalPublishingDate": "2018-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "⌚️", "complication", "donate", "donation", "inrelevant", "intents", "inui", "phrase", "shortcut", "siri", "suggestion", "voice", "watch", "watchkit", "watchos", "wkinterface"],
    "topicIds": [13, 21, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/217qlkasup9hplnx0r3/217/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/217qlkasup9hplnx0r3/217/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/217qlkasup9hplnx0r3/217/217_siri_shortcuts_on_the_siri_watch_face.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/217qlkasup9hplnx0r3/217/217_hd_siri_shortcuts_on_the_siri_watch_face.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/217qlkasup9hplnx0r3/217/217_sd_siri_shortcuts_on_the_siri_watch_face.mp4",
      "duration": 2792
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-206", "wwdc2018-211", "wwdc2018-214", "wwdc2018-2030", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2250", "wwdc2018-2300", "wwdc2018-2440"],
      "resources": [390, 351, 174, 14, 12, 9]
    }
  }, {
    "id": "wwdc2018-222",
    "staticContentId": 2190,
    "eventContentId": 222,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/222",
    "description": "A lot can go wrong when loading data into your app. Whether you work directly with JSON and property lists, or with higher-level APIs such as NSCoding and Codable, learn how to defend your customers and secure your code against invalid or malicious data. Avoid fatal assumptions by validating payload structure, type information and domain correctness, to turn the data you work with into data you can trust.",
    "title": "Data You Can Trust",
    "originalPublishingDate": "2018-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["codable", "data", "foundation", "json", "nscoding", "security"],
    "topicIds": [36, 67, 19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/222krhixqaeggyrn33/222/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/222krhixqaeggyrn33/222/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/222krhixqaeggyrn33/222/222_data_you_can_trust.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/222krhixqaeggyrn33/222/222_hd_data_you_can_trust.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/222krhixqaeggyrn33/222/222_sd_data_you_can_trust.mp4",
      "duration": 2304
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-209", "wwdc2018-2330", "wwdc2017-212"]
    }
  }, {
    "id": "wwdc2018-216",
    "staticContentId": 2222,
    "eventContentId": 216,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/216",
    "description": "Last year we introduced the Files App and an easy way to view, edit, and share documents within your application. Learn best practices for implementing this technology, how to effectively manage documents in your app, and how to avoid common document manager pitfalls. Hear about the difference between a Document Browser and a Document Picker and when to use them. Gain a better understanding into how this technology works in a sandbox. Learn how to give your customers a great experience, beginning at sign-in and continuing throughout your app!",
    "title": "Managing Documents In Your iOS Apps",
    "originalPublishingDate": "2018-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["document browser", "document picker", "documents", "file browser", "files", "file sharing"],
    "topicIds": [11, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/216dvfcqmzmak5qs/216/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/216dvfcqmzmak5qs/216/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/216dvfcqmzmak5qs/216/216_managing_documents_in_your_ios_apps.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/216dvfcqmzmak5qs/216/216_hd_managing_documents_in_your_ios_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/216dvfcqmzmak5qs/216/216_sd_managing_documents_in_your_ios_apps.mp4",
      "duration": 3060
    },
    "related": {
      "activities": ["wwdc2018-211", "wwdc2018-2020", "wwdc2018-2280", "wwdc2018-2370", "wwdc2018-2450", "wwdc2017-229", "wwdc2017-243"],
      "resources": [425, 423, 337, 182]
    }
  }, {
    "id": "wwdc2018-208",
    "staticContentId": 2076,
    "eventContentId": 208,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/208",
    "description": "Apps on tvOS entertain, inform, and inspire with their content and interactive experiences. tvOS 12 brings new technologies that help make these experiences even more enjoyable and engaging. Get an introduction to focus engine support for non-UIKit apps, new UI elements, and Password AutoFill. Learn how to bring it all together to create incredible tvOS apps and experiences.",
    "title": "What's New in tvOS 12",
    "originalPublishingDate": "2018-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["tv apps", "tv best practices", "uicollectionview", "uikit"],
    "topicIds": [20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/208piymryv9im6/208/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/208piymryv9im6/208/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/208piymryv9im6/208/208_whats_new_in_tvos_12.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/208piymryv9im6/208/208_hd_whats_new_in_tvos_12.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/208piymryv9im6/208/208_sd_whats_new_in_tvos_12.mp4",
      "duration": 2374
    },
    "related": {
      "activities": ["wwdc2018-204", "wwdc2018-238", "wwdc2018-2040", "wwdc2018-2110", "wwdc2018-2230", "wwdc2018-2320", "wwdc2018-2470", "wwdc2017-206", "wwdc2017-209", "wwdc2017-224"],
      "resources": [310, 13]
    }
  }, {
    "id": "wwdc2018-303",
    "staticContentId": 2101,
    "eventContentId": 303,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/303",
    "description": "The new App Store Connect API provides a familiar and highly readable REST API designed to facilitate the automation of many tasks you would typically perform through the Apple Developer website and the App Store Connect browser interfaces. Learn how this API allows you to manage your apps and testers for TestFlight, create code signing resources, download reports, and even manage your organization. See how this API leverages JWT authentication and a JSON payload for all transactions to make this new service easy to integrate with your existing automated workflows.",
    "title": "Automating App Store Connect",
    "originalPublishingDate": "2018-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [43, 71],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/303ewlysk7t1l43/303/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/303ewlysk7t1l43/303/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/303ewlysk7t1l43/303/303_automating_app_store_connect.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/303ewlysk7t1l43/303/303_hd_automating_app_store_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/303ewlysk7t1l43/303/303_sd_automating_app_store_connect.mp4",
      "duration": 2448
    },
    "related": {
      "activities": ["wwdc2018-301", "wwdc2018-3210", "wwdc2018-3290"],
      "resources": [463, 462, 309, 44]
    }
  }, {
    "id": "wwdc2018-416",
    "staticContentId": 2236,
    "eventContentId": 416,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/416",
    "description": "Discover how memory graphs can be used to get a close up look at what is contributing to an app’s memory footprint. Understand the true memory cost of an image. Learn some tips and tricks for reducing the memory footprint of an app.",
    "title": "iOS Memory Deep Dive",
    "originalPublishingDate": "2018-06-08T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["footprint", "image", "memory", "size"],
    "topicIds": [33, 37],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_ios_memory_deep_dive.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_hd_ios_memory_deep_dive.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/416n2fmzz0fz88f/416/416_sd_ios_memory_deep_dive.mp4",
      "duration": 3088
    },
    "related": {
      "activities": ["wwdc2018-219", "wwdc2018-412", "wwdc2018-414"]
    }
  }, {
    "id": "wwdc2018-401",
    "staticContentId": 2168,
    "eventContentId": 401,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/401",
    "description": "Hear about the latest advancements in Swift, the safe, fast, and expressive language. Find out about improvements to build times, code size, and runtime performance. Learn how to take advantage of new features in your code that eliminate boilerplate, increase safety and security, and improve your overall development productivity.",
    "title": "What's New in Swift",
    "originalPublishingDate": "2018-06-05T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["4.2", "arc", "batch", "caseiterable", "cases", "conditional", "conformance", "enums", "equatable", "error", "hashable", "incremental", "random", "shuffled", "targetenvironment", "toggle", "warning", "whole module optimization", "wmo"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/401ieeclipzse3tz3fg/401/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/401ieeclipzse3tz3fg/401/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/401ieeclipzse3tz3fg/401/401_whats_new_in_swift.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/401ieeclipzse3tz3fg/401/401_hd_whats_new_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/401ieeclipzse3tz3fg/401/401_sd_whats_new_in_swift.mp4",
      "duration": 2249
    },
    "related": {
      "activities": ["wwdc2018-406", "wwdc2018-408", "wwdc2018-409", "wwdc2018-411", "wwdc2018-414", "wwdc2018-415", "wwdc2018-4030", "wwdc2018-4080", "wwdc2018-4130", "wwdc2018-4230", "wwdc2017-402"]
    }
  }, {
    "id": "wwdc2018-502",
    "staticContentId": 2077,
    "eventContentId": 502,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/502",
    "description": "HTTP Live Streaming (HLS) is used to stream live and on-demand content to global audiences. Discover how to adjust and tune stream authoring and delivery elements to improve the viewing experience. Learn how to accurately measure your streaming performance, identify optimization opportunities, and implement changes to your HLS streams that can significantly improve the user experience.",
    "title": "Measuring and Optimizing HLS Performance",
    "originalPublishingDate": "2018-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["analysis", "encryption key management", "error handling", "hls", "hlsreport", "http live streaming", "performance", "stream optimization", "tips and tricks", "user experience"],
    "topicIds": [28, 35, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/502plwzfxg5p7w4na/502/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/502plwzfxg5p7w4na/502/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/502plwzfxg5p7w4na/502/502_measuring_and_optimizing_hls_performance.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/502plwzfxg5p7w4na/502/502_hd_measuring_and_optimizing_hls_performance.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/502plwzfxg5p7w4na/502/502_sd_measuring_and_optimizing_hls_performance.mp4",
      "duration": 2972
    },
    "related": {
      "activities": ["wwdc2019-502", "wwdc2018-507", "wwdc2018-5030", "wwdc2018-5040", "wwdc2018-5060", "wwdc2018-5090", "wwdc2018-5100", "wwdc2018-5120", "tech-talks-501", "wwdc2017-504", "wwdc2017-514", "wwdc2017-515"],
      "resources": [404]
    }
  }, {
    "id": "wwdc2018-214",
    "staticContentId": 2173,
    "eventContentId": 214,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/214",
    "description": "Siri Shortcuts are a great way to help people execute actions or get information from your app, but shortcuts can be made even more powerful by adding them to Siri to be used with a simple phrase. Learn how you can now customize responses from Siri and add custom UI to make a great shortcuts experience across iOS, watchOS and HomePod. See how to allow users to add and manage shortcuts from right within your app and learn best practices to make shortcut suggestions that can be exposed through Settings.",
    "title": "Building for Voice with Siri Shortcuts",
    "originalPublishingDate": "2018-06-06T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "⌚️", "donate", "donation", "inrelevant", "intents", "inui", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [13, 21, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/214w2w1racklnrc0l/214/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/214w2w1racklnrc0l/214/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/214w2w1racklnrc0l/214/214_building_for_voice_with_siri_shortcuts.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/214w2w1racklnrc0l/214/214_hd_building_for_voice_with_siri_shortcuts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/214w2w1racklnrc0l/214/214_sd_building_for_voice_with_siri_shortcuts.mp4",
      "duration": 2188
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-211", "wwdc2018-217", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2250", "wwdc2018-2300", "wwdc2018-2440", "wwdc2017-214", "wwdc2017-228", "wwdc2016-217", "wwdc2016-225"],
      "resources": [350, 174, 12]
    }
  }, {
    "id": "wwdc2018-415",
    "staticContentId": 2164,
    "eventContentId": 415,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/415",
    "description": "Ever wonder what happens when you build your project in Xcode? Learn how Xcode automates the steps required to build an application, and go behind the scenes to learn how clang, swiftc, and the linker work together to turn your source code into a working program.",
    "title": "Behind the Scenes of the Xcode Build Process",
    "originalPublishingDate": "2018-06-08T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["compilation", "compiler", "dynamic", "headermap", "headers", "modulemaps", "modules", "pets", "static", "tapi", "tbd", "translation units", "umbrella", "vfs"],
    "topicIds": [32, 36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/415o65ozc2l1bc3/415/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/415o65ozc2l1bc3/415/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/415o65ozc2l1bc3/415/415_behind_the_scenes_of_the_xcode_build_process.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/415o65ozc2l1bc3/415/415_hd_behind_the_scenes_of_the_xcode_build_process.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/415o65ozc2l1bc3/415/415_sd_behind_the_scenes_of_the_xcode_build_process.mp4",
      "duration": 3453
    },
    "related": {
      "activities": ["wwdc2018-401", "wwdc2018-408", "wwdc2018-4240", "wwdc2017-413", "wwdc2016-406"]
    }
  }, {
    "id": "wwdc2018-224",
    "staticContentId": 2197,
    "eventContentId": 224,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/224",
    "description": "As your app gains more customers and becomes more feature-rich, you may find yourself with new problems to solve. Core Data is a powerful tool that has changed a lot over the years. Learn about the new best practices in Core Data, such as how to use concurrency and persistent history, and discover how to test for, and resolve, common problems using familiar technologies.",
    "title": "Core Data Best Practices",
    "originalPublishingDate": "2018-06-07T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["concurrency", "core data", "nskeyedarchiver", "performance", "persistent history", "sqlite", "testing"],
    "topicIds": [33, 35, 67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/224esqliuhnac9p11/224/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/224esqliuhnac9p11/224/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/224esqliuhnac9p11/224/224_core_data_best_practices.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/224esqliuhnac9p11/224/224_hd_core_data_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/224esqliuhnac9p11/224/224_sd_core_data_best_practices.mp4",
      "duration": 2066
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-2090", "wwdc2018-2460"]
    }
  }, {
    "id": "wwdc2018-417",
    "staticContentId": 2239,
    "eventContentId": 417,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/417",
    "description": "Testing is an essential tool to consistently verify your code works correctly, but often your code has dependencies that are out of your control. Discover techniques for making hard-to-test code testable on Apple platforms using XCTest. Learn a variety of tips for writing higher-quality tests that run fast and require less maintenance.",
    "title": "Testing Tips & Tricks",
    "originalPublishingDate": "2018-06-08T15:20:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["asynchronous", "automation", "delayed", "delegate", "dependency", "dispatchqueue", "expectation", "injection", "mocking", "network", "notificationcenter", "nsnotificationcenter", "nspredicate", "nstimer", "nsurlprotocol", "nsurlrequest", "nsurlsession", "observers", "performance", "predicate", "protocol", "pyramid", "scheduledtimer", "speed", "stub", "swift", "timers", "ui testing", "unit test", "urlprotocol", "urlrequest", "urlsession", "xcuitest"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/417j8ucs9p8w7seip/417/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/417j8ucs9p8w7seip/417/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/417j8ucs9p8w7seip/417/417_testing_tips__tricks.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/417j8ucs9p8w7seip/417/417_hd_testing_tips__tricks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/417j8ucs9p8w7seip/417/417_sd_testing_tips__tricks.mp4",
      "duration": 2247
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-403", "wwdc2018-407", "wwdc2018-4230", "wwdc2017-409", "wwdc2017-414", "wwdc2016-409", "wwdc2015-406"]
    }
  }, {
    "id": "wwdc2018-716",
    "staticContentId": 2175,
    "eventContentId": 716,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/716",
    "description": "Vision is a high-level framework that provides an easy to use API for handling many computer vision tasks. We'll dive deep into a particularly powerful feature of Vision—tracking objects in video streams. Learn best practices for using Vision in your app. Gain a greater understanding of how request handlers function in terms of lifecycle, performance, and memory utilization.",
    "title": "Object Tracking in Vision",
    "originalPublishingDate": "2018-06-07T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["face detection", "face landmarks", "machine learning", "object tracking", "video", "vision"],
    "topicIds": [30, 31, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/716xqb0exkswff/716/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/716xqb0exkswff/716/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/716xqb0exkswff/716/716_object_tracking_in_vision.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/716xqb0exkswff/716/716_hd_object_tracking_in_vision.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/716xqb0exkswff/716/716_sd_object_tracking_in_vision.mp4",
      "duration": 2445
    },
    "related": {
      "activities": ["wwdc2019-222", "wwdc2018-717", "wwdc2018-7200", "wwdc2017-506"],
      "resources": [384, 383]
    }
  }, {
    "id": "wwdc2018-801",
    "staticContentId": 2134,
    "eventContentId": 801,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/801",
    "description": "Great Design isn’t magic, it is crafted with care by real people. Explore the characteristics of great design through the voices of designers from Apple and our developer community. Learn how they take inspiration from everyday life, conceive and refine ideas, and push themselves to design apps and games that can stand the test of time.",
    "title": "The Qualities of Great Design",
    "originalPublishingDate": "2018-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🎮", "📱", "🔊", "😎", "animation", "apple design", "apple designers", "audio", "care", "caroline", "cas", "communiction", "copy", "craft", "d", "design", "design best practices", "designer", "doug", "editorial", "elaine", "emoji", "gary", "great", "great design", "haptics", "hugo", "interaction", "interview", "interviews", "jessie", "khan", "khan academy", "lauren", "lauren strehlow", "layers", "loic", "loïc", "mike", "nando", "nicole", "people", "podcast", "q", "qualities", "quality", "sound", "strehlow", "travis", "typography", "ui", "visual", "where cards fall"],
    "topicIds": [3, 4, 5, 6, 7],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/801srpnrtij2lqi6/801/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/801srpnrtij2lqi6/801/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/801srpnrtij2lqi6/801/801_the_qualities_of_great_design.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/801srpnrtij2lqi6/801/801_hd_the_qualities_of_great_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/801srpnrtij2lqi6/801/801_sd_the_qualities_of_great_design.mp4",
      "duration": 3202
    }
  }, {
    "id": "wwdc2018-404",
    "staticContentId": 2324,
    "eventContentId": 404,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/404",
    "description": "The localization process in Xcode 10 has been updated to aid you through the lifecycle of exporting, importing, and testing localized content in your apps. See new functionality added in Xcode 10 and learn how the new localization catalog helps you build world-class, localized apps.",
    "title": "New Localization Workflows in Xcode 10",
    "originalPublishingDate": "2018-06-06T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "donate", "donation", "i18n", "intents", "international", "internationalization", "localization", "shortcut", "siri", "suggestion", "voice", "world", "xcloc"],
    "topicIds": [38, 42],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/404cpduaxf6gola/404/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/404cpduaxf6gola/404/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/404cpduaxf6gola/404/404_new_localization_workflows_in_xcode_10.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/404cpduaxf6gola/404/404_hd_new_localization_workflows_in_xcode_10.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/404cpduaxf6gola/404/404_sd_new_localization_workflows_in_xcode_10.mp4",
      "duration": 2501
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2018-2010", "wwdc2018-2170", "wwdc2018-2260", "wwdc2017-401"]
    }
  }, {
    "id": "wwdc2018-231",
    "staticContentId": 2144,
    "eventContentId": 231,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/231",
    "description": "Get a fresh look at the HomeKit APIs. Understand how Siri and the Apple Home App use Action Sets and Accessory Services & Characteristics to provide a great home automation experience.",
    "title": "HomeKit Deep Dive",
    "originalPublishingDate": "2018-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "topicIds": [9, 15],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/231yewsuorvvh0v47z/231/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/231yewsuorvvh0v47z/231/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/231yewsuorvvh0v47z/231/231_homekit_deep_dive.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/231yewsuorvvh0v47z/231/231_hd_homekit_deep_dive.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/231yewsuorvvh0v47z/231/231_sd_homekit_deep_dive.mp4",
      "duration": 2563
    },
    "related": {
      "activities": ["wwdc2018-9010", "wwdc2018-9020", "wwdc2018-9040", "wwdc2018-9060"]
    }
  }, {
    "id": "wwdc2018-413",
    "staticContentId": 2170,
    "eventContentId": 413,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/413",
    "description": "Swift Playgrounds is a revolutionary iPad app to teach coding with the powerful Swift programming language. Learn how to create your own content for Swift Playgrounds using the new template, and find out how to use the subscription format to host your own feed online for others to access.",
    "title": "Create Your Own Swift Playgrounds Subscription",
    "originalPublishingDate": "2018-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["asplaygroundvalue", "book", "cifilter", "content aware", "core image", "education", "educators", "filter", "github", "playgroundvalueconvertible", "teacher"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/413mapolqk6ca7mozr/413/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/413mapolqk6ca7mozr/413/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/413mapolqk6ca7mozr/413/413_create_your_own_swift_playgrounds_subscription.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/413mapolqk6ca7mozr/413/413_hd_create_your_own_swift_playgrounds_subscription.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/413mapolqk6ca7mozr/413/413_sd_create_your_own_swift_playgrounds_subscription.mp4",
      "duration": 2123
    },
    "related": {
      "activities": ["wwdc2019-405", "wwdc2018-402", "wwdc2018-418", "wwdc2018-4210", "wwdc2017-408", "wwdc2017-410", "wwdc2017-416", "wwdc2016-408"],
      "resources": [441]
    }
  }, {
    "id": "wwdc2018-508",
    "staticContentId": 2376,
    "eventContentId": 508,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/508",
    "description": "MapKit JS uses the JWT standard for ensuring a secure connection between your site and the MapKit JS services.  Learn how to create, protect, and use site-specific keys to ensure only your servers are accessing APIs linked to your domain.",
    "title": "Getting and Using a MapKit JS Key",
    "originalPublishingDate": "2018-06-05T17:26:27-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [17, 20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/508g9tgxpjyfuwr1ap/508/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/508g9tgxpjyfuwr1ap/508/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/508g9tgxpjyfuwr1ap/508/508_getting_and_using_a_mapkit_js_key.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/508g9tgxpjyfuwr1ap/508/508_hd_getting_and_using_a_mapkit_js_key.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/508g9tgxpjyfuwr1ap/508/508_sd_getting_and_using_a_mapkit_js_key.mp4",
      "duration": 837
    },
    "related": {
      "activities": ["wwdc2018-212", "wwdc2018-2150", "wwdc2018-2340", "wwdc2018-2490"]
    }
  }, {
    "id": "wwdc2018-218",
    "staticContentId": 2196,
    "eventContentId": 218,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/218",
    "description": "Step deeper into Dark Mode adoption in your macOS application. Learn about the powerful Cocoa technologies at the core of Dark Mode, and take a detailed look at the APIs and best practices for adapting to this beautiful new look.",
    "title": "Advanced Dark Mode",
    "originalPublishingDate": "2018-06-06T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["aqua", "dark", "dark appearance", "dark aqua", "dark mode", "light appearance", "materials", "system colors", "vibrancy"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/218o6oial8c68yom/218/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/218o6oial8c68yom/218/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com//videos/wwdc/2018/218o6oial8c68yom/218/218_advanced_dark_mode.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/218o6oial8c68yom/218/218_hd_advanced_dark_mode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/218o6oial8c68yom/218/218_sd_advanced_dark_mode.mp4",
      "duration": 3081
    },
    "related": {
      "activities": ["wwdc2019-214", "wwdc2018-209", "wwdc2018-210", "wwdc2018-412", "wwdc2018-2130", "wwdc2018-2220", "wwdc2018-2420"]
    }
  }, {
    "id": "wwdc2018-505",
    "staticContentId": 2090,
    "eventContentId": 505,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/505",
    "description": "Make your apps even better through improved integration with Photos on macOS. We'll dive deep into the Photos Project Extension API that was introduced in macOS High Sierra and update you on what's new. You'll also learn best practices for handling file promises and image URLs to better handle drag & drop from Photos to your app.",
    "title": "Integrating with Photos on macOS",
    "originalPublishingDate": "2018-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["drag", "drop", "extensions", "file promises", "file provider", "file receiver", "photo extensions", "photography", "photokit", "photo library", "photos", "photos api", "print products", "project extensions"],
    "topicIds": [30, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/505em1a6u6lq35/505/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/505em1a6u6lq35/505/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/505em1a6u6lq35/505/505_integrating_with_photos_on_macos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/505em1a6u6lq35/505/505_hd_integrating_with_photos_on_macos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/505em1a6u6lq35/505/505_sd_integrating_with_photos_on_macos.mp4",
      "duration": 2229
    },
    "related": {
      "activities": ["wwdc2018-2350", "wwdc2017-505", "wwdc2016-203"],
      "resources": [377, 376, 375, 374]
    }
  }, {
    "id": "wwdc2018-503",
    "staticContentId": 2153,
    "eventContentId": 503,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/503",
    "description": "The TrueDepth camera in the iPhone X streams high-quality depth data in real time allowing you to enhance your photo and video apps in fun and creative ways. Dive deep into the principles and best practices for working with depth data, learn how to use the new Portrait Segmentation API for still images, and see how these techniques can create special effects like background replacement and perspective changes.",
    "title": "Creating Photo and Video Effects Using Depth",
    "originalPublishingDate": "2018-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["camera", "capture", "core image", "depth", "depth map", "effects", "image processing", "point cloud", "portrait effects matte", "portrait matte", "portrait mode", "portrait segmentation", "python", "real-time video", "segmentation", "truedepth", "video"],
    "topicIds": [29, 30, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/503rfgg72ckqxj2fi/503/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/503rfgg72ckqxj2fi/503/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/503rfgg72ckqxj2fi/503/503_creating_photo_and_video_effects_using_depth.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/503rfgg72ckqxj2fi/503/503_hd_creating_photo_and_video_effects_using_depth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/503rfgg72ckqxj2fi/503/503_sd_creating_photo_and_video_effects_using_depth.mp4",
      "duration": 2032
    },
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-249", "wwdc2019-260", "wwdc2018-719", "wwdc2018-5050", "wwdc2018-5140", "wwdc2018-5160", "wwdc2017-507", "wwdc2017-508"],
      "resources": [382, 381, 380]
    }
  }, {
    "id": "wwdc2018-205",
    "staticContentId": 2106,
    "eventContentId": 205,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/205",
    "description": "HealthKit, CoreMotion, and other iOS frameworks combined with the ResearchKit and CareKit open-source projects, provide a deep platform for the creation of game-changing apps for care teams, researchers, and the medical community. Discover new active tasks that leverage calibrated device data and how new CoreMotion APIs deliver insightful results capable of assisting diagnosis and improving care. Hear about updates and contributions from the open-source community and gain practical guidance you need to rapidly deliver your next research or care app.",
    "title": "Advances in Research and Care Frameworks",
    "originalPublishingDate": "2018-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/205tyzmd4sury4r/205/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/205tyzmd4sury4r/205/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/205tyzmd4sury4r/205/205_advances_in_research_and_care_frameworks.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/205tyzmd4sury4r/205/205_hd_advances_in_research_and_care_frameworks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/205tyzmd4sury4r/205/205_sd_advances_in_research_and_care_frameworks.mp4",
      "duration": 2249
    },
    "related": {
      "activities": ["wwdc2018-706", "wwdc2018-707", "wwdc2018-2100", "wwdc2018-2210", "wwdc2018-2500"]
    }
  }, {
    "id": "wwdc2018-607",
    "staticContentId": 2121,
    "eventContentId": 607,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/607",
    "description": "Metal 2 is Apple-designed graphics software that lets developers build console‑style games. Learn key aspects of the Metal architecture that support the techniques for modern high-performance game rendering. See how Metal now enables the GPU to schedule work for itself, allowing complete scenes and compute workloads to be built and executed with little to no CPU interaction. Understand how the seamless integration of Metal 2 with the A11 Bionic chip lets your apps and games realize entirely new levels of performance and capability.",
    "title": "Metal for Game Developers",
    "originalPublishingDate": "2018-06-06T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/607buro3d9jn66/607/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/607buro3d9jn66/607/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/607buro3d9jn66/607/607_metal_for_game_developers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/607buro3d9jn66/607/607_hd_metal_for_game_developers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/607buro3d9jn66/607/607_sd_metal_for_game_developers.mp4",
      "duration": 3605
    },
    "related": {
      "activities": ["wwdc2018-105", "wwdc2018-604", "wwdc2018-612", "wwdc2018-6130"],
      "resources": [364, 363, 362, 361, 360, 359, 356, 38]
    }
  }, {
    "id": "wwdc2018-412",
    "staticContentId": 2166,
    "eventContentId": 412,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/412",
    "description": "Discover advanced techniques, and tips and tricks for enhancing your Xcode debugging workflows. Learn how to take advantage of LLDB and custom breakpoints for more powerful debugging. Get the most out of Xcode’s view debugging tools to solve UI issues in your app more efficiently.",
    "title": "Advanced Debugging with Xcode and LLDB",
    "originalPublishingDate": "2018-06-07T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌕", "🌛", "🌜", "🌝", "astronaut", "catransaction", "debugger", "expression", "flush", "frame", "gravity", "jump", "nudge", "objc", "objectivec", "objective-c", "poc", "popover", "swift", "symbolic", "thread", "uiview", "variable", "view debugger"],
    "topicIds": [33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/412zw88j5aa4mr9/412/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/412zw88j5aa4mr9/412/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/412zw88j5aa4mr9/412/412_advanced_debugging_with_xcode_and_lldb.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/412zw88j5aa4mr9/412/412_hd_advanced_debugging_with_xcode_and_lldb.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/412zw88j5aa4mr9/412/412_sd_advanced_debugging_with_xcode_and_lldb.mp4",
      "duration": 3221
    },
    "related": {
      "activities": ["wwdc2019-404", "wwdc2019-412", "wwdc2019-429", "wwdc2018-210", "wwdc2018-218", "wwdc2018-414", "wwdc2018-416", "wwdc2018-4190", "wwdc2017-404"],
      "resources": [427]
    }
  }, {
    "id": "wwdc2018-411",
    "staticContentId": 2163,
    "eventContentId": 411,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/411",
    "description": "The Swift Package Manager makes it possible to easily develop and distribute source code in the Swift ecosystem. Learn about its goals, design, unique features, and the opportunities it has for continued evolution.",
    "title": "Getting to Know Swift Package Manager",
    "originalPublishingDate": "2018-06-07T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["♠️", "♣️", "♥️", "♦️", "dependencies", "evolution", "llbuild", "package.resolved", "semantic", "spm", "swiftpm", "versioning"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/411gl7b9ztm2imp/411/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/411gl7b9ztm2imp/411/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/411gl7b9ztm2imp/411/411_getting_to_know_swift_package_manager.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/411gl7b9ztm2imp/411/411_hd_getting_to_know_swift_package_manager.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/411gl7b9ztm2imp/411/411_sd_getting_to_know_swift_package_manager.mp4",
      "duration": 2198
    },
    "related": {
      "activities": ["wwdc2019-410", "wwdc2018-401", "wwdc2018-4230"]
    }
  }, {
    "id": "wwdc2018-601",
    "staticContentId": 2231,
    "eventContentId": 601,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/601",
    "description": "ReplayKit 2 provides built-in services for broadcasting your screen from iOS and tvOS to viewers online. See how broadcasts can be started right within Control Center or from standard UI included in your own apps and games. Hear about developing broadcast extensions for ReplayKit 2 and get best practices for handling account sign-in.",
    "title": "Live Screen Broadcast with ReplayKit",
    "originalPublishingDate": "2018-06-05T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["broadcast", "capture", "encode", "esports", "game", "mobcrush", "periscope", "record", "replay", "screen", "share", "stream", "video"],
    "topicIds": [28, 26, 31, 18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/601nz4m863hyf0/601/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/601nz4m863hyf0/601/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/601nz4m863hyf0/601/601_live_screen_broadcast_with_replaykit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/601nz4m863hyf0/601/601_hd_live_screen_broadcast_with_replaykit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/601nz4m863hyf0/601/601_sd_live_screen_broadcast_with_replaykit.mp4",
      "duration": 1694
    },
    "related": {
      "activities": ["wwdc2019-6050", "wwdc2018-105", "wwdc2018-6050", "wwdc2016-601"]
    }
  }, {
    "id": "wwdc2018-302",
    "staticContentId": 2240,
    "eventContentId": 302,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/302",
    "description": "Learn about new management capabilities for iOS, macOS, and tvOS, tool evolution over the past year, and important changes coming this fall. You'll discover how new MDM features help administrators manage devices more effectively, how educators can enhance the classroom learning environment, and how app developers can make their app a better fit for education and enterprise customers.",
    "title": "What's New in Managing Apple Devices",
    "originalPublishingDate": "2018-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [44],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/302tw1pd3hkgmzuw47/302/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/302tw1pd3hkgmzuw47/302/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/302tw1pd3hkgmzuw47/302/302_whats_new_in_managing_apple_devices.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/302tw1pd3hkgmzuw47/302/302_hd_whats_new_in_managing_apple_devices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/302tw1pd3hkgmzuw47/302/302_sd_whats_new_in_managing_apple_devices.mp4",
      "duration": 2423
    },
    "related": {
      "activities": ["wwdc2018-204", "wwdc2018-215", "wwdc2018-2160", "wwdc2018-2270", "wwdc2018-3200", "wwdc2018-3250"],
      "resources": [421, 420, 394, 330, 329, 328, 327, 326, 325, 324, 323, 163, 153, 150, 148, 146, 143]
    }
  }, {
    "id": "wwdc2018-602",
    "staticContentId": 2116,
    "eventContentId": 602,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/602",
    "description": "ARKit 2 makes it easy to develop vivid augmented reality experiences and enable apps to interact with the real world in entirely new ways. Discover how multiple iOS devices can simultaneously view an AR scene or play multiplayer AR games. Learn about new capabilities for tracking 2D images, and see how to detect known 3D objects like sculptures, toys, and furniture.",
    "title": "What’s New in ARKit 2",
    "originalPublishingDate": "2018-06-05T11:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23, 25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/602r0zx2q17fqbk/602/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/602r0zx2q17fqbk/602/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/602r0zx2q17fqbk/602/602_whats_new_in_arkit_2.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/602r0zx2q17fqbk/602/602_hd_whats_new_in_arkit_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/602r0zx2q17fqbk/602/602_sd_whats_new_in_arkit_2.mp4",
      "duration": 3441
    },
    "related": {
      "activities": ["wwdc2018-106", "wwdc2018-234", "wwdc2018-603", "wwdc2018-605", "wwdc2018-610", "wwdc2018-805", "wwdc2018-6030", "wwdc2018-6090", "wwdc2018-6160", "tech-talks-601", "wwdc2017-602"],
      "resources": [393, 343, 342, 341, 340, 25]
    }
  }, {
    "id": "wwdc2018-707",
    "staticContentId": 2096,
    "eventContentId": 707,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/707",
    "description": "Tracking workouts with Apple Watch is popular with fitness professionals and novices alike.  See how the new workout API streamlines the entire lifecycle of a workout, complete with ability to restart a session after a crash to prevent you from losing data. Learn how the new workout classes, types, and queries provide quick access to baseline sample data you would typical calculate without limiting access to the fine grained samples you may occasionally require.",
    "title": "New Ways to Work with Workouts",
    "originalPublishingDate": "2018-06-06T09:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["fitness", "health", "healthkit", "health records", "workouts"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/707liyrusj4qu2rj1z/707/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/707liyrusj4qu2rj1z/707/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/707liyrusj4qu2rj1z/707/707_new_ways_to_work_with_workouts.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/707liyrusj4qu2rj1z/707/707_hd_new_ways_to_work_with_workouts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/707liyrusj4qu2rj1z/707/707_sd_new_ways_to_work_with_workouts.mp4",
      "duration": 2399
    },
    "related": {
      "activities": ["wwdc2018-205", "wwdc2018-206", "wwdc2018-706", "wwdc2018-2030", "wwdc2018-2100", "wwdc2018-2210", "wwdc2018-2500"]
    }
  }, {
    "id": "wwdc2018-233",
    "staticContentId": 2219,
    "eventContentId": 233,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/233",
    "description": "iOS contains powerful technologies you can use to make your app truly delightful. Learn how to take your app to the next level with easy-to-implement features such as Handoff and External Display support. Preserve that feeling of magic in your app with pro-tips that combine animations, gestures and layout, while keeping your scrolling smooth, and your code scalable. Dive into the anatomy of a launch to get your app responsive quickly, and learn some great debugging tricks from the pros!",
    "title": "Adding Delight to your iOS App",
    "originalPublishingDate": "2018-06-08T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["animations", "app lifecycle", "continuity", "debugging", "external display", "gestures", "handoff", "scrolling"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/233uq0n4zauq0ili/233/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/233uq0n4zauq0ili/233/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/233uq0n4zauq0ili/233/233_adding_delight_to_your_ios_app.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/233uq0n4zauq0ili/233/233_hd_adding_delight_to_your_ios_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/233uq0n4zauq0ili/233/233_sd_adding_delight_to_your_ios_app.mp4",
      "duration": 3081
    },
    "related": {
      "activities": ["wwdc2018-211", "tech-talks-209", "wwdc2017-230", "wwdc2017-404", "wwdc2017-413", "wwdc2016-219", "wwdc2016-418", "wwdc2015-412", "wwdc2015-709", "wwdc2014-219", "wwdc2014-236", "wwdc2014-410", "wwdc2014-419"],
      "resources": [336]
    }
  }, {
    "id": "wwdc2018-717",
    "staticContentId": 2091,
    "eventContentId": 717,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/717",
    "description": "Using Core ML models in Vision makes the creation of powerful Computer Vision applications easy. Learn how easy it is to use custom trained classifiers and object recognition models in a live camera capture. In addition, you'll learn about the latest additions to the Vision Framework along with a deeper dive into some its fundamentals.",
    "title": "Vision with Core ML",
    "originalPublishingDate": "2018-06-07T15:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["barcode", "barcode detection", "core ml", "create ml", "face", "face detection", "face landmarks", "image alignment", "machine learning", "object detection", "object tracking", "rectangle detection", "scene detection", "vision"],
    "topicIds": [30, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/717nagdm5s7ynqf/717/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/717nagdm5s7ynqf/717/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/717nagdm5s7ynqf/717/717_vision_with_core_ml.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/717nagdm5s7ynqf/717/717_hd_vision_with_core_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/717nagdm5s7ynqf/717/717_sd_vision_with_core_ml.mp4",
      "duration": 2373
    },
    "related": {
      "activities": ["wwdc2019-222", "wwdc2019-228", "wwdc2019-234", "wwdc2019-420", "wwdc2019-424", "wwdc2018-703", "wwdc2018-708", "wwdc2018-709", "wwdc2018-712", "wwdc2018-716", "wwdc2018-7200", "wwdc2017-506"],
      "resources": [465, 464, 379, 378]
    }
  }, {
    "id": "wwdc2018-703",
    "staticContentId": 2081,
    "eventContentId": 703,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/703",
    "description": "Create ML is a new framework designed to help you easily build machine learning models using Swift and Xcode. Designed for Simplicity and Performance. Learn how you can build customized models from data that will enable new and powerful features in your apps using Create ML.",
    "title": "Introducing Create ML",
    "originalPublishingDate": "2018-06-05T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/703r5lx362so6b/703/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/703r5lx362so6b/703/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/703r5lx362so6b/703/703_introducing_create_ml.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/703r5lx362so6b/703/703_hd_introducing_create_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/703r5lx362so6b/703/703_sd_introducing_create_ml.mp4",
      "duration": 2061
    },
    "related": {
      "activities": ["wwdc2018-110", "wwdc2018-402", "wwdc2018-708", "wwdc2018-709", "wwdc2018-712", "wwdc2018-713", "wwdc2018-717", "wwdc2018-7100", "wwdc2018-7180"],
      "resources": [443]
    }
  }, {
    "id": "wwdc2018-209",
    "staticContentId": 2249,
    "eventContentId": 209,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/209",
    "description": "Gain insights into the latest in Cocoa frameworks for macOS. Hear about Dark Mode, control tinting, contextual workflows for Touch Bar and Finder, and other improvements in AppKit, Foundation, and related areas. Get an overview and guide to the sessions that we have this year covering advancements in Cocoa.",
    "title": "What's New in Cocoa for macOS",
    "originalPublishingDate": "2018-06-05T16:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [34, 67, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/209pydirtfgavpnj/209/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/209pydirtfgavpnj/209/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/209pydirtfgavpnj/209/209_whats_new_in_cocoa_for_macos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/209pydirtfgavpnj/209/209_hd_whats_new_in_cocoa_for_macos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/209pydirtfgavpnj/209/209_sd_whats_new_in_cocoa_for_macos.mp4",
      "duration": 2439
    },
    "related": {
      "activities": ["wwdc2018-210", "wwdc2018-218", "wwdc2018-221", "wwdc2018-222", "wwdc2018-604", "wwdc2018-2130", "wwdc2018-2220", "wwdc2018-2420", "wwdc2018-6070"]
    }
  }, {
    "id": "wwdc2018-211",
    "staticContentId": 2129,
    "eventContentId": 211,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/211",
    "description": "Siri Shortcuts are a powerful new feature in iOS 12 that allow your app to expose its functionality to Siri. This enables Siri to suggest your shortcut at relevant times based on various context. Shortcuts can also be added to Siri to run with a voice phrase on iOS, HomePod and watchOS. Learn how to expose shortcuts in your app using NSUserActivity and discover the benefits of creating custom intents with SiriKit for a richer user experience.",
    "title": "Introduction to Siri Shortcuts",
    "originalPublishingDate": "2018-06-05T17:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎙", "🎤", "⌚️", "donate", "donation", "inrelevant", "intents", "inui", "phrase", "shortcut", "siri", "suggestion", "voice"],
    "topicIds": [13, 21, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/211fjjqs9t1cbwzwgf0/211/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/211fjjqs9t1cbwzwgf0/211/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/211fjjqs9t1cbwzwgf0/211/211_introduction_to_siri_shortcuts.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/211fjjqs9t1cbwzwgf0/211/211_hd_introduction_to_siri_shortcuts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/211fjjqs9t1cbwzwgf0/211/211_sd_introduction_to_siri_shortcuts.mp4",
      "duration": 2926
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-214", "wwdc2018-216", "wwdc2018-217", "wwdc2018-233", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2250", "wwdc2018-2300", "wwdc2018-2440", "wwdc2017-214", "wwdc2017-228", "wwdc2016-217", "wwdc2016-225"],
      "resources": [350, 349, 348, 174, 12]
    }
  }, {
    "id": "wwdc2018-202",
    "staticContentId": 2251,
    "eventContentId": 202,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/202",
    "description": "iOS 12 enhances the Cocoa Touch frameworks to improve app performance and deliver exciting new features. Learn about performance best practices, security improvements, tools for supporting multiple screen sizes and shapes, new APIs for iMessage apps, Siri Shortcuts, and Swift refinements. Find out which sessions you won't want to miss throughout the week.",
    "title": "What's New in Cocoa Touch",
    "originalPublishingDate": "2018-06-05T10:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [21, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/202gr4vfnb8iayqu/202/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/202gr4vfnb8iayqu/202/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/202gr4vfnb8iayqu/202/202_whats_new_in_cocoa_touch.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/202gr4vfnb8iayqu/202/202_hd_whats_new_in_cocoa_touch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/202gr4vfnb8iayqu/202/202_sd_whats_new_in_cocoa_touch.mp4",
      "duration": 2431
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-204", "wwdc2018-211", "wwdc2018-214", "wwdc2018-217", "wwdc2018-219", "wwdc2018-220", "wwdc2018-222", "wwdc2018-235", "wwdc2018-710", "wwdc2018-711", "wwdc2018-2080", "wwdc2018-2390"]
    }
  }, {
    "id": "wwdc2018-219",
    "staticContentId": 2253,
    "eventContentId": 219,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/219",
    "description": "Whether it's for UI elements or a fundamental part of your application, at some point, you have to handle images. This session is packed with engaging insight into how images are handled in iOS including discussion of UIImage, UIImageView, custom drawing in UIKit, plus advanced CPU and GPU techniques that can help you maximize performance and minimize memory footprint.",
    "title": "Image and Graphics Best Practices",
    "originalPublishingDate": "2018-06-06T14:00:00-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["backing store", "buffer", "cocoa touch", "core image", "drawing", "image", "layer", "layers", "offscreen", "performance", "pixel", "uiimage", "uiimageview", "uilabel"],
    "topicIds": [30, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/219mybpx95zm9x/219/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/219mybpx95zm9x/219/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/219mybpx95zm9x/219/219_image_and_graphics_best_practices.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/219mybpx95zm9x/219/219_hd_image_and_graphics_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/219mybpx95zm9x/219/219_sd_image_and_graphics_best_practices.mp4",
      "duration": 2011
    },
    "related": {
      "activities": ["wwdc2018-202", "wwdc2018-227", "wwdc2018-407", "wwdc2018-416", "wwdc2018-701", "wwdc2018-719", "wwdc2017-706", "wwdc2016-219", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2018-236",
    "staticContentId": 2435,
    "eventContentId": 236,
    "eventId": "wwdc2018",
    "webPermalink": "https://developer.apple.com/wwdc18/236",
    "description": "Speech can enhance the audio experience of your app, whether you are generating spoken feedback for accessibility, or providing critical information beyond simple alerts or notifications. AVSpeechSynthesizer produces synthesized speech from text and allows you to control and monitor the progress of ongoing speech. Learn the ins and outs of AVSpeechSynthesizer and how to add computer-generated speech output to your app.",
    "title": "AVSpeechSynthesizer: Making iOS Talk",
    "originalPublishingDate": "2018-06-05T17:26:26-07:00",
    "publishingExpiryDate": "2023-06-04T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["assistive", "blind", "disability", "synthesizer", "voiceover"],
    "topicIds": [8, 28, 21],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/236mwbxbxjfsvns4jan/236/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/236mwbxbxjfsvns4jan/236/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/236mwbxbxjfsvns4jan/236/236_avspeechsynthesizer_making_ios_talk.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/236mwbxbxjfsvns4jan/236/236_hd_avspeechsynthesizer_making_ios_talk.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2018/236mwbxbxjfsvns4jan/236/236_sd_avspeechsynthesizer_making_ios_talk.mp4",
      "duration": 528
    }
  }, {
    "id": "insights-109",
    "staticContentId": 2375,
    "eventContentId": 109,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/109",
    "description": "Super Evil Megacorp shares why cultivating an authentic relationship with its community is critical to the success of Vainglory.",
    "title": "Managing a Community",
    "originalPublishingDate": "2017-02-15T00:00:00-08:00",
    "platforms": ["iOS"],
    "keywords": ["community building", "community management", "customer support", "semc", "super evil megacorp", "vainglory 5v5"],
    "topicIds": [41],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Managing_a_Community/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Managing_a_Community/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Managing_a_Community/subtitles/eng/Managing_a_Community_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Managing_a_Community/Managing_a_Community_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Managing_a_Community/Managing_a_Community_sd.mp4",
      "duration": 303
    },
    "related": {
      "resources": [314]
    }
  }, {
    "id": "insights-110",
    "staticContentId": 2341,
    "eventContentId": 110,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/110",
    "description": "The people behind Concepts, Grokker, TypeShift, War Dragons, and codeSpark Academy share how they use each metadata element on the App Store product page to encourage users to download their apps.",
    "title": "App Store Product Page",
    "originalPublishingDate": "2018-03-23T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["app store optimization", "aso", "codespark academy", "concepts", "grokker", "marketing", "metadata", "product page", "product page optimization", "typeshift", "ua", "user acquisition", "user acquisition marketing", "war dragons"],
    "topicIds": [39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/app-store-product-page/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/app-store-product-page/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/app-store-product-page/subtitles/eng/App-Store-Product-Page-Developer-Insight.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/app-store-product-page/app-store-product-page_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/app-store-product-page/app-store-product-page_sd.mp4",
      "duration": 249
    },
    "related": {
      "resources": [123]
    }
  }, {
    "id": "insights-103",
    "staticContentId": 2544,
    "eventContentId": 103,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/103",
    "description": "In making CARROT Weather for Apple Watch, Grailr started from scratch and evolved both the app and its business model.",
    "title": "Bringing CARROT Weather to Apple Watch",
    "originalPublishingDate": "2016-04-19T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apple watch", "apple watch design", "business models", "carrot weather", "design", "grailr", "monetization", "monetizing on apple watch", "paymium", "watchos"],
    "topicIds": [40],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Grailr_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Grailr_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Grailr_Developer_Insight/subtitles/eng/Grailr_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Grailr_Developer_Insight/Grailr_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Grailr_Developer_Insight/Grailr_Developer_Insight_sd.mp4",
      "duration": 256
    },
    "related": {
      "resources": [319]
    }
  }, {
    "id": "insights-108",
    "staticContentId": 2509,
    "eventContentId": 108,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/108",
    "description": "Originator shares how it built a sustainable business in the Kids category with the Endless series of apps.",
    "title": "Building a Business in the Kids Category",
    "originalPublishingDate": "2016-12-14T08:00:00-08:00",
    "publishingExpiryDate": "2022-12-14T08:00:00-08:00",
    "platforms": ["iOS"],
    "keywords": ["business models", "children’s apps", "endless", "endless alphabet", "endless numbers", "endless series", "kid’s apps", "kids category", "marketing", "monetization", "originator"],
    "topicIds": [40, 39, 12],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Building_a_Business_in_the_Kids_Category/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Building_a_Business_in_the_Kids_Category/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Building_a_Business_in_the_Kids_Category/cc/eng/Building_a_Business_in_the_Kids_Category_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Building_a_Business_in_the_Kids_Category/Building_a_Business_in_the_Kids_Category_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Building_a_Business_in_the_Kids_Category/Building_a_Business_in_the_Kids_Category_sd.mp4",
      "duration": 298
    },
    "related": {
      "resources": [313]
    }
  }, {
    "id": "insights-111",
    "staticContentId": 2339,
    "eventContentId": 111,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/111",
    "description": "Tinybop, Zynga, Hopscotch, Tone It Up, 1 Second Everyday, and Pocket share how having a direct dialogue with users on the App Store helps them improve user acquisition and retention.",
    "title": "Responding to Reviews",
    "originalPublishingDate": "2018-04-25T08:00:00-07:00",
    "publishingExpiryDate": "2024-04-25T08:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["1 second everyday", "app store", "developer response", "engagement", "hopscotch", "pocket", "product page", "ratings and reviews", "retention", "star rating", "summary rating", "tinybop", "tone it up", "ua", "user acquisition", "zynga"],
    "topicIds": [41, 39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/responding-to-reviews/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/responding-to-reviews/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/responding-to-reviews/subtitles/eng/App-Store-Responding-to-Reviews-Developer-Insight.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/responding-to-reviews/responding-to-reviews_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/responding-to-reviews/responding-to-reviews_sd.mp4",
      "duration": 217
    },
    "related": {
      "resources": [121]
    }
  }, {
    "id": "insights-106",
    "staticContentId": 2539,
    "eventContentId": 106,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/106",
    "description": "Houzz’s unique approach to monetization focuses on creating the best experience for homeowners and professionals through technology.",
    "title": "Creating A Great Commerce Experience",
    "originalPublishingDate": "2016-08-03T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["apple pay", "business models", "e-commerce", "e-commerce transactions", "houzz", "monetization"],
    "topicIds": [40, 10],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Houzz_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Houzz_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Houzz_Developer_Insight/subtitles/eng/Houzz_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Houzz_Developer_Insight/Houzz_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Houzz_Developer_Insight/Houzz_Developer_Insight_sd.mp4",
      "duration": 269
    },
    "related": {
      "resources": [316]
    }
  }, {
    "id": "insights-112",
    "staticContentId": 2588,
    "eventContentId": 112,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/112",
    "description": "The developers behind Elevate, Dropbox, Calm, and Bumble share how they create great customer experiences by continuing to provide value throughout the subscription lifecycle.",
    "title": "Using Subscriptions",
    "originalPublishingDate": "2018-09-10T00:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["auto-renewable subscription", "churn", "crossgrade", "downgrade", "freemium", "free trial", "in-app purchase", "introductory pricing", "ranking in-app purchases", "receipt validation", "retention", "subscription business model", "subscription group", "subscription marketing", "subscriptions", "upgrade"],
    "topicIds": [40, 41, 69, 39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/using_subscriptions/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/using_subscriptions/atv_vod_mvp.m3u8",
      "duration": 223
    },
    "related": {
      "activities": ["tech-talks-803"],
      "resources": [448]
    }
  }, {
    "id": "insights-107",
    "staticContentId": 2538,
    "eventContentId": 107,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/107",
    "description": "Indie developer WRKSHP attracted hundreds of thousands of users with limited marketing resources by winning over its most passionate players.",
    "title": "Marketing a Game at Launch",
    "originalPublishingDate": "2016-10-20T08:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["app marketing", "battle camp", "community building", "game marketing", "ua", "user acquisition", "user acquisition marketing", "wrkshp"],
    "topicIds": [40, 41, 39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/WRKSHP_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/WRKSHP_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/WRKSHP_Developer_Insight/subtitles/eng/WRKSHP_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/WRKSHP_Developer_Insight/WRKSHP_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/WRKSHP_Developer_Insight/WRKSHP_Developer_Insight_sd.mp4",
      "duration": 294
    },
    "related": {
      "resources": [315]
    }
  }, {
    "id": "insights-104",
    "staticContentId": 2543,
    "eventContentId": 104,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/104",
    "description": "Seriously built a brand for its game, Best Fiends, with a creative approach to social media marketing.",
    "title": "Building a Brand on Social Media",
    "originalPublishingDate": "2016-04-18T08:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["app marketing", "best fiends", "brand marketing", "community building", "game marketing", "seriously", "social media marketing", "ua", "user acquisition", "user acquisition marketing"],
    "topicIds": [41, 39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Seriously_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Seriously_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Seriously_Developer_Insight/subtitles/eng/Seriously_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Seriously_Developer_Insight/Seriously_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Seriously_Developer_Insight/Seriously_Developer_Insight_sd.mp4",
      "duration": 223
    },
    "related": {
      "resources": [318]
    }
  }, {
    "id": "insights-102",
    "staticContentId": 2554,
    "eventContentId": 102,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/102",
    "description": "Evernote began localizing its app for Japan by speaking with Japanese users to learn more about their preferences and culture.",
    "title": "Localizing Evernote for Japan",
    "originalPublishingDate": "2016-04-18T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["app localization", "culturalizing", "evernote", "internationalization", "japan", "japanese", "localizing"],
    "topicIds": [41, 39, 42],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Evernote_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Evernote_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Evernote_Developer_Insight/subtitles/eng/Evernote_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Evernote_Developer_Insight/Evernote_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Evernote_Developer_Insight/Evernote_Developer_Insight_sd.mp4",
      "duration": 220
    },
    "related": {
      "resources": [320]
    }
  }, {
    "id": "insights-101",
    "staticContentId": 2555,
    "eventContentId": 101,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/101",
    "description": "Smule grew a thriving community of loyal users through regular app updates and feature innovations.",
    "title": "Releasing App Updates",
    "originalPublishingDate": "2016-04-18T00:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["app updating", "binary submission", "community building", "community management", "engagement", "magic piano", "retention", "sing! karaoke", "smule"],
    "topicIds": [41],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/Smule_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/Smule_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/Smule_Developer_Insight/subtitles/eng/Smule_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/Smule_Developer_Insight/Smule_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/Smule_Developer_Insight/Smule_Developer_Insight_sd.mp4",
      "duration": 185
    },
    "related": {
      "resources": [321]
    }
  }, {
    "id": "insights-105",
    "staticContentId": 2542,
    "eventContentId": 105,
    "eventId": "insights",
    "webPermalink": "https://developer.apple.com/videos/play/insights/105",
    "description": "3 Minute Games shares why the paid business model made sense for the Lifeline series of games.",
    "title": "Using the Paid Business Model",
    "originalPublishingDate": "2016-06-23T08:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["3 minute games", "app bundles", "business models", "games", "ios notifications", "lifeline", "lock screen", "paid games", "premium games"],
    "topicIds": [40, 39],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/app_store/3_Minute_Games_Developer_Insight/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/app_store/3_Minute_Games_Developer_Insight/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/app_store/3_Minute_Games_Developer_Insight/subtitles/eng/3_Minute_Games_Developer_Insight_sd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/app_store/3_Minute_Games_Developer_Insight/3_Minute_Games_Developer_Insight_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/app_store/3_Minute_Games_Developer_Insight/3_Minute_Games_Developer_Insight_sd.mp4",
      "duration": 233
    },
    "related": {
      "resources": [317]
    }
  }, {
    "id": "app-store-connect-103",
    "staticContentId": 2586,
    "eventContentId": 103,
    "eventId": "app-store-connect",
    "webPermalink": "https://developer.apple.com/videos/play/app-store-connect/103",
    "description": "Dig deeper to understand and compare your analytics data.",
    "title": "App Analytics Metrics",
    "originalPublishingDate": "2016-01-01T00:00:00-08:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["analytics", "appstoreconnect"],
    "topicIds": [71],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Metrics_Pt2/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Metrics_Pt2/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Metrics_Pt2/Analytics_Metrics_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Metrics_Pt2/Analytics_Metrics_sd.mp4",
      "duration": 85
    }
  }, {
    "id": "app-store-connect-102",
    "staticContentId": 2585,
    "eventContentId": 102,
    "eventId": "app-store-connect",
    "webPermalink": "https://developer.apple.com/videos/play/app-store-connect/102",
    "description": "Get started using App Analytics on App Store Connect.",
    "title": "App Analytics Overview",
    "originalPublishingDate": "2016-01-01T00:00:00-08:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["analytics", "appstoreconnect"],
    "topicIds": [71],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Overview_Pt2/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Overview_Pt2/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Overview_Pt2/Analytics_Overview_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Overview_Pt2/Analytics_Overview_sd.mp4",
      "duration": 58
    }
  }, {
    "id": "app-store-connect-101",
    "staticContentId": 2583,
    "eventContentId": 101,
    "eventId": "app-store-connect",
    "webPermalink": "https://developer.apple.com/videos/play/app-store-connect/101",
    "description": "Learn how to easily test your app with internal and external testers.",
    "title": "TestFlight",
    "originalPublishingDate": "2015-01-01T00:00:00-08:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["appstoreconnect", "testers", "testflight"],
    "topicIds": [71, 37],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/TestFlight_App_Store_Connect_2018/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/TestFlight_App_Store_Connect_2018/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/TestFlight_App_Store_Connect_2018/TestFlight_App_Store_Connect_2018_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/TestFlight_App_Store_Connect_2018/TestFlight_App_Store_Connect_2018_sd.mp4",
      "duration": 163
    }
  }, {
    "id": "app-store-connect-105",
    "staticContentId": 2584,
    "eventContentId": 105,
    "eventId": "app-store-connect",
    "webPermalink": "https://developer.apple.com/videos/play/app-store-connect/105",
    "description": "Get to know App Store Connect and learn how to prepare, deliver, and manage your apps.",
    "title": "App Store Connect Basics",
    "originalPublishingDate": "2018-08-28T00:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["appstoreconnect"],
    "topicIds": [71],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/App_Store_Connect_Basics/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/App_Store_Connect_Basics/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/App_Store_Connect_Basics/App_Store_Connect_Basics_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/App_Store_Connect_Basics/App_Store_Connect_Basics_sd.mp4",
      "duration": 134
    }
  }, {
    "id": "app-store-connect-104",
    "staticContentId": 2587,
    "eventContentId": 104,
    "eventId": "app-store-connect",
    "webPermalink": "https://developer.apple.com/videos/play/app-store-connect/104",
    "description": "See how often users are coming back to your app.",
    "title": "App Analytics Retention",
    "originalPublishingDate": "2016-01-01T00:00:00-08:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["analytics", "appstoreconnect"],
    "topicIds": [71],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Retention_Pt2/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Retention_Pt2/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Retention_Pt2/Analytics_Retention_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Analytics_Retention_Pt2/Analytics_Retention_sd.mp4",
      "duration": 57
    }
  }, {
    "id": "tech-talks-206",
    "staticContentId": 1990,
    "eventContentId": 206,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/206",
    "description": "iOS 11 provides built-in support to detect and handle QR codes. Discover the supported QR code types, how each type is handled by built-in Camera and Safari apps, and how Universal Links can seamlessly send users to your app when scanning your QR codes.",
    "title": "QR Code Recognition on iOS 11",
    "originalPublishingDate": "2017-12-21T10:00:00-08:00",
    "platforms": ["iOS"],
    "topicIds": [29],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/qr_code_recognition_in_ios_11/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/qr_code_recognition_in_ios_11/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/qr_code_recognition_in_ios_11/qr_code_recognition_in_ios_11_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/qr_code_recognition_in_ios_11/qr_code_recognition_in_ios_11_sd.mp4",
      "duration": 556
    }
  }, {
    "id": "tech-talks-505",
    "staticContentId": 2886,
    "eventContentId": 505,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/505",
    "description": "Learn about the Apple TV authentication context, what it does, and how to start building this web service. Learn how the authentication context fits into the development for the Apple TV Distribution Program.",
    "title": "Apple TV Authentication Context",
    "originalPublishingDate": "2019-05-10T00:01:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["apple tv", "apple tv app", "apple tv distribution program", "apple tv set top box", "authentication", "authentication context", "set top box", "set top box api", "set top box apis", "set top box authentication overview", "single sign on", "sso", "stb", "stb api", "tv", "tv", "video subscriber account", "video subscriber account framework", "vsa", "zero sign on", "zso"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD/Apple_TV_Authentication_Context_AD_sd.mp4",
      "duration": 327
    },
    "related": {
      "activities": ["tech-talks-504", "tech-talks-506", "tech-talks-507"],
      "resources": [468]
    }
  }, {
    "id": "tech-talks-604",
    "staticContentId": 2008,
    "eventContentId": 604,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/604",
    "description": "Tile shading is a new Metal 2 pipeline stage allowing apps to combine rendering and compute operations into a single render pass while sharing imageblock data and threadgroup memory. Understand how to create a tile shading pipeline, and see how it leverages the high-bandwidth tile memory of the A11 GPU.",
    "title": "Metal 2 on A11 - Tile Shading",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [27],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/604c7y7cq00ft/metal_tile_shaders/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/604c7y7cq00ft/metal_tile_shaders/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/604c7y7cq00ft/metal_tile_shaders/subtitles/eng/metal_tile_shaders.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/604c7y7cq00ft/metal_tile_shaders/metal_tile_shaders_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/604c7y7cq00ft/metal_tile_shaders/metal_tile_shaders_sd.mp4",
      "duration": 584
    },
    "related": {
      "activities": ["tech-talks-602", "tech-talks-603", "tech-talks-605", "tech-talks-606", "wwdc2017-601"],
      "resources": [270, 265, 264]
    }
  }, {
    "id": "tech-talks-506",
    "staticContentId": 2887,
    "eventContentId": 506,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/506",
    "description": "Learn about the Set Top Box APIs, what they do, and how they help make the Apple TV setup easier for your customers. Learn how this framework fits into the development for the Apple TV Distribution Program.",
    "title": "Apple TV Set Top Box APIs",
    "originalPublishingDate": "2019-05-10T00:02:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["apple tv", "apple tv app", "apple tv distribution program", "apple tv set top box", "authentication", "authentication context", "set top box", "set top box api", "set top box apis", "set top box authentication overview", "single sign on", "sso", "stb", "stb api", "tv", "tv", "video subscriber account", "video subscriber account framework", "vsa", "zero sign on", "zso"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD_hd.mp4?dl=1",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD/Apple_TV_Set_Top_Box_APIs_AD_sd.mp4?dl=1",
      "duration": 187
    },
    "related": {
      "activities": ["tech-talks-504", "tech-talks-505", "tech-talks-507"],
      "resources": [470]
    }
  }, {
    "id": "tech-talks-507",
    "staticContentId": 2888,
    "eventContentId": 507,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/507",
    "description": "Learn about the VideoSubscriberAccount framework, what it does, and how to integrate this framework with your app. Learn how this framework fits into the development for the Apple TV Distribution Program.",
    "title": "Apple TV VSA Framework",
    "originalPublishingDate": "2019-05-10T00:03:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["apple tv", "apple tv app", "apple tv distribution program", "apple tv set top box", "authentication", "authentication context", "set top box", "set top box api", "set top box apis", "set top box authentication overview", "single sign on", "sso", "stb", "stb api", "tv", "tv", "video subscriber account", "video subscriber account framework", "vsa", "zero sign on", "zso"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD_hd.mp4?dl=1",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD/Apple_TV_VSA_Framework_AD_sd.mp4?dl=1",
      "duration": 121
    },
    "related": {
      "activities": ["tech-talks-504", "tech-talks-505", "tech-talks-506"],
      "resources": [469]
    }
  }, {
    "id": "tech-talks-501",
    "staticContentId": 1995,
    "eventContentId": 501,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/501",
    "description": "4K and HDR technologies enable the creation of amazing cinematic video experiences and stunning picture quality. Learn about how to support these new formats, and how to properly author your playlists to enable playback of these types of streams.",
    "title": "Authoring 4K and HDR HLS Streams",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/501n21xhva8lv/authoring_4k_and_hdr_hls_streams/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/501n21xhva8lv/authoring_4k_and_hdr_hls_streams/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/501n21xhva8lv/authoring_4k_and_hdr_hls_streams/subtitles/eng/authoring_4k_and_hdr_hls_streams.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/501n21xhva8lv/authoring_4k_and_hdr_hls_streams/authoring_4k_and_hdr_hls_streams_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/501n21xhva8lv/authoring_4k_and_hdr_hls_streams/authoring_4k_and_hdr_hls_streams_sd.mp4",
      "duration": 225
    },
    "related": {
      "activities": ["wwdc2018-502", "tech-talks-202", "tech-talks-502", "tech-talks-503", "wwdc2017-504", "wwdc2017-514", "wwdc2017-515", "wwdc2016-510"],
      "resources": [175]
    }
  }, {
    "id": "tech-talks-203",
    "staticContentId": 1992,
    "eventContentId": 203,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/203",
    "description": "Apple Watch Series 3 makes it easier to stay connected, even when away from your phone. Learn how to keep your app responsive over cellular connections using URLSession. Find out how to optimize your Watch app networking code to ensure that your app is always up to date and ready for use. Discover how to leverage Core Motion data from the new barometric altimeter for displaying relative altitude changes.",
    "title": "Updating for Apple Watch Series 3",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["🥃", "⌚️", "cmaltimeter"],
    "topicIds": [14, 18],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/203fq5xdc4lg5/updating_for_apple_watch_series_3/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/203fq5xdc4lg5/updating_for_apple_watch_series_3/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/203fq5xdc4lg5/updating_for_apple_watch_series_3/subtitles/eng/updating_for_apple_watch_series_3.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/203fq5xdc4lg5/updating_for_apple_watch_series_3/updating_for_apple_watch_series_3_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/203fq5xdc4lg5/updating_for_apple_watch_series_3/updating_for_apple_watch_series_3_sd.mp4",
      "duration": 742
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-504", "wwdc2018-2030", "wwdc2018-2250", "wwdc2018-2310", "wwdc2018-2380", "wwdc2017-704", "wwdc2017-709"],
      "resources": [138, 137, 77]
    }
  }, {
    "id": "tech-talks-205",
    "staticContentId": 1987,
    "eventContentId": 205,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/205",
    "description": "Website links received in Messages can be made vastly more inviting than a simple text URL. By providing small amounts of metadata in your web pages, links to your website can include rich content such as icons, images and even video. Learn how visitors to your website can share links that look as good as your website.",
    "title": "Ensuring Beautiful Rich Links",
    "originalPublishingDate": "2017-12-21T10:00:00-08:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/ensuring_beautiful_rich_links/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/ensuring_beautiful_rich_links/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/ensuring_beautiful_rich_links/ensuring_beautiful_rich_links_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/ensuring_beautiful_rich_links/ensuring_beautiful_rich_links_sd.mp4",
      "duration": 331
    },
    "related": {
      "activities": ["wwdc2019-262", "wwdc2018-232", "wwdc2018-239"]
    }
  }, {
    "id": "tech-talks-504",
    "staticContentId": 2880,
    "eventContentId": 504,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/504",
    "description": "Learn about the Apple TV Distribution Program and the engineering requirements and business benefits that come with enrollment. Familiarize yourself with the authentication context, VideoSubscriberAccount framework, and the Set Top Box APIs.",
    "title": "Apple TV Distribution Program Overview",
    "originalPublishingDate": "2019-05-10T00:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["apple tv", "apple tv app", "apple tv distribution program", "apple tv set top box", "authentication", "authentication context", "set top box", "set top box api", "set top box apis", "set top box authentication overview", "single sign on", "sso", "stb", "stb api", "tv", "tv", "video subscriber account", "video subscriber account framework", "vsa", "zero sign on", "zso"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD_hd.mp4?dl=1",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Apple_TV_Provider/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD/Apple_TV_Set_Top_Box_Authentication_Overview_AD_sd.mp4?dl=1",
      "duration": 249
    },
    "related": {
      "activities": ["tech-talks-505", "tech-talks-506", "tech-talks-507"],
      "resources": [467]
    }
  }, {
    "id": "tech-talks-703",
    "staticContentId": 2582,
    "eventContentId": 703,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/703",
    "description": "The General Data Protection Regulation (GDPR) is a European Union regulation that requires developers to give users visibility and control over the personal data you store on their behalf. Learn how to use new and existing CloudKit APIs to build privacy into your apps and make sure customers can exercise their GDPR rights.",
    "title": "GDPR & CloudKit",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [11, 19],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/703j00nzmafjd72j/gdpr_and_cloudkit/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/703j00nzmafjd72j/gdpr_and_cloudkit/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/703j00nzmafjd72j/gdpr_and_cloudkit/gdpr_and_cloudkit_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/703j00nzmafjd72j/gdpr_and_cloudkit/gdpr_and_cloudkit_sd.mp4",
      "duration": 812
    },
    "related": {
      "resources": [447]
    }
  }, {
    "id": "tech-talks-802",
    "staticContentId": 2580,
    "eventContentId": 802,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/802",
    "description": "Apple Watch Series 4 provides new opportunities for designers and developers to do more with their apps. Series 4 watches have new displays with larger dimensions, and other enhancements that allow developers to deliver richer and more immersive experiences.",
    "title": "Designing for Apple Watch Series 4",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["watchOS"],
    "topicIds": [3, 5, 6, 7],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/802xfgu0ylbq0q0w/designing_for_apple_watch_series_4/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/802xfgu0ylbq0q0w/designing_for_apple_watch_series_4/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/802xfgu0ylbq0q0w/designing_for_apple_watch_series_4/designing_for_apple_watch_series_4_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/802xfgu0ylbq0q0w/designing_for_apple_watch_series_4/designing_for_apple_watch_series_4_sd.mp4",
      "duration": 566
    },
    "related": {
      "activities": ["tech-talks-208"],
      "resources": [430, 14]
    }
  }, {
    "id": "tech-talks-702",
    "staticContentId": 2578,
    "eventContentId": 702,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/702",
    "description": "Background reading of NFC tags is a new feature for iPhone XS, iPhone XS Max, and iPhone XR. Learn how to associate your app with an NFC tag to make it even easier for people to benefit from the NFC capabilities of new iPhones.",
    "title": "What's New in Core NFC",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["nfc"],
    "topicIds": [10],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/702jaaopvi9pptas/whats_new_in_core_nfc/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/702jaaopvi9pptas/whats_new_in_core_nfc/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/702jaaopvi9pptas/whats_new_in_core_nfc/whats_new_in_core_nfc_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/702jaaopvi9pptas/whats_new_in_core_nfc/whats_new_in_core_nfc_sd.mp4",
      "duration": 372
    },
    "related": {
      "activities": ["wwdc2019-715"],
      "resources": [446, 445, 444, 191, 59]
    }
  }, {
    "id": "tech-talks-803",
    "staticContentId": 2581,
    "eventContentId": 803,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/803",
    "description": "Providing a great subscription experience within your app makes it easier to acquire new subscribers. Learn how to more clearly communicate the value of your subscriptions, streamline your sign up flow, and make subscriptions appealing and effortless.",
    "title": "Designing for Subscription Success",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["design", "design best practices", "design patterns", "sampling", "subscription", "subscriptions"],
    "topicIds": [40, 3, 6, 69],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/803b0tqqpfjflrad/designing_for_subscription_success/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/803b0tqqpfjflrad/designing_for_subscription_success/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/803b0tqqpfjflrad/designing_for_subscription_success/designing_for_subscription_success_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/803b0tqqpfjflrad/designing_for_subscription_success/designing_for_subscription_success_sd.mp4",
      "duration": 552
    },
    "related": {
      "activities": ["insights-112"],
      "resources": [466, 448]
    }
  }, {
    "id": "tech-talks-804",
    "staticContentId": 2593,
    "eventContentId": 804,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/804",
    "description": "Learn how to make your app look great on the amazing, edge-to-edge display of iPad Pro and get essential guidance on which app behaviors are appropriate for the double-tap gesture on Apple Pencil.",
    "title": "Designing for iPad Pro and Apple Pencil",
    "originalPublishingDate": "2018-10-30T00:00:00-07:00",
    "publishingExpiryDate": "2023-10-30T00:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["auto", "corners", "display", "drawing", "home indicator", "inset", "layout", "margin", "multitasking", "resolution", "size classes", "uikit", "writing"],
    "topicIds": [3, 6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/804dgbsjyr/Designing_For_iPad_Pro/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/804dgbsjyr/Designing_For_iPad_Pro/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/804dgbsjyr/Designing_For_iPad_Pro/Designing_For_iPad_Pro_ad_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/804dgbsjyr/Designing_For_iPad_Pro/Designing_For_iPad_Pro_ad_sd.mp4",
      "duration": 544
    }
  }, {
    "id": "tech-talks-401",
    "staticContentId": 1988,
    "eventContentId": 401,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/401",
    "description": "Web Inspector is packed with features designed to make inspection, debugging and delivery of your web content a breeze. Get an overview of the latest features including major layouts, tabs, buttons, and other capabilities that make Web Inspector a powerful web development tool.",
    "title": "Web Inspector Walkthrough",
    "originalPublishingDate": "2017-12-21T10:00:00-08:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [33, 20],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/web_inspector_walkthrough/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/web_inspector_walkthrough/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/web_inspector_walkthrough/web_inspector_walkthrough_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/web_inspector_walkthrough/web_inspector_walkthrough_sd.mp4",
      "duration": 353
    },
    "related": {
      "activities": ["tech-talks-402", "wwdc2017-202", "wwdc2016-420", "wwdc2014-512"]
    }
  }, {
    "id": "tech-talks-204",
    "staticContentId": 2003,
    "eventContentId": 204,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/204",
    "description": "Learn tips for keeping your app's on-disk storage as organized and optimized as possible. See how to enable direct access to documents in your app using the new Files app in iOS 11. Gain insights into how to take inventory of your app's files and make the most of the storage capacity available to your app.",
    "title": "iOS Storage Best Practices",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [11],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/204a83a4lxlz1/ios_storage_best_practices/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/204a83a4lxlz1/ios_storage_best_practices/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/204a83a4lxlz1/ios_storage_best_practices/subtitles/eng/ios_storage_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/204a83a4lxlz1/ios_storage_best_practices/ios_storage_best_practices_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/204a83a4lxlz1/ios_storage_best_practices/ios_storage_best_practices_sd.mp4",
      "duration": 533
    },
    "related": {
      "resources": [260, 259, 258, 257]
    }
  }, {
    "id": "tech-talks-605",
    "staticContentId": 2009,
    "eventContentId": 605,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/605",
    "description": "Raster order groups allow Metal 2 apps to precisely control the order of parallel fragment shader threads accessing the same pixel coordinates. Learn how A11 extends raster order groups with support for multiple groups and adds new capabilities for accessing threadgroup memory. See how you can improve the performance of single pass deferred shading and order independent transparency.",
    "title": "Metal 2 on A11 - Raster Order Groups",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [27],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/605nglqckpcsi/metal_raster_order_groups/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/605nglqckpcsi/metal_raster_order_groups/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/605nglqckpcsi/metal_raster_order_groups/subtitles/eng/metal_raster_order_groups.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/605nglqckpcsi/metal_raster_order_groups/metal_raster_order_groups_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/605nglqckpcsi/metal_raster_order_groups/metal_raster_order_groups_sd.mp4",
      "duration": 656
    },
    "related": {
      "activities": ["tech-talks-602", "tech-talks-603", "tech-talks-604", "tech-talks-606", "wwdc2017-601"],
      "resources": [271, 266, 264]
    }
  }, {
    "id": "tech-talks-503",
    "staticContentId": 2042,
    "eventContentId": 503,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/503",
    "description": "Starting with tvOS 11.2, Apple TV 4K can automatically switch video display modes to match the native frame rate and dynamic range of video content. With tvOS 11.3, Apple TV (4th generation) can also automatically switch video display modes to match native frame rate. Learn how to make sure your app and video content are ready to support this capability using AVDisplayManager and AVDisplayCriteria.",
    "title": "Introduction to AVDisplayManager",
    "originalPublishingDate": "2017-10-30T10:00:00-07:00",
    "platforms": ["tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/Introduction_to_AVDisplayManager/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/Introduction_to_AVDisplayManager/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/Introduction_to_AVDisplayManager/Introduction_to_AVDisplayManager_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/Introduction_to_AVDisplayManager/Introduction_to_AVDisplayManager_sd.mp4",
      "duration": 380
    },
    "related": {
      "activities": ["tech-talks-501", "wwdc2017-504", "wwdc2017-515"],
      "resources": [276]
    }
  }, {
    "id": "tech-talks-402",
    "staticContentId": 1989,
    "eventContentId": 402,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/402",
    "description": "With Web Inspector, you can debug web content on several Apple platforms, including tvOS. This video introduces you to Web Inspector's powerful debugging capabilities, and takes you through the features designed to accelerate debugging of TVML content in your tvOS app.",
    "title": "Using Web Inspector with tvOS Apps",
    "originalPublishingDate": "2017-12-21T10:00:00-08:00",
    "platforms": ["macOS", "tvOS"],
    "topicIds": [33, 20, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/using_web_inspector_with_tvos_apps/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/using_web_inspector_with_tvos_apps/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/using_web_inspector_with_tvos_apps/using_web_inspector_with_tvos_apps_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/using_web_inspector_with_tvos_apps/using_web_inspector_with_tvos_apps_sd.mp4",
      "duration": 241
    },
    "related": {
      "activities": ["tech-talks-401", "wwdc2017-202"]
    }
  }, {
    "id": "tech-talks-801",
    "staticContentId": 1993,
    "eventContentId": 801,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/801",
    "description": "iPhone X features an all-screen Super Retina display, providing more space to display content and create deeply immersive experiences. Learn how to design your app or game to look and feel great on iPhone X, and all iOS devices.",
    "title": "Designing for iPhone X",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["design", "ios", "ios 11", "layout", "ui", "uikit", "user experience", "user interface", "visual design"],
    "topicIds": [6, 31, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/801xy9x7h32rn/designing_for_iphone_x/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/801xy9x7h32rn/designing_for_iphone_x/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/801xy9x7h32rn/designing_for_iphone_x/subtitles/eng/designing_for_iphone_x.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/801xy9x7h32rn/designing_for_iphone_x/designing_for_iphone_x_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/801xy9x7h32rn/designing_for_iphone_x/designing_for_iphone_x_sd.mp4",
      "duration": 770
    },
    "related": {
      "activities": ["wwdc2018-235", "tech-talks-201", "tech-talks-207"],
      "resources": [10]
    }
  }, {
    "id": "tech-talks-606",
    "staticContentId": 2010,
    "eventContentId": 606,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/606",
    "description": "Imageblock sample coverage control provides access to multisample tracking data within a tile shader, enabling development of custom MSAA resolve algorithms and more. Understand how the A11 GPU tracks unique samples, then explore an example that optimizes rendering of dense geometry through surface aggregation.",
    "title": "Metal 2 on A11 - Imageblock Sample Coverage Control",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [27],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/606fmwrx1qx3x/metal_imageblock_sample_coverage_control/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/606fmwrx1qx3x/metal_imageblock_sample_coverage_control/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/606fmwrx1qx3x/metal_imageblock_sample_coverage_control/subtitles/eng/metal_imageblock_sample_coverage_control.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/606fmwrx1qx3x/metal_imageblock_sample_coverage_control/metal_imageblock_sample_coverage_control_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/606fmwrx1qx3x/metal_imageblock_sample_coverage_control/metal_imageblock_sample_coverage_control_sd.mp4",
      "duration": 796
    },
    "related": {
      "activities": ["tech-talks-602", "tech-talks-603", "tech-talks-604", "tech-talks-605", "wwdc2017-601"],
      "resources": [272]
    }
  }, {
    "id": "tech-talks-603",
    "staticContentId": 2007,
    "eventContentId": 603,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/603",
    "description": "Imageblocks enable Metal 2 apps to define and manipulate custom per-pixel data structures in the high-bandwidth tile memory of the A11 GPU. Learn how imageblocks can pass data between the fragment and tile stages of a render pass and unlock sophisticated rendering techniques such as approximate order-independent transparency.",
    "title": "Metal 2 on A11 - Imageblocks",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [27],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/603lp0b4npn5r/metal_threadgroup_image_blocks/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/603lp0b4npn5r/metal_threadgroup_image_blocks/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/603lp0b4npn5r/metal_threadgroup_image_blocks/subtitles/eng/metal_threadgroup_image_blocks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/603lp0b4npn5r/metal_threadgroup_image_blocks/metal_threadgroup_image_blocks_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/603lp0b4npn5r/metal_threadgroup_image_blocks/metal_threadgroup_image_blocks_sd.mp4",
      "duration": 628
    },
    "related": {
      "activities": ["tech-talks-602", "tech-talks-604", "tech-talks-605", "tech-talks-606", "wwdc2017-601"],
      "resources": [269, 265, 264]
    }
  }, {
    "id": "tech-talks-601",
    "staticContentId": 1998,
    "eventContentId": 601,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/601",
    "description": "ARKit and iPhone X enable a revolutionary capability for robust face tracking in AR apps. See how your app can detect the position, topology, and expression of the user’s face, all with high accuracy and in real time. Learn about applying live selfie effects and see how to use facial expressions to drive a 3D character.",
    "title": "Face Tracking with ARKit",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [23],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/601eevz5w5fwv/face_tracking_with_arkit/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/601eevz5w5fwv/face_tracking_with_arkit/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/601eevz5w5fwv/face_tracking_with_arkit/subtitles/eng/face_tracking_with_arkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/601eevz5w5fwv/face_tracking_with_arkit/face_tracking_with_arkit_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/601eevz5w5fwv/face_tracking_with_arkit/face_tracking_with_arkit_sd.mp4",
      "duration": 445
    },
    "related": {
      "activities": ["wwdc2018-602", "wwdc2018-610", "wwdc2017-602", "wwdc2017-604"],
      "resources": [262, 25]
    }
  }, {
    "id": "tech-talks-201",
    "staticContentId": 2000,
    "eventContentId": 201,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/201",
    "description": "iPhone X has a beautiful new screen that will make your app look great. You may need to make some changes in your app to accommodate the new screen's size and rounded corners. Learn about some common pitfalls and see how you can take advantage of iOS 11's Safe Area and layout guides to make sure your app looks the best it can.",
    "title": "Building Apps for iPhone X",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/201qy4t11tjpm/building_apps_for_iphone_x/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/201qy4t11tjpm/building_apps_for_iphone_x/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/201qy4t11tjpm/building_apps_for_iphone_x/subtitles/eng/building_apps_for_iphone_x.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/201qy4t11tjpm/building_apps_for_iphone_x/building_apps_for_iphone_x_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/201qy4t11tjpm/building_apps_for_iphone_x/building_apps_for_iphone_x_sd.mp4",
      "duration": 815
    },
    "related": {
      "activities": ["wwdc2018-235", "tech-talks-207", "tech-talks-209", "tech-talks-801", "wwdc2017-204", "wwdc2017-219", "wwdc2017-412"],
      "resources": [261, 82]
    }
  }, {
    "id": "tech-talks-502",
    "staticContentId": 1994,
    "eventContentId": 502,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/502",
    "description": "Dolby Vision and HDR10 enable amazing new video viewing experiences with a wider color gamut and deeper contrast. Learn how this new technology works, and what the differences are between Dolby Vision and HDR10.",
    "title": "An Introduction to HDR Video",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/502bbcn7dmn9r/an_introduction_to_hdr_video/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/502bbcn7dmn9r/an_introduction_to_hdr_video/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/502bbcn7dmn9r/an_introduction_to_hdr_video/subtitles/eng/an_introduction_to_hdr_video.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/502bbcn7dmn9r/an_introduction_to_hdr_video/an_introduction_to_hdr_video_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/502bbcn7dmn9r/an_introduction_to_hdr_video/an_introduction_to_hdr_video_sd.mp4",
      "duration": 398
    },
    "related": {
      "activities": ["tech-talks-202", "tech-talks-501"]
    }
  }, {
    "id": "tech-talks-208",
    "staticContentId": 2577,
    "eventContentId": 208,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/208",
    "description": "Complications allow people to quickly glance and stay connected with your app on the watch face throughout their day. The new Infograph and Infograph Modular watch faces on Apple Watch Series 4 allow all new ways to create engaging, full-color complications. Learn about the new complication families and how to create complications that take advantage of the incredible new display of Apple Watch Series 4.",
    "title": "Developing Complications for Apple Watch Series 4",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["🥃", "⌚️", "50", "bezel", "circular", "clock kit", "rectangular", "timeline"],
    "topicIds": [13, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/208ktg0b9qmeyaik/developing_complications_for_apple_watch_series_4/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/208ktg0b9qmeyaik/developing_complications_for_apple_watch_series_4/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/208ktg0b9qmeyaik/developing_complications_for_apple_watch_series_4/developing_complications_for_apple_watch_series_4_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/208ktg0b9qmeyaik/developing_complications_for_apple_watch_series_4/developing_complications_for_apple_watch_series_4_sd.mp4",
      "duration": 713
    },
    "related": {
      "activities": ["wwdc2019-253", "wwdc2018-206", "tech-talks-802", "wwdc2015-209"],
      "resources": [430, 83, 14, 5]
    }
  }, {
    "id": "tech-talks-209",
    "staticContentId": 2589,
    "eventContentId": 209,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/209",
    "description": "Take advantage of the all-screen design of the new iPad Pro by building your app with the iOS 12.1 SDK and making sure it appears correctly with the display's rounded corners and home indicator. Learn about the new common inset compatibility mode and what it means for apps running in multitasking mode. Find out how to provide support for Face ID and for the second generation Apple Pencil with its double-tap feature.",
    "title": "Bringing Your Apps to the New iPad Pro",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/209vnatfwjud/Brining_your_apps_to_iPadPro/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/209vnatfwjud/Brining_your_apps_to_iPadPro/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/209vnatfwjud/Brining_your_apps_to_iPadPro/Brining_your_apps_to_iPadPro_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20181030/209vnatfwjud/Brining_your_apps_to_iPadPro/Brining_your_apps_to_iPadPro_sd.mp4",
      "duration": 527
    },
    "related": {
      "activities": ["wwdc2018-233", "wwdc2018-235", "tech-talks-201", "tech-talks-207", "tech-talks-701"]
    }
  }, {
    "id": "tech-talks-602",
    "staticContentId": 2006,
    "eventContentId": 602,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/602",
    "description": "The seamless integration of Metal 2 with the A11 Bionic chip lets your apps and games realize entirely new levels of performance and capability. Get introduced to powerful new API features and GPU-driven capabilities of Metal 2 on A11, including imageblocks, tile shading, enhancements to raster order groups, imageblock sample coverage control, and threadgroup sharing. Understand the architecture of the Apple-designed A11 GPU and see how it creates opportunities for advances in rendering, compute, and machine learning techniques.",
    "title": "Metal 2 on A11 - Overview",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [27],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/602x28bbwk8lp/metal_on_iphone_x_overview/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/602x28bbwk8lp/metal_on_iphone_x_overview/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/602x28bbwk8lp/metal_on_iphone_x_overview/subtitles/eng/metal_on_iphone_x_overview.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/602x28bbwk8lp/metal_on_iphone_x_overview/metal_on_iphone_x_overview_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/602x28bbwk8lp/metal_on_iphone_x_overview/metal_on_iphone_x_overview_sd.mp4",
      "duration": 970
    },
    "related": {
      "activities": ["tech-talks-603", "tech-talks-604", "tech-talks-605", "tech-talks-606", "wwdc2017-601"],
      "resources": [268, 263, 38, 31]
    }
  }, {
    "id": "tech-talks-202",
    "staticContentId": 1996,
    "eventContentId": 202,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/202",
    "description": "Learn how to update your app for Apple TV 4K, including how to take advantage of new capabilities such as retina image support, HDR video, and the new motion capabilities of the Siri Remote.",
    "title": "Updating Your App for Apple TV 4K",
    "originalPublishingDate": "2017-09-12T10:00:00-07:00",
    "platforms": ["tvOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/202uhvrcg65c7/updating_your_app_for_apple_tv_4k/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/202uhvrcg65c7/updating_your_app_for_apple_tv_4k/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/202uhvrcg65c7/updating_your_app_for_apple_tv_4k/subtitles/eng/updating_your_app_for_apple_tv_4k.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/202uhvrcg65c7/updating_your_app_for_apple_tv_4k/updating_your_app_for_apple_tv_4k_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20170912/202uhvrcg65c7/updating_your_app_for_apple_tv_4k/updating_your_app_for_apple_tv_4k_sd.mp4",
      "duration": 169
    },
    "related": {
      "activities": ["tech-talks-501", "tech-talks-502", "wwdc2017-202", "wwdc2017-209", "wwdc2017-224"],
      "resources": [256, 13]
    }
  }, {
    "id": "tech-talks-207",
    "staticContentId": 2576,
    "eventContentId": 207,
    "eventId": "tech-talks",
    "webPermalink": "https://developer.apple.com/videos/play/tech-talks/207",
    "description": "If your app has already adopted safe area insets, there's not much you will need to do to update your app for iPhone XS, iPhone XS Max, and iPhone XR. Learn how to set a collection view’s section inset reference to the safe area with no code changes. Hear about an API change unique to iPhone XS Max, iPhone XR. Make sure your full-screen app is scaled correctly by using the proper number of points and the correct resolution. Defend against some common pitfalls to ensure your app provides its full feature-set to all of your customers while maintaining best practices that will save you time and effort in the future.",
    "title": "Building Apps for iPhone XS, iPhone XS Max, and iPhone XR",
    "originalPublishingDate": "2018-09-12T11:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/207naklypn7hewo9/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/207naklypn7hewo9/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/207naklypn7hewo9/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr_hd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/tutorials/20180912/207naklypn7hewo9/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr/building_apps_for_iphone_xs_iphone_xs_max_and_iphone_xr_sd.mp4",
      "duration": 541
    },
    "related": {
      "activities": ["wwdc2018-220", "wwdc2018-235", "tech-talks-201", "tech-talks-209", "tech-talks-801", "wwdc2017-204"]
    }
  }, {
    "id": "wwdc2017-823",
    "staticContentId": 1914,
    "eventContentId": 823,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/823",
    "description": "Glyphs are a powerful communication tool and a fundamental element of your app’s design language. Learn about important considerations when conceptualizing glyphs and key design principles of crafting effective glyph sets for spaces inside and outside of your app.",
    "title": "Designing Glyphs",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["design", "design best practices", "designing glyphs", "design studio", "design studio shorts", "glyphs", "icon", "icon design", "iconography", "icons", "search glyph", "short", "shorts", "tab bar"],
    "topicIds": [3, 6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/823_designing_glyphs.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/subtitles/eng/823_sd_designing_glyphs.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/823_hd_designing_glyphs.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/823sgu0b9ofbkip/823/823_sd_designing_glyphs.mp4",
      "duration": 682
    },
    "related": {
      "activities": ["wwdc2019-206"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-813",
    "staticContentId": 1921,
    "eventContentId": 813,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/813",
    "description": "Learn how to create clear, informative, and helpful alerts that will make your app easy and enjoyable to use. Get valuable insights about the proper role for alerts, actionable guidance about writing effective alerts, and techniques for avoiding common pitfalls.",
    "title": "Writing Great Alerts",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["alert", "alerts", "design", "design best practices", "design studio", "design studio shorts", "dialogue", "prompt", "short", "shorts", "writing", "writing alerts"],
    "topicIds": [3],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/813_writing_great_alerts.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/subtitles/eng/813_sd_writing_great_alerts.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/813_hd_writing_great_alerts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/813vq78d4cyc3/813/813_sd_writing_great_alerts.mp4",
      "duration": 669
    },
    "related": {
      "resources": [176, 17]
    }
  }, {
    "id": "wwdc2017-414",
    "staticContentId": 1678,
    "eventContentId": 414,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/414",
    "description": "Unit testing is an essential tool to consistently verify your code works correctly. Discover techniques for designing the code of your app so that it can be easily tested. Find out the best practices for developing a test suite that evolves with your app and scales as your app grows.",
    "title": "Engineering for Testability",
    "originalPublishingDate": "2017-06-09T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["ui testing"],
    "topicIds": [37],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/414_engineering_for_testability.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/subtitles/eng/414_sd_engineering_for_testability.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/414_hd_engineering_for_testability.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/414qr3121b1oieq/414/414_sd_engineering_for_testability.mp4",
      "duration": 2334
    },
    "related": {
      "activities": ["wwdc2018-417", "wwdc2017-401", "wwdc2017-409", "wwdc2016-409", "wwdc2015-406", "wwdc2014-414"],
      "resources": [72]
    }
  }, {
    "id": "wwdc2017-513",
    "staticContentId": 1742,
    "eventContentId": 513,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/513",
    "description": "Learn the essential details of the new High Efficiency Image File Format (HEIF) and discover which capabilities are used by Apple platforms. Gain deep insights into the container structure, the types of media and metadata it can handle, and the many other advantages that this new standard affords.",
    "title": "High Efficiency Image File Format",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 30, 11],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/513_high_efficiency_image_file_format.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/subtitles/eng/513_sd_high_efficiency_image_file_format.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/513_hd_high_efficiency_image_file_format.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/513fzgbviu23l/513/513_sd_high_efficiency_image_file_format.mp4",
      "duration": 1745
    },
    "related": {
      "activities": ["wwdc2018-227", "wwdc2017-503", "wwdc2017-507", "wwdc2017-508", "wwdc2017-511"]
    }
  }, {
    "id": "wwdc2017-223",
    "staticContentId": 1551,
    "eventContentId": 223,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/223",
    "description": "Discover new APIs for UICollectionView and UITableView designed to make drag and drop easy to implement in your apps. Learn how to quickly adopt drag and drop in collection and table views, create polished animations, and adopt new features to keep your app fluid and responsive during asynchronous data transfers.",
    "title": "Drag and Drop with Collection and Table View",
    "originalPublishingDate": "2017-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T09:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/223_drag_and_drop_with_collection_and_table_view.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/subtitles/eng/223_sd_drag_and_drop_with_collection_and_table_view.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/223_hd_drag_and_drop_with_collection_and_table_view.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/223ehejg7kebf8wl/223/223_sd_drag_and_drop_with_collection_and_table_view.mp4",
      "duration": 2360
    },
    "related": {
      "activities": ["wwdc2018-225", "wwdc2017-229"],
      "resources": [196, 169, 168, 19]
    }
  }, {
    "id": "wwdc2017-515",
    "staticContentId": 1693,
    "eventContentId": 515,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/515",
    "description": "HTTP Live Streaming (HLS) reliably delivers video to audiences around the world. Key to this reliability is a comprehensive set of tools to help you author, deliver, and validate the HLS streams you create. See what's new in these tools, learn the latest authoring recommendations, and how they apply to advances in HLS such as support for HEVC and IMSC1.",
    "title": "HLS Authoring Update",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/515_hls_authoring_update.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/subtitles/eng/515_sd_hls_authoring_update.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/515_hd_hls_authoring_update.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/515vy4sl7iu70/515/515_sd_hls_authoring_update.mp4",
      "duration": 547
    },
    "related": {
      "activities": ["wwdc2018-502", "tech-talks-501", "tech-talks-503", "wwdc2017-503", "wwdc2017-504", "wwdc2017-514"],
      "resources": [175]
    }
  }, {
    "id": "wwdc2017-216",
    "staticContentId": 1505,
    "eventContentId": 216,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/216",
    "description": "watchOS 4 introduces numerous enhancements to the application lifecycle of an app on Apple Watch. This session will outline when your app has runtime, how much time it has, and how to maximize your opportunities to create a great experience on Apple Watch. Learn about background modes new to watchOS 4 and find out how taking snapshots with background app refresh have been simplified.",
    "title": "The Life of a watchOS App",
    "originalPublishingDate": "2017-06-07T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-07T13:50:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "clockkit", "watchkit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/216_the_life_of_a_watchos_app.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/subtitles/eng/216_sd_the_life_of_a_watchos_app.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/216_hd_the_life_of_a_watchos_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/216p00nq8fwzed/216/216_sd_the_life_of_a_watchos_app.mp4",
      "duration": 2310
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-504", "wwdc2018-2030", "wwdc2018-2250", "wwdc2018-2310", "wwdc2018-2380", "wwdc2017-205", "wwdc2017-712", "wwdc2017-808"],
      "resources": [83, 9]
    }
  }, {
    "id": "wwdc2017-514",
    "staticContentId": 1692,
    "eventContentId": 514,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/514",
    "description": "HTTP Live Streaming (HLS) reliably delivers media content across a variety of network and bandwidth conditions. However, there are many factors that can impact stream delivery, such as server or encoder failures, caching issues, or network dropouts. Learn the best-practice behaviors that your servers should adopt to maximize reliability, and gain a practical understanding of the errors your app may encounter and how to handle them.",
    "title": "Error Handling Best Practices for HTTP Live Streaming",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/514tjrrgnguh4k/514/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/514tjrrgnguh4k/514/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/514tjrrgnguh4k/514/514_error_handling_best_practices_for_http_live_streaming.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/514tjrrgnguh4k/514/514_hd_error_handling_best_practices_for_http_live_streaming.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/514tjrrgnguh4k/514/514_sd_error_handling_best_practices_for_http_live_streaming.mp4",
      "duration": 1121
    },
    "related": {
      "activities": ["wwdc2018-502", "tech-talks-501", "wwdc2017-504", "wwdc2017-515"]
    }
  }, {
    "id": "wwdc2017-818",
    "staticContentId": 1926,
    "eventContentId": 818,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/818",
    "description": "Learn how to quickly build interactive prototypes! See how you can test new ideas and improve upon existing ones with minimal time investment and using tools you are already familiar with.",
    "title": "60 Second Prototyping",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["60 seconds", "design", "design best practices", "design studio", "design studio shorts", "interactive", "interactive prototype", "prototype", "prototyping", "short", "shorts"],
    "topicIds": [3, 4],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/818_60_second_prototyping.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/subtitles/eng/818_sd_60_second_prototyping.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/818_hd_60_second_prototyping.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/818xw12wzot6au/818/818_sd_60_second_prototyping.mp4",
      "duration": 641
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-711",
    "staticContentId": 1578,
    "eventContentId": 711,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/711",
    "description": "Learn about Sparse Matrix Solvers in the Accelerate framework. In addition, find out how Accelerate's Basic Neural Network Subroutines (BNNS), vDSP, simd and other subframeworks give you fast, energy-efficient signal and image processing and handle large-scale mathematical computations.",
    "title": "Accelerate and Sparse Solvers",
    "originalPublishingDate": "2017-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "bias", "bnns", "compression", "simd"],
    "topicIds": [32, 35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/711_accelerate_and_sparse_solvers.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/subtitles/eng/711_sd_accelerate_and_sparse_solvers.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/711_hd_accelerate_and_sparse_solvers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/711d9xpgp3203tlq/711/711_sd_accelerate_and_sparse_solvers.mp4",
      "duration": 2323
    },
    "related": {
      "activities": ["wwdc2018-701", "wwdc2017-208", "wwdc2017-703", "wwdc2017-710"],
      "resources": [213, 185, 55]
    }
  }, {
    "id": "wwdc2017-815",
    "staticContentId": 1919,
    "eventContentId": 815,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/815",
    "description": "Choosing a custom font for your app can be a daunting task involving both functional and stylistic decisions. Gain a solid understanding of fundamental font design characteristics such as proportion and contrast. Learn how to apply this knowledge when deciding which font is right for your app.",
    "title": "How to Pick a Custom Font",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["custom font", "custom fonts", "design best practices", "design studio", "design studio shorts", "font", "fonts", "short", "shorts", "typography"],
    "topicIds": [6, 7],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/815_how_to_pick_a_custom_font.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/subtitles/eng/815_sd_how_to_pick_a_custom_font.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/815_hd_how_to_pick_a_custom_font.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/815hn3cbczzv55/815/815_sd_how_to_pick_a_custom_font.mp4",
      "duration": 890
    },
    "related": {
      "activities": ["wwdc2018-201"],
      "resources": [254, 253, 252, 251, 250, 249, 17, 1]
    }
  }, {
    "id": "wwdc2017-809",
    "staticContentId": 1916,
    "eventContentId": 809,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/809",
    "description": "Good communication between designers and engineers is the key to building great products. Discover how production and specification techniques can improve communication, build trust, and help design and development teams work together to build better apps.",
    "title": "Communication Between Designers and Engineers",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["communication", "design", "design best practices", "designers", "design studio shorts", "organization", "short", "shorts", "studio shorts", "teamwork"],
    "topicIds": [3, 6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/809_communication_between_designers_and_engineers.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/subtitles/eng/809_sd_communication_between_designers_and_engineers.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/809_hd_communication_between_designers_and_engineers.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/809dxbck5y8h8e1/809/809_sd_communication_between_designers_and_engineers.mp4",
      "duration": 592
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-819",
    "staticContentId": 1927,
    "eventContentId": 819,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/819",
    "description": "The worldwide reach of the App Store means that your app can be enjoyed by people from around the globe. Explore ways to make your app useful and appealing to as many people as possible. And pick up simple techniques for avoiding common issues when reaching a global audience.",
    "title": "Designing for a Global Audience",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["audience", "design", "design best practices", "designing", "design studio", "design studio shorts", "global", "global audience", "global design", "internationalization", "short", "shorts"],
    "topicIds": [3, 6, 42],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/819_designing_for_a_global_audience.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/subtitles/eng/819_sd_designing_for_a_global_audience.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/819_hd_designing_for_a_global_audience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/819bp5li4iugvy222/819/819_sd_designing_for_a_global_audience.mp4",
      "duration": 571
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-817",
    "staticContentId": 1924,
    "eventContentId": 817,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/817",
    "description": "Discover the keys to creating informative, useful and beautiful rich notifications in iOS. Get practical and detailed guidance about how to design short looks, long looks, and quick actions that will make your app's notifications something people look forward to receiving.",
    "title": "Rich Notifications",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["design", "design best practices", "design studio", "design studio shorts", "notifications", "rich notifications", "short", "shorts"],
    "topicIds": [3, 6, 7, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/817_rich_notifications.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/subtitles/eng/817_sd_rich_notifications.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/817_hd_rich_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/817p12uvpl9vgt/817/817_sd_rich_notifications.mp4",
      "duration": 609
    },
    "related": {
      "resources": [237, 17]
    }
  }, {
    "id": "wwdc2017-703",
    "staticContentId": 1572,
    "eventContentId": 703,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/703",
    "description": "Machine learning opens up opportunities for creating new and engaging experiences. Core ML is a new framework which you can use to easily integrate machine learning models into your app. See how Xcode and Core ML can help you make your app more intelligent with just a few lines of code.",
    "title": "Introducing Core ML",
    "originalPublishingDate": "2017-06-06T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "coreml", "learning", "machine", "model", "nlp", "vision"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/703_introducing_core_ml.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/subtitles/eng/703_sd_introducing_core_ml.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/703_hd_introducing_core_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/703muvahj3880222/703/703_sd_introducing_core_ml.mp4",
      "duration": 1885
    },
    "related": {
      "activities": ["wwdc2017-208", "wwdc2017-506", "wwdc2017-710", "wwdc2017-711"],
      "resources": [88, 27]
    }
  }, {
    "id": "wwdc2017-303",
    "staticContentId": 1579,
    "eventContentId": 303,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/303",
    "description": "Starting with an expert guide to implementing the In-App Purchase workflow, learn about Promoted In-App Purchases and how to use the new StoreKit APIs. Find out what’s involved for your server and apps. And finally, get the details and guidance on asking for Ratings and Reviews, and responding to Reviews.",
    "title": "What's New in StoreKit",
    "originalPublishingDate": "2017-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["in-app purchases", "ratings", "receipt", "reviews", "sandbox", "storekit", "subscriptions"],
    "topicIds": [40, 41, 69, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/303_whats_new_in_storekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/subtitles/eng/303_sd_whats_new_in_storekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/303_hd_whats_new_in_storekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/303f0u5froddl13/303/303_sd_whats_new_in_storekit.mp4",
      "duration": 2409
    },
    "related": {
      "activities": ["wwdc2017-301", "wwdc2017-302", "wwdc2017-305"],
      "resources": [105, 53, 44]
    }
  }, {
    "id": "wwdc2017-203",
    "staticContentId": 1549,
    "eventContentId": 203,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/203",
    "description": "Drag and Drop has arrived in iOS 11! Learn the fundamentals behind the new iOS Drag and Drop — architecture and APIs. This session will go over the design goals, architecture and key components of the API to allow you to quickly adopt Drag and Drop in your App.",
    "title": "Introducing Drag and Drop",
    "originalPublishingDate": "2017-06-06T11:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T11:20:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [3, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/203_introducing_drag_and_drop.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/subtitles/eng/203_sd_introducing_drag_and_drop.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/203_hd_introducing_drag_and_drop.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/203atfalwz52js4444/203/203_sd_introducing_drag_and_drop.mp4",
      "duration": 2323
    },
    "related": {
      "activities": ["wwdc2017-229", "wwdc2017-231"],
      "resources": [195, 19]
    }
  }, {
    "id": "wwdc2017-102",
    "staticContentId": 1671,
    "eventContentId": 102,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/102",
    "description": "WWDC 2017 Platforms State of the Union",
    "title": "Platforms State of the Union",
    "originalPublishingDate": "2017-06-05T14:30:00-07:00",
    "publishingExpiryDate": "2022-06-05T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/102_platforms_state_of_the_union.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/subtitles/eng/102_sd_platforms_state_of_the_union.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/102_hd_platforms_state_of_the_union.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/102xyar2647hak3e/102/102_sd_platforms_state_of_the_union.mp4",
      "duration": 6191
    },
    "related": {
      "activities": ["wwdc2018-102"]
    }
  }, {
    "id": "wwdc2017-251",
    "staticContentId": 1929,
    "eventContentId": 251,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/251",
    "description": "Consistent and intuitive control of media playback is key to many apps on tvOS, and proper use and configuration of MPNowPlayingInfoCenter and MPRemoteCommandCenter are critical to delivering a great user experience. Dive deeper into these frameworks and learn how to ensure a seamless experience whether your app is being controlled using Siri, the Siri Remote, or the iOS Remote app.",
    "title": "Now Playing and Remote Commands on tvOS",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["tvOS"],
    "topicIds": [28, 31, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/251_now_playing_and_remote_commands_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/subtitles/eng/251_sd_now_playing_and_remote_commands_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/251_hd_now_playing_and_remote_commands_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/251txgutnwpkc4740f/251/251_sd_now_playing_and_remote_commands_on_tvos.mp4",
      "duration": 881
    },
    "related": {
      "activities": ["wwdc2017-209", "wwdc2016-206", "wwdc2016-503", "wwdc2016-506"],
      "resources": [54]
    }
  }, {
    "id": "wwdc2017-211",
    "staticContentId": 1622,
    "eventContentId": 211,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/211",
    "description": "Touch Bar replaces the function keys that have long occupied the top of your keyboard with a versatile MultiTouch input device that features a Retina display. AppKit provides powerful APIs to let you easily leverage the power of Touch Bar in your applications. Learn how to use Touch Bar in your application to add context sensitive commands and flexible content to your user experience. This session will cover the basic concepts, design considerations, standard controls, IB support, and API that you will need to get started using Touch Bar.",
    "title": "Touch Bar Fundamentals",
    "originalPublishingDate": "2017-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T10:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [3, 34, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/211_touch_bar_fundamentals.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/subtitles/eng/211_sd_touch_bar_fundamentals.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/211_hd_touch_bar_fundamentals.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/211r8euwwl9x4/211/211_sd_touch_bar_fundamentals.mp4",
      "duration": 2270
    },
    "related": {
      "activities": ["wwdc2017-201", "wwdc2017-222"],
      "resources": [239, 184, 167]
    }
  }, {
    "id": "wwdc2017-820",
    "staticContentId": 1925,
    "eventContentId": 820,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/820",
    "description": "iMessage Apps help people easily create and share content, play games, and collaborate with friends without needing to leave the conversation. Explore how you can design iMessage apps and sticker packs that are perfectly suited for a deeply social context.",
    "title": "Express Yourself!",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["design", "design best practices", "design short", "design studio", "design studio shorts", "short", "shorts", "sticker", "sticker pack", "stickers"],
    "topicIds": [3, 6, 13, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/820_express_yourself.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/subtitles/eng/820_sd_express_yourself.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/820_hd_express_yourself.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/820i9qakfac65nsp/820/820_sd_express_yourself.mp4",
      "duration": 517
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-249",
    "staticContentId": 1691,
    "eventContentId": 249,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/249",
    "description": "Unwanted SMS and MMS messages are a persistent, frustrating nuisance. Identity Lookup is a new framework that allows you to participate in the process of filtering incoming messages. Get the details of how to identify and prevent these unsolicited messages. Understand the options for on-device detection as well as more dynamic server-based integration in order to ensure a better user experience.",
    "title": "Filtering Unwanted Messages with Identity Lookup",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["carrier", "cellular", "china", "extension", "identitylookup", "junk", "messagefilter", "spam"],
    "topicIds": [19],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/249_filtering_unwanted_messages_with_identity_lookup.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/subtitles/eng/249_sd_filtering_unwanted_messages_with_identity_lookup.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/249_hd_filtering_unwanted_messages_with_identity_lookup.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/249alewpia5158ow5k/249/249_sd_filtering_unwanted_messages_with_identity_lookup.mp4",
      "duration": 1054
    },
    "related": {
      "activities": ["wwdc2017-212", "wwdc2017-702"],
      "resources": [158]
    }
  }, {
    "id": "wwdc2017-512",
    "staticContentId": 1652,
    "eventContentId": 512,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/512",
    "description": "Podcasts reach millions of listeners around the world every year. iOS 11 upgrades the Apple Podcasts app to support new feed structures for serialized shows. Discover how to publish your own podcast and take advantage of all the features and capabilities in this comprehensive podcasting session.",
    "title": "Apple Podcasts",
    "originalPublishingDate": "2017-06-09T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/512_apple_podcasts.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/subtitles/eng/512_sd_apple_podcasts.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/512_hd_apple_podcasts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/512u8r4crqanrp/512/512_sd_apple_podcasts.mp4",
      "duration": 1523
    },
    "related": {
      "activities": ["wwdc2018-501"],
      "resources": [238]
    }
  }, {
    "id": "wwdc2017-247",
    "staticContentId": 1937,
    "eventContentId": 247,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/247",
    "description": "Help your users share the great content in your app by using the built-in iOS sharing functionality. Learn how timing, placement and context of sharing can drive engagement and acquire new users.",
    "title": "Extend Your App's Presence With Sharing",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [13, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/247_extend_your_apps_presence_with_sharing.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/subtitles/eng/247_sd_extend_your_apps_presence_with_sharing.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/247_hd_extend_your_apps_presence_with_sharing.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/247yvk4zop0czpm7s6/247/247_sd_extend_your_apps_presence_with_sharing.mp4",
      "duration": 280
    }
  }, {
    "id": "wwdc2017-248",
    "staticContentId": 1928,
    "eventContentId": 248,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/248",
    "description": "Expand the reach of your apps by building them for a worldwide audience. Learn how to create localized tvOS apps that perform seamlessly regardless of country and language. Gain insights into such topics as handling server-side content, matching preferred languages, and localizing images and text direction.",
    "title": "Localization Best Practices on tvOS",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["international", "internationalization", "locale", "right to left", "right-to-left"],
    "topicIds": [42, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/248_localization_best_practices_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/subtitles/eng/248_sd_localization_best_practices_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/248_hd_localization_best_practices_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/248l3bagtus6l8jwxh/248/248_sd_localization_best_practices_on_tvos.mp4",
      "duration": 837
    },
    "related": {
      "activities": ["wwdc2017-202", "wwdc2017-209", "wwdc2017-401", "wwdc2017-410", "wwdc2016-232"],
      "resources": [109, 61]
    }
  }, {
    "id": "wwdc2017-246",
    "staticContentId": 1704,
    "eventContentId": 246,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/246",
    "description": "Design features such as the tvOS Top Shelf and Universal Links help customers immerse themselves in your content more quickly and easily. Learn how to create seamless app launch experiences when deep linking into content of UIKit or TVMLKit apps.",
    "title": "Deep Linking on tvOS",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["tv app", "universal link"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/246_deep_linking_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/subtitles/eng/246_sd_deep_linking_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/246_hd_deep_linking_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/246oh3k8zgxi921jxq/246/246_sd_deep_linking_on_tvos.mp4",
      "duration": 438
    },
    "related": {
      "activities": ["wwdc2017-202", "wwdc2017-209", "wwdc2017-224", "wwdc2017-250"],
      "resources": [219]
    }
  }, {
    "id": "wwdc2017-241",
    "staticContentId": 1628,
    "eventContentId": 241,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/241",
    "description": "The enhanced PDFKit framework lets your app perform essential operations, such as authoring, modifying, and displaying Portable Document Format (PDF) files. Previously available only on macOS, this powerful framework is now available on iOS 11. Gain insights and best practices on how to use this technology within your own apps.",
    "title": "Introducing PDFKit on iOS",
    "originalPublishingDate": "2017-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["print", "quartz", "quartz 2d"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/241_introducing_pdfkit_on_ios.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/subtitles/eng/241_sd_introducing_pdfkit_on_ios.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/241_hd_introducing_pdfkit_on_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/241iivj8rn2fo3ft0r/241/241_sd_introducing_pdfkit_on_ios.mp4",
      "duration": 2408
    },
    "related": {
      "activities": ["wwdc2019-221", "wwdc2019-721"],
      "resources": [215, 194, 142, 141, 140]
    }
  }, {
    "id": "wwdc2017-509",
    "staticContentId": 1630,
    "eventContentId": 509,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/509",
    "description": "AirPlay allows you to wirelessly stream content from your iOS device or Mac. Now with AirPlay 2, you can fill the home with multi-room audio. Learn how AirPlay 2 synchronizes playback and provides an even more reliable audio experience, and how to incorporate support for AirPlay 2 into your app.",
    "title": "Introducing AirPlay 2",
    "originalPublishingDate": "2017-06-08T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [28],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/509_introducing_airplay_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/subtitles/eng/509_sd_introducing_airplay_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/509_hd_introducing_airplay_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/509v96e4gd96rlqyq/509/509_sd_introducing_airplay_2.mp4",
      "duration": 2363
    },
    "related": {
      "activities": ["wwdc2017-501", "wwdc2017-502", "wwdc2017-504"],
      "resources": [54]
    }
  }, {
    "id": "wwdc2017-507",
    "staticContentId": 1602,
    "eventContentId": 507,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/507",
    "description": "Portrait mode on iPhone 7 Plus showcases the power of depth in photography. In iOS 11, the depth data that drives this feature is now available to your apps. Learn how to use depth to open up new possibilities for creative imaging. Gain a broader understanding of high-level depth concepts and learn how to capture both streaming and still image depth data from the camera.",
    "title": "Capturing Depth in iPhone Photography",
    "originalPublishingDate": "2017-06-07T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T17:10:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["capture", "depth", "disparity", "parallax", "photo effects", "photography", "photos", "photos api", "portrait mode"],
    "topicIds": [29, 30],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/507_capturing_depth_in_iphone_photography.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/subtitles/eng/507_sd_capturing_depth_in_iphone_photography.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/507_hd_capturing_depth_in_iphone_photography.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/507koao27wdpt/507/507_sd_capturing_depth_in_iphone_photography.mp4",
      "duration": 3519
    },
    "related": {
      "activities": ["wwdc2019-225", "wwdc2019-249", "wwdc2018-503", "wwdc2017-503", "wwdc2017-505", "wwdc2017-508", "wwdc2017-510", "wwdc2017-511", "wwdc2017-513"],
      "resources": [228, 227, 220, 28]
    }
  }, {
    "id": "wwdc2017-504",
    "staticContentId": 1627,
    "eventContentId": 504,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/504",
    "description": "HTTP Live Streaming allows you to stream live and on-demand content to global audiences. Learn about great new features and enhancements to HTTP Live Streaming. Highlights include support for HEVC, playlist metavariables, IMSC1 subtitles, and synchronized playback of multiple streams. Discover how to simplify your FairPlay key handling with the new AVContentKeySession API, and take advantage of enhancements to offline HLS playback.",
    "title": "Advances in HTTP Live Streaming",
    "originalPublishingDate": "2017-06-06T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T17:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["cmaf", "hevc", "hls", "http live streaming", "imsc1", "playback", "playlists", "streaming", "video"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/504_advances_in_http_live_streaming.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/subtitles/eng/504_sd_advances_in_http_live_streaming.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/504_hd_advances_in_http_live_streaming.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/504op4c3001w2f222/504/504_sd_advances_in_http_live_streaming.mp4",
      "duration": 3291
    },
    "related": {
      "activities": ["wwdc2018-502", "wwdc2018-507", "tech-talks-501", "tech-talks-503", "wwdc2017-217", "wwdc2017-503", "wwdc2017-509", "wwdc2017-511", "wwdc2017-514", "wwdc2017-515", "wwdc2016-504", "wwdc2016-510"],
      "resources": [212]
    }
  }, {
    "id": "wwdc2017-201",
    "staticContentId": 1548,
    "eventContentId": 201,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/201",
    "description": "iOS 11 enhances the Cocoa Touch frameworks for making next generation apps on iOS. Learn about drag and drop, file management, document browser, updates to the navigation and tab bars, app safe areas, swipe actions and API refinements. Find out which sessions you won't want to miss throughout the week.",
    "title": "What's New in Cocoa Touch",
    "originalPublishingDate": "2017-06-06T10:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T10:20:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [11, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/201_whats_new_in_cocoa_touch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/subtitles/eng/201_sd_whats_new_in_cocoa_touch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/201_hd_whats_new_in_cocoa_touch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/201fz90p4yq582o/201/201_sd_whats_new_in_cocoa_touch.mp4",
      "duration": 2426
    },
    "related": {
      "activities": ["wwdc2017-209", "wwdc2017-211"],
      "resources": [3]
    }
  }, {
    "id": "wwdc2017-704",
    "staticContentId": 1657,
    "eventContentId": 704,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/704",
    "description": "Discover how enhancements in authorization simplify accessing sensitive and historical motion data. Learn how to use DeviceMotion effectively and how to leverage SensorRecorder to capture hours of motion data.  Walk through adding immersive motion controls to enhance an existing game.",
    "title": "Creating Immersive Apps with Core Motion",
    "originalPublishingDate": "2017-06-06T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T16:10:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["accel", "accelerate", "acceleration", "accelerometer", "altimeter", "altitude", "attitude", "badger", "barometer", "cmmotion", "compass", "coremotion", "core motion", "elevation", "gravity", "gyroscope", "heading", "m10", "m7", "m8", "m9", "motion", "motionprocessor", "pedometer", "rotation", "sensor", "sensors", "step", "steps", "tilt", "walk", "walking"],
    "topicIds": [26, 14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/704_creating_immersive_apps_with_core_motion.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/subtitles/eng/704_sd_creating_immersive_apps_with_core_motion.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/704_hd_creating_immersive_apps_with_core_motion.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/704rn4fu5zbv1b8s222/704/704_sd_creating_immersive_apps_with_core_motion.mp4",
      "duration": 2070
    },
    "related": {
      "activities": ["wwdc2018-203", "tech-talks-203", "wwdc2016-713", "wwdc2015-705", "wwdc2012-524"],
      "resources": [221, 80, 79, 78, 77]
    }
  }, {
    "id": "wwdc2017-245",
    "staticContentId": 1559,
    "eventContentId": 245,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/245",
    "description": "With Dynamic Type, people choose their preferred text size and iOS switches fonts automatically as needed. Understand why Dynamic Type is important and how to support it when displaying text. Learn what's new in iOS 11, and master the frameworks and tools that make it easy to support Dynamic Type in your app.",
    "title": "Building Apps with Dynamic Type",
    "originalPublishingDate": "2017-06-09T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T13:50:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["accessibility", "large text"],
    "topicIds": [8, 7, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/245_building_apps_with_dynamic_type.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/subtitles/eng/245_sd_building_apps_with_dynamic_type.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/245_hd_building_apps_with_dynamic_type.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/245ti8oovkx1hl5005/245/245_sd_building_apps_with_dynamic_type.mp4",
      "duration": 2327
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2017-215", "wwdc2017-217", "wwdc2017-401", "wwdc2017-806", "wwdc2015-804"],
      "resources": [189]
    }
  }, {
    "id": "wwdc2017-305",
    "staticContentId": 1580,
    "eventContentId": 305,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/305",
    "description": "Gain an understanding of the pros and cons of server- versus app-based receipt validation, and how to implement this critical functionality for your In-App Purchases.  Get the latest news, and valuable tips for keeping subscribers and managing subscriptions. Learn about a major improvement to In-App Purchases: Server-to-Server Notifications. And finally, get detailed instructions for testing with the In-App Purchase sandbox.",
    "title": "Advanced StoreKit",
    "originalPublishingDate": "2017-06-08T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-08T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["in-app purchases", "ratings", "receipt", "reviews", "sandbox", "storekit", "subscriptions"],
    "topicIds": [69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/305_advanced_storekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/subtitles/eng/305_sd_advanced_storekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/305_hd_advanced_storekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/305k3ed4sd37at/305/305_sd_advanced_storekit.mp4",
      "duration": 2935
    },
    "related": {
      "activities": ["wwdc2017-301", "wwdc2017-302", "wwdc2017-303"],
      "resources": [105, 53, 44]
    }
  }, {
    "id": "wwdc2017-502",
    "staticContentId": 1487,
    "eventContentId": 502,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/502",
    "description": "Get introduced to the new API for the Apple Music subscription service.  Learn how to add Apple Music playback in your own app, and discover how to search the catalogue, manage playback queues, and engage with playlists and recommendations.",
    "title": "Introducing MusicKit",
    "originalPublishingDate": "2017-06-06T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T15:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [28],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/502_introducing_musickit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/subtitles/eng/502_sd_introducing_musickit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/502_hd_introducing_musickit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/502cdkomuy9vbj4222/502/502_sd_introducing_musickit.mp4",
      "duration": 2397
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-506", "wwdc2017-212", "wwdc2017-501", "wwdc2017-509"],
      "resources": [204, 54, 53, 47]
    }
  }, {
    "id": "wwdc2017-812",
    "staticContentId": 1918,
    "eventContentId": 812,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/812",
    "description": "Designing for multiple screen sizes can seem complicated, difficult, and time-consuming. Learn how size classes, dynamic type, and UIKit elements help your app to scale elegantly, save you time, and make your app look amazing on whatever device people are using.",
    "title": "Size Classes and Core Components",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["core components", "design", "design best practices", "design studio", "short", "shorts", "size classes", "studio shorts"],
    "topicIds": [6, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/812_size_classes_and_core_components.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/subtitles/eng/812_sd_size_classes_and_core_components.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/812_hd_size_classes_and_core_components.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/812be3ra1bugc3w/812/812_sd_size_classes_and_core_components.mp4",
      "duration": 521
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-222",
    "staticContentId": 1623,
    "eventContentId": 222,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/222",
    "description": "Look behind the scenes into how system applications enhance their Touch Bar content with more than the basic controls. Learn about NSScrubber, customizing the text bar, candidate list item, event handling, layout, animations, and more. Leverage the full power of the Touch Bar to take your Mac app to the next level.",
    "title": "Advanced Touch Bar",
    "originalPublishingDate": "2017-06-07T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T17:10:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/222_advanced_touch_bar.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/subtitles/eng/222_sd_advanced_touch_bar.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/222_hd_advanced_touch_bar.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/222ijxk2akkrebmr/222/222_sd_advanced_touch_bar.mp4",
      "duration": 3297
    },
    "related": {
      "activities": ["wwdc2017-207", "wwdc2017-211"],
      "resources": [239, 184, 183]
    }
  }, {
    "id": "wwdc2017-237",
    "staticContentId": 1568,
    "eventContentId": 237,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/237",
    "description": "MapKit makes it easy to embed a fully interactive and configurable map directly into your app. Lean about new capabilities to tailor the look of the map view and annotations, more manageable controls and new features that make dealing with a large number of annotations a snap.",
    "title": "What's New in MapKit",
    "originalPublishingDate": "2017-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [17],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/237oyga54hirqaeiwg/237/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/237oyga54hirqaeiwg/237/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/237oyga54hirqaeiwg/237/237_whats_new_in_mapkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/237oyga54hirqaeiwg/237/237_hd_whats_new_in_mapkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/237oyga54hirqaeiwg/237/237_sd_whats_new_in_mapkit.mp4",
      "duration": 2388
    },
    "related": {
      "activities": ["wwdc2017-713"],
      "resources": [207, 173, 100]
    }
  }, {
    "id": "wwdc2017-713",
    "staticContentId": 1650,
    "eventContentId": 713,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/713",
    "description": "Location technologies are core to delivering context-based services within your app. Discover how advances in the Core Location Framework APIs provide new and more performant features in a manner designed to provide confidence for you privacy-conscious users. See how changes in iOS 11 provide clearer communication to your users of when their location is being queried and allows them to provide more granular access authorization to your app.",
    "title": "What's New in Location Technologies",
    "originalPublishingDate": "2017-06-08T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [17, 19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/713_whats_new_in_location_technologies.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/subtitles/eng/713_sd_whats_new_in_location_technologies.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/713_hd_whats_new_in_location_technologies.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/713tkef4yl0sv3k/713/713_sd_whats_new_in_location_technologies.mp4",
      "duration": 1839
    },
    "related": {
      "activities": ["wwdc2017-237", "wwdc2017-702"],
      "resources": [222, 99]
    }
  }, {
    "id": "wwdc2017-205",
    "staticContentId": 1500,
    "eventContentId": 205,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/205",
    "description": "watchOS 4 adds a new runtime architecture to make your apps run even faster on Apple Watch. Alongside performance gains, watchOS 4 brings numerous enhancements to make robust WatchKit UI layouts, new background modes for navigation and audio apps, Core Bluetooth connectivity to allow devices a direct connection to your wrist, and much more. See what's new and how you'll be able to make your Watch apps even better on watchOS 4.",
    "title": "What's New in watchOS",
    "originalPublishingDate": "2017-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T09:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "clockkit"],
    "topicIds": [18, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/205f4nvkct31tv/205/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/205f4nvkct31tv/205/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/205f4nvkct31tv/205/205_whats_new_in_watchos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/205f4nvkct31tv/205/205_hd_whats_new_in_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/205f4nvkct31tv/205/205_sd_whats_new_in_watchos.mp4",
      "duration": 2035
    },
    "related": {
      "activities": ["wwdc2017-214", "wwdc2017-216", "wwdc2017-221", "wwdc2017-501", "wwdc2017-712", "wwdc2017-808"],
      "resources": [83, 9]
    }
  }, {
    "id": "wwdc2017-227",
    "staticContentId": 1725,
    "eventContentId": 227,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/227",
    "description": "Drag and Drop is the front end of a simple concept: transferring data. Whether it is in app or between apps, this data transfer is backed by item providers. Learn how item providers work and how to implement your own providers to facilitate efficient data transfers from your App.",
    "title": "Data Delivery with Drag and Drop",
    "originalPublishingDate": "2017-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/227_data_delivery_with_drag_and_drop.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/subtitles/eng/227_sd_data_delivery_with_drag_and_drop.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/227_hd_data_delivery_with_drag_and_drop.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/227jjbmtoqrzj00/227/227_sd_data_delivery_with_drag_and_drop.mp4",
      "duration": 2112
    },
    "related": {
      "activities": ["wwdc2017-229", "wwdc2017-231"],
      "resources": [197, 180, 179, 178, 19]
    }
  }, {
    "id": "wwdc2017-301",
    "staticContentId": 1706,
    "eventContentId": 301,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/301",
    "description": "Redesigned from the ground up, the new App Store provides a fresh approach to marketing your app.  Learn how the new functionality, enhanced editorial features, and the thinking that drove the visual changes are all designed to make your apps and in-app purchase more discoverable and appealing to your customers.",
    "title": "Introducing the New App Store",
    "originalPublishingDate": "2017-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T11:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/301_introducing_the_new_app_store.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/subtitles/eng/301_sd_introducing_the_new_app_store.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/301_hd_introducing_the_new_app_store.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/301nfvhdbpifiun/301/301_sd_introducing_the_new_app_store.mp4",
      "duration": 3032
    },
    "related": {
      "activities": ["wwdc2017-302", "wwdc2017-303", "wwdc2017-305"],
      "resources": [125, 124, 123, 121, 44]
    }
  }, {
    "id": "wwdc2017-411",
    "staticContentId": 1715,
    "eventContentId": 411,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/411",
    "description": "The Apple LLVM compiler in Xcode 9 has new language features, improved diagnostics, and more powerful optimizations. Keep up with the newest additions to Objective-C and C++, get an overview of new and improved warnings and static analyzer checks, and learn about how the LLVM compiler technology is delivering faster build times and better runtime performance for your apps.",
    "title": "What's New in LLVM",
    "originalPublishingDate": "2017-06-08T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["available", "objc", "refactoring"],
    "topicIds": [32],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/411_whats_new_in_llvm.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/subtitles/eng/411_sd_whats_new_in_llvm.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/411_hd_whats_new_in_llvm.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/411a7o9phe4uekm/411/411_sd_whats_new_in_llvm.mp4",
      "duration": 2009
    },
    "related": {
      "activities": ["wwdc2019-409", "wwdc2018-409", "wwdc2017-402", "wwdc2017-406", "wwdc2017-407", "wwdc2017-413"],
      "resources": [126, 23, 22]
    }
  }, {
    "id": "wwdc2017-706",
    "staticContentId": 1717,
    "eventContentId": 706,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/706",
    "description": "macOS 10.13 and iOS 11 have reinvented how Grand Central Dispatch and the Darwin kernel collaborate, enabling your applications to run concurrent workloads more efficiently. Learn how to modernize your code to take advantage of these improvements and make optimal use of hardware resources.",
    "title": "Modernizing Grand Central Dispatch Usage",
    "originalPublishingDate": "2017-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["gcd", "runtime", "thread"],
    "topicIds": [35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/706_modernizing_grand_central_dispatch_usage.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/subtitles/eng/706_sd_modernizing_grand_central_dispatch_usage.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/706_hd_modernizing_grand_central_dispatch_usage.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/706byvveyendgv5l/706/706_sd_modernizing_grand_central_dispatch_usage.mp4",
      "duration": 3277
    },
    "related": {
      "activities": ["wwdc2019-221", "wwdc2018-219"],
      "resources": [106]
    }
  }, {
    "id": "wwdc2017-408",
    "staticContentId": 1680,
    "eventContentId": 408,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/408",
    "description": "Learn more about the new features in Swift Playgrounds, such as support for localized content and user-added pages. Learn how to leverage these new features to build engaging content in the latest playground book format. Harness external accessories using the new PlaygroundBluetooth framework, and take advantage of new frameworks added in iOS 11.",
    "title": "What’s New in Swift Playgrounds",
    "originalPublishingDate": "2017-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["localization", "translation"],
    "topicIds": [9, 36, 12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/408_whats_new_in_swift_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/subtitles/eng/408_sd_whats_new_in_swift_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/408_hd_whats_new_in_swift_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/408qiszgcawlgvhh/408/408_sd_whats_new_in_swift_playgrounds.mp4",
      "duration": 2144
    },
    "related": {
      "activities": ["wwdc2018-413", "wwdc2017-401", "wwdc2017-402", "wwdc2017-410", "wwdc2017-416", "wwdc2017-605"],
      "resources": [95]
    }
  }, {
    "id": "wwdc2017-407",
    "staticContentId": 1684,
    "eventContentId": 407,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/407",
    "description": "Undefined behavior in programming languages can introduce difficult to diagnose bugs and even lead to security vulnerabilities in your App. Learn more about undefined behavior, the tools available in Xcode 9 that address it, and why Swift is safer by design.",
    "title": "Understanding Undefined Behavior",
    "originalPublishingDate": "2017-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["alignment", "analyzer", "asan", "bugs", "c", "c++", "debug", "debugger", "debugging", "objc", "obj-c", "objectivec", "objective c", "objective-c", "out of scope", "overflow", "overflows", "runtime", "sanitizer", "sanitizers", "sanitzer", "scope", "swift", "thread", "threading", "threads", "tool", "tools", "ubsan", "undefined behavior", "xcode"],
    "topicIds": [33, 36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/407_understanding_undefined_behavior.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/subtitles/eng/407_sd_understanding_undefined_behavior.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/407_hd_understanding_undefined_behavior.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/407kc2s6vvx95/407/407_sd_understanding_undefined_behavior.mp4",
      "duration": 2354
    },
    "related": {
      "activities": ["wwdc2017-238", "wwdc2017-402", "wwdc2017-404", "wwdc2017-406", "wwdc2017-411", "wwdc2016-410", "wwdc2016-412", "wwdc2015-411", "wwdc2015-413"],
      "resources": [244, 22]
    }
  }, {
    "id": "wwdc2017-404",
    "staticContentId": 1681,
    "eventContentId": 404,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/404",
    "description": "Xcode 9 introduces wireless development for iOS and tvOS. Discover how to configure and use wireless development with your devices. Learn about Xcode's latest debugging features — including debugging workflow enhancements, and new view debugging support for view controllers, SpriteKit and SceneKit — now with no strings attached.",
    "title": "Debugging with Xcode 9",
    "originalPublishingDate": "2017-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ethernet", "instruments", "memory graph", "track pinning", "view debugger", "wireless"],
    "topicIds": [33, 24, 25, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/404_debugging_with_xcode_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/subtitles/eng/404_sd_debugging_with_xcode_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/404_hd_debugging_with_xcode_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/404z7uj3xincdb0/404/404_sd_debugging_with_xcode_9.mp4",
      "duration": 2427
    },
    "related": {
      "activities": ["wwdc2018-233", "wwdc2018-412", "wwdc2017-238", "wwdc2017-405", "wwdc2017-406", "wwdc2017-407", "wwdc2017-604", "wwdc2017-609"],
      "resources": [48]
    }
  }, {
    "id": "wwdc2017-412",
    "staticContentId": 1674,
    "eventContentId": 412,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/412",
    "description": "Auto Layout enables you to easily create robust layouts for your apps. Hear details about new and existing techniques for building layouts in Interface Builder. Learn how to build more dynamic layouts and handle state changes using priorities and size classes. Find out how iOS 11 support for dynamic type and safe areas can ensure your content can be viewed by anyone.",
    "title": "Auto Layout Techniques in Interface Builder",
    "originalPublishingDate": "2017-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [34, 38, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/412_auto_layout_techniques_in_interface_builder.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/subtitles/eng/412_sd_auto_layout_techniques_in_interface_builder.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/412_hd_auto_layout_techniques_in_interface_builder.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/412icy0vh6ays/412/412_sd_auto_layout_techniques_in_interface_builder.mp4",
      "duration": 2288
    },
    "related": {
      "activities": ["wwdc2018-203", "tech-talks-201", "wwdc2017-401"],
      "resources": [82]
    }
  }, {
    "id": "wwdc2017-212",
    "staticContentId": 1620,
    "eventContentId": 212,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/212",
    "description": "Whether you're building apps for iOS, macOS, watchOS, or tvOS, a lot of the functionality you get from Apple's SDKs comes from the Foundation framework. Join the Foundation engineering team to hear about the improvements they’ve been working on. Learn how significant changes to key paths can help make your code safer with strong type checking in Swift. Hear all about how the new archiving API can help you safely convert your native Swift types to and from external formats like JSON.  Gain insights into performance enhancements that will help make your app even more efficient.",
    "title": "What's New in Foundation",
    "originalPublishingDate": "2017-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["keypath", "objc", "objective-c"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_whats_new_in_foundation.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/subtitles/eng/212_sd_whats_new_in_foundation.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_sd_whats_new_in_foundation.mp4",
      "duration": 3190
    },
    "related": {
      "activities": ["wwdc2018-222", "wwdc2017-207", "wwdc2017-236", "wwdc2017-243", "wwdc2017-244", "wwdc2017-249", "wwdc2017-402", "wwdc2017-502"],
      "resources": [96, 94, 93, 92]
    }
  }, {
    "id": "wwdc2017-803",
    "staticContentId": 1638,
    "eventContentId": 803,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/803",
    "description": "Design is not just about what people see, it’s also about what they hear. Learn about how sound design can help you create a more immersive, usable and meaningful user experience in your app or game, and get a glimpse of how the sounds in Apple products are created.",
    "title": "Designing Sound",
    "originalPublishingDate": "2017-06-07T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🎧", "🎵", "🎶", "🎼", "📱", "🔇", "🔈", "🔉", "🔊", "🔔", "🔕", "🗣", "apple design", "apple designers", "design", "design best practices", "design demo", "ios design", "sound design"],
    "topicIds": [3, 5],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/803_designing_sound.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/subtitles/eng/803_sd_designing_sound.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/803_hd_designing_sound.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/803gyqggd62btz0/803/803_sd_designing_sound.mp4",
      "duration": 2088
    },
    "related": {
      "activities": ["wwdc2019-223", "wwdc2017-802", "wwdc2017-804"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-230",
    "staticContentId": 1557,
    "eventContentId": 230,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/230",
    "description": "So much power has been added to animations on iOS since their inception that it's time to think about animations in a whole new way! Learn to combine and coordinate between multiple animations, resulting in interactive transitions and learn some tips and tricks along the way.",
    "title": "Advanced Animations with UIKit",
    "originalPublishingDate": "2017-06-08T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T15:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [24, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/230_advanced_animations_with_uikit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/subtitles/eng/230_sd_advanced_animations_with_uikit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/230_hd_advanced_animations_with_uikit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/230lc4n1loob9/230/230_sd_advanced_animations_with_uikit.mp4",
      "duration": 1939
    },
    "related": {
      "activities": ["wwdc2018-233"],
      "resources": [3]
    }
  }, {
    "id": "wwdc2017-802",
    "staticContentId": 1700,
    "eventContentId": 802,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/802",
    "description": "Design principles are the key to understanding how design serves human needs for safety, meaning, achievement and beauty. Learn what these principles are and how they can help you design more welcoming, understandable, empowering and gratifying user experiences.",
    "title": "Essential Design Principles",
    "originalPublishingDate": "2017-06-07T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-07T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🍔", "🍽", "🏖", "🏝", "🏨", "🐠", "📱", "🚘", "✈️", "apple design", "apple designers", "cross platform", "design", "design best practices", "design principles", "global design", "hi", "hig", "human interface", "ios", "ios design", "mac design"],
    "topicIds": [3, 6, 7],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/802_essential_design_principles.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/subtitles/eng/802_sd_essential_design_principles.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/802_hd_essential_design_principles.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/802i3ngpjoeupj/802/802_sd_essential_design_principles.mp4",
      "duration": 3596
    },
    "related": {
      "activities": ["wwdc2017-801", "wwdc2017-803", "wwdc2017-804", "wwdc2017-805", "wwdc2017-806", "wwdc2017-807"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-811",
    "staticContentId": 1923,
    "eventContentId": 811,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/811",
    "description": "Great games transport us into another world where we can reign over a kingdom, fight epic battles, or become a pinball wizard. Learn on-boarding and UI design best practices that will enable everyone to lose themselves in your game and have fun.",
    "title": "Design Tips for Great Games",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["design", "design best practices", "design studio", "design studio shorts", "game", "game best practices", "game design", "games", "game ui", "game user experience", "game user interface", "mobile game ui", "mobile gaming", "short", "shorts", "studio"],
    "topicIds": [3, 26, 6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/811_design_tips_for_great_games.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/subtitles/eng/811_sd_design_tips_for_great_games.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/811_hd_design_tips_for_great_games.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/811evqx1dsujdj5222/811/811_sd_design_tips_for_great_games.mp4",
      "duration": 833
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-244",
    "staticContentId": 1624,
    "eventContentId": 244,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/244",
    "description": "Border crossings can be smooth and efficient or slow and tedious. The boundary between an app and a framework is analogous, but inefficiencies may not always be obvious. Whether it’s passing data to an API or understanding how to stay on the fast path while rendering text, we'll explore various aspects of how an app can work efficiently with underlying frameworks. If you build your own frameworks, gain valuable insights into how your clients can be as efficient as possible.",
    "title": "Efficient Interactions with Frameworks",
    "originalPublishingDate": "2017-06-09T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T13:50:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [35, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/244_efficient_interactions_with_frameworks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/subtitles/eng/244_sd_efficient_interactions_with_frameworks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/244_hd_efficient_interactions_with_frameworks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/244ogyk0iqlop3ecdr/244/244_sd_efficient_interactions_with_frameworks.mp4",
      "duration": 2252
    },
    "related": {
      "activities": ["wwdc2017-212", "wwdc2017-402", "wwdc2016-416"]
    }
  }, {
    "id": "wwdc2017-607",
    "staticContentId": 1660,
    "eventContentId": 607,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/607",
    "description": "Developing Metal 2-based apps is even easier with the redesigned tools for debugging and profiling in Xcode. Dive into the enhanced Metal Frame Debugger and explore techniques for fine-tuning graphics and compute workloads. Learn about accessing detailed GPU performance counters, and check out new support in Metal System Trace for optimizing VR apps.",
    "title": "Metal 2 Optimization and Debugging",
    "originalPublishingDate": "2017-06-08T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["counters", "frame debugger", "metal", "performance", "pipeline", "shader", "statistics", "xcode"],
    "topicIds": [33, 35, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/607_metal_2_optimization_and_debugging.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/subtitles/eng/607_sd_metal_2_optimization_and_debugging.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/607_hd_metal_2_optimization_and_debugging.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/607x3ix6ocbh8/607/607_sd_metal_2_optimization_and_debugging.mp4",
      "duration": 1988
    },
    "related": {
      "activities": ["wwdc2018-604", "wwdc2017-601"],
      "resources": [42, 38, 31]
    }
  }, {
    "id": "wwdc2017-810",
    "staticContentId": 1917,
    "eventContentId": 810,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/810",
    "description": "See how the updates to UIKit controls and text styles in iOS 11 can help you design an app with a stronger visual hierarchy, clearer navigation, and a simpler interface that’s easier to use.",
    "title": "What’s New in iOS 11",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["design", "design best practices", "design studio", "design studio shorts", "ios", "ios 11", "ios design", "short", "shorts", "uikit", "what's new"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/810_whats_new_in_ios_11.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/subtitles/eng/810_sd_whats_new_in_ios_11.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/810_hd_whats_new_in_ios_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/810rf5oudq18pus/810/810_sd_whats_new_in_ios_11.mp4",
      "duration": 527
    },
    "related": {
      "resources": [17, 3]
    }
  }, {
    "id": "wwdc2017-403",
    "staticContentId": 1676,
    "eventContentId": 403,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/403",
    "description": "Learn about new advances in Xcode's support for code signing, including more powerful distribution signing, better integration with Xcode Server, and more control for working with manual signing assets.",
    "title": "What's New in Signing for Xcode and Xcode Server",
    "originalPublishingDate": "2017-06-06T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bots", "build", "certificate", "codesign", "enterprise", "provisioning"],
    "topicIds": [43, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/403_whats_new_in_signing_for_xcode_and_xcode_server.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/subtitles/eng/403_sd_whats_new_in_signing_for_xcode_and_xcode_server.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/403_hd_whats_new_in_signing_for_xcode_and_xcode_server.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/403yv29uwyamwsi222/403/403_sd_whats_new_in_signing_for_xcode_and_xcode_server.mp4",
      "duration": 2145
    },
    "related": {
      "activities": ["wwdc2019-404", "wwdc2017-302", "wwdc2017-304", "wwdc2017-405", "wwdc2017-409", "wwdc2016-401", "wwdc2016-409", "wwdc2014-415"],
      "resources": [48]
    }
  }, {
    "id": "wwdc2017-209",
    "staticContentId": 1655,
    "eventContentId": 209,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/209",
    "description": "tvOS allows you to deliver incredible apps and games for the big screen with the tvOS SDK. Gain insights into new tvOS 11 capabilities and enhancements such as Right-to-Left support, image overlays, background app updates, and user interface style improvements. And with the new AVKit capabilities you can take your media playback experience even further.",
    "title": "What's New in tvOS",
    "originalPublishingDate": "2017-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T10:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["internationalization", "layered images", "parallax", "pushkit", "push notification", "right to left", "right-to-left", "uikit"],
    "topicIds": [31, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/209_whats_new_in_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/subtitles/eng/209_sd_whats_new_in_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/209_hd_whats_new_in_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/209dzcjsnhy5ju/209/209_sd_whats_new_in_tvos.mp4",
      "duration": 2247
    },
    "related": {
      "activities": ["wwdc2018-208", "tech-talks-202", "wwdc2017-201", "wwdc2017-202", "wwdc2017-204", "wwdc2017-224", "wwdc2017-246", "wwdc2017-248", "wwdc2017-251", "wwdc2017-708"],
      "resources": [62, 61]
    }
  }, {
    "id": "wwdc2017-606",
    "staticContentId": 1653,
    "eventContentId": 606,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/606",
    "description": "Check out the new capabilities of ReplayKit 2 and see how to access its rich functionality right from Control Center. Learn about in-app capture, giving apps direct sample-level access to their audio and screen output. Get details about developing a live broadcast extension, and discover how apps can be coupled to a preferred broadcast provider.",
    "title": "What's New with Screen Recording and Live Broadcast",
    "originalPublishingDate": "2017-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T10:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["broadcast", "capture", "encode", "esports", "game", "mobcrush", "periscope", "record", "replay", "screen", "share", "stream", "video"],
    "topicIds": [28, 26, 31, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/606_whats_new_with_screen_recording_and_live_broadcast.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/subtitles/eng/606_sd_whats_new_with_screen_recording_and_live_broadcast.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/606_hd_whats_new_with_screen_recording_and_live_broadcast.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/606n77zpcxs5ir2/606/606_sd_whats_new_with_screen_recording_and_live_broadcast.mp4",
      "duration": 2322
    },
    "related": {
      "activities": ["wwdc2016-601"],
      "resources": [60]
    }
  }, {
    "id": "wwdc2017-717",
    "staticContentId": 1544,
    "eventContentId": 717,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/717",
    "description": "Wireless CarPlay is perfect for any trip. Get in your car without taking your iPhone out of your bag or pocket, and start experiencing CarPlay effortlessly. Learn how to design your CarPlay system to connect wirelessly to iPhone. Understand hardware requirements, best practices for a great user experience, and how to optimize the pairing and reconnection process.",
    "title": "Developing Wireless CarPlay Systems",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚘", "🚙", "automotive", "bluetooth", "car", "pair", "wifi"],
    "topicIds": [9, 68, 18, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/717_developing_wireless_carplay_systems.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/subtitles/eng/717_sd_developing_wireless_carplay_systems.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/717_hd_developing_wireless_carplay_systems.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/717tmz5rl6c2t2k/717/717_sd_developing_wireless_carplay_systems.mp4",
      "duration": 2077
    },
    "related": {
      "activities": ["wwdc2019-252", "wwdc2017-719", "wwdc2016-722", "wwdc2016-723"],
      "resources": [15]
    }
  }, {
    "id": "wwdc2017-208",
    "staticContentId": 1543,
    "eventContentId": 208,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/208",
    "description": "Discover how to enhance app intelligence by using machine learning and natural language processing (NLP). Learn how to use our performant on-device NLP APIs to break text into sentences and tokens, identify people and places mentioned in the text (typed, transcribed speech/handwriting). The NLP APIs can be used standalone or as a preprocessing framework for machine-learning based text modeling tasks. The APIs are available in many languages across all Apple platforms, thereby providing homogeneous text processing for consistent user experience. Open up your imagination as we walk you through hypothetical apps that harness the power of NLP to enhance the overall app experience.",
    "title": "Natural Language Processing and your Apps",
    "originalPublishingDate": "2017-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["language", "speech", "text"],
    "topicIds": [16, 21],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/208_natural_language_processing_and_your_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/subtitles/eng/208_sd_natural_language_processing_and_your_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/208_hd_natural_language_processing_and_your_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/208tpmh7cwo17vk/208/208_sd_natural_language_processing_and_your_apps.mp4",
      "duration": 2373
    },
    "related": {
      "activities": ["wwdc2018-713", "wwdc2017-207", "wwdc2017-506", "wwdc2017-703", "wwdc2017-710", "wwdc2017-711"],
      "resources": [214, 198, 21]
    }
  }, {
    "id": "wwdc2017-602",
    "staticContentId": 1662,
    "eventContentId": 602,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/602",
    "description": "ARKit provides a cutting-edge platform for developing augmented reality (AR) apps for iPhone and iPad. Get introduced to the ARKit framework and learn about harnessing its powerful capabilities for positional tracking and scene understanding. Tap into its seamless integration with SceneKit and SpriteKit, and understand how to take direct control over rendering with Metal 2.",
    "title": "Introducing ARKit: Augmented Reality for iOS",
    "originalPublishingDate": "2017-06-06T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T17:10:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["ar", "augmented", "buerli", "misslinger", "odometer", "plane", "reality", "rockwell", "tracking", "vio", "vision"],
    "topicIds": [23, 24, 25, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/602_introducing_arkit_augmented_reality_for_ios.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/subtitles/eng/602_sd_introducing_arkit_augmented_reality_for_ios.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/602_hd_introducing_arkit_augmented_reality_for_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/602pxa6f2vw71ze/602/602_sd_introducing_arkit_augmented_reality_for_ios.mp4",
      "duration": 3241
    },
    "related": {
      "activities": ["wwdc2019-228", "wwdc2018-602", "wwdc2018-610", "tech-talks-601", "wwdc2017-604", "wwdc2017-609"],
      "resources": [275, 274, 262, 25]
    }
  }, {
    "id": "wwdc2017-601",
    "staticContentId": 1658,
    "eventContentId": 601,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/601",
    "description": "Metal 2 provides near-direct access to the graphics processor (GPU), enabling your apps and games to realize their full graphics and compute potential. Dive into the breakthrough features of Metal 2 that empower the GPU to take control over key aspects of the rendering pipeline. Check out how Metal 2 enables essential tasks to be specified on-the-fly by the GPU, opening up new efficiencies for advanced rendering.",
    "title": "Introducing Metal 2",
    "originalPublishingDate": "2017-06-06T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-06T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "argument buffer", "compute", "direct to display", "frame debugger", "gpgpu", "gpu", "iab", "metl", "mtl", "mtlbuffer", "mtlcommandbuffer", "mtldevice", "opengl", "opengl es", "promotion", "pro motion", "render", "schreyer", "shader", "simd", "valient", "virtual reality", "vr"],
    "topicIds": [27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/601_introducing_metal_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/subtitles/eng/601_sd_introducing_metal_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/601_hd_introducing_metal_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/601nzg4idodih222/601/601_sd_introducing_metal_2.mp4",
      "duration": 3303
    },
    "related": {
      "activities": ["tech-talks-602", "tech-talks-603", "tech-talks-604", "tech-talks-605", "tech-talks-606", "wwdc2017-603", "wwdc2017-607", "wwdc2017-608", "wwdc2016-604", "wwdc2016-605", "wwdc2016-606"],
      "resources": [218, 203, 40, 39, 38, 37, 36, 34, 31]
    }
  }, {
    "id": "wwdc2017-210",
    "staticContentId": 1619,
    "eventContentId": 210,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/210",
    "description": "Join the Core Data engineering team and learn about the new features in Core Data.  See how you can easily and automatically include your data in Spotlight to allow users to find content even if it's stored in Core Data.  Learn about new options for indexing your data, and hear the details on a new feature for tracking changes over time.",
    "title": "What's New in Core Data",
    "originalPublishingDate": "2017-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/210_whats_new_in_core_data.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/subtitles/eng/210_sd_whats_new_in_core_data.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/210_hd_whats_new_in_core_data.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/210ihxlzd3oovy9h/210/210_sd_whats_new_in_core_data.mp4",
      "duration": 2157
    },
    "related": {
      "activities": ["wwdc2017-231", "wwdc2017-236"],
      "resources": [161]
    }
  }, {
    "id": "wwdc2017-609",
    "staticContentId": 1667,
    "eventContentId": 609,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/609",
    "description": "SpriteKit makes it easy to create high-performance, power-efficient 2D games and more. See how to take SpriteKit objects into Augmented Reality through seamless integration with ARKit. Learn about mixing 2D and 3D content and applying realistic transformations. Take direct control over SpriteKit rendering and walk through offline rendering into a Metal texture.",
    "title": "Going Beyond 2D with SpriteKit",
    "originalPublishingDate": "2017-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["2d", "action", "animation", "arkit", "audio", "camera", "collision", "collisions", "constraint", "gpu", "graphics", "inverse kinematics", "lighting", "metal", "opengl", "physics", "platformer", "puzzle", "render", "shaders", "shading", "skaction", "skaudionode", "skcameranode", "sknode", "skreferencenode", "spatial", "sprite"],
    "topicIds": [24, 25],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/609_going_beyond_2d_with_spritekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/subtitles/eng/609_sd_going_beyond_2d_with_spritekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/609_hd_going_beyond_2d_with_spritekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/609ir1t2xrat06i/609/609_sd_going_beyond_2d_with_spritekit.mp4",
      "duration": 1937
    },
    "related": {
      "activities": ["wwdc2017-224", "wwdc2017-404", "wwdc2017-602"],
      "resources": [73]
    }
  }, {
    "id": "wwdc2017-221",
    "staticContentId": 1502,
    "eventContentId": 221,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/221",
    "description": "HealthKit has become the standard for apps that help you manage and track your health on iOS and watchOS. Learn about new HealthKit data types in iOS 11, how to create and access workout route data, how to avoid duplication of health data, and enhancements made in HealthKit to support people managing diabetes.",
    "title": "What's New in Health",
    "originalPublishingDate": "2017-06-07T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T17:10:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["⌚️", "fitness"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/221_whats_new_in_health.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/subtitles/eng/221_sd_whats_new_in_health.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/221_hd_whats_new_in_health.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/221izy8b17y2dtiy/221/221_sd_whats_new_in_health.mp4",
      "duration": 3047
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-2310", "wwdc2017-205", "wwdc2017-232", "wwdc2017-712"],
      "resources": [229, 87]
    }
  }, {
    "id": "wwdc2017-719",
    "staticContentId": 1546,
    "eventContentId": 719,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/719",
    "description": "Understand how to enable your audio, messaging, VoIP calling or automaker app for CarPlay. Audio, messaging and VoIP calling apps use a consistent design that's optimized for use in the car. Automaker apps provide vehicle specific controls and displays to keep drivers connected without leaving CarPlay. Explore best practices and learn about the tools and frameworks for CarPlay apps.",
    "title": "Enabling Your App for CarPlay",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🚗", "🚘", "🚙", "automotive", "callkit", "car", "mediaplayer", "mediaplayer framework", "notifications", "sirikit"],
    "topicIds": [28, 9, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/719_enabling_your_app_for_carplay.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/subtitles/eng/719_sd_enabling_your_app_for_carplay.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/719_hd_enabling_your_app_for_carplay.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/719d0c0vj588o/719/719_sd_enabling_your_app_for_carplay.mp4",
      "duration": 1653
    },
    "related": {
      "activities": ["wwdc2018-213", "wwdc2017-717", "wwdc2016-722", "wwdc2016-723"],
      "resources": [15]
    }
  }, {
    "id": "wwdc2017-220",
    "staticContentId": 1702,
    "eventContentId": 220,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/220",
    "description": "WKWebView allows you to seamlessly integrate web content into your app. Learn how new features in WKWebView allow you to manage cookies, filter unwanted content, and give you more control over loading web content.",
    "title": "Customized Loading in WKWebView",
    "originalPublishingDate": "2017-06-07T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T16:10:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/220_customized_loading_in_wkwebview.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/subtitles/eng/220_sd_customized_loading_in_wkwebview.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/220_hd_customized_loading_in_wkwebview.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/220ugyk0ejmva/220/220_sd_customized_loading_in_wkwebview.mp4",
      "duration": 2195
    },
    "related": {
      "activities": ["wwdc2017-225"],
      "resources": [245, 170]
    }
  }, {
    "id": "wwdc2017-511",
    "staticContentId": 1708,
    "eventContentId": 511,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/511",
    "description": "High Efficiency Image File Format (HEIF) and High Efficiency Video Coding (HEVC) are powerful new standards-based technologies for storing and delivering images and video. Gain insights about how to take advantage of these next generation formats and dive deeper into the APIs that allow you to fully harness them in your apps.",
    "title": "Working with HEIF and HEVC",
    "originalPublishingDate": "2017-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [30, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/511_working_with_heif_and_hevc.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/subtitles/eng/511_sd_working_with_heif_and_hevc.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/511_hd_working_with_heif_and_hevc.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/511tj33587vdhds/511/511_sd_working_with_heif_and_hevc.mp4",
      "duration": 3529
    },
    "related": {
      "activities": ["wwdc2018-227", "wwdc2017-503", "wwdc2017-504", "wwdc2017-505", "wwdc2017-507", "wwdc2017-508", "wwdc2017-513", "wwdc2017-821", "wwdc2016-501", "wwdc2016-505"],
      "resources": [228, 227, 29, 28]
    }
  }, {
    "id": "wwdc2017-250",
    "staticContentId": 1936,
    "eventContentId": 250,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/250",
    "description": "Learn about deep linking and how universal links can be used to make your app’s content and functionality accessible throughout iOS.",
    "title": "Extend Your App’s Presence with Deep Linking",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/250_extend_your_apps_presence_with_deep_linking.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/subtitles/eng/250_sd_extend_your_apps_presence_with_deep_linking.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/250_hd_extend_your_apps_presence_with_deep_linking.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/250lnw83hnjfutowrg/250/250_sd_extend_your_apps_presence_with_deep_linking.mp4",
      "duration": 226
    },
    "related": {
      "activities": ["wwdc2017-246"]
    }
  }, {
    "id": "wwdc2017-204",
    "staticContentId": 1552,
    "eventContentId": 204,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/204",
    "description": "iOS 11 brings a bold, dynamic new style to UI elements systemwide. Learn how to adopt new features in your app, including large title bars with integrated search, landscape tab bars, and more powerful swipe actions. Find out about new patterns and enhancements that make it easier than ever to craft the perfect experience for your users.",
    "title": "Updating Your App for iOS 11",
    "originalPublishingDate": "2017-06-06T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T16:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/204_updating_your_app_for_ios_11.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/subtitles/eng/204_sd_updating_your_app_for_ios_11.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/204_hd_updating_your_app_for_ios_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/204kty9amomlmk222/204/204_sd_updating_your_app_for_ios_11.mp4",
      "duration": 1856
    },
    "related": {
      "activities": ["wwdc2018-235", "tech-talks-201", "tech-talks-207", "wwdc2017-209"],
      "resources": [3]
    }
  }, {
    "id": "wwdc2017-816",
    "staticContentId": 1920,
    "eventContentId": 816,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/816",
    "description": "Engage people from the first moment they open your app, and keep them coming back for more. Learn tips on how to make a compelling first impression, methods for teaching new users about your app, and best practices when asking users for more information.",
    "title": "Love at First Launch",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["design", "design best practices", "design short", "design studio", "design studio shorts", "first impression", "first launch", "first time user experience", "onboarding", "on boarding", "short", "shorts", "teaching"],
    "topicIds": [3, 6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/816_love_at_first_launch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/subtitles/eng/816_sd_love_at_first_launch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/816_hd_love_at_first_launch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/816mg1phgy05k3v222/816/816_sd_love_at_first_launch.mp4",
      "duration": 655
    },
    "related": {
      "activities": ["wwdc2017-413"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-822",
    "staticContentId": 1913,
    "eventContentId": 822,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/822",
    "description": "An app icon is the face of your app on the home screen. Learn key design principles for creating simple, unique, meaningful and beautiful app icons. Gain simple but effective techniques for testing your app icon for clarity and immediate recognizability.",
    "title": "App Icon Design",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["app", "app icon", "app icons", "design", "design best practices", "designing", "design studio", "design studio shorts", "icon", "icon design", "short", "shorts"],
    "topicIds": [6],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/822_app_icon_design.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/subtitles/eng/822_sd_app_icon_design.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/822_hd_app_icon_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/822qxyzd1qk9l222/822/822_sd_app_icon_design.mp4",
      "duration": 631
    },
    "related": {
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-506",
    "staticContentId": 1618,
    "eventContentId": 506,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/506",
    "description": "Vision is a new, powerful, and easy-to-use framework that provides solutions to computer vision challenges through a consistent interface. Understand how to use the Vision API to detect faces, compute facial landmarks, track objects, and more. Learn how to take things even further by providing custom machine learning models for Vision tasks using CoreML.",
    "title": "Vision Framework: Building on Core ML",
    "originalPublishingDate": "2017-06-07T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["barcode", "barcode detection", "core ml", "face detection", "image alignment", "machine learning", "object tracking", "scene detection", "vision"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/506_vision_framework_building_on_core_ml.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/subtitles/eng/506_sd_vision_framework_building_on_core_ml.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/506_hd_vision_framework_building_on_core_ml.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/506jgz9rblchh/506/506_sd_vision_framework_building_on_core_ml.mp4",
      "duration": 1867
    },
    "related": {
      "activities": ["wwdc2019-234", "wwdc2018-716", "wwdc2018-717", "wwdc2017-208", "wwdc2017-505", "wwdc2017-510", "wwdc2017-703", "wwdc2017-710"],
      "resources": [200, 134]
    }
  }, {
    "id": "wwdc2017-406",
    "staticContentId": 1682,
    "eventContentId": 406,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/406",
    "description": "Learn how to use Xcode 9 runtime tools to help find issues and bugs, ranging from missing and unintended UI updates to integer overflows and data races on collection APIs.  Hear about the new Undefined Behavior Sanitizer and Main Thread Checker runtime tools in Xcode 9, and the improvements to Address and Thread Sanitizers.",
    "title": "Finding Bugs Using Xcode Runtime Tools",
    "originalPublishingDate": "2017-06-07T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T17:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["alignment", "analyzer", "asan", "bug", "bugs", "c", "c++", "debug", "debugger", "debugging", "main thread checker", "obj-c", "objectivec", "objective c", "objective-c", "out of scope", "overflow", "overflows", "runtime", "sanitizer", "sanitizers", "sanitzer", "scope", "swift", "thread", "threading", "threads", "tool", "tools", "tsan", "ubsan", "undefined behavior", "xcode"],
    "topicIds": [33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/406_finding_bugs_using_xcode_runtime_tools.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/subtitles/eng/406_sd_finding_bugs_using_xcode_runtime_tools.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/406_hd_finding_bugs_using_xcode_runtime_tools.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/406hi7pbvl7ez0j/406/406_sd_finding_bugs_using_xcode_runtime_tools.mp4",
      "duration": 3261
    },
    "related": {
      "activities": ["wwdc2018-414", "wwdc2017-402", "wwdc2017-404", "wwdc2017-407", "wwdc2017-411", "wwdc2016-412", "wwdc2016-720", "wwdc2015-410", "wwdc2015-413"],
      "resources": [244, 243, 242, 241, 240, 23, 22]
    }
  }, {
    "id": "wwdc2017-821",
    "staticContentId": 1915,
    "eventContentId": 821,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/821",
    "description": "Wide color displays allow your app to display richer, more vibrant and lifelike colors than ever before. Get a primer on color management, the Display P3 color space, and practical workflow techniques for producing more colorful images and icons.",
    "title": "Get Started with Display P3",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["color", "color management", "colorspace", "design", "design best practices", "design shorts", "design studio", "design studio shorts", "display p3", "icons", "images", "short"],
    "topicIds": [24, 25, 6, 22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/821_get_started_with_display_p3.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/subtitles/eng/821_sd_get_started_with_display_p3.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/821_hd_get_started_with_display_p3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/821kjtggolzxsv/821/821_sd_get_started_with_display_p3.mp4",
      "duration": 606
    },
    "related": {
      "activities": ["wwdc2017-511"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-402",
    "staticContentId": 1673,
    "eventContentId": 402,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/402",
    "description": "Swift 4 continues the evolution of the safe, fast, and expressive language, with better performance and new features. Learn about the new String and improved generics, see how Swift 4 maintains support for your existing Swift 3 code, and get insight into where Swift is headed in the future.",
    "title": "What's New in Swift",
    "originalPublishingDate": "2017-06-06T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-06T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["collection", "cow", "existential", "law of exclusivity", "objc", "source", "subscript", "substring", "symbols", "unicode"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/402_whats_new_in_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/subtitles/eng/402_sd_whats_new_in_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/402_hd_whats_new_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/402ynph39nk5sn4222/402/402_sd_whats_new_in_swift.mp4",
      "duration": 3570
    },
    "related": {
      "activities": ["wwdc2018-401", "wwdc2017-212", "wwdc2017-244", "wwdc2017-406", "wwdc2017-407", "wwdc2017-408", "wwdc2017-411", "wwdc2016-416"],
      "resources": [255, 81, 46, 45]
    }
  }, {
    "id": "wwdc2017-409",
    "staticContentId": 1677,
    "eventContentId": 409,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/409",
    "description": "Xcode 9 has new APIs for structuring your test logging and including your own attachments and screenshots, as well as new support for parallel device and simulator testing. Learn how to write UI tests that target multiple applications, and find out ways to improve the performance of your UI tests.",
    "title": "What's New in Testing",
    "originalPublishingDate": "2017-06-08T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["xctestexpectation", "xctwaiter"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/409_whats_new_in_testing.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/subtitles/eng/409_sd_whats_new_in_testing.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/409_hd_whats_new_in_testing.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/409cjm7echviyzl/409/409_sd_whats_new_in_testing.mp4",
      "duration": 2400
    },
    "related": {
      "activities": ["wwdc2018-403", "wwdc2018-417", "wwdc2017-215", "wwdc2017-401", "wwdc2017-403", "wwdc2017-405", "wwdc2017-414", "wwdc2016-409", "wwdc2015-406", "wwdc2014-414"],
      "resources": [72]
    }
  }, {
    "id": "wwdc2017-716",
    "staticContentId": 1569,
    "eventContentId": 716,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/716",
    "description": "iOS provides several techniques for keeping your app front and center. Whether you’re building a kiosk, hospitality check-in, or educational assessment app, choosing the right app-lock technique is critical. From Guided Access to Automatic Assessment Configuration you’ll learn which approach works best for your unique experience.",
    "title": "iOS Configuration and APIs for Kiosk and Assessment Apps",
    "originalPublishingDate": "2017-06-09T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T13:50:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [44, 12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/716_ios_configuration_and_apis_for_kiosk_and_assessment_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/subtitles/eng/716_sd_ios_configuration_and_apis_for_kiosk_and_assessment_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/716_hd_ios_configuration_and_apis_for_kiosk_and_assessment_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/716op0un8kq3o4n/716/716_sd_ios_configuration_and_apis_for_kiosk_and_assessment_apps.mp4",
      "duration": 2148
    },
    "related": {
      "resources": [187, 166, 165, 164, 163, 162]
    }
  }, {
    "id": "wwdc2017-610",
    "staticContentId": 1668,
    "eventContentId": 610,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/610",
    "description": "Model I/O makes it easy to bridge the divide between artists' tools and your custom engine. See how to build a Model I/O-powered art pipeline to bring assets from content creation tools into a Metal 2-based renderer. Learn strategies for baking 3D content into structures optimal for real-time rendering, and best practices for working with animation data, common mesh and model formats, textures, and materials.",
    "title": "From Art to Engine with Model I/O",
    "originalPublishingDate": "2017-06-09T14:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T14:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["baker", "collada", "dae", "model", "opensubdiv", "pipeline", "usd"],
    "topicIds": [25, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/610_from_art_to_engine_with_model_io.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/subtitles/eng/610_sd_from_art_to_engine_with_model_io.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/610_hd_from_art_to_engine_with_model_io.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/610b2hmj0oh62l0/610/610_sd_from_art_to_engine_with_model_io.mp4",
      "duration": 2331
    },
    "related": {
      "resources": [211, 38, 33]
    }
  }, {
    "id": "wwdc2017-705",
    "staticContentId": 1607,
    "eventContentId": 705,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/705",
    "description": "Learn about the new types of HomeKit accessories supported in iOS 11, new accessory setup options, and how enhancements to triggers make it possible to automatically run scenes based on who is home, only at certain times, and with more types of accessories.  Understand how improvements to the HomeKit protocol greatly improve the responsiveness of HomeKit accessories.  Discover how HomeKit accessory development is now open for experimentation & exploration.",
    "title": "What's New in HomeKit",
    "originalPublishingDate": "2017-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T09:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["🏠", "🏡", "actionset", "ble", "bluetooth", "bluetooth low energy", "btle", "camera", "door lock", "hmaccessory", "hmcharacteristic", "hmhomemanager", "hmroom", "hmservice", "hmservicegroup", "hmtrigger", "hmzone", "home", "home automation", "homekit", "ip camera", "lights", "mfi", "mfi program", "thermostat", "wac", "wifi", "wi-fi", "wireless accessory configuration"],
    "topicIds": [9, 15],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/705_whats_new_in_homekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/subtitles/eng/705_sd_whats_new_in_homekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/705_hd_whats_new_in_homekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/705d3czqkho1a6u/705/705_sd_whats_new_in_homekit.mp4",
      "duration": 2432
    },
    "related": {
      "activities": ["wwdc2017-712", "wwdc2016-710", "wwdc2015-210", "wwdc2014-213", "wwdc2014-701"],
      "resources": [171]
    }
  }, {
    "id": "wwdc2017-608",
    "staticContentId": 1661,
    "eventContentId": 608,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/608",
    "description": "Metal Performance Shaders (MPS) provides a highly tuned library of functions that extend the power of the GPU for more than just graphics. With Metal 2, MPS comes to the Mac along with an expanded set of capabilities. Learn how to tap into the latest image processing operations, perform linear algebra operations, and accelerate machine learning algorithms via new primitives and a graph API to build and execute neural networks on the GPU.",
    "title": "Using Metal 2 for Compute",
    "originalPublishingDate": "2017-06-08T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "cnn", "compute", "deep", "gpgpu", "gpu", "machine", "metl", "mtl", "mtlbuffer", "mtlcommandbuffer", "mtldevice", "neural", "neural network", "opengl", "opengl es", "render", "rnn", "shader", "simd", "vision"],
    "topicIds": [27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/608_using_metal_2_for_compute.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/subtitles/eng/608_sd_using_metal_2_for_compute.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/608_hd_using_metal_2_for_compute.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/608gcvcpr8gs2/608/608_sd_using_metal_2_for_compute.mp4",
      "duration": 2365
    },
    "related": {
      "activities": ["wwdc2017-601"],
      "resources": [71, 70, 69, 68, 56]
    }
  }, {
    "id": "wwdc2017-226",
    "staticContentId": 1617,
    "eventContentId": 226,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/226",
    "description": "The CloudKit Dashboard has been completely overhauled to aid you throughout your development lifecycle of building, testing, operating, and supporting your CloudKit-backed applications. See the new functionality, including fetching changes and modifying sharing relationships right from the Dashboard.  Gain insights from real-time server logs into events across all of your users—including CloudKit push notifications—to facilitate debugging and customer support.",
    "title": "Build Better Apps with CloudKit Dashboard",
    "originalPublishingDate": "2017-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [33, 11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/226_build_better_apps_with_cloudkit_dashboard.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/subtitles/eng/226_sd_build_better_apps_with_cloudkit_dashboard.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/226_hd_build_better_apps_with_cloudkit_dashboard.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/226hm9uasv2xilo/226/226_sd_build_better_apps_with_cloudkit_dashboard.mp4",
      "duration": 2255
    },
    "related": {
      "activities": ["wwdc2017-707", "wwdc2017-709", "wwdc2016-226", "wwdc2016-231", "wwdc2015-704", "wwdc2015-710", "wwdc2015-715"],
      "resources": [133, 132, 131, 130, 129]
    }
  }, {
    "id": "wwdc2017-410",
    "staticContentId": 1688,
    "eventContentId": 410,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/410",
    "description": "Localizing a playground book is more than just translation. Explore best practices, potential problem areas, and the unique challenges of localizing educational content. Understand how a localized playground book is structured and hear about the lessons learned by the people who made it happen.",
    "title": "Localizing Content for Swift Playgrounds",
    "originalPublishingDate": "2017-06-08T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T15:10:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🌍", "🌎", "🌏", "genstrings", "i18n", "localization", "nslocalizedstring", "stringsdict", "translation", "world"],
    "topicIds": [36, 12, 42],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/410_localizing_content_for_swift_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/subtitles/eng/410_sd_localizing_content_for_swift_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/410_hd_localizing_content_for_swift_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/410ozg0v8cc7h/410/410_sd_localizing_content_for_swift_playgrounds.mp4",
      "duration": 2130
    },
    "related": {
      "activities": ["wwdc2018-413", "wwdc2017-248", "wwdc2017-401", "wwdc2017-408", "wwdc2017-416", "wwdc2016-201"],
      "resources": [205]
    }
  }, {
    "id": "wwdc2017-207",
    "staticContentId": 1621,
    "eventContentId": 207,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/207",
    "description": "Join us for this annual session to learn about enhancements in Cocoa. Catch up on the latest APIs for Touch Bar, performance improvements like copy-on-write collections, new features such as document sharing, Swift improvements for key paths and archiving, and many other refinements to AppKit and Foundation APIs.  Get an overview of many topics and a guide to important related sessions throughout the week.",
    "title": "What's New in Cocoa",
    "originalPublishingDate": "2017-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T09:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [11, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/207_whats_new_in_cocoa.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/subtitles/eng/207_sd_whats_new_in_cocoa.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/207_hd_whats_new_in_cocoa.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/207mg6u1b7mfd02n/207/207_sd_whats_new_in_cocoa.mp4",
      "duration": 2326
    },
    "related": {
      "activities": ["wwdc2017-208", "wwdc2017-212", "wwdc2017-222"],
      "resources": [127, 98]
    }
  }, {
    "id": "wwdc2017-405",
    "staticContentId": 1679,
    "eventContentId": 405,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/405",
    "description": "Learn about the new tools in Xcode 9 for exploring the source control history of your projects. See how Xcode integrates with GitHub, and discover how the new source control navigator makes it easy to browse branches, tags, and detailed history and commit information.",
    "title": "GitHub and the New Source Control Workflows in Xcode 9",
    "originalPublishingDate": "2017-06-07T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["editor", "scm"],
    "topicIds": [38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/405_github_and_the_new_source_control_workflows_in_xcode_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/subtitles/eng/405_sd_github_and_the_new_source_control_workflows_in_xcode_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/405_hd_github_and_the_new_source_control_workflows_in_xcode_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/405jj1fb4x5ol/405/405_sd_github_and_the_new_source_control_workflows_in_xcode_9.mp4",
      "duration": 1872
    },
    "related": {
      "activities": ["wwdc2018-418", "wwdc2017-403", "wwdc2017-404", "wwdc2017-409"],
      "resources": [48]
    }
  }, {
    "id": "wwdc2017-718",
    "staticContentId": 1585,
    "eventContentId": 718,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/718",
    "description": "Core NFC is an exciting new framework that enables you to read NFC tags in your apps on iPhone 7 and iPhone 7 Plus.  Learn how to integrate Core NFC into your apps, key requirements for using this feature, and start thinking about the new kinds of apps that are enabled with NFC capabilities.",
    "title": "Introducing Core NFC",
    "originalPublishingDate": "2017-06-04T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["nfc"],
    "topicIds": [9, 18],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/718_introducing_core_nfc.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/subtitles/eng/718_sd_introducing_core_nfc.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/718_hd_introducing_core_nfc.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/718jes6q3aac0f1a/718/718_sd_introducing_core_nfc.mp4",
      "duration": 675
    },
    "related": {
      "activities": ["wwdc2019-715", "wwdc2017-714"],
      "resources": [191, 59]
    }
  }, {
    "id": "wwdc2017-808",
    "staticContentId": 1503,
    "eventContentId": 808,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/808",
    "description": "Creating a great Watch experience involves planning and attention to detail. Learn how to focus your development for Apple Watch to ensure that the experience is timely and contextually relevant for your users. Walk through a case study of the WWDC Watch app and gain insights from the development team’s experience across three versions of the app. Finally, learn design and technical tips for making your watchOS app the best it can be.",
    "title": "Planning a Great Apple Watch Experience",
    "originalPublishingDate": "2017-06-08T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T17:10:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["🍺", "🍻", "🥃", "⌚️", "clockkit", "watchconnectivity", "watchkit"],
    "topicIds": [3, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/808_planning_a_great_apple_watch_experience.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/subtitles/eng/808_sd_planning_a_great_apple_watch_experience.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/808_hd_planning_a_great_apple_watch_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/808qnk3ctygo5hd/808/808_sd_planning_a_great_apple_watch_experience.mp4",
      "duration": 3169
    },
    "related": {
      "activities": ["wwdc2018-206", "wwdc2018-504", "wwdc2018-2030", "wwdc2018-2250", "wwdc2018-2310", "wwdc2018-2380", "wwdc2017-205", "wwdc2017-214", "wwdc2017-216", "wwdc2017-228", "wwdc2017-804"],
      "resources": [83, 14, 9]
    }
  }, {
    "id": "wwdc2017-709",
    "staticContentId": 1575,
    "eventContentId": 709,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/709",
    "description": "Learn about important improvements to URLSession. Find out how to use new URLSession APIs to better handle connectivity fluctuations, to schedule background session tasks, and to receive progress reports for session tasks. Plus, gain insights into valuable best practices, tips, and news about ongoing work with emerging network technologies.",
    "title": "Advances in Networking, Part 2",
    "originalPublishingDate": "2017-06-07T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bonjour", "dns", "eco", "hotspot", "ipv6", "mulipath", "networking", "tcp", "tls", "url session", "vpn"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/709_advances_in_networking_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/subtitles/eng/709_sd_advances_in_networking_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/709_hd_advances_in_networking_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/709e7ilkvrjhjr/709/709_sd_advances_in_networking_part_2.mp4",
      "duration": 2636
    },
    "related": {
      "activities": ["tech-talks-203", "wwdc2017-226", "wwdc2017-238", "wwdc2017-701", "wwdc2017-707", "wwdc2016-711", "wwdc2016-714", "wwdc2015-711", "wwdc2015-717", "wwdc2014-707"],
      "resources": [156, 139, 138, 137, 136, 135]
    }
  }, {
    "id": "wwdc2017-213",
    "staticContentId": 1550,
    "eventContentId": 213,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/213",
    "description": "Dive deep into the new Drag and Drop APIs in iOS 11. Learn what users will come to expect of your draggable views and how to best deal with the asynchronous nature by which data gets dropped into your app. We’ll also show you how to make your Drag and Drop look great using the advanced visual appearance tweaks that we offer.",
    "title": "Mastering Drag and Drop",
    "originalPublishingDate": "2017-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T11:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/213_mastering_drag_and_drop.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/subtitles/eng/213_sd_mastering_drag_and_drop.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/213_hd_mastering_drag_and_drop.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/213zpcyn0q9if99c/213/213_sd_mastering_drag_and_drop.mp4",
      "duration": 3352
    },
    "related": {
      "activities": ["wwdc2017-229"],
      "resources": [208, 19]
    }
  }, {
    "id": "wwdc2017-219",
    "staticContentId": 1554,
    "eventContentId": 219,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/219",
    "description": "Touch user interactions are fundamental to the user experience on iOS. Learn how to master the power of UIKit's gesture recognizer system in your application. Find out how to integrate with the new Drag and Drop features and the system gestures. Get some great tips for debugging your custom built interactions.",
    "title": "Modern User Interaction on iOS",
    "originalPublishingDate": "2017-06-07T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T16:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/219_modern_user_interaction_on_ios.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/subtitles/eng/219_sd_modern_user_interaction_on_ios.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/219_hd_modern_user_interaction_on_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/219okz4tp7uyw5n/219/219_sd_modern_user_interaction_on_ios.mp4",
      "duration": 2178
    },
    "related": {
      "activities": ["wwdc2019-221", "tech-talks-201", "wwdc2017-804"],
      "resources": [3]
    }
  }, {
    "id": "wwdc2017-110",
    "staticContentId": 1800,
    "eventContentId": 110,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/110",
    "description": "Why design apps with accessibility?  Meet Todd Stabelfeldt, founder of C4 Consulting, who has lived with quadriplegia since the age of 8.  Over his decades-long struggle for increased independence in both his personal and professional lives, Todd has become a noted expert in technologies for persons with disabilities, which he has found can offer not only a level of autonomy but also empowerment and dignity to the mobility impaired.  Leading by example, Todd runs a successful business but his real passion lies elsewhere.  Hear how apps designed well with accessibility in mind have changed his life as a husband, father and as owner of the “Quadthedral“, his family’s HomeKit-enabled smart home.",
    "title": "Convenience for You is Independence for Me",
    "originalPublishingDate": "2017-06-07T12:40:00-07:00",
    "publishingExpiryDate": "2022-06-07T12:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [2],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/110_convenience_for_you_is_independence_for_me.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/subtitles/eng/110_sd_convenience_for_you_is_independence_for_me.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/110_hd_convenience_for_you_is_independence_for_me.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/110agzs7njnnjtee/110/110_sd_convenience_for_you_is_independence_for_me.mp4",
      "duration": 2508
    }
  }, {
    "id": "wwdc2017-806",
    "staticContentId": 1637,
    "eventContentId": 806,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/806",
    "description": "By understanding the range of abilities and capabilities of the people who use our apps, you can design robust apps that work for everyone. Learn how designing for accessibility and inclusiveness can do social good, widen participation, and enable everyone to benefit.",
    "title": "Design For Everyone",
    "originalPublishingDate": "2017-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessibility", "apple design", "apple designers", "design", "design best practices", "dynamic type", "hi", "hig", "human interface", "inclusive design", "ios", "ios design"],
    "topicIds": [8, 3, 5, 6, 7, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/806_design_for_everyone.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/subtitles/eng/806_sd_design_for_everyone.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/806_hd_design_for_everyone.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/806ph0c9ysyu1/806/806_sd_design_for_everyone.mp4",
      "duration": 2768
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2018-226", "wwdc2018-230", "wwdc2017-215", "wwdc2017-217", "wwdc2017-245", "wwdc2017-802", "wwdc2017-804"],
      "resources": [89, 17]
    }
  }, {
    "id": "wwdc2017-231",
    "staticContentId": 1670,
    "eventContentId": 231,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/231",
    "description": "Fundamental to the iOS Search Experience, Core Spotlight is now available on macOS. Using the same APIs that are available for iOS, Core Spotlight lets you index your app’s contents without requiring on-disk files. Learn how to provide rich custom Quick Look previews on both macOS and iOS so your users can see the content right in their search results. Get details about how your Core Spotlight items on iOS can participate in the new Drag and Drop feature.",
    "title": "What's New in Core Spotlight for iOS and macOS",
    "originalPublishingDate": "2017-06-08T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T16:10:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [11, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/231_whats_new_in_core_spotlight_for_ios_and_macos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/subtitles/eng/231_sd_whats_new_in_core_spotlight_for_ios_and_macos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/231_hd_whats_new_in_core_spotlight_for_ios_and_macos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/231wmbuvx0t3sci6ua/231/231_sd_whats_new_in_core_spotlight_for_ios_and_macos.mp4",
      "duration": 2315
    },
    "related": {
      "activities": ["wwdc2017-203", "wwdc2017-210", "wwdc2017-227", "wwdc2017-229", "wwdc2016-223", "wwdc2015-234"],
      "resources": [190]
    }
  }, {
    "id": "wwdc2017-707",
    "staticContentId": 1574,
    "eventContentId": 707,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/707",
    "description": "Find out how Apple’s networking libraries and frameworks are taking advantage of new and improved protocols to deliver better connectivity and performance for your apps. In this first of two sessions, we'll cover ECN, IPv6, Network Extensions, and Multipath protocols.",
    "title": "Advances in Networking, Part 1",
    "originalPublishingDate": "2017-06-07T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bonjour", "dns", "eco", "hotspot", "ipv6", "mulipath", "networking", "tcp", "tls", "url session", "vpn"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/707_advances_in_networking_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/subtitles/eng/707_sd_advances_in_networking_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/707_hd_advances_in_networking_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/707h2gkb95cx1l/707/707_sd_advances_in_networking_part_1.mp4",
      "duration": 2669
    },
    "related": {
      "activities": ["wwdc2017-226", "wwdc2017-701", "wwdc2017-709", "wwdc2016-711", "wwdc2016-714", "wwdc2015-711", "wwdc2015-717", "wwdc2015-719", "wwdc2014-707"],
      "resources": [156, 139, 138, 137, 136, 135]
    }
  }, {
    "id": "wwdc2017-234",
    "staticContentId": 1586,
    "eventContentId": 234,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/234",
    "description": "With a completely redesigned App Store for iMessage and new App Drawer, discovering, installing, and using iMessage apps has never been easier. And now with live message views people can benefit and interact with your iMessage app directly in the transcript. Get the details on how your app can streamline the message sending experience with the new direct send functionality. Hear about important best practices like making the best use of summary text, optimizing snapshots of your iMessage app, and more in order to provide an outstanding user experience.",
    "title": "What's New in iMessage Apps",
    "originalPublishingDate": "2017-06-08T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T17:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [13, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/234_whats_new_in_imessage_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/subtitles/eng/234_sd_whats_new_in_imessage_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/234_hd_whats_new_in_imessage_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/234otwtryzhno89esd/234/234_sd_whats_new_in_imessage_apps.mp4",
      "duration": 2705
    },
    "related": {
      "activities": ["wwdc2018-232", "wwdc2017-240"]
    }
  }, {
    "id": "wwdc2017-712",
    "staticContentId": 1606,
    "eventContentId": 712,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/712",
    "description": "Discover how watchOS 4 makes it possible for a watchOS app to communicate with Bluetooth Low Energy accessories.  Learn about changes to Core Bluetooth that improve reliability and enable high performance streaming connections with Bluetooth Low Energy Accessories. Understand the best practices in Bluetooth Low Energy accessory design.",
    "title": "What's New in Core Bluetooth",
    "originalPublishingDate": "2017-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessories", "accessory", "ancs", "beacon", "beacons", "ble", "bleutooth", "bluetooth", "bluetooth 4.0", "bluetooth 4.2", "bluetooth low energy", "bt", "btle", "cbcentral", "cbperipheral", "central", "characteristic", "corebluetooth", "core bluetooth", "edl", "gatt", "ibeacon", "ibeacon for printers", "ibeacon for printing", "ibeacons", "l2cap", "mfi", "peripheral", "service", "throughput", "wireless"],
    "topicIds": [9, 18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/712_whats_new_in_core_bluetooth.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/subtitles/eng/712_sd_whats_new_in_core_bluetooth.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/712_hd_whats_new_in_core_bluetooth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/712jqzhsxoww3zn/712/712_sd_whats_new_in_core_bluetooth.mp4",
      "duration": 2415
    },
    "related": {
      "activities": ["wwdc2018-2310", "wwdc2017-205", "wwdc2017-216", "wwdc2017-221", "wwdc2017-705", "wwdc2015-801", "wwdc2014-701"],
      "resources": [172]
    }
  }, {
    "id": "wwdc2017-605",
    "staticContentId": 1666,
    "eventContentId": 605,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/605",
    "description": "Discover tips and tricks gleaned by the Swift Playgrounds Content team for working more effectively with SceneKit on a visually rich app. Learn how to integrate animation, optimize rendering performance, design for accessibility, add visual polish, and understand strategies for creating an effective workflow with 3D assets.",
    "title": "SceneKit in Swift Playgrounds",
    "originalPublishingDate": "2017-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "collada", "dae", "graph", "graphics", "inverse kinematics", "opengl", "opensubdiv", "pbr", "physically based renderer", "physics", "playground", "renderer", "rendering", "scene", "scnlayer", "scnnode", "scnview", "swift", "usd"],
    "topicIds": [25, 36, 12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/605_scenekit_in_swift_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/subtitles/eng/605_sd_scenekit_in_swift_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/605_hd_scenekit_in_swift_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/605al19s0mq8dhrdv/605/605_sd_scenekit_in_swift_playgrounds.mp4",
      "duration": 2409
    },
    "related": {
      "activities": ["wwdc2019-6110", "wwdc2017-408"],
      "resources": [26]
    }
  }, {
    "id": "wwdc2017-238",
    "staticContentId": 1724,
    "eventContentId": 238,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/238",
    "description": "People expect long battery life on their mobile devices, and apps play a vital role in achieving that experience. Learn strategies to conserve energy while providing the best experience for your app. Find out about the key areas that affect energy consumption of an app as well as how to best use the available APIs to optimize battery life. Master energy debugging tools to make your app more energy efficient.",
    "title": "Writing Energy Efficient Apps",
    "originalPublishingDate": "2017-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/238_writing_energy_efficient_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/subtitles/eng/238_sd_writing_energy_efficient_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/238_hd_writing_energy_efficient_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/238a3uic99uf9c6iw3/238/238_sd_writing_energy_efficient_apps.mp4",
      "duration": 2404
    },
    "related": {
      "activities": ["wwdc2017-404", "wwdc2017-407", "wwdc2017-709"]
    }
  }, {
    "id": "wwdc2017-101",
    "staticContentId": 1796,
    "eventContentId": 101,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/101",
    "description": "WWDC 2017 Keynote",
    "title": "WWDC 2017 Keynote",
    "originalPublishingDate": "2017-06-05T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-05T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://p-events-delivery.akamaized.net/17qopibbefvoiuhbsefvbsefvopihb06/m3u8/hls_vod_mvp.m3u8",
      "tvOShls": "https://p-events-delivery.akamaized.net/17qopibbefvoiuhbsefvbsefvopihb06/m3u8/atv_vod_mvp.m3u8",
      "duration": 8345
    },
    "related": {
      "activities": ["wwdc2018-101"]
    }
  }, {
    "id": "wwdc2017-508",
    "staticContentId": 1643,
    "eventContentId": 508,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/508",
    "description": "When using Portrait mode, depth data is now embedded in photos captured on iPhone 7 Plus. In this second session on depth, see which key APIs allow you to leverage this data in your app. Learn how to process images that include depth and preserve the data when manipulating the image. Get inspired to add creative new effects to your app and enable your users to do amazing things with their photos.",
    "title": "Image Editing with Depth",
    "originalPublishingDate": "2017-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [30],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/508_image_editing_with_depth.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/subtitles/eng/508_sd_image_editing_with_depth.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/508_hd_image_editing_with_depth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/508wdyl5rm2jy9z8/508/508_sd_image_editing_with_depth.mp4",
      "duration": 2966
    },
    "related": {
      "activities": ["wwdc2018-503", "wwdc2017-505", "wwdc2017-507", "wwdc2017-510", "wwdc2017-511", "wwdc2017-513"]
    }
  }, {
    "id": "wwdc2017-206",
    "staticContentId": 1705,
    "eventContentId": 206,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/206",
    "description": "Logging in to an app is a source of friction that can lead to user abandonment. Password AutoFill is a new feature in iOS 11 that makes logging in easy by putting users' passwords directly on the keyboard in your login UI. Learn how to guarantee that Password AutoFill works in your app to make logging in a frictionless experience for your users.",
    "title": "Introducing Password AutoFill for Apps",
    "originalPublishingDate": "2017-06-07T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T09:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [19, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/206_introducing_password_autofill_for_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/subtitles/eng/206_sd_introducing_password_autofill_for_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/206_hd_introducing_password_autofill_for_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/206efq12yy8kg/206/206_sd_introducing_password_autofill_for_apps.mp4",
      "duration": 2068
    },
    "related": {
      "activities": ["wwdc2018-204", "wwdc2018-208", "wwdc2018-721", "wwdc2017-242", "wwdc2017-804"]
    }
  }, {
    "id": "wwdc2017-242",
    "staticContentId": 1541,
    "eventContentId": 242,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/242",
    "description": "Go beyond the basics and provide a first class text input experience in your app. Learn best practices and how to expand your app by supporting text input traits and QuickType. Get tips on how to optimize your UI when incorporating the system keyboard into your layout. Discover how to create a custom keyboard and upgrade it to a system-wide keyboard extension.",
    "title": "The Keys to a Better Text Input Experience",
    "originalPublishingDate": "2017-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T11:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["⌨️", "uiinputview", "uikeycommand", "uitextinputcontextidentifier", "uitextinputmode"],
    "topicIds": [13, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/242_the_keys_to_a_better_text_input_experience.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/subtitles/eng/242_sd_the_keys_to_a_better_text_input_experience.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/242_hd_the_keys_to_a_better_text_input_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/242vuobd1jbmqgaxcq/242/242_sd_the_keys_to_a_better_text_input_experience.mp4",
      "duration": 2777
    },
    "related": {
      "activities": ["wwdc2017-206", "wwdc2017-401"],
      "resources": [202]
    }
  }, {
    "id": "wwdc2017-503",
    "staticContentId": 1629,
    "eventContentId": 503,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/503",
    "description": "High Efficiency Image File Format (HEIF) and High Efficiency Video Coding (HEVC) are powerful new standards-based technologies for storing and delivering images and audiovisual media. Get introduced to these next generation space-saving codecs and their associated container formats. Learn how to work with them across Apple platforms and how you can take advantage of them in your own apps.",
    "title": "Introducing HEIF and HEVC",
    "originalPublishingDate": "2017-06-06T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-06T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [29, 30, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/503_introducing_heif_and_hevc.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/subtitles/eng/503_sd_introducing_heif_and_hevc.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/503_hd_introducing_heif_and_hevc.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/503i6plfvfi7o3222/503/503_sd_introducing_heif_and_hevc.mp4",
      "duration": 2141
    },
    "related": {
      "activities": ["wwdc2019-419", "wwdc2018-227", "wwdc2017-504", "wwdc2017-505", "wwdc2017-507", "wwdc2017-511", "wwdc2017-513", "wwdc2017-515"],
      "resources": [28]
    }
  }, {
    "id": "wwdc2017-304",
    "staticContentId": 1614,
    "eventContentId": 304,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/304",
    "description": "Platform features and tools make it easy to configure, deploy and manage Apple devices in organizations of all sizes. Discover new and updated configuration capabilities for each platform, updated app deployment techniques and tool changes that make low-bandwidth updates more accessible. Learn how educational institutions can use the advancements in Apple School Manager and Classroom to make configuring student devices even easier.",
    "title": "What's New in Device Configuration, Deployment, and Management",
    "originalPublishingDate": "2017-06-08T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-08T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [44, 12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/304_whats_new_in_device_configuration_deployment_and_management.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/subtitles/eng/304_sd_whats_new_in_device_configuration_deployment_and_management.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/304_hd_whats_new_in_device_configuration_deployment_and_management.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/304jud27ysms3xno/304/304_sd_whats_new_in_device_configuration_deployment_and_management.mp4",
      "duration": 3588
    },
    "related": {
      "activities": ["wwdc2017-403"],
      "resources": [155, 154, 153, 152, 151, 150, 149, 148, 146, 143]
    }
  }, {
    "id": "wwdc2017-225",
    "staticContentId": 1701,
    "eventContentId": 225,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/225",
    "description": "Safari View Controller brings Safari’s features into your app for browsing the web and logging in with 3rd party services. Learn how to use new APIs to customize Safari View Controller’s UI to fit your app’s style.",
    "title": "What's New in Safari View Controller",
    "originalPublishingDate": "2017-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/225_whats_new_in_safari_view_controller.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/subtitles/eng/225_sd_whats_new_in_safari_view_controller.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/225_hd_whats_new_in_safari_view_controller.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/225kqn87jg4q699q/225/225_sd_whats_new_in_safari_view_controller.mp4",
      "duration": 2039
    },
    "related": {
      "activities": ["wwdc2017-220", "wwdc2017-702"]
    }
  }, {
    "id": "wwdc2017-228",
    "staticContentId": 1508,
    "eventContentId": 228,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/228",
    "description": "People love Siri so it's essential to use SiriKit optimally for your app to provide a great Siri experience. Learn how to solve common pitfalls related to contact resolution, using Touch ID, and more. Find out how UI tests can benefit your SiriKit extension and how they can speed up the development process by automatically giving Siri text to process.",
    "title": "Making Great SiriKit Experiences",
    "originalPublishingDate": "2017-06-08T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T11:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎤", "domain", "intent"],
    "topicIds": [37, 13, 21],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/228_making_great_sirikit_experiences.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/subtitles/eng/228_sd_making_great_sirikit_experiences.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/228_hd_making_great_sirikit_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/228b3suet75j9rt2n/228/228_sd_making_great_sirikit_experiences.mp4",
      "duration": 3003
    },
    "related": {
      "activities": ["wwdc2018-211", "wwdc2018-214", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2300", "wwdc2018-2440", "wwdc2017-214", "wwdc2017-808"],
      "resources": [217, 209, 174, 12]
    }
  }, {
    "id": "wwdc2017-240",
    "staticContentId": 1616,
    "eventContentId": 240,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/240",
    "description": "Business Chat is a powerful new way for your customers to get answers to their questions, learn about and purchase your products, and engage with your existing support channels. Integrated into Messages and discoverable through Maps, Siri, Search, as well as your own app and website, Business Chat helps you build persistent, long-lasting relationships with your customers. See how to leverage built-in features like Apple Pay or calendar integration, as well as your own iMessage app in the conversation. Understand how to get started with Business Chat Developer Preview today.",
    "title": "Introducing Business Chat",
    "originalPublishingDate": "2017-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T10:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🛶", "🇨🇦", "businessconnect", "connect", "sandbox"],
    "topicIds": [40, 10, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/240_introducing_business_chat.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/subtitles/eng/240_sd_introducing_business_chat.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/240_hd_introducing_business_chat.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/240nyzp1eit4xt84w4/240/240_sd_introducing_business_chat.mp4",
      "duration": 2571
    },
    "related": {
      "activities": ["wwdc2018-232", "wwdc2017-234", "wwdc2016-204", "wwdc2016-224"],
      "resources": [201]
    }
  }, {
    "id": "wwdc2017-715",
    "staticContentId": 1577,
    "eventContentId": 715,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/715",
    "description": "The Apple File System (APFS) is a modern file system, optimized for responsiveness on Flash/SSD storage, and designed for extensibility, security, and data integrity. APFS is now the default filesystem on iOS, tvOS, and watchOS. Learn about what’s new for APFS on the Mac and how to take advantage of its new features in your apps.",
    "title": "What's New in Apple File System",
    "originalPublishingDate": "2017-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apfs", "encryption", "file", "unicode"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/715_whats_new_in_apple_file_system.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/subtitles/eng/715_sd_whats_new_in_apple_file_system.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/715_hd_whats_new_in_apple_file_system.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/715gk347h3udl/715/715_sd_whats_new_in_apple_file_system.mp4",
      "duration": 2111
    },
    "related": {
      "resources": [24]
    }
  }, {
    "id": "wwdc2017-714",
    "staticContentId": 1576,
    "eventContentId": 714,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/714",
    "description": "Apple Pay is the easy and secure way to accept payments in your app and website on iPhone, iPad, Apple Watch, and Mac. Get the latest news and updates from the Wallet and Apple Pay teams. New for this year, increase your conversions by providing feedback to users right in the Apple Pay sheet. Discover great new Wallet features like pass sharing controls, and increase customer satisfaction and sales with UI best practices.",
    "title": "What's New in Apple Pay & Wallet",
    "originalPublishingDate": "2017-06-08T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T17:10:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["cash", "pass", "pay", "wallet"],
    "topicIds": [3, 10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/714_whats_new_in_apple_pay__wallet.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/subtitles/eng/714_sd_whats_new_in_apple_pay__wallet.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/714_hd_whats_new_in_apple_pay__wallet.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/714nzbj3q51ksj/714/714_sd_whats_new_in_apple_pay__wallet.mp4",
      "duration": 2989
    },
    "related": {
      "activities": ["wwdc2018-720", "wwdc2017-718", "wwdc2016-703", "wwdc2016-704"],
      "resources": [157, 104, 103, 102, 101, 66]
    }
  }, {
    "id": "wwdc2017-413",
    "staticContentId": 1686,
    "eventContentId": 413,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/413",
    "description": "Learn about the dyld dynamic linker used on Apple platforms, how it's changed over the years, and where it's headed next. Find out how improved tooling makes it easier to optimize your app's launch time, and see how new changes coming in dyld will bring even further launch time improvements.",
    "title": "App Startup Time: Past, Present, and Future",
    "originalPublishingDate": "2017-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["dlclose", "dlopen", "dlsym", "dyld3", "macho", "mach-o", "nextstep", "performance"],
    "topicIds": [32, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/413_app_startup_time_past_present_and_future.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/subtitles/eng/413_sd_app_startup_time_past_present_and_future.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/413_hd_app_startup_time_past_present_and_future.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/413fmx92zo14voet8/413/413_sd_app_startup_time_past_present_and_future.mp4",
      "duration": 1976
    },
    "related": {
      "activities": ["wwdc2018-233", "wwdc2018-415", "wwdc2017-411", "wwdc2017-816", "wwdc2016-406"]
    }
  }, {
    "id": "wwdc2017-710",
    "staticContentId": 1573,
    "eventContentId": 710,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/710",
    "description": "Dive deeper into the details of the new Core ML framework. Explore how machine learning model development and app development fit together. Take a closer look at how models are represented and how models can be converted from popular machine learning and deep learning libraries, and learn about the performance optimizations Core ML does behind the scenes.",
    "title": "Core ML in depth",
    "originalPublishingDate": "2017-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accelerate", "coreml", "learning", "machine", "model", "nlp", "vision"],
    "topicIds": [16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/710_core_ml_in_depth.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/subtitles/eng/710_sd_core_ml_in_depth.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/710_hd_core_ml_in_depth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/710vxa4hl8hyb72/710/710_sd_core_ml_in_depth.mp4",
      "duration": 2483
    },
    "related": {
      "activities": ["wwdc2017-208", "wwdc2017-506", "wwdc2017-703", "wwdc2017-711"],
      "resources": [88, 27]
    }
  }, {
    "id": "wwdc2017-708",
    "staticContentId": 1581,
    "eventContentId": 708,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/708",
    "description": "Local and push notifications enable your app to keep users informed with timely and relevant content, by displaying messages and accepting users’ actions, or playing distinctive sounds, or updating the badge on your app icon. Service extensions enable your app to decrypt and augment push notification content before being displayed. Find out what’s new and get expert advice on implementing user notifications in your app.",
    "title": "Best Practices and What’s New in User Notifications",
    "originalPublishingDate": "2017-06-07T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T16:10:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["apns", "extensions", "notifications"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/708_best_practices_and_whats_new_in_user_notifications.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/subtitles/eng/708_sd_best_practices_and_whats_new_in_user_notifications.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/708_hd_best_practices_and_whats_new_in_user_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/708n9dvm3oden/708/708_sd_best_practices_and_whats_new_in_user_notifications.mp4",
      "duration": 2580
    },
    "related": {
      "activities": ["wwdc2017-209"],
      "resources": [193, 16, 4]
    }
  }, {
    "id": "wwdc2017-401",
    "staticContentId": 1703,
    "eventContentId": 401,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/401",
    "description": "Build world-ready apps using Xcode by following some simple steps to manage strings and assets, and display your user interface. Take your localized apps even further with new technologies and features in Xcode 9. Learn how Xcode 9 helps you design, localize, and test your app in multiple languages.",
    "title": "Localizing with Xcode 9",
    "originalPublishingDate": "2017-06-06T10:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T10:20:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🌍", "🌎", "🌏", "formatter", "i18n", "localization", "nslocalizedstring", "stringsdict", "translation", "ui testing", "world", "xctest", "xliff"],
    "topicIds": [37, 38, 42],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/401_localizing_with_xcode_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/subtitles/eng/401_sd_localizing_with_xcode_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/401_hd_localizing_with_xcode_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/401ugfluogxen0222/401/401_sd_localizing_with_xcode_9.mp4",
      "duration": 2540
    },
    "related": {
      "activities": ["wwdc2018-404", "wwdc2017-242", "wwdc2017-245", "wwdc2017-248", "wwdc2017-408", "wwdc2017-409", "wwdc2017-410", "wwdc2017-412", "wwdc2017-414", "wwdc2016-201", "wwdc2016-238", "wwdc2016-412"],
      "resources": [110, 109, 48]
    }
  }, {
    "id": "wwdc2017-243",
    "staticContentId": 1603,
    "eventContentId": 243,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/243",
    "description": "File providers are front and center in the new Files app and system-provided document browser, empowering users to work on their documents in the cloud without the confusion of multiple copies or different versions. Hear details about how your cloud services can integrate with this new functionality. See how to provide an efficient and seamless user experience. If you are an app developer, learn the details about how file providers work and hear about exciting opportunities to take advantage of service-specific APIs from cloud storage providers.",
    "title": "File Provider Enhancements",
    "originalPublishingDate": "2017-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T11:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/243eh39ob5y0z0ktg5/243/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/243eh39ob5y0z0ktg5/243/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/243eh39ob5y0z0ktg5/243/243_file_provider_enhancements.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/243eh39ob5y0z0ktg5/243/243_hd_file_provider_enhancements.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/243eh39ob5y0z0ktg5/243/243_sd_file_provider_enhancements.mp4",
      "duration": 3339
    },
    "related": {
      "activities": ["wwdc2018-216", "wwdc2017-212", "wwdc2017-229", "wwdc2016-707", "wwdc2015-234"],
      "resources": [85, 84]
    }
  }, {
    "id": "wwdc2017-302",
    "staticContentId": 1583,
    "eventContentId": 302,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/302",
    "description": "iTunes Connect has been updated to make the experience of delivering your app to the new App Store even better. Learn about new and updated meta-data requirements, capabilities to support promotion of in-app purchases and techniques for handling customer reviews. Discover how new TestFlight features and deployment options can help you test and deploy your next masterpiece.",
    "title": "What's New in iTunes Connect",
    "originalPublishingDate": "2017-06-07T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T17:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [40, 69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/302_whats_new_in_itunes_connect.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/subtitles/eng/302_sd_whats_new_in_itunes_connect.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/302_hd_whats_new_in_itunes_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/302gfkat3b267/302/302_sd_whats_new_in_itunes_connect.mp4",
      "duration": 2495
    },
    "related": {
      "activities": ["wwdc2017-301", "wwdc2017-303", "wwdc2017-305", "wwdc2017-403"],
      "resources": [246, 128, 121, 53, 44]
    }
  }, {
    "id": "wwdc2017-236",
    "staticContentId": 1626,
    "eventContentId": 236,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/236",
    "description": "Gain tips from seasoned framework engineers about how to get the most out of your Cocoa development efforts.  For example, find out how you can get perfect hashing behavior from NSDictionary with a simple API.  From best practices to lesser known APIs, there is something for everyone to learn.",
    "title": "Cocoa Development Tips",
    "originalPublishingDate": "2017-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/236_cocoa_development_tips.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/subtitles/eng/236_sd_cocoa_development_tips.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/236_hd_cocoa_development_tips.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/236m8wqo6pbcjnqm2k/236/236_sd_cocoa_development_tips.mp4",
      "duration": 2155
    },
    "related": {
      "activities": ["wwdc2017-210", "wwdc2017-212", "wwdc2017-215"]
    }
  }, {
    "id": "wwdc2017-235",
    "staticContentId": 1590,
    "eventContentId": 235,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/235",
    "description": "iOS and macOS have a wide range of graphics and animation technologies for bringing your app designs to life. Get to know the full graphics stack, from the high-level tools in UIKit and AppKit all the way down to low-level frameworks like Metal. Dive deep into Core Animation and learn the techniques used by Apple engineers to build responsive, engaging UI across the ecosystem.",
    "title": "Building Visually Rich User Experiences",
    "originalPublishingDate": "2017-06-08T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T17:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [24, 4, 6, 27, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/235_building_visually_rich_user_experiences.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/subtitles/eng/235_sd_building_visually_rich_user_experiences.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/235_hd_building_visually_rich_user_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/235_sd_building_visually_rich_user_experiences.mp4",
      "duration": 2725
    },
    "related": {
      "activities": ["wwdc2017-804"],
      "resources": [186]
    }
  }, {
    "id": "wwdc2017-804",
    "staticContentId": 1639,
    "eventContentId": 804,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/804",
    "description": "Learn techniques for determining which Apple platforms are right for your app and how to create a great user experience by designing for the unique capabilities and strengths of each platform.",
    "title": "Designing Across Platforms",
    "originalPublishingDate": "2017-06-08T16:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T16:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apple design", "apple designers", "apple tv", "apple watch", "cross platform", "design", "design best practices", "hi", "hig", "human interface", "ios design", "ipad", "iphone", "multiple platforms"],
    "topicIds": [3, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/804_designing_across_platforms.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/subtitles/eng/804_sd_designing_across_platforms.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/804_hd_designing_across_platforms.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/804imgsi9d6q5n/804/804_sd_designing_across_platforms.mp4",
      "duration": 2059
    },
    "related": {
      "activities": ["wwdc2017-206", "wwdc2017-219", "wwdc2017-224", "wwdc2017-229", "wwdc2017-235", "wwdc2017-802", "wwdc2017-803", "wwdc2017-805", "wwdc2017-806", "wwdc2017-807", "wwdc2017-808"],
      "resources": [17]
    }
  }, {
    "id": "wwdc2017-224",
    "staticContentId": 1654,
    "eventContentId": 224,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/224",
    "description": "Focus interaction is the primary interaction model for UIKit-based apps on tvOS. Learn about new focus animation APIs, custom sounds, support for SceneKit and SpriteKit games, and new debugging tools for your development workflows. Gain insight into how to get the most from these new technologies in your apps.",
    "title": "Focus Interaction in tvOS 11",
    "originalPublishingDate": "2017-06-08T09:00:00-07:00",
    "publishingExpiryDate": "2022-06-08T09:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["lldb", "sound design"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/224_focus_interaction_in_tvos_11.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/subtitles/eng/224_sd_focus_interaction_in_tvos_11.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/224_hd_focus_interaction_in_tvos_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/224sn8vw625k1e86/224/224_sd_focus_interaction_in_tvos_11.mp4",
      "duration": 2237
    },
    "related": {
      "activities": ["wwdc2018-208", "tech-talks-202", "wwdc2017-202", "wwdc2017-209", "wwdc2017-246", "wwdc2017-604", "wwdc2017-609", "wwdc2017-804", "wwdc2016-215", "wwdc2016-610"],
      "resources": [3]
    }
  }, {
    "id": "wwdc2017-702",
    "staticContentId": 1571,
    "eventContentId": 702,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/702",
    "description": "Protecting user privacy is a core principal in the Apple ecosystem. Learn what that means for the way you design and implement your apps, and learn about privacy-related changes, including new APIs, in the next versions of iOS, macOS, watchOS and tvOS.",
    "title": "Privacy and Your Apps",
    "originalPublishingDate": "2017-06-06T11:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T11:20:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["devicecheck", "identifiers", "privacy"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/702_privacy_and_your_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/subtitles/eng/702_sd_privacy_and_your_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/702_hd_privacy_and_your_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/702lyr2y2j09fro222/702/702_sd_privacy_and_your_apps.mp4",
      "duration": 2332
    },
    "related": {
      "activities": ["wwdc2017-225", "wwdc2017-249", "wwdc2017-505", "wwdc2017-701", "wwdc2017-713"],
      "resources": [247, 182, 181, 76]
    }
  }, {
    "id": "wwdc2017-701",
    "staticContentId": 1570,
    "eventContentId": 701,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/701",
    "description": "Security standards are continuing to evolve to counter emerging threats, and so too must your apps if you want to best protect your users and their data. Learn about new developments in certificate handling, TLS, and certificate status checking on iOS, macOS, watchOS, and tvOS that impact your apps.",
    "title": "Your Apps and Evolving Network Security Standards",
    "originalPublishingDate": "2017-06-06T10:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T10:20:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ats", "encryption", "networking", "security", "tls"],
    "topicIds": [18, 19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/701_your_apps_and_evolving_network_security_standards.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/subtitles/eng/701_sd_your_apps_and_evolving_network_security_standards.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/701_hd_your_apps_and_evolving_network_security_standards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/701jvytnoey2yc7222/701/701_sd_your_apps_and_evolving_network_security_standards.mp4",
      "duration": 2383
    },
    "related": {
      "activities": ["wwdc2017-702", "wwdc2017-707", "wwdc2017-709"],
      "resources": [223, 120, 75, 74]
    }
  }, {
    "id": "wwdc2017-218",
    "staticContentId": 1625,
    "eventContentId": 218,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/218",
    "description": "AppKit offers numerous ways to easily present your data. Join our framework engineers for a guided tour of versatile standard view classes you can put to work in your own macOS apps.  Hear about NSStackView, NSTableView, NSCollectionView, and other container views in AppKit.  Explore the interesting features and benefits of each, and examine real-world use cases to help you choose the most suitable building blocks for your apps' user interfaces.",
    "title": "Choosing the Right Cocoa Container View",
    "originalPublishingDate": "2017-06-07T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T15:10:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["nsbrowser", "nscollectionview", "nsgridview", "nsoutlineview", "nsstackview", "nstableview"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/218_choosing_the_right_cocoa_container_view.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/subtitles/eng/218_sd_choosing_the_right_cocoa_container_view.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/218_hd_choosing_the_right_cocoa_container_view.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/218p1ql8x8ga34/218/218_sd_choosing_the_right_cocoa_container_view.mp4",
      "duration": 2257
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2016-236", "wwdc2016-239", "wwdc2015-218", "wwdc2015-225"],
      "resources": [119, 118, 117, 116, 115, 114, 113, 112, 111, 108, 107, 97, 82]
    }
  }, {
    "id": "wwdc2017-510",
    "staticContentId": 1634,
    "eventContentId": 510,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/510",
    "description": "Get all the details on how to access the latest capabilities of Core Image. Learn about new ways to efficiently render images and create custom CIKernels in the Metal Shading Language. Find out about all of the new CIFilters that include support for applying image processing to depth data and handling barcodes. See how the Vision framework can be leveraged within Core Image to do amazing things.",
    "title": "Advances in Core Image: Filters, Metal, Vision, and More",
    "originalPublishingDate": "2017-06-08T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-08T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [24, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/510_advances_in_core_image_filters_metal_vision_and_more.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/subtitles/eng/510_sd_advances_in_core_image_filters_metal_vision_and_more.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/510_hd_advances_in_core_image_filters_metal_vision_and_more.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/510lf4jlju5s1/510/510_sd_advances_in_core_image_filters_metal_vision_and_more.mp4",
      "duration": 2956
    },
    "related": {
      "activities": ["wwdc2018-719", "wwdc2017-505", "wwdc2017-506", "wwdc2017-507", "wwdc2017-508"]
    }
  }, {
    "id": "wwdc2017-603",
    "staticContentId": 1659,
    "eventContentId": 603,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/603",
    "description": "Metal 2 provides powerful and specialized support for Virtual Reality (VR) rendering and external GPUs. Get details about adopting these emerging technologies within your Metal 2-based apps and games on macOS High Sierra. Walk through integrating Metal 2 with the SteamVR SDK and learn about efficiently rendering to a VR headset. Understand how external GPUs take macOS graphics to a whole new level and see how to prepare your apps to take advantage of their full potential.",
    "title": "VR with Metal 2",
    "originalPublishingDate": "2017-06-07T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T10:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["3d", "3d graphics", "argument buffer", "compute", "dhiraj", "direct to display", "egpu", "frame debugger", "gpgpu", "gpu", "hmd", "iab", "metl", "mtl", "mtlbuffer", "mtlcommandbuffer", "mtldevice", "opengl", "opengl es", "openvr", "render", "shader", "simd", "steamvr", "virtual reality", "vive", "vr"],
    "topicIds": [27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/603_vr_with_metal_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/subtitles/eng/603_sd_vr_with_metal_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/603_hd_vr_with_metal_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/603anuihzisyb2a3/603/603_sd_vr_with_metal_2.mp4",
      "duration": 2337
    },
    "related": {
      "activities": ["wwdc2018-611", "wwdc2017-601"],
      "resources": [210, 41, 38, 35, 31]
    }
  }, {
    "id": "wwdc2017-232",
    "staticContentId": 1566,
    "eventContentId": 232,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/232",
    "description": "Whether you’re a medical researcher or a care provider, the CareKit and ResearchKit open source projects are designed to be the quickest path to delivering a customized iOS app to your candidates or patients. These frameworks are constantly gaining features and functionality from both Apple and the community. Discover the latest active-tasks, care modules, and tools designed to allow medical professionals the ability prototype their own care app.",
    "title": "What's New in CareKit and ResearchKit",
    "originalPublishingDate": "2017-06-08T17:10:00-07:00",
    "publishingExpiryDate": "2022-06-08T17:10:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [14, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/232_whats_new_in_carekit_and_researchkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/subtitles/eng/232_sd_whats_new_in_carekit_and_researchkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/232_hd_whats_new_in_carekit_and_researchkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/232avezuj9uzy0hh5n/232/232_sd_whats_new_in_carekit_and_researchkit.mp4",
      "duration": 2288
    },
    "related": {
      "activities": ["wwdc2017-221", "wwdc2017-239"],
      "resources": [232, 231]
    }
  }, {
    "id": "wwdc2017-505",
    "staticContentId": 1601,
    "eventContentId": 505,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/505",
    "description": "Learn all about newest APIs in Photos on iOS and macOS, providing better integration and new possibilities for your app. We'll discuss simplifications to accessing the Photos library through UIImagePickerController, explore additions to PhotoKit to support new media types, and share all the details of the new Photos Project Extensions which enable you to bring photo services to Photos for Mac.",
    "title": "What's New in Photos APIs",
    "originalPublishingDate": "2017-06-07T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-07T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["bounce", "camera", "exposure", "extensions", "image picker", "live photos", "long exposure", "loops", "photo extensions", "photography", "photokit", "photo library", "photos", "photos api", "print products", "project extensions"],
    "topicIds": [30, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/505_whats_new_in_photos_apis.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/subtitles/eng/505_sd_whats_new_in_photos_apis.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/505_hd_whats_new_in_photos_apis.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/505e36yrkhhfv/505/505_sd_whats_new_in_photos_apis.mp4",
      "duration": 3229
    },
    "related": {
      "activities": ["wwdc2018-505", "wwdc2017-503", "wwdc2017-506", "wwdc2017-507", "wwdc2017-508", "wwdc2017-510", "wwdc2017-511", "wwdc2017-702"],
      "resources": [230, 192, 30, 29]
    }
  }, {
    "id": "wwdc2017-239",
    "staticContentId": 1567,
    "eventContentId": 239,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/239",
    "description": "The CareKit open source project provides customizable modules for delivering an app that puts a patient’s care plan and adherence tracking in the palm of their hands. Connecting patient care apps to the care team is critical for monitoring adherence and providing updates is crucial. Until now, every implementation required custom integration.  Learn how the new CareKit Bridge API abstracts the communication to the back end and provides a simple mechanism for plugging in your custom or third-party provided cloud connectors.",
    "title": "Connecting CareKit to the Cloud",
    "originalPublishingDate": "2017-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2022-06-09T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [11, 14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/239_connecting_carekit_to_the_cloud.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/subtitles/eng/239_sd_connecting_carekit_to_the_cloud.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/239_hd_connecting_carekit_to_the_cloud.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/239jf31ojfabtst2rm/239/239_sd_connecting_carekit_to_the_cloud.mp4",
      "duration": 1969
    },
    "related": {
      "activities": ["wwdc2017-232"],
      "resources": [236, 235, 234, 233, 232, 231]
    }
  }, {
    "id": "wwdc2017-416",
    "staticContentId": 1687,
    "eventContentId": 416,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/416",
    "description": "Teaching can be difficult and teaching programming can be even harder — it's abstract and concrete at the same time, and you must help the learner build a mental model of what code really does. Find out how the Swift Playgrounds content team works through the teaching process, from idea to finished playground. We'll cover lessons learned building the Learn to Code series, and tips and methods we've developed to streamline our current workflow. Come away with valuable teaching insights and a great head start on building your own instructional content.",
    "title": "Teaching with Swift Playgrounds",
    "originalPublishingDate": "2017-06-09T14:50:00-07:00",
    "publishingExpiryDate": "2022-06-09T14:50:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [36, 12],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/416_teaching_with_swift_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/subtitles/eng/416_sd_teaching_with_swift_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/416_hd_teaching_with_swift_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/416mytru0s49ohk/416/416_sd_teaching_with_swift_playgrounds.mp4",
      "duration": 2396
    },
    "related": {
      "activities": ["wwdc2018-413", "wwdc2017-408", "wwdc2017-410"]
    }
  }, {
    "id": "wwdc2017-604",
    "staticContentId": 1665,
    "eventContentId": 604,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/604",
    "description": "SceneKit is a fast and fully featured high-level 3D graphics framework that enables your apps and games to create immersive scenes and effects. See the latest advances in camera control and effects for simulating real camera optics including bokeh and motion blur. Learn about surface subdivision and tessellation to create smooth-looking surfaces right on the GPU starting from a coarser mesh. Check out new integration with ARKit and workflow improvements enabled by the Xcode Scene Editor.",
    "title": "SceneKit: What's New",
    "originalPublishingDate": "2017-06-07T11:00:00-07:00",
    "publishingExpiryDate": "2022-06-07T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["3d", "camera", "collada", "dae", "france", "french", "graph", "graphics", "inverse kinematics", "opengl", "opensubdiv", "pbr", "physically based renderer", "physics", "renderer", "rendering", "scene", "scnlayer", "scnnode", "scnview"],
    "topicIds": [23, 25, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/604_scenekit_whats_new.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/subtitles/eng/604_sd_scenekit_whats_new.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/604_hd_scenekit_whats_new.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/604r7b4rnjq86/604/604_sd_scenekit_whats_new.mp4",
      "duration": 3232
    },
    "related": {
      "activities": ["wwdc2019-6110", "tech-talks-601", "wwdc2017-224", "wwdc2017-404", "wwdc2017-602", "wwdc2016-609"],
      "resources": [199, 26]
    }
  }, {
    "id": "wwdc2017-202",
    "staticContentId": 1656,
    "eventContentId": 202,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/202",
    "description": "TVMLKit allows you to quickly build native tvOS apps that are backed by XML templates and JavaScript logic. Take your TVMLKit apps even further with new tvOS 11 technologies and features. Learn about Right-to-Left support, performance optimizations, significant enhancements to Web Inspector, and much more.",
    "title": "Advances in TVMLKit",
    "originalPublishingDate": "2017-06-06T11:20:00-07:00",
    "publishingExpiryDate": "2022-06-06T11:20:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["debugging", "javascript", "javascriptcore", "media", "template", "tvml", "tvmljs", "xml"],
    "topicIds": [35, 42, 20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/202_advances_in_tvmlkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/subtitles/eng/202_sd_advances_in_tvmlkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/202_hd_advances_in_tvmlkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/202ximbb9e2dq222/202/202_sd_advances_in_tvmlkit.mp4",
      "duration": 2133
    },
    "related": {
      "activities": ["tech-talks-202", "tech-talks-401", "tech-talks-402", "wwdc2017-209", "wwdc2017-224", "wwdc2017-246", "wwdc2017-248", "wwdc2016-201", "wwdc2016-212", "wwdc2016-229", "wwdc2016-232"],
      "resources": [226, 225, 64, 63, 62, 61]
    }
  }, {
    "id": "wwdc2017-229",
    "staticContentId": 1506,
    "eventContentId": 229,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/229",
    "description": "Document based apps have never been better with the new consistent system-provided user interface for opening and creating documents. This session will go into detail of how your document based app can leverage this functionality to provide a great user experience. See how to customize the UI so it fits perfectly inside your app. Get details about making your documents look their best with the new QuickLook APIs for generating thumbnails and for showing custom previews of your own files formats.",
    "title": "Building Great Document-based Apps in iOS 11",
    "originalPublishingDate": "2017-06-08T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-08T13:50:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["search", "spotlight", "uidocumentbrowserviewcontroller"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/229_building_great_documentbased_apps_in_ios_11.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/subtitles/eng/229_sd_building_great_documentbased_apps_in_ios_11.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/229_hd_building_great_documentbased_apps_in_ios_11.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/229pmdntyv1wd/229/229_sd_building_great_documentbased_apps_in_ios_11.mp4",
      "duration": 3528
    },
    "related": {
      "activities": ["wwdc2018-216", "wwdc2017-203", "wwdc2017-213", "wwdc2017-223", "wwdc2017-227", "wwdc2017-231", "wwdc2017-243", "wwdc2017-804"],
      "resources": [86]
    }
  }, {
    "id": "wwdc2017-501",
    "staticContentId": 1631,
    "eventContentId": 501,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/501",
    "description": "Apple platforms provide a comprehensive set of audio frameworks that are essential to creating powerful audio solutions and rich app experiences. Come learn about enhancements to AVAudioEngine, support for high-order ambisonics, and new capabilities for background audio recording on watchOS. See how to take advantage of these new audio technologies and APIs in this session.",
    "title": "What's New in Audio",
    "originalPublishingDate": "2017-06-06T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-06T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [28],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/501_whats_new_in_audio.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/subtitles/eng/501_sd_whats_new_in_audio.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/501_hd_whats_new_in_audio.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/501fo36iwi2moz2l222/501/501_sd_whats_new_in_audio.mp4",
      "duration": 3356
    },
    "related": {
      "activities": ["wwdc2017-205", "wwdc2017-502", "wwdc2017-509", "wwdc2016-507", "wwdc2015-507", "wwdc2015-508", "wwdc2014-502"],
      "resources": [224, 188, 49]
    }
  }, {
    "id": "wwdc2017-214",
    "staticContentId": 1501,
    "eventContentId": 214,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/214",
    "description": "SiriKit provides a powerful and intuitive way to expose your app's functionality through Siri. Learn how to use the all-new lists and notes domain to jot down notes or complete tasks quickly. See how easy it is to display your app's visual codes for others to scan. And, using SiriKit's new intent parameters, it's easy to customize even more of the UI for your app within Siri. Explore these and numerous other new features that SiriKit brings to iOS 11.",
    "title": "What's New in SiriKit",
    "originalPublishingDate": "2017-06-07T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-07T13:50:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🎤", "domain", "intent"],
    "topicIds": [13, 21],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/214_whats_new_in_sirikit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/subtitles/eng/214_sd_whats_new_in_sirikit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/214_hd_whats_new_in_sirikit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/214bugobsy7xw94v/214/214_sd_whats_new_in_sirikit.mp4",
      "duration": 2545
    },
    "related": {
      "activities": ["wwdc2018-211", "wwdc2018-214", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2300", "wwdc2018-2440", "wwdc2017-205", "wwdc2017-228", "wwdc2017-808"],
      "resources": [174, 12]
    }
  }, {
    "id": "wwdc2017-215",
    "staticContentId": 1560,
    "eventContentId": 215,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/215",
    "description": "Discover what's new in accessibility in iOS, watchOS, macOS, and tvOS.  Learn how to audit an App for accessibility, and take advantage of new assistive features.  Topics include how to best customize how Voice Over describes an App UI to the user, how to enhance the accessibility user experience with new features like Drag and Drop, and how to take advantage of sophisticated accessibility APIs to solve common issues.",
    "title": "What's New in Accessibility",
    "originalPublishingDate": "2017-06-07T13:50:00-07:00",
    "publishingExpiryDate": "2022-06-07T13:50:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessibility", "accessibilitycontainer", "accessibilityelements", "accessibility inspector", "assistive", "audit", "auditing", "blind", "color", "color blind", "color blindness", "container", "containers", "deaf", "disability", "hearing", "keyboard", "learning", "motor", "physical", "speak", "spoken", "switchcontrol", "switch control", "ui", "uiaccessibility", "virtual keyboard", "vision", "vo", "voiceover", "voice over"],
    "topicIds": [8, 37, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/215_whats_new_in_accessibility.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/subtitles/eng/215_sd_whats_new_in_accessibility.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/215_hd_whats_new_in_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/215avg3cuo2bu/215/215_sd_whats_new_in_accessibility.mp4",
      "duration": 2961
    },
    "related": {
      "activities": ["wwdc2019-238", "wwdc2017-217", "wwdc2017-236", "wwdc2017-245", "wwdc2017-409", "wwdc2017-806"],
      "resources": [206, 89]
    }
  }, {
    "id": "wwdc2017-217",
    "staticContentId": 1561,
    "eventContentId": 217,
    "eventId": "wwdc2017",
    "webPermalink": "https://developer.apple.com/wwdc17/217",
    "description": "As a game developer, you may know your game like the back of your hand, but could you play it with your eyes closed? Apple devices come standard with award-winning accessibility features that let people with disabilities experience everything Mac, iPhone, iPad, Apple Watch, and Apple TV have to offer. Media apps and games require specific considerations and approaches to allow for all people to engage fully with your content. Gain deep insights into the key approaches and technologies to make your apps seamlessly functional for a broad range of users.",
    "title": "Media and Gaming Accessibility",
    "originalPublishingDate": "2017-06-07T15:10:00-07:00",
    "publishingExpiryDate": "2022-06-07T15:10:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessibility", "accessibility inspector", "design best practices", "gaming"],
    "topicIds": [8, 28, 26, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/217_media_and_gaming_accessibility.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/subtitles/eng/217_sd_media_and_gaming_accessibility.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/217_hd_media_and_gaming_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2017/217m6q9g9wx6olr/217/217_sd_media_and_gaming_accessibility.mp4",
      "duration": 2296
    },
    "related": {
      "activities": ["wwdc2017-215", "wwdc2017-245", "wwdc2017-504", "wwdc2017-806", "wwdc2016-202", "wwdc2016-407"],
      "resources": [90, 89]
    }
  }, {
    "id": "wwdc2016-509",
    "staticContentId": 229,
    "eventContentId": 509,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/509",
    "description": "iOS 10 brings a brand new Speech Recognition API that allows you to perform rapid and contextually informed speech recognition in both file-based and realtime scenarios. In this video, you will learn all about the new API and how to bring advanced speech recognition services into your apps.",
    "title": "Speech Recognition API",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["audio stream", "cloud", "icloud", "realtime", "recognition", "siri", "speech"],
    "topicIds": [28, 21],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/509_speech_recognition_api.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/subtitles/eng/509_sd_speech_recognition_api.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/509_hd_speech_recognition_api.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/509n1cnykqms19r9jyp/509/509_sd_speech_recognition_api.mp4",
      "duration": 697
    },
    "related": {
      "activities": ["wwdc2019-256", "wwdc2016-205", "wwdc2016-217", "wwdc2016-225"]
    }
  }, {
    "id": "wwdc2016-722",
    "staticContentId": 179,
    "eventContentId": 722,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/722",
    "description": "CarPlay is a smarter, safer way to use your iPhone in the car. Learn how CarPlay works and how to design your car's infotainment system to work seamlessly with iPhone. Understand best practices for a great user experience that integrates CarPlay with the car's native system.",
    "title": "Developing CarPlay Systems, Part 1",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [9, 68],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/722_developing_carplay_systems_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/subtitles/eng/722_sd_developing_carplay_systems_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/722_hd_developing_carplay_systems_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/722x2eefo3u2rp8k8qs/722/722_sd_developing_carplay_systems_part_1.mp4",
      "duration": 1802
    },
    "related": {
      "activities": ["wwdc2019-252", "wwdc2017-717", "wwdc2017-719", "wwdc2016-723"]
    }
  }, {
    "id": "wwdc2016-210",
    "staticContentId": 106,
    "eventContentId": 210,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/210",
    "description": "Learn how to make your tvOS interface more dynamic, intuitive, and high-performing with tips and tricks learned in this session.",
    "title": "Mastering UIKit on tvOS",
    "originalPublishingDate": "2016-06-15T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T10:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["appletv", "interaction", "performance", "polish", "siri remote", "uicollectionview", "uiimageview", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/210_mastering_uikit_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/subtitles/eng/210_sd_mastering_uikit_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/210_hd_mastering_uikit_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/210e4481b1cnwor4n1q/210/210_sd_mastering_uikit_on_tvos.mp4",
      "duration": 2280
    },
    "related": {
      "activities": ["wwdc2016-206", "wwdc2016-212", "wwdc2016-215", "wwdc2016-229", "wwdc2016-607", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-709",
    "staticContentId": 51,
    "eventContentId": 709,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/709",
    "description": "Learn about new developments in Privacy on iOS, macOS, watchOS, and tvOS that impact you and your apps. Explore techniques to respect your users' privacy while building great features into your apps.",
    "title": "Engineering Privacy for Your Users",
    "originalPublishingDate": "2016-06-15T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["consent", "privacy", "security"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/709_engineering_privacy_for_your_users.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/subtitles/eng/709_sd_engineering_privacy_for_your_users.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/709_hd_engineering_privacy_for_your_users.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/709tvxadw201avg5v7n/709/709_sd_engineering_privacy_for_your_users.mp4",
      "duration": 2331
    },
    "related": {
      "activities": ["wwdc2016-217", "wwdc2016-223", "wwdc2016-705", "wwdc2016-706", "wwdc2016-711", "wwdc2016-716"]
    }
  }, {
    "id": "wwdc2016-501",
    "staticContentId": 142,
    "eventContentId": 501,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/501",
    "description": "People love to take pictures with iPhone. In fact, it's the most popular camera in the world, and photography apps empower this experience. Explore new AVFoundation Capture APIs which allow for the capture of Live Photos, RAW image data from the camera, and wide color photos.",
    "title": "Advances in iOS Photography",
    "originalPublishingDate": "2016-06-14T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T11:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["camera", "capture", "editing", "image", "jpg", "live photo", "photo", "raw"],
    "topicIds": [29, 30],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/501_advances_in_ios_photography.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/subtitles/eng/501_sd_advances_in_ios_photography.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/501_hd_advances_in_ios_photography.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/501l32ujtbnw2ad06wy/501/501_sd_advances_in_ios_photography.mp4",
      "duration": 3582
    },
    "related": {
      "activities": ["wwdc2017-511", "wwdc2016-503", "wwdc2016-505", "wwdc2016-511", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2016-203",
    "staticContentId": 122,
    "eventContentId": 203,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/203",
    "description": "macOS brings many new enhancements such as automatic window tabbing, enhanced color reproduction, and improved presentation of right-to-left languages. Get introduced to new APIs for these features and more, such as NSGridView and NSMeasurement. Learn about new conventions for APIs in Swift and Objective-C. This is your first stop to discover exciting new features in Cocoa sessions throughout the week.",
    "title": "What's New in Cocoa",
    "originalPublishingDate": "2016-06-14T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T11:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["appkit", "cocoa", "collection", "color", "copy", "document", "drag", "foundation", "grid", "gridview", "grid view", "measurement", "outline", "outlineview", "paste", "promise", "rtl", "swift", "table", "tableview", "tabs", "unit", "window"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/203x2w42att1kdzg1ce/203/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/203x2w42att1kdzg1ce/203/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/203x2w42att1kdzg1ce/203/203_whats_new_in_cocoa.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/203x2w42att1kdzg1ce/203/203_hd_whats_new_in_cocoa.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/203x2w42att1kdzg1ce/203/203_sd_whats_new_in_cocoa.mp4",
      "duration": 3461
    },
    "related": {
      "activities": ["wwdc2018-505", "wwdc2016-102", "wwdc2016-201", "wwdc2016-207", "wwdc2016-232", "wwdc2016-236", "wwdc2016-238", "wwdc2016-239", "wwdc2016-242", "wwdc2016-403", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2016-228",
    "staticContentId": 168,
    "eventContentId": 228,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/228",
    "description": "3D Touch adds a completely new dimension to the iOS user interface and introduces an entirely new way to interact with your iPhone. Explore the existing API and get introduced to additions in iOS 10 that allow you to push the boundaries of 3D Touch. Learn about best practices for incorporating 3D Touch into your apps, how to add support for Quick Actions, Peek, and Pop.",
    "title": "A Peek at 3D Touch",
    "originalPublishingDate": "2016-06-16T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T16:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["3d", "force", "interaction", "peek", "pop", "pressure", "preview", "touch", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/228_a_peek_at_3d_touch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/subtitles/eng/228_sd_a_peek_at_3d_touch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/228_hd_a_peek_at_3d_touch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/228a1kbxogojm4fviqc/228/228_sd_a_peek_at_3d_touch.mp4",
      "duration": 2517
    },
    "related": {
      "activities": ["wwdc2016-205", "wwdc2016-216", "wwdc2016-220"]
    }
  }, {
    "id": "wwdc2016-708",
    "staticContentId": 70,
    "eventContentId": 708,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/708",
    "description": "3D Touch on Notifications provides users with access to media attachments and live content. See how your app can take advantage of this new functionality to provide a rich interactive experience within the notification itself.",
    "title": "Advanced Notifications",
    "originalPublishingDate": "2016-06-15T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apns", "notifications"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/708_advanced_notifications.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/subtitles/eng/708_sd_advanced_notifications.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/708_hd_advanced_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/708tbh8wnspsg01hxwx/708/708_sd_advanced_notifications.mp4",
      "duration": 1649
    },
    "related": {
      "activities": ["wwdc2016-707", "wwdc2016-724"]
    }
  }, {
    "id": "wwdc2016-703",
    "staticContentId": 45,
    "eventContentId": 703,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/703",
    "description": "This year, Apple Pay is coming to the web with Safari on both macOS and iOS. Now you can experience the convenience and security of Apple Pay in your store, in your app, and on your website. Discover how easy it is to set up Apple Pay on the web, and learn how designing for Apple Pay can increase conversions, user engagement, and customer satisfaction.",
    "title": "Apple Pay on the Web",
    "originalPublishingDate": "2016-06-14T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-14T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/703_apple_pay_on_the_web.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/subtitles/eng/703_sd_apple_pay_on_the_web.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/703_hd_apple_pay_on_the_web.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/703rx8zlfedjfom6l93/703/703_sd_apple_pay_on_the_web.mp4",
      "duration": 3149
    },
    "related": {
      "activities": ["wwdc2018-720", "wwdc2017-714", "wwdc2016-420", "wwdc2016-704"]
    }
  }, {
    "id": "wwdc2016-803",
    "staticContentId": 115,
    "eventContentId": 803,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/803",
    "description": "Typography is essential to an app's form and function. Learn principles of good typography and techniques to apply them to your work. Make the most of the advanced features in our system fonts, and learn best practices for using custom fonts.",
    "title": "Typography and Fonts",
    "originalPublishingDate": "2016-06-15T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["custom fonts", "design", "design best practices", "font", "fonts", "san francisco", "system fonts", "type", "typography", "ui design", "user interface design"],
    "topicIds": [8, 6, 7, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/803z7m1ln9vmbpg35x9/803/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/803z7m1ln9vmbpg35x9/803/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/803z7m1ln9vmbpg35x9/803/803_typography_and_fonts.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/803z7m1ln9vmbpg35x9/803/803_hd_typography_and_fonts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/803z7m1ln9vmbpg35x9/803/803_sd_typography_and_fonts.mp4",
      "duration": 1648
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2016-201", "wwdc2016-222", "wwdc2016-232", "wwdc2016-233", "wwdc2016-236", "wwdc2016-407", "wwdc2016-801", "wwdc2016-802", "wwdc2016-804", "wwdc2016-805"]
    }
  }, {
    "id": "wwdc2016-206",
    "staticContentId": 105,
    "eventContentId": 206,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/206",
    "description": "Apps are quickly changing how we experience TV today, and tvOS is the foundation upon which new apps and ideas are being built. Take your app to the next level with great new features in tvOS 10. Learn all about the new interface appearance APIs, support for badging and notifications, and more.",
    "title": "What's New in tvOS",
    "originalPublishingDate": "2016-06-14T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T15:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["appearance", "appletv", "apple tv", "badging", "cloudkit", "dark mode", "focus", "focus engine", "icloud", "light", "notifications", "photokit", "replaykit", "siri remote"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/206a38wgme6uponcuwd/206/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/206a38wgme6uponcuwd/206/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/206a38wgme6uponcuwd/206/206_whats_new_in_tvos.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/206a38wgme6uponcuwd/206/206_hd_whats_new_in_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/206a38wgme6uponcuwd/206/206_sd_whats_new_in_tvos.mp4",
      "duration": 2318
    },
    "related": {
      "activities": ["wwdc2017-251", "wwdc2016-102", "wwdc2016-210", "wwdc2016-212", "wwdc2016-213", "wwdc2016-215", "wwdc2016-221", "wwdc2016-229", "wwdc2016-506", "wwdc2016-601", "wwdc2016-607", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-108",
    "staticContentId": 267,
    "eventContentId": 108,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/108",
    "description": "The heroes and villains of Marvel have captivated a worldwide audience for over 75 years. Marvel Games Creative Director Bill Rosemann lifts up the masks of Spider-Man, Black Panther, the Guardians of the Galaxy and more to reveal the true power behind the world's most heroic brand.",
    "title": "Marvel: Making a Difference in the Real World",
    "originalPublishingDate": "2016-06-17T12:20:00-07:00",
    "publishingExpiryDate": "2021-06-17T12:20:00-07:00",
    "topicIds": [2],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/108h16qehvq9hdjuf96/108/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/108h16qehvq9hdjuf96/108/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/108h16qehvq9hdjuf96/108/108_hd_marvel_making_a_difference_in_the_real_world.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/108h16qehvq9hdjuf96/108/108_sd_marvel_making_a_difference_in_the_real_world.mp4",
      "duration": 2967
    }
  }, {
    "id": "wwdc2016-611",
    "staticContentId": 100,
    "eventContentId": 611,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/611",
    "description": "Dive into the latest additions to Game Center, Apple's social gaming network. Check out new capabilities for persistent game sessions and how they provide added flexibility for single-player, real-time multiplayer, and turn-based games. Learn about changes that streamline Game Center and a new way to send game invites and join multiplayer matches.",
    "title": "What's New in Game Center",
    "originalPublishingDate": "2016-06-17T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["challenge", "friend", "game", "gkachievement", "gkchallenge", "gkcloudsave", "gkleaderboard", "gklocalplayer", "gkmatch", "gkplayer", "gkscore", "gksession", "leaderboard", "multiplayer", "social"],
    "topicIds": [26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/611qdyg26bqfivpaww1/611/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/611qdyg26bqfivpaww1/611/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/611qdyg26bqfivpaww1/611/611_whats_new_in_game_center.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/611qdyg26bqfivpaww1/611/611_hd_whats_new_in_game_center.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/611qdyg26bqfivpaww1/611/611_sd_whats_new_in_game_center.mp4",
      "duration": 2148
    },
    "related": {
      "activities": ["wwdc2016-601", "wwdc2016-607", "wwdc2016-608", "wwdc2016-610", "wwdc2016-612"]
    }
  }, {
    "id": "wwdc2016-719",
    "staticContentId": 113,
    "eventContentId": 719,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/719",
    "description": "Gain specific insights into tuning your application for better I/O performance. Learn best practices to reduce local storage operations and trim your memory usage. Get details on how to update your app to increase responsiveness and extend battery life.",
    "title": "Optimizing I/O for Performance and Battery Life",
    "originalPublishingDate": "2016-06-17T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/719wve0t1j24kny0f9r/719/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/719wve0t1j24kny0f9r/719/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/719wve0t1j24kny0f9r/719/719_optimizing_io_for_performance_and_battery_life.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/719wve0t1j24kny0f9r/719/719_hd_optimizing_io_for_performance_and_battery_life.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/719wve0t1j24kny0f9r/719/719_sd_optimizing_io_for_performance_and_battery_life.mp4",
      "duration": 2854
    },
    "related": {
      "activities": ["wwdc2016-227", "wwdc2016-242", "wwdc2016-406", "wwdc2016-411", "wwdc2016-418", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-607",
    "staticContentId": 101,
    "eventContentId": 607,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/607",
    "description": "Apple TV presents an incredible opportunity for developers to create new games made for the living room. See how the Game Controller framework can tap into the Siri Remote to harness touch and the built-in accelerometer and gyroscope to deliver engaging gameplay. Learn how to fully integrate MFi controllers, and understand best practices for developing titles that require a game controller.",
    "title": "Controlling Game Input for Apple TV",
    "originalPublishingDate": "2016-06-15T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T17:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["button", "controller", "dpad", "game", "gccontroller", "input", "joystick", "mfi", "physical", "remote", "shoulder", "siri"],
    "topicIds": [26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/607_controlling_game_input_for_apple_tv.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/subtitles/eng/607_sd_controlling_game_input_for_apple_tv.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/607_hd_controlling_game_input_for_apple_tv.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/607odzb3n443nv9ei5p/607/607_sd_controlling_game_input_for_apple_tv.mp4",
      "duration": 2252
    },
    "related": {
      "activities": ["wwdc2016-206", "wwdc2016-210", "wwdc2016-220", "wwdc2016-221", "wwdc2016-610", "wwdc2016-611", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-239",
    "staticContentId": 124,
    "eventContentId": 239,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/239",
    "description": "Examine the technologies that make a modern macOS app. Come learn from the experts how to harness the power of Cocoa to build powerful, immersive apps. Whether you're a seasoned Cocoa developer or new to the platform, this session is for you.",
    "title": "Crafting Modern Cocoa Apps",
    "originalPublishingDate": "2016-06-17T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T17:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["appkit", "control", "os x", "table", "tableview", "window"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/239_crafting_modern_cocoa_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/subtitles/eng/239_sd_crafting_modern_cocoa_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/239_hd_crafting_modern_cocoa_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/239ebj00keggvd2m2fx/239/239_sd_crafting_modern_cocoa_apps.mp4",
      "duration": 2651
    },
    "related": {
      "activities": ["wwdc2017-218", "wwdc2016-203", "wwdc2016-213", "wwdc2016-236", "wwdc2016-712", "wwdc2014-227"]
    }
  }, {
    "id": "wwdc2016-801",
    "staticContentId": 79,
    "eventContentId": 801,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/801",
    "description": "Inclusive design means making your app intuitive, appropriate, and delightful for a global audience and people who have accessibility challenges. Learn easy-to-follow techniques for making your app culturally-relevant and accessible through use of type, layout, color and iconography.",
    "title": "Inclusive App Design",
    "originalPublishingDate": "2016-06-14T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["accessibility", "accessible", "color", "cultural", "design", "design best practices", "fonts", "global", "iconography", "interaction", "international", "layout", "scripts", "type", "typography", "worldly"],
    "topicIds": [8, 3, 6, 7, 42, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/801_inclusive_app_design.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/subtitles/eng/801_sd_inclusive_app_design.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/801_hd_inclusive_app_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/801y753jw8vxmjblocq/801/801_sd_inclusive_app_design.mp4",
      "duration": 2125
    },
    "related": {
      "activities": ["wwdc2016-104", "wwdc2016-201", "wwdc2016-202", "wwdc2016-232", "wwdc2016-233", "wwdc2016-407", "wwdc2016-803", "wwdc2016-804", "wwdc2016-805"]
    }
  }, {
    "id": "wwdc2016-721",
    "staticContentId": 60,
    "eventContentId": 721,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/721",
    "description": "The new Unified Logging and Tracing System for iOS and macOS uses Activity Tracing for performance, consolidates kernel and user-space logging, and has many other improvements. Learn how Logging and Tracing can help you debug and troubleshoot issues with your apps.",
    "title": "Unified Logging and Activity Tracing",
    "originalPublishingDate": "2016-06-17T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T17:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["debug", "logging", "tracing"],
    "topicIds": [33],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/721_unified_logging_and_activity_tracing.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/subtitles/eng/721_sd_unified_logging_and_activity_tracing.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/721_hd_unified_logging_and_activity_tracing.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/721_sd_unified_logging_and_activity_tracing.mp4",
      "duration": 2622
    },
    "related": {
      "activities": ["wwdc2018-405", "wwdc2016-236", "wwdc2016-418", "wwdc2014-714"]
    }
  }, {
    "id": "wwdc2016-510",
    "staticContentId": 301,
    "eventContentId": 510,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/510",
    "description": "HTTP Live Streaming enables the reliable delivery of media content over a wide variety of network conditions. Learn best practices in HLS authoring, see how to verify your streams using the HTTP Live Streaming tools, and apply the results to improve the performance of your streams.",
    "title": "Validating HTTP Live Streams",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["hls", "hlsreport", "http live streaming", "mediastreamvalidator", "validation"],
    "topicIds": [31],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/510ndmh9wkcvzneegv2/510/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/510ndmh9wkcvzneegv2/510/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/510ndmh9wkcvzneegv2/510/510_validating_http_live_streams.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/510ndmh9wkcvzneegv2/510/510_hd_validating_http_live_streams.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/510ndmh9wkcvzneegv2/510/510_sd_validating_http_live_streams.mp4",
      "duration": 1341
    },
    "related": {
      "activities": ["tech-talks-501", "wwdc2017-504", "wwdc2016-503", "wwdc2016-504"]
    }
  }, {
    "id": "wwdc2016-209",
    "staticContentId": 1,
    "eventContentId": 209,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/209",
    "description": "HealthKit offers more than ever to developers joining in Apple's vibrant health and fitness ecosystem. Discover new ways to integrate the popular activity-tracking features of Apple Watch with your own app. Learn how to contribute to an even more complete picture of users' health data by reading and writing Health Documents from your organization. Review core concepts for working with HealthKit and explore best practices for managing data to ensure your users enjoy a seamless experience.",
    "title": "Getting the Most Out of HealthKit",
    "originalPublishingDate": "2016-06-15T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T09:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["🏃", "🚴", "🏃🏻", "🏃🏼", "🏃🏽", "🏃🏾", "🏃🏿", "🚴🏻", "🚴🏼", "🚴🏽", "🚴🏾", "🚴🏿", "activity rings", "authorization", "cda", "health documents", "health records", "medical records", "wheelchair", "workouts"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/209_getting_the_most_out_of_healthkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/subtitles/eng/209_sd_getting_the_most_out_of_healthkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/209_hd_getting_the_most_out_of_healthkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/209e37d5ks3pfj21ij5/209/209_sd_getting_the_most_out_of_healthkit.mp4",
      "duration": 2297
    },
    "related": {
      "activities": ["wwdc2018-706", "wwdc2016-234", "wwdc2016-235", "wwdc2016-237", "wwdc2016-713", "wwdc2015-203", "wwdc2014-203", "wwdc2014-701"],
      "resources": [460]
    }
  }, {
    "id": "wwdc2016-710",
    "staticContentId": 58,
    "eventContentId": 710,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/710",
    "description": "Learn what's new with HomeKit in iOS 10 including support for new types of accessories such as cameras and doorbells, enhancements in remotely connecting with accessories, how set up of Wi-Fi HomeKit accessories has been greatly improved, and how to write HomeKit enabled tvOS Apps.",
    "title": "What's New in HomeKit",
    "originalPublishingDate": "2016-06-15T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T17:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["🏠", "🏡", "action set", "ble", "bluetooth", "btle", "camera", "hap", "hmaccessory", "hmcharacteristic", "hmhomemanager", "hmroom", "hmservice", "hmtrigger", "hmzone", "home", "home automation", "homekit", "mfi", "notification", "profile", "wac", "wifi", "wi-fi"],
    "topicIds": [9, 15],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/710_whats_new_in_homekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/subtitles/eng/710_sd_whats_new_in_homekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/710_hd_whats_new_in_homekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/710tkhyprou9hhbnc6g/710/710_sd_whats_new_in_homekit.mp4",
      "duration": 2037
    },
    "related": {
      "activities": ["wwdc2017-705", "wwdc2016-104", "wwdc2016-407", "wwdc2016-714", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-705",
    "staticContentId": 50,
    "eventContentId": 705,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/705",
    "description": "Have you saved our 63-page iOS security white paper to your Reading List but find yourself too busy making great apps to get through it? You can keep your good intentions to devour every last detail, but meanwhile come join us for an illuminating talk on why we care so deeply about security as a design philosophy central to all our iOS products.",
    "title": "How iOS Security Really Works",
    "originalPublishingDate": "2016-06-14T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T16:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["ats", "crypto", "keychain", "security"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/705_how_ios_security_really_works.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/subtitles/eng/705_sd_how_ios_security_really_works.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/705_hd_how_ios_security_really_works.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/705s57mrvm8so193i8c/705/705_sd_how_ios_security_really_works.mp4",
      "duration": 1465
    },
    "related": {
      "activities": ["wwdc2016-401", "wwdc2016-701", "wwdc2016-706", "wwdc2016-709"]
    }
  }, {
    "id": "wwdc2016-716",
    "staticContentId": 121,
    "eventContentId": 716,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/716",
    "description": "Discover how to give users a great location-aware experience while conserving power across all Apple platforms. Learn best practices for using Core Location, how an App can use and manage Circular and Beacon Regions, defer or pause location updates, and how to use Visit Monitoring to determine the interesting places the user has been. Get an overview of how a user authorizes an App's use of location services.",
    "title": "Core Location Best Practices",
    "originalPublishingDate": "2016-06-16T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["always", "approval", "authorization", "beacon", "clvisit", "corelocation", "core location", "fence", "fencing", "fitness", "floor", "geocode", "geocoding", "geofence", "geo-fence", "geofencing", "geo-fencing", "gps", "heading", "ibeacon", "ibeacons", "indoor", "indoor positioning", "journal", "journaling", "location", "navigate", "navigation", "position", "positioning", "potloc", "potluck", "proximity", "ranging", "region", "region monitoring", "regions", "significant location change", "slc", "triangulation", "trilateration", "visit", "visit api", "visit monitor", "visit monitoring", "wheninuse", "whileinuse"],
    "topicIds": [17],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/716_core_location_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/subtitles/eng/716_sd_core_location_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/716_hd_core_location_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/716vyncka4gcaxxwuvq/716/716_sd_core_location_best_practices.mp4",
      "duration": 2021
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-235", "wwdc2016-707", "wwdc2016-709", "wwdc2016-713"]
    }
  }, {
    "id": "wwdc2016-505",
    "staticContentId": 224,
    "eventContentId": 505,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/505",
    "description": "iOS 10 and macOS 10.12 brings a powerful set of new APIs to work with many types of photos. Explore using Core Image to process RAW image files from many popular cameras and recent iOS devices. See how to edit and enhance Live Photos directly within your app.",
    "title": "Live Photo Editing and RAW Processing with Core Image",
    "originalPublishingDate": "2016-06-16T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T11:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["buffer", "coreimage", "core image", "filter", "image", "image processing", "jpg", "live photo", "photo", "pixel", "raw"],
    "topicIds": [30],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/505_live_photo_editing_and_raw_processing_with_core_image.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/subtitles/eng/505_sd_live_photo_editing_and_raw_processing_with_core_image.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/505_hd_live_photo_editing_and_raw_processing_with_core_image.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/505mia12r7dwmk3aumw/505/505_sd_live_photo_editing_and_raw_processing_with_core_image.mp4",
      "duration": 3511
    },
    "related": {
      "activities": ["wwdc2018-719", "wwdc2017-511", "wwdc2016-501", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2016-237",
    "staticContentId": 29,
    "eventContentId": 237,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/237",
    "description": "CareKit is a new open source framework designed to help you create personal care apps that can monitor, present and share personal health information. Learn how to create and extend Care Cards and an Insight Dashboard, and to package information for sharing with families or professional caregivers.",
    "title": "Getting Started with CareKit",
    "originalPublishingDate": "2016-06-17T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T15:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/237_getting_started_with_carekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/subtitles/eng/237_sd_getting_started_with_carekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/237_hd_getting_started_with_carekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/237e12rha4rg2t0p53u/237/237_sd_getting_started_with_carekit.mp4",
      "duration": 1875
    },
    "related": {
      "activities": ["wwdc2016-209", "wwdc2016-234"]
    }
  }, {
    "id": "wwdc2016-241",
    "staticContentId": 418,
    "eventContentId": 241,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/241",
    "description": "Launched last year with iOS 9 and macOS El Capitan, the new Transit feature in Apple Maps is customized for each city where it's available. Hear about how the Apple Maps team ensures a great customer experience through a combination of transit agency data, field survey, and close attention to the unique transit culture of each city. If you're a transit agency, learn about how you can help to ensure your customers have the most reliable information in Apple Maps.",
    "title": "Public Transit in Apple Maps",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [17],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/241_public_transit_in_apple_maps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/subtitles/eng/241_sd_public_transit_in_apple_maps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/241_hd_public_transit_in_apple_maps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/241fgk9sdmxcb6c6wz2/241/241_sd_public_transit_in_apple_maps.mp4",
      "duration": 679
    }
  }, {
    "id": "wwdc2016-508",
    "staticContentId": 4,
    "eventContentId": 508,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/508",
    "description": "Apple News beautifully introduces new readers to your stories. Learn about Apple News Format and how it can be used to author rich, responsive stories that intelligently adapt to all screen sizes. Discover the many features of Apple News including interactive galleries, video, audio, and animations which help to make your content more engaging than ever.",
    "title": "Using Apple News Format to Create Rich and Responsive Stories",
    "originalPublishingDate": "2016-06-17T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["news"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/508_using_apple_news_format_to_create_rich_and_responsive_stories.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/subtitles/eng/508_sd_using_apple_news_format_to_create_rich_and_responsive_stories.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/508_hd_using_apple_news_format_to_create_rich_and_responsive_stories.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/508nbofuzf16hljuwqe/508/508_sd_using_apple_news_format_to_create_rich_and_responsive_stories.mp4",
      "duration": 2229
    },
    "related": {
      "activities": ["wwdc2016-502"]
    }
  }, {
    "id": "wwdc2016-606",
    "staticContentId": 68,
    "eventContentId": 606,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/606",
    "description": "The Metal shading language is an easy-to-use programming language for writing graphics and compute functions which execute on the GPU. Dive deeper into understanding the design patterns, memory access models, and detailed shader coding best practices which reduce bottlenecks and hide latency. Intended for experienced shader authors with a solid understanding of GPU architecture and hoping to extract every possible cycle.",
    "title": "Advanced Metal Shader Optimization",
    "originalPublishingDate": "2016-06-15T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T15:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "compiler", "compute", "gpgpu", "gpu", "metl", "mtl", "mtldevice", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [35, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/606oluchfgwakjbymy8/606/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/606oluchfgwakjbymy8/606/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/606oluchfgwakjbymy8/606/606_advanced_metal_shader_optimization.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/606oluchfgwakjbymy8/606/606_hd_advanced_metal_shader_optimization.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/606oluchfgwakjbymy8/606/606_sd_advanced_metal_shader_optimization.mp4",
      "duration": 2475
    },
    "related": {
      "activities": ["wwdc2017-601", "wwdc2016-602", "wwdc2016-603", "wwdc2016-604", "wwdc2016-605", "wwdc2016-715"]
    }
  }, {
    "id": "wwdc2016-511",
    "staticContentId": 419,
    "eventContentId": 511,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/511",
    "description": "Continue your learning from Session 501: Advances in iOS Photography, with some additional details on scene monitoring and resource management in AVFoundation's powerful new AVCapturePhotoOutput API.",
    "title": "AVCapturePhotoOutput - Beyond the Basics",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["camera", "capture", "editing", "image", "jpg", "live photo", "photo", "raw"],
    "topicIds": [29, 30],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/511_avcapturephotooutput__beyond_the_basics.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/subtitles/eng/511_sd_avcapturephotooutput__beyond_the_basics.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/511_hd_avcapturephotooutput__beyond_the_basics.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/511nqyciexman7sf932/511/511_sd_avcapturephotooutput__beyond_the_basics.mp4",
      "duration": 1244
    },
    "related": {
      "activities": ["wwdc2016-501"]
    }
  }, {
    "id": "wwdc2016-506",
    "staticContentId": 11,
    "eventContentId": 506,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/506",
    "description": "AVKit on tvOS offers an intuitive user interface for interaction with your media on this powerful new platform. AVKit is built on AVFoundation, which gives you access to the full potential of platform services for operating on time-based audiovisual media. Learn how to leverage the new content proposal APIs, and how to create a seamless interstitial playback experience. Management of media metadata and chapter navigation will also be covered.",
    "title": "AVKit on tvOS",
    "originalPublishingDate": "2016-06-17T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T11:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["avplayer", "avplayerviewcontroller", "fmp4", "hls", "http live streaming", "media", "mp4", "playback", "scrubbing", "video"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/506_avkit_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/subtitles/eng/506_sd_avkit_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/506_hd_avkit_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/506ms2tv71tcduwp3dm/506/506_sd_avkit_on_tvos.mp4",
      "duration": 2346
    },
    "related": {
      "activities": ["wwdc2017-251", "wwdc2016-206", "wwdc2016-212", "wwdc2016-229", "wwdc2016-503", "wwdc2016-504", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-232",
    "staticContentId": 153,
    "eventContentId": 232,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/232",
    "description": "Building a great international user interface goes beyond just translating your app. Explore new and improved APIs in iOS, macOS, and watchOS, and learn how Xcode 8 makes it easy to provide directional images to build first class apps for RTL languages. Hear from experts on how to fine-tune your international UI to create a seamless bidirectional experience and take your app in a new direction.",
    "title": "What's New in International User Interfaces",
    "originalPublishingDate": "2016-06-17T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["i18n", "international", "localization", "right-to-left", "rtl"],
    "topicIds": [42, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/232_whats_new_in_international_user_interfaces.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/subtitles/eng/232_sd_whats_new_in_international_user_interfaces.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/232_hd_whats_new_in_international_user_interfaces.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/232biqdny8x84wjag07/232/232_sd_whats_new_in_international_user_interfaces.mp4",
      "duration": 2358
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2017-202", "wwdc2017-248", "wwdc2016-201", "wwdc2016-203", "wwdc2016-205", "wwdc2016-236", "wwdc2016-238", "wwdc2016-714", "wwdc2016-801", "wwdc2016-803", "wwdc2014-412"]
    }
  }, {
    "id": "wwdc2016-601",
    "staticContentId": 103,
    "eventContentId": 601,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/601",
    "description": "ReplayKit is an easy-to-use framework that enables players to share gameplay recordings or broadcast live games to players and viewers online. Watch how live broadcasting can help build community and create new fans for your apps and games. Understand the APIs to include player commentary via the microphone and front-facing camera on iPhone and iPad, and check out new support for ReplayKit on Apple TV.",
    "title": "Go Live with ReplayKit",
    "originalPublishingDate": "2016-06-14T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T10:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["capture", "esports", "flare", "mobcrush", "multiplayer", "narrate", "olympus", "production", "record", "replay", "screen", "share", "share sheet", "sheet", "stream", "video"],
    "topicIds": [28, 26, 31, 18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/601_go_live_with_replaykit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/subtitles/eng/601_sd_go_live_with_replaykit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/601_hd_go_live_with_replaykit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/601_sd_go_live_with_replaykit.mp4",
      "duration": 1572
    },
    "related": {
      "activities": ["wwdc2018-601", "wwdc2017-606", "wwdc2016-206", "wwdc2016-608", "wwdc2016-610", "wwdc2016-611"]
    }
  }, {
    "id": "wwdc2016-724",
    "staticContentId": 207,
    "eventContentId": 724,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/724",
    "description": "Starting with a review of the HTTP/2 based provider API, you will learn about an important new feature: Token Based Authentication. Learn to connect to APNs using authentication tokens for sending pushes via the HTTP/2 API, relieving you of the overhead associated with maintaining valid certificates.",
    "title": "What's New in the Apple Push Notification Service",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "topicIds": [18],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/724_whats_new_in_the_apple_push_notification_service.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/subtitles/eng/724_sd_whats_new_in_the_apple_push_notification_service.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/724_hd_whats_new_in_the_apple_push_notification_service.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/724x4wbpmrtkjpgfdlj/724/724_sd_whats_new_in_the_apple_push_notification_service.mp4",
      "duration": 885
    },
    "related": {
      "activities": ["wwdc2016-707", "wwdc2016-708"]
    }
  }, {
    "id": "wwdc2016-502",
    "staticContentId": 2,
    "eventContentId": 502,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/502",
    "description": "Become a News Publisher. Apple News allows you to monetize your stories and find new readers. Learn how to sign up and discover how easy it is to integrate with your existing CMS or author stories using the News Publisher authoring tool.",
    "title": "Getting Published in Apple News",
    "originalPublishingDate": "2016-06-14T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T15:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["news"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/502_getting_published_in_apple_news.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/subtitles/eng/502_sd_getting_published_in_apple_news.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/502_hd_getting_published_in_apple_news.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/502lezynlddsti4drbq/502/502_sd_getting_published_in_apple_news.mp4",
      "duration": 2363
    },
    "related": {
      "activities": ["wwdc2016-508"]
    }
  }, {
    "id": "wwdc2016-202",
    "staticContentId": 145,
    "eventContentId": 202,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/202",
    "description": "Explore the new accessibility features for iOS, tvOS, and macOS. Gain specific knowledge of how best to adapt your app to make it accessible to everyone, regardless of their physical or learning abilities. Learn from the experts about advanced accessibility topics and how best to structure your app interface for accessibility.",
    "title": "What's New in Accessibility",
    "originalPublishingDate": "2016-06-14T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["accessibility"],
    "topicIds": [8],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/202w2zhc4l8yomptqnt/202/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/202w2zhc4l8yomptqnt/202/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/202w2zhc4l8yomptqnt/202/202_whats_new_in_accessibility.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/202w2zhc4l8yomptqnt/202/202_hd_whats_new_in_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/202w2zhc4l8yomptqnt/202/202_sd_whats_new_in_accessibility.mp4",
      "duration": 2100
    },
    "related": {
      "activities": ["wwdc2017-217", "wwdc2016-104", "wwdc2016-407", "wwdc2016-801"]
    }
  }, {
    "id": "wwdc2016-408",
    "staticContentId": 84,
    "eventContentId": 408,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/408",
    "description": "Learn more about Swift Playgrounds, the new iPad app that teaches coding using the powerful Swift programming language. Explore the featured content, complete with puzzles that help you master each coding concept. Learn more about the coding features of Swift Playgrounds and see how the editing experience was re-imagined for touch. Learn to use the included templates to build playgrounds and look at the available features in the new playground book format.",
    "title": "Introducing Swift Playgrounds",
    "originalPublishingDate": "2016-06-15T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T11:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/408_introducing_swift_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/subtitles/eng/408_sd_introducing_swift_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/408_hd_introducing_swift_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/408j7syjtdlxnl2rq4j/408/408_sd_introducing_swift_playgrounds.mp4",
      "duration": 2984
    },
    "related": {
      "activities": ["wwdc2018-413", "wwdc2016-402", "wwdc2016-404"]
    }
  }, {
    "id": "wwdc2016-704",
    "staticContentId": 46,
    "eventContentId": 704,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/704",
    "description": "Get the latest news and updates from the Wallet and Apple Pay teams. Learn how to integrate Apple Pay into more places than ever before including watchOS, iOS Messages and Intents extensions. Learn about new tools to make testing and developing your Apple Pay-enabled apps even easier. We'll also cover new features in Wallet for retailers, banks, and card issuers.",
    "title": "What's New with Wallet and Apple Pay",
    "originalPublishingDate": "2016-06-14T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["passkit", "wallet"],
    "topicIds": [10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/704_whats_new_with_wallet_and_apple_pay.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/subtitles/eng/704_sd_whats_new_with_wallet_and_apple_pay.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/704_hd_whats_new_with_wallet_and_apple_pay.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/704s1a6rjyi2dqhhyi7/704/704_sd_whats_new_with_wallet_and_apple_pay.mp4",
      "duration": 2028
    },
    "related": {
      "activities": ["wwdc2018-720", "wwdc2017-714", "wwdc2016-208", "wwdc2016-217", "wwdc2016-703", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-204",
    "staticContentId": 40,
    "eventContentId": 204,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/204",
    "description": "Messages allows your apps to create an expressive experience within a conversation. Get an overview of the iMessage App architecture. See how Xcode can easily create a simple sticker pack with your art. Learn how to make an iMessage app that has a custom sticker grid and can make any image you create into a sticker. Go beyond the basic sticker and create animated stickers. Learn how to perfect your iMessage app presentation and layout.",
    "title": "iMessage Apps and Stickers, Part 1",
    "originalPublishingDate": "2016-06-14T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T11:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["bubble", "chat", "interactive", "msmessage"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/204_imessage_apps_and_stickers_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/subtitles/eng/204_sd_imessage_apps_and_stickers_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/204_hd_imessage_apps_and_stickers_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/204t23fvanrkj7a1oj7/204/204_sd_imessage_apps_and_stickers_part_1.mp4",
      "duration": 2165
    },
    "related": {
      "activities": ["wwdc2018-232", "wwdc2017-240", "wwdc2016-205", "wwdc2016-224", "wwdc2016-305"]
    }
  }, {
    "id": "wwdc2016-406",
    "staticContentId": 88,
    "eventContentId": 406,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/406",
    "description": "Launching an App is a complicated and subtle process and the ramifications on launch times of different App design patterns are often non-obvious. Come learn what happens in the time between when an App begins launching and when the main() function gets control and how that time relates to the code and structure of your App. Learn about the inner details of the dynamic loader, dyld, and best practices for structuring your code to perform at its best from the very start.",
    "title": "Optimizing App Startup Time",
    "originalPublishingDate": "2016-06-15T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["binding", "dlopen", "dyld", "dylib", "initialization", "initializer", "initializers", "launch", "load", "loader", "loading", "macho", "mach-o", "optimization", "performance", "rebase", "rebasing", "segment", "segments", "start", "startup"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/406_optimizing_app_startup_time.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/subtitles/eng/406_sd_optimizing_app_startup_time.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/406_hd_optimizing_app_startup_time.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/406i3zbazbegkeh0udt/406/406_sd_optimizing_app_startup_time.mp4",
      "duration": 2362
    },
    "related": {
      "activities": ["wwdc2018-415", "wwdc2017-413", "wwdc2016-405", "wwdc2016-411", "wwdc2016-414", "wwdc2016-418", "wwdc2016-719"]
    }
  }, {
    "id": "wwdc2016-612",
    "staticContentId": 104,
    "eventContentId": 612,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/612",
    "description": "watchOS 3 adds a lineup of technologies for developing games that are responsive, lightweight, and fun. Gain insights into techniques for creating great games for Apple Watch. Discover how to take advantage of gesture recognizers and the Digital Crown for gameplay, SpriteKit and SceneKit for 2D and 3D graphics, and Game Center for turn-based multiplayer games.",
    "title": "Game Technologies for Apple Watch",
    "originalPublishingDate": "2016-06-17T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T15:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["crown", "game center", "gesture", "scenekit", "spritekit"],
    "topicIds": [26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/612_game_technologies_for_apple_watch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/subtitles/eng/612_sd_game_technologies_for_apple_watch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/612_hd_game_technologies_for_apple_watch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/612qhqi7kh3399jwhy7/612/612_sd_game_technologies_for_apple_watch.mp4",
      "duration": 2230
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-211", "wwdc2016-410", "wwdc2016-608", "wwdc2016-609", "wwdc2016-611"]
    }
  }, {
    "id": "wwdc2016-227",
    "staticContentId": 63,
    "eventContentId": 227,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/227",
    "description": "A well performing Watch app begins with great app architecture. Join us to discover strategies you can apply to keep your app responsive, lower your app's resume time, and stay memory efficient. Learn how we used these same principles in the Stocks app to enhance the user experience for watchOS 3.",
    "title": "Architecting for Performance on watchOS 3",
    "originalPublishingDate": "2016-06-16T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T15:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "background", "dock"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/227_architecting_for_performance_on_watchos_3.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/subtitles/eng/227_sd_architecting_for_performance_on_watchos_3.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/227_hd_architecting_for_performance_on_watchos_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/227a480gfx4hwinv5x9/227/227_sd_architecting_for_performance_on_watchos_3.mp4",
      "duration": 2462
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-211", "wwdc2016-218", "wwdc2016-719", "wwdc2016-720", "wwdc2016-804", "wwdc2015-226"]
    }
  }, {
    "id": "wwdc2016-410",
    "staticContentId": 89,
    "eventContentId": 410,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/410",
    "description": "Discover Xcode's enhancements for debugging autolayout issues at runtime. Learn how issues inside complex GKStateMachine objects can be easily debugged at runtime. Gain insight into finding performance bottlenecks inside SpriteKit and SceneKit apps more easily with the enhanced FPS gauge. Understand how to fix leaked and abandoned memory in your app by inspecting the heap from within your typical Xcode debugging workflow.",
    "title": "Visual Debugging with Xcode",
    "originalPublishingDate": "2016-06-15T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["autolayout", "auto layout", "bottlenecks", "constraints", "debug", "debugger", "debugging", "fps", "fps gauge", "framerate", "frame rate", "gkstatemachine", "gpu", "graph", "heap", "leak", "leaks", "memory", "performance", "quicklook", "quick look", "runtime", "run time", "scenekit", "spritekit", "state", "state machine", "xcode"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/410_visual_debugging_with_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/subtitles/eng/410_sd_visual_debugging_with_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/410_hd_visual_debugging_with_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/410jaf5ko3ob8asajlf/410/410_sd_visual_debugging_with_xcode.mp4",
      "duration": 2301
    },
    "related": {
      "activities": ["wwdc2017-407", "wwdc2016-411", "wwdc2016-412", "wwdc2016-413", "wwdc2016-417", "wwdc2016-418", "wwdc2016-609", "wwdc2016-610", "wwdc2016-612"]
    }
  }, {
    "id": "wwdc2016-238",
    "staticContentId": 128,
    "eventContentId": 238,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/238",
    "description": "The Foundation framework, which includes the root object class, classes representing basic data types such as strings and byte arrays, and collection classes for storing other objects, has added new support for specifying Units and Measurements. Understand how to model your measurements and convert within dimensions. Learn from the experts how to use and surface Units and Measurements in your interfaces.",
    "title": "Measurements and Units",
    "originalPublishingDate": "2016-06-17T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["component", "foundation", "length", "measurement", "ui", "unit"],
    "topicIds": [67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/238eemv232k9lp2px30/238/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/238eemv232k9lp2px30/238/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/238eemv232k9lp2px30/238/238_measurements_and_units.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/238eemv232k9lp2px30/238/238_hd_measurements_and_units.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/238eemv232k9lp2px30/238/238_sd_measurements_and_units.mp4",
      "duration": 1917
    },
    "related": {
      "activities": ["wwdc2017-401", "wwdc2016-201", "wwdc2016-203", "wwdc2016-207", "wwdc2016-232"]
    }
  }, {
    "id": "wwdc2016-725",
    "staticContentId": 208,
    "eventContentId": 725,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/725",
    "description": "AirPrint works everywhere, including Enterprise environments. Learn how to deploy AirPrint in the Enterprise, how to set up an AirPrint Bluetooth Beacon which is new in iOS 10, and how to make sure your users take full advantage of AirPrint features.",
    "title": "Deploying AirPrint in Enterprise",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [22],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/725_deploying_airprint_in_enterprise.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/subtitles/eng/725_sd_deploying_airprint_in_enterprise.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/725_hd_deploying_airprint_in_enterprise.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/725xk1hwmcfqkiv0jfh/725/725_sd_deploying_airprint_in_enterprise.mp4",
      "duration": 962
    },
    "related": {
      "activities": ["wwdc2016-303"]
    }
  }, {
    "id": "wwdc2016-240",
    "staticContentId": 177,
    "eventContentId": 240,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/240",
    "description": "iOS and macOS can proactively promote your app and data, thereby increasing user engagement. See how adopting a few simple APIs to inform the OS about your app's capabilities can lead to your app being suggested in various places like the app switcher, on the lock screen, Contacts, and more.",
    "title": "Increase Usage of Your App With Proactive Suggestions",
    "originalPublishingDate": "2016-06-17T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-17T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["handoff", "location", "nsuseractivity", "siri", "sirikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/240f49ca5uvbzg5pwk5/240/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/240f49ca5uvbzg5pwk5/240/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/240f49ca5uvbzg5pwk5/240/240_increase_usage_of_your_app_with_proactive_suggestions.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/240f49ca5uvbzg5pwk5/240/240_hd_increase_usage_of_your_app_with_proactive_suggestions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/240f49ca5uvbzg5pwk5/240/240_sd_increase_usage_of_your_app_with_proactive_suggestions.mp4",
      "duration": 3096
    },
    "related": {
      "activities": ["wwdc2016-213", "wwdc2016-217", "wwdc2016-223", "wwdc2016-225", "wwdc2016-715", "wwdc2015-709", "wwdc2014-219"]
    }
  }, {
    "id": "wwdc2016-416",
    "staticContentId": 78,
    "eventContentId": 416,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/416",
    "description": "In this advanced session, find out how structs, classes, protocols, and generics are implemented in Swift. Learn about their relative costs in different dimensions of performance. See how to apply this information to speed up your code.",
    "title": "Understanding Swift Performance",
    "originalPublishingDate": "2016-06-17T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/416_understanding_swift_performance.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/subtitles/eng/416_sd_understanding_swift_performance.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/416_hd_understanding_swift_performance.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/416k7f0xkmz28rvlvwb/416/416_sd_understanding_swift_performance.mp4",
      "duration": 3502
    },
    "related": {
      "activities": ["wwdc2017-244", "wwdc2017-402", "wwdc2016-207", "wwdc2016-402", "wwdc2016-403", "wwdc2016-415", "wwdc2016-419", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-225",
    "staticContentId": 8,
    "eventContentId": 225,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/225",
    "description": "Learn by example how to integrate SiriKit into your app. See how easily you can create your first Intents extension to expose your app's core functionality in Siri. Find out how to bring your app's user interface into Siri, creating a unique and recognizable experience for your customers.",
    "title": "Extending Your Apps with SiriKit",
    "originalPublishingDate": "2016-06-16T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-16T13:40:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🎙", "🦄", "intent", "intentkit", "intents", "intentsui", "siri", "sirikit", "speech", "vocab", "vocabulary", "voice"],
    "topicIds": [21],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/225_extending_your_apps_with_sirikit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/subtitles/eng/225_sd_extending_your_apps_with_sirikit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/225_hd_extending_your_apps_with_sirikit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/225e97ww3majsu3bvt8/225/225_sd_extending_your_apps_with_sirikit.mp4",
      "duration": 3226
    },
    "related": {
      "activities": ["wwdc2018-211", "wwdc2018-214", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2300", "wwdc2018-2440", "wwdc2016-217", "wwdc2016-230", "wwdc2016-240", "wwdc2016-509", "wwdc2015-224"]
    }
  }, {
    "id": "wwdc2016-407",
    "staticContentId": 144,
    "eventContentId": 407,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/407",
    "description": "Making your app accessible helps you reach all of your potential users. Get introduced to the new Accessibility Inspector and learn how it streamlines finding and fixing accessibility issues across all Apple platforms. Go beyond the basics with our experts as they guide you through the process of optimizing accessibility for your app",
    "title": "Auditing Your Apps for Accessibility",
    "originalPublishingDate": "2016-06-15T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["accessibility", "inspector"],
    "topicIds": [8, 33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/407_auditing_your_apps_for_accessibility.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/subtitles/eng/407_sd_auditing_your_apps_for_accessibility.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/407_hd_auditing_your_apps_for_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/407itxn2ujs52fwcgw5/407/407_sd_auditing_your_apps_for_accessibility.mp4",
      "duration": 2041
    },
    "related": {
      "activities": ["wwdc2019-238", "wwdc2017-217", "wwdc2016-104", "wwdc2016-202", "wwdc2016-710", "wwdc2016-801", "wwdc2016-803"]
    }
  }, {
    "id": "wwdc2016-414",
    "staticContentId": 85,
    "eventContentId": 414,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/414",
    "description": "Learn about all of the new, and a few existing, features of Xcode source editor. See how you can make the most of new code completion features, Swift image and color literals, and snippets. We'll also show how to add commands to the source editor with new Xcode Extensions that you can distribute on the Mac App Store.",
    "title": "Using and Extending the Xcode Source Editor",
    "originalPublishingDate": "2016-06-16T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["editing", "editor", "editors", "extending", "extension", "extensions", "literal", "plugin", "plug-in", "source", "xcode"],
    "topicIds": [38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/414_using_and_extending_the_xcode_source_editor.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/subtitles/eng/414_sd_using_and_extending_the_xcode_source_editor.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/414_hd_using_and_extending_the_xcode_source_editor.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/414k6h6qdzyihpowpaa/414/414_sd_using_and_extending_the_xcode_source_editor.mp4",
      "duration": 2223
    },
    "related": {
      "activities": ["wwdc2016-406", "wwdc2016-413"]
    }
  }, {
    "id": "wwdc2016-215",
    "staticContentId": 107,
    "eventContentId": 215,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/215",
    "description": "The focus interaction model is a critical component of an engaging and intuitive experience on tvOS. Learn more about how it works, some additions and changes to the API, as well as tips and tricks for making your tvOS app even better.",
    "title": "Focus Interaction on tvOS",
    "originalPublishingDate": "2016-06-15T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T16:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["api", "focus", "focus engine", "interaction", "siri remote", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/215_focus_interaction_on_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/subtitles/eng/215_sd_focus_interaction_on_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/215_hd_focus_interaction_on_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/215e597a1en6wrh89hm/215/215_sd_focus_interaction_on_tvos.mp4",
      "duration": 2213
    },
    "related": {
      "activities": ["wwdc2017-224", "wwdc2016-206", "wwdc2016-210", "wwdc2016-212", "wwdc2016-229", "wwdc2016-610", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-242",
    "staticContentId": 126,
    "eventContentId": 242,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/242",
    "description": "Core Data is a framework that you can use to manage the model layer objects in your application, providing generalized and automated solutions to common tasks associated with object life cycle, object graph management, and persistence. Learn about the latest advancements in and explore best practices for taking full advantage of this powerful framework.",
    "title": "What's New in Core Data",
    "originalPublishingDate": "2016-06-17T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["coordinator", "core data", "sql", "sqlite"],
    "topicIds": [67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/242_whats_new_in_core_data.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/subtitles/eng/242_sd_whats_new_in_core_data.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/242_hd_whats_new_in_core_data.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/242vdhuk4hmwrxnb465/242/242_sd_whats_new_in_core_data.mp4",
      "duration": 2294
    },
    "related": {
      "activities": ["wwdc2016-203", "wwdc2016-402", "wwdc2016-719"]
    }
  }, {
    "id": "wwdc2016-706",
    "staticContentId": 149,
    "eventContentId": 706,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/706",
    "description": "Designing security into your app requires that you follow secure coding practices and use the security features that are built into the operating system. Learn about new developments in Security on iOS, macOS, watchOS and tvOS that impact your apps. Hear about best practices for developing and distributing secure apps and protecting people's data.",
    "title": "What's New in Security",
    "originalPublishingDate": "2016-06-14T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ats", "crypto", "keychain"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/706_whats_new_in_security.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/subtitles/eng/706_sd_whats_new_in_security.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/706_hd_whats_new_in_security.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/706sgjvzkvg6rrg9icw/706/706_sd_whats_new_in_security.mp4",
      "duration": 1990
    },
    "related": {
      "activities": ["wwdc2016-401", "wwdc2016-705", "wwdc2016-709", "wwdc2016-711"]
    }
  }, {
    "id": "wwdc2016-234",
    "staticContentId": 28,
    "eventContentId": 234,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/234",
    "description": "ResearchKit is an open source framework you can use to build compelling apps that gather and present meaningful data used in medical research. Learn about new capabilities, how to create and extend surveys, how to create active tasks that use touch or other built-in and third-party accessory features, and how to effectively participate in the community.",
    "title": "What's New in ResearchKit",
    "originalPublishingDate": "2016-06-17T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/234dvn2mhmc3klk7vy4/234/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/234dvn2mhmc3klk7vy4/234/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/234dvn2mhmc3klk7vy4/234/234_whats_new_in_researchkit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/234dvn2mhmc3klk7vy4/234/234_hd_whats_new_in_researchkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/234dvn2mhmc3klk7vy4/234/234_sd_whats_new_in_researchkit.mp4",
      "duration": 1919
    },
    "related": {
      "activities": ["wwdc2016-209", "wwdc2016-237", "wwdc2016-714"]
    }
  }, {
    "id": "wwdc2016-602",
    "staticContentId": 64,
    "eventContentId": 602,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/602",
    "description": "Metal provides the best access to the GPU on iOS, tvOS, and macOS, enabling you to maximize the graphics and compute potential of your apps and games. Get introduced to the essential concepts behind Metal, its low-overhead architecture, streamlined API, and support for efficient multi-threading. Start learning how to code with Metal in a walkthrough of rendering a basic scene.",
    "title": "Adopting Metal, Part 1",
    "originalPublishingDate": "2016-06-14T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-14T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "compute", "frame debugger", "gpgpu", "gpu", "metl", "mtl", "mtlbuffer", "mtlcommandbuffer", "mtldevice", "opengl", "opengl es", "renderer", "shader", "simd", "xcode"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/602_adopting_metal_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/subtitles/eng/602_sd_adopting_metal_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/602_hd_adopting_metal_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/602o05a86ysk0ngvlgj/602/602_sd_adopting_metal_part_1.mp4",
      "duration": 3489
    },
    "related": {
      "activities": ["wwdc2018-604", "wwdc2016-603", "wwdc2016-604", "wwdc2016-605", "wwdc2016-606"]
    }
  }, {
    "id": "wwdc2016-610",
    "staticContentId": 98,
    "eventContentId": 610,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/610",
    "description": "SpriteKit adds new features to make it even easier to create high-performance, power-efficient 2D games. See how tile maps enable you to lay out large scenes quickly and check out new APIs for warp transformations and custom shader attributes. Learn about focus-based interactions on Apple TV, rendering on Apple Watch, and new tools built right into Xcode for measuring performance and integrating with GameplayKit.",
    "title": "What's New in SpriteKit",
    "originalPublishingDate": "2016-06-16T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["2d", "action", "animation", "audio", "camera", "collision", "collisions", "constraint", "gpu", "graphics", "inverse kinematics", "lighting", "metal", "opengl", "physics", "platformer", "puzzle", "render", "shaders", "shading", "skaction", "skaudionode", "skcameranode", "sknode", "skreferencenode", "spatial", "sprite"],
    "topicIds": [24, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/610p9xtklo7t2au11md/610/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/610p9xtklo7t2au11md/610/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/610p9xtklo7t2au11md/610/610_whats_new_in_spritekit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/610p9xtklo7t2au11md/610/610_hd_whats_new_in_spritekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/610p9xtklo7t2au11md/610/610_sd_whats_new_in_spritekit.mp4",
      "duration": 3001
    },
    "related": {
      "activities": ["wwdc2017-224", "wwdc2016-215", "wwdc2016-410", "wwdc2016-601", "wwdc2016-607", "wwdc2016-608", "wwdc2016-609", "wwdc2016-611", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-418",
    "staticContentId": 97,
    "eventContentId": 418,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/418",
    "description": "Learn how to make your apps faster and more efficient in this introduction to Time Profiler in Instruments. Walk through how to use Time Profiler to measure your app's performance. Learn how Time Profiler works and can be used to identify problems and verify your fixes. Discover how easy it is to improve your app's power usage and performance by using Instruments throughout your development process.",
    "title": "Using Time Profiler in Instruments",
    "originalPublishingDate": "2016-06-17T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["instruments", "introductory", "measure", "performance", "profile", "profiling", "speed", "time"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/418_using_time_profiler_in_instruments.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/subtitles/eng/418_sd_using_time_profiler_in_instruments.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/418_hd_using_time_profiler_in_instruments.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/418kmcxcwg4psxzsjuy/418/418_sd_using_time_profiler_in_instruments.mp4",
      "duration": 1973
    },
    "related": {
      "activities": ["wwdc2018-233", "wwdc2018-407", "wwdc2016-406", "wwdc2016-410", "wwdc2016-411", "wwdc2016-412", "wwdc2016-413", "wwdc2016-719", "wwdc2016-720", "wwdc2016-721"]
    }
  }, {
    "id": "wwdc2016-409",
    "staticContentId": 94,
    "eventContentId": 409,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/409",
    "description": "Take an advanced class in Testing and Xcode Server. You'll gain an in-depth knowledge on the lifecycle of a test, how they're are hosted, and how using modern observation can help you make bulletproof tests for your app. Then, learn about changes in Xcode Server that make continuous integration easier than ever, including configuring your own user for testing, enhancements to issue tracking, email notifications and support for crash logs.",
    "title": "Advanced Testing and Continuous Integration",
    "originalPublishingDate": "2016-06-15T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bots", "test", "testing", "xcode"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/409jh83sf1h8dqrt00q/409/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/409jh83sf1h8dqrt00q/409/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/409jh83sf1h8dqrt00q/409/409_advanced_testing_and_continuous_integration.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/409jh83sf1h8dqrt00q/409/409_hd_advanced_testing_and_continuous_integration.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/409jh83sf1h8dqrt00q/409/409_sd_advanced_testing_and_continuous_integration.mp4",
      "duration": 2210
    },
    "related": {
      "activities": ["wwdc2018-403", "wwdc2018-417", "wwdc2017-403", "wwdc2017-409", "wwdc2017-414", "wwdc2016-413"]
    }
  }, {
    "id": "wwdc2016-212",
    "staticContentId": 129,
    "eventContentId": 212,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/212",
    "description": "Join us for an introduction to TVMLKit, a template-based UI layout technology that is part of tvOS. Learn about new features coming in tvOS 10, as well as best practices in architecting your application, styling and customization of templates, and media playback.",
    "title": "Developing tvOS Apps Using TVMLKit: Part 1",
    "originalPublishingDate": "2016-06-15T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-15T13:40:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["layout", "media", "streaming", "template", "tvjs", "tvml", "uikit"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/212_developing_tvos_apps_using_tvmlkit_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/subtitles/eng/212_sd_developing_tvos_apps_using_tvmlkit_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/212_hd_developing_tvos_apps_using_tvmlkit_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/212s41rh77qgdg26s86/212/212_sd_developing_tvos_apps_using_tvmlkit_part_1.mp4",
      "duration": 3405
    },
    "related": {
      "activities": ["wwdc2017-202", "wwdc2016-206", "wwdc2016-210", "wwdc2016-215", "wwdc2016-229", "wwdc2016-506", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-415",
    "staticContentId": 83,
    "eventContentId": 415,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/415",
    "description": "While the Swift language makes it easy to write software that is incredibly fast and safe by design, Swift being open source means you can use it on an even broader range of platforms, from mobile devices to the desktop and in the cloud. Come for an overview of available projects at Swift.org and examples of the community in action.",
    "title": "Going Server-side with Swift Open Source",
    "originalPublishingDate": "2016-06-17T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/415_going_serverside_with_swift_open_source.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/subtitles/eng/415_sd_going_serverside_with_swift_open_source.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/415_hd_going_serverside_with_swift_open_source.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/415kvwo632dbu5csn3g/415/415_sd_going_serverside_with_swift_open_source.mp4",
      "duration": 2274
    },
    "related": {
      "activities": ["wwdc2016-207", "wwdc2016-402", "wwdc2016-403", "wwdc2016-404", "wwdc2016-416", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-217",
    "staticContentId": 7,
    "eventContentId": 217,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/217",
    "description": "iOS 10 introduces SiriKit, a new framework enabling apps to integrate with Siri. Simply by speaking, your apps can send messages, place calls, send payments, and more. Learn how SiriKit helps you create new experiences on iOS and explore design principles for creating a great Siri experience.",
    "title": "Introducing SiriKit",
    "originalPublishingDate": "2016-06-15T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🎙", "🦄", "design", "intent", "intentkit", "intents", "intentsui", "siri", "sirikit", "speech", "user experience", "vocab", "vocabulary", "voice"],
    "topicIds": [21],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/217x5143f51ztsxao1u/217/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/217x5143f51ztsxao1u/217/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/217x5143f51ztsxao1u/217/217_introducing_sirikit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/217x5143f51ztsxao1u/217/217_hd_introducing_sirikit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/217x5143f51ztsxao1u/217/217_sd_introducing_sirikit.mp4",
      "duration": 3380
    },
    "related": {
      "activities": ["wwdc2018-211", "wwdc2018-214", "wwdc2018-2050", "wwdc2018-2190", "wwdc2018-2300", "wwdc2018-2440", "wwdc2016-223", "wwdc2016-225", "wwdc2016-230", "wwdc2016-240", "wwdc2016-509", "wwdc2016-704", "wwdc2016-709"]
    }
  }, {
    "id": "wwdc2016-305",
    "staticContentId": 22,
    "eventContentId": 305,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/305",
    "description": "iTunes Connect has been updated to make your experience with delivering apps to the App Store even better. Learn about time-saving improvements to managing screenshots, new ways to stay up to date with the iTunes Connect for iOS app, and upcoming features to help you gain insights into your data in App Analytics.",
    "title": "What's New in iTunes Connect",
    "originalPublishingDate": "2016-06-17T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-17T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["itc"],
    "topicIds": [40, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/305_whats_new_in_itunes_connect.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/subtitles/eng/305_sd_whats_new_in_itunes_connect.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/305_hd_whats_new_in_itunes_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/305h9fsce1kcqkvmtvk/305/305_sd_whats_new_in_itunes_connect.mp4",
      "duration": 2503
    },
    "related": {
      "activities": ["wwdc2016-204", "wwdc2016-224", "wwdc2016-301", "wwdc2016-702"]
    }
  }, {
    "id": "wwdc2016-405",
    "staticContentId": 87,
    "eventContentId": 405,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/405",
    "description": "The Apple LLVM compiler in Xcode 8 adds new language features, improved diagnostics, and more powerful optimizations. Get an overview of some new Objective-C and C++ features and learn how to use advanced optimizations to speed up your apps.",
    "title": "What's New in LLVM",
    "originalPublishingDate": "2016-06-14T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T17:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["bitcode", "c++", "cache", "compile", "compiler", "incremental", "libc", "libc++", "libstdc", "libstdc++", "link", "linker", "linking", "llvm", "lto", "objc", "objectivec", "objective c", "optimization", "optimize", "swift", "vectorization", "vectorizer"],
    "topicIds": [32, 33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/405_whats_new_in_llvm.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/subtitles/eng/405_sd_whats_new_in_llvm.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/405_hd_whats_new_in_llvm.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/405_sd_whats_new_in_llvm.mp4",
      "duration": 2418
    },
    "related": {
      "activities": ["wwdc2019-409", "wwdc2016-402", "wwdc2016-406", "wwdc2016-412", "wwdc2016-417"]
    }
  }, {
    "id": "wwdc2016-723",
    "staticContentId": 180,
    "eventContentId": 723,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/723",
    "description": "Learn how CarPlay integrates with your car's infotainment system. Understand how CarPlay is designed to work with your car's resources including the display, speakers, microphone, user inputs, steering wheel controls, instrument cluster and sensors.",
    "title": "Developing CarPlay Systems, Part 2",
    "originalPublishingDate": "2016-06-12T17:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [68],
    "type": "Video",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/723_developing_carplay_systems_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/subtitles/eng/723_sd_developing_carplay_systems_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/723_hd_developing_carplay_systems_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/723x16j75lwkg414uxk/723/723_sd_developing_carplay_systems_part_2.mp4",
      "duration": 1573
    },
    "related": {
      "activities": ["wwdc2019-252", "wwdc2017-717", "wwdc2017-719", "wwdc2016-722"]
    }
  }, {
    "id": "wwdc2016-103",
    "staticContentId": 156,
    "eventContentId": 103,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/103",
    "description": "Join us for an unforgettable award ceremony celebrating developers and their outstanding work. The 2016 Apple Design Awards recognize state of the art iOS, macOS, watchOS, and tvOS apps that reflect excellence in design and innovation.",
    "title": "Apple Design Awards",
    "originalPublishingDate": "2016-06-13T16:30:00-07:00",
    "publishingExpiryDate": "2021-06-13T16:30:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/103m0752oxdkymyk6gy/103/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/103m0752oxdkymyk6gy/103/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/103m0752oxdkymyk6gy/103/103_hd_apple_design_awards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/103m0752oxdkymyk6gy/103/103_sd_apple_design_awards.mp4",
      "duration": 4070
    },
    "related": {
      "activities": ["wwdc2018-103", "wwdc2016-101"]
    }
  }, {
    "id": "wwdc2016-503",
    "staticContentId": 12,
    "eventContentId": 503,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/503",
    "description": "AVFoundation is a powerful framework for media operations, providing capture, editing, playback, and export. Learn about new APIs and methods for media playback. Create seamless loops, simplify your playback logic with \"autowait\", and see how to deliver an even faster playback startup experience.",
    "title": "Advances in AVFoundation Playback",
    "originalPublishingDate": "2016-06-15T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["avfoundation", "hls", "http live streaming", "looping", "media", "mp4", "playback", "streaming", "video"],
    "topicIds": [28, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/503_advances_in_avfoundation_playback.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/subtitles/eng/503_sd_advances_in_avfoundation_playback.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/503_hd_advances_in_avfoundation_playback.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/503lkp4vimgv7tqecn7/503/503_sd_advances_in_avfoundation_playback.mp4",
      "duration": 2193
    },
    "related": {
      "activities": ["wwdc2017-251", "wwdc2016-501", "wwdc2016-504", "wwdc2016-506", "wwdc2016-507", "wwdc2016-510", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2016-507",
    "staticContentId": 15,
    "eventContentId": 507,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/507",
    "description": "iOS, macOS, watchOS and tvOS offer a rich set of tools and APIs for recording, processing, and playing back audio in your apps. Learn how to choose the right API for your app, and the details on implementing each of them in order to deliver an outstanding audio experience.",
    "title": "Delivering an Exceptional Audio Experience",
    "originalPublishingDate": "2016-06-17T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-17T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["au", "audio", "audio unit", "augraph", "auv3", "avaudioengine", "hardware", "playback", "processing", "recording", "signal processing"],
    "topicIds": [28],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/507_delivering_an_exceptional_audio_experience.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/subtitles/eng/507_sd_delivering_an_exceptional_audio_experience.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/507_hd_delivering_an_exceptional_audio_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/507n0zrhzxdzmg20zcl/507/507_sd_delivering_an_exceptional_audio_experience.mp4",
      "duration": 3258
    },
    "related": {
      "activities": ["wwdc2017-501", "wwdc2016-230", "wwdc2016-503", "wwdc2015-507", "wwdc2015-508", "wwdc2014-501", "wwdc2014-502"]
    }
  }, {
    "id": "wwdc2016-802",
    "staticContentId": 148,
    "eventContentId": 802,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/802",
    "description": "Change the way the world experiences television through apps that are designed to be immersive, intuitive and easy to use. Learn best practices and techniques to take advantage of the big screen and the Siri Remote.",
    "title": "Designing for tvOS",
    "originalPublishingDate": "2016-06-14T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T16:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["app design", "apple tv", "apps on tv", "atv", "controllers", "design", "design best practices", "entertainment", "game", "game controllers", "game controls", "game design", "games", "games on tv", "gaming", "interaction design", "siri remote", "television", "television design", "tv", "tv best practices", "tvos", "ui design", "user interface design"],
    "topicIds": [3, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/802_designing_for_tvos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/subtitles/eng/802_sd_designing_for_tvos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/802_hd_designing_for_tvos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/802z6j79sd7g5drr7k7/802/802_sd_designing_for_tvos.mp4",
      "duration": 1925
    },
    "related": {
      "activities": ["wwdc2016-206", "wwdc2016-210", "wwdc2016-212", "wwdc2016-215", "wwdc2016-221", "wwdc2016-229", "wwdc2016-506", "wwdc2016-607", "wwdc2016-710", "wwdc2016-803", "wwdc2016-805"]
    }
  }, {
    "id": "wwdc2016-504",
    "staticContentId": 14,
    "eventContentId": 504,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/504",
    "description": "HTTP Live Streaming offers a reliable media playback experiences over a wide variety of network conditions. Join us to learn how to deliver offline playback using the same media assets you already host for online playback. See new additions to the HLS protocol, such as support for fragmented MP4 and in-playlist metadata.",
    "title": "What's New in HTTP Live Streaming",
    "originalPublishingDate": "2016-06-15T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["content protection", "encryption", "fairplay", "fmp4", "fps", "hls", "http live streaming", "live", "mp4", "offline", "playback", "protection", "video", "vod"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/504_whats_new_in_http_live_streaming.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/subtitles/eng/504_sd_whats_new_in_http_live_streaming.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/504_hd_whats_new_in_http_live_streaming.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/504m956dgg4hlw2uez9/504/504_sd_whats_new_in_http_live_streaming.mp4",
      "duration": 2043
    },
    "related": {
      "activities": ["wwdc2017-504", "wwdc2016-503", "wwdc2016-506", "wwdc2016-510", "wwdc2016-714"]
    }
  }, {
    "id": "wwdc2016-213",
    "staticContentId": 81,
    "eventContentId": 213,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/213",
    "description": "The best way to avoid technical debt is to incrementally build-up technical credit. This session builds on last year's Modernizing Existing Apps with Swift presentation to show you how you can continue modernizing your codebase while adopting best practices and adding new feature work.",
    "title": "Improving Existing Apps with Modern Best Practices",
    "originalPublishingDate": "2016-06-15T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🍻", "🐳", "asset catalog", "catalogue", "colour"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/213_improving_existing_apps_with_modern_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/subtitles/eng/213_sd_improving_existing_apps_with_modern_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/213_hd_improving_existing_apps_with_modern_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/213r47rtymgcyythv7w/213/213_sd_improving_existing_apps_with_modern_best_practices.mp4",
      "duration": 2259
    },
    "related": {
      "activities": ["wwdc2016-205", "wwdc2016-206", "wwdc2016-208", "wwdc2016-239", "wwdc2016-240", "wwdc2016-304", "wwdc2016-402"]
    }
  }, {
    "id": "wwdc2016-413",
    "staticContentId": 99,
    "eventContentId": 413,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/413",
    "description": "Xcode enables you to create great apps for Apple platforms. This session will introduce you to the basics of creating a project with Xcode, and more. You'll learn how to comfortably navigate your project and gain insights into working with workspaces, targets, and schemes. We'll introduce you to version control workflows, and walk through using Xcode's source editors and design tools. Join us if you're new to Apple platforms or want to learn more about using Xcode.",
    "title": "Introduction to Xcode",
    "originalPublishingDate": "2016-06-16T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-16T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["app", "begin", "build", "code", "debug", "debugging", "developer", "editor", "getting", "git", "help", "ide", "introduction", "project", "setting", "source", "started", "target", "test", "testing", "tools", "xcode"],
    "topicIds": [38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/413_introduction_to_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/subtitles/eng/413_sd_introduction_to_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/413_hd_introduction_to_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/413jz6eb2wkfuzwx1me/413/413_sd_introduction_to_xcode.mp4",
      "duration": 3163
    },
    "related": {
      "activities": ["wwdc2016-401", "wwdc2016-409", "wwdc2016-410", "wwdc2016-412", "wwdc2016-414", "wwdc2016-417", "wwdc2016-418"]
    }
  }, {
    "id": "wwdc2016-604",
    "staticContentId": 67,
    "eventContentId": 604,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/604",
    "description": "Metal is the powerful low-overhead graphics and compute technology designed to unlock the power of the GPU. Check out the latest additions to the Metal frameworks and get details about supporting tessellation in your apps and games. Discover how to take control over synchronization and learn how to use resource heaps for even more efficient memory usage. See what's new in Metal debugging and profiling tools and gain insight into analyzing and optimizing performance.",
    "title": "What's New in Metal, Part 1",
    "originalPublishingDate": "2016-06-15T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "compute", "gpgpu", "gpu", "metl", "mtl", "mtldevice", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/604_whats_new_in_metal_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/subtitles/eng/604_sd_whats_new_in_metal_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/604_hd_whats_new_in_metal_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/604oezpg3wmqrkxl0t7/604/604_sd_whats_new_in_metal_part_1.mp4",
      "duration": 3336
    },
    "related": {
      "activities": ["wwdc2017-601", "wwdc2016-602", "wwdc2016-603", "wwdc2016-605", "wwdc2016-606"]
    }
  }, {
    "id": "wwdc2016-805",
    "staticContentId": 141,
    "eventContentId": 805,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/805",
    "description": "You're familiar with Keynote for making presentations, but it's also a powerful tool for exploring, iterating and refining user interface layouts and workflows. Learn techniques and best practices for using Keynote to quickly and persuasively express your product ideas by building realistic and tangible design comps and user flows.",
    "title": "Iterative UI Design",
    "originalPublishingDate": "2016-06-17T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T10:00:00-07:00",
    "keywords": ["demo", "demo design", "design", "design best practices", "design comps", "design demo", "iterative", "keynote", "learn to design", "rapid", "ui", "ui design", "user flows", "user interface", "user interface design", "workflows"],
    "topicIds": [3, 4],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/805zlxpfexwwzt7x0cr/805/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/805zlxpfexwwzt7x0cr/805/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/805zlxpfexwwzt7x0cr/805/805_iterative_ui_design.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/805zlxpfexwwzt7x0cr/805/805_hd_iterative_ui_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/805zlxpfexwwzt7x0cr/805/805_sd_iterative_ui_design.mp4",
      "duration": 2495
    },
    "related": {
      "activities": ["wwdc2016-801", "wwdc2016-802", "wwdc2016-803", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-302",
    "staticContentId": 21,
    "eventContentId": 302,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/302",
    "description": "Search Ads provides a new way to increase awareness of your apps in App Store search results. Learn how sponsored ads in App Store search work, see a preview of the powerful targeting options, reporting and attribution features and how quick and easy it is to get started.",
    "title": "Introducing Search Ads",
    "originalPublishingDate": "2016-06-14T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T17:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/302_introducing_search_ads.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/subtitles/eng/302_sd_introducing_search_ads.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/302_hd_introducing_search_ads.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/302f5hkfjyg13j84oda/302/302_sd_introducing_search_ads.mp4",
      "duration": 1536
    }
  }, {
    "id": "wwdc2016-701",
    "staticContentId": 47,
    "eventContentId": 701,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/701",
    "description": "The Apple File System (APFS) is the next-generation file system designed to scale from an Apple Watch to a Mac Pro. APFS is optimized for Flash/SSD storage, and engineered with encryption as a primary feature. Learn about APFS benefits versus HFS+ and how to make sure your file system code is compatible.",
    "title": "Introducing Apple File System",
    "originalPublishingDate": "2016-06-14T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apfs", "hfs", "nsfile"],
    "topicIds": [11, 67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/701_introducing_apple_file_system.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/subtitles/eng/701_sd_introducing_apple_file_system.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/701_hd_introducing_apple_file_system.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/701q0pnn0ietcautcrv/701/701_sd_introducing_apple_file_system.mp4",
      "duration": 2181
    },
    "related": {
      "activities": ["wwdc2016-705"]
    }
  }, {
    "id": "wwdc2016-603",
    "staticContentId": 65,
    "eventContentId": 603,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/603",
    "description": "Building on the fundamentals, dive into the specifics of constructing games and graphics apps with Metal. Learn about scene management and understand how to manage and update Metal resources. Understand the rendering loop, command encoding, and multi-thread synchronization.",
    "title": "Adopting Metal, Part 2",
    "originalPublishingDate": "2016-06-14T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "compute", "gpgpu", "gpu", "metl", "mtl", "mtldevice", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/603_adopting_metal_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/subtitles/eng/603_sd_adopting_metal_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/603_hd_adopting_metal_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/603oba298b1v4z54011/603/603_sd_adopting_metal_part_2.mp4",
      "duration": 2219
    },
    "related": {
      "activities": ["wwdc2018-604", "wwdc2016-602", "wwdc2016-604", "wwdc2016-605", "wwdc2016-606"]
    }
  }, {
    "id": "wwdc2016-417",
    "staticContentId": 91,
    "eventContentId": 417,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/417",
    "description": "Spend an hour with the team responsible for the technology behind Xcode's debugger: LLDB. Find out what's new, what's been there all along that you didn't know about, and how best to take advantage of it all. This session will cover a range of topics with tips for both newcomers and experienced developers.",
    "title": "Debugging Tips and Tricks",
    "originalPublishingDate": "2016-06-17T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-17T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["breakpoint", "c++", "customize", "debug", "develop", "lldb", "objective-c", "python", "swift"],
    "topicIds": [33],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/417_debugging_tips_and_tricks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/subtitles/eng/417_sd_debugging_tips_and_tricks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/417_hd_debugging_tips_and_tricks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/417kbvnnlivhyfnn98p/417/417_sd_debugging_tips_and_tricks.mp4",
      "duration": 3592
    },
    "related": {
      "activities": ["wwdc2016-405", "wwdc2016-410", "wwdc2016-412", "wwdc2016-413"]
    }
  }, {
    "id": "wwdc2016-420",
    "staticContentId": 19,
    "eventContentId": 420,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/420",
    "description": "The Web Inspector provides some sleek new tools to help you understand your app's web content performance and memory usage. Explore how you can use Web Inspector's new memory and JavaScript profiling tools to debug web content on iOS and macOS. Discover new features and learn best practices to maximize your effectiveness with the Web Inspector tools.",
    "title": "Optimizing Web Content in Your App",
    "originalPublishingDate": "2016-06-17T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T16:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["safari", "uiwebview", "webkit", "wkwebview"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/420_optimizing_web_content_in_your_app.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/subtitles/eng/420_sd_optimizing_web_content_in_your_app.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/420_hd_optimizing_web_content_in_your_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/420lbx5afix4io0xo9p/420/420_sd_optimizing_web_content_in_your_app.mp4",
      "duration": 2485
    },
    "related": {
      "activities": ["tech-talks-401", "wwdc2016-214", "wwdc2016-229", "wwdc2016-703", "wwdc2015-504", "wwdc2015-505", "wwdc2014-206", "wwdc2014-512"]
    }
  }, {
    "id": "wwdc2016-301",
    "staticContentId": 133,
    "eventContentId": 301,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/301",
    "description": "See what's new in subscriptions. Learn how our improvements give you more flexibility and control over pricing, and provide powerful incentives to engage and retain your customers.",
    "title": "Introducing Expanded Subscriptions in iTunes Connect",
    "originalPublishingDate": "2016-06-14T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["iap", "subscription"],
    "topicIds": [69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/301fbtjd9exjetky78s/301/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/301fbtjd9exjetky78s/301/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/301fbtjd9exjetky78s/301/301_introducing_expanded_subscriptions_in_itunes_connect.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/301fbtjd9exjetky78s/301/301_hd_introducing_expanded_subscriptions_in_itunes_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/301fbtjd9exjetky78s/301/301_sd_introducing_expanded_subscriptions_in_itunes_connect.mp4",
      "duration": 2074
    },
    "related": {
      "activities": ["wwdc2016-305", "wwdc2016-702"]
    }
  }, {
    "id": "wwdc2016-101",
    "staticContentId": 165,
    "eventContentId": 101,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/101",
    "description": "WWDC 2016 Keynote",
    "title": "Keynote",
    "originalPublishingDate": "2016-06-13T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-13T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/101g0jrsvv5qcoduisk/101/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/101g0jrsvv5qcoduisk/101/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/101g0jrsvv5qcoduisk/101/subtitles/eng/101_sd_keynote.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/101g0jrsvv5qcoduisk/101/101_hd_keynote.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/101g0jrsvv5qcoduisk/101/101_sd_keynote.mp4",
      "duration": 7370
    },
    "related": {
      "activities": ["wwdc2018-101", "wwdc2016-102", "wwdc2016-103"]
    }
  }, {
    "id": "wwdc2016-221",
    "staticContentId": 117,
    "eventContentId": 221,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/221",
    "description": "Using On-Demand Resources allows you to create smaller app bundles, enable faster downloads, and add more content than ever before on iOS and tvOS. Learn the recommended approach for delivering apps packaged with On-Demand Resources. Explore strategies for pre-fetching content and understand how to optimize the first-launch experience.",
    "title": "Optimizing On-Demand Resources",
    "originalPublishingDate": "2016-06-16T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T10:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["200", "asset packs", "bundleresourcerequest", "dlc", "download", "initial install", "nsbundleresourcerequest", "prefetch"],
    "topicIds": [11, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/221_optimizing_ondemand_resources.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/subtitles/eng/221_sd_optimizing_ondemand_resources.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/221_hd_optimizing_ondemand_resources.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/221l723gdmjyvv5pmw7/221/221_sd_optimizing_ondemand_resources.mp4",
      "duration": 1653
    },
    "related": {
      "activities": ["wwdc2016-206", "wwdc2016-304", "wwdc2016-607", "wwdc2016-702", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-401",
    "staticContentId": 96,
    "eventContentId": 401,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/401",
    "description": "Xcode provides powerful options for managing projects for small and large development teams. Learn how new features in Xcode simplify the process of certificate management, app signing and configuration of your project's build settings.",
    "title": "What's New in Xcode App Signing",
    "originalPublishingDate": "2016-06-14T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [43, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/401_whats_new_in_xcode_app_signing.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/subtitles/eng/401_sd_whats_new_in_xcode_app_signing.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/401_hd_whats_new_in_xcode_app_signing.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/401hmew12wifry4svvi/401/401_sd_whats_new_in_xcode_app_signing.mp4",
      "duration": 1936
    },
    "related": {
      "activities": ["wwdc2017-403", "wwdc2016-413", "wwdc2016-705", "wwdc2016-706"]
    }
  }, {
    "id": "wwdc2016-720",
    "staticContentId": 59,
    "eventContentId": 720,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/720",
    "description": "Swift 3 provides new interfaces that make it easier than ever to write applications with Grand Central Dispatch. Learn the basics of GCD and best practices on how to use it to architect your Swift application. You'll also hear about new APIs and other GCD improvements.",
    "title": "Concurrent Programming With GCD in Swift 3",
    "originalPublishingDate": "2016-06-17T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["dispatch", "gcd", "qos", "queue", "runloop", "thread"],
    "topicIds": [35, 36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/720w6g8t9zhd23va0ai/720/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/720w6g8t9zhd23va0ai/720/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/720w6g8t9zhd23va0ai/720/720_concurrent_programming_with_gcd_in_swift_3.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/720w6g8t9zhd23va0ai/720/720_hd_concurrent_programming_with_gcd_in_swift_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/720w6g8t9zhd23va0ai/720/720_sd_concurrent_programming_with_gcd_in_swift_3.mp4",
      "duration": 2141
    },
    "related": {
      "activities": ["wwdc2017-406", "wwdc2016-205", "wwdc2016-219", "wwdc2016-227", "wwdc2016-402", "wwdc2016-403", "wwdc2016-411", "wwdc2016-412", "wwdc2016-415", "wwdc2016-416", "wwdc2016-418", "wwdc2016-719"]
    }
  }, {
    "id": "wwdc2016-411",
    "staticContentId": 93,
    "eventContentId": 411,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/411",
    "description": "Join engineers from the Instruments team for another focused look at the System Trace Instruments profiling template and how to get the most out of it. Discover how threads, virtual memory, and locking interact to affect performance. Dive deep for a practical look at how you can improve your app's responsiveness and keep your users engaged.",
    "title": "System Trace in Depth",
    "originalPublishingDate": "2016-06-16T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["debug", "instruments", "lock", "locking", "locks", "memory", "performance", "profile", "profiling", "system", "template", "thread", "threads", "trace", "virtual memory"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/411_system_trace_in_depth.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/subtitles/eng/411_sd_system_trace_in_depth.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/411_hd_system_trace_in_depth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/411jge60tmuuh7dolja/411/411_sd_system_trace_in_depth.mp4",
      "duration": 2238
    },
    "related": {
      "activities": ["wwdc2018-407", "wwdc2016-406", "wwdc2016-410", "wwdc2016-418", "wwdc2016-719", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-222",
    "staticContentId": 86,
    "eventContentId": 222,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/222",
    "description": "In this first part of a two part series, explore the motivation and concepts necessary to take advantage of trait collections. Walk through building an interface in Xcode and learn from the experts how to take advantage of new features to more easily create your app for different device sizes and configurations.",
    "title": "Making Apps Adaptive, Part 1",
    "originalPublishingDate": "2016-06-16T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T11:00:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["adaptive", "builder", "interface", "ios", "over", "slide", "split", "xcode"],
    "topicIds": [38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/222_making_apps_adaptive_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/subtitles/eng/222_sd_making_apps_adaptive_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/222_hd_making_apps_adaptive_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/222l873ttj77llkzbzs/222/222_sd_making_apps_adaptive_part_1.mp4",
      "duration": 2266
    },
    "related": {
      "activities": ["wwdc2016-233", "wwdc2016-236", "wwdc2016-803"]
    }
  }, {
    "id": "wwdc2016-102",
    "staticContentId": 155,
    "eventContentId": 102,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/102",
    "description": "WWDC 2016 Platforms State of the Union",
    "title": "Platforms State of the Union",
    "originalPublishingDate": "2016-06-13T14:30:00-07:00",
    "publishingExpiryDate": "2021-06-13T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/102_platforms_state_of_the_union.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/subtitles/eng/102_sd_platforms_state_of_the_union.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/102_hd_platforms_state_of_the_union.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/102w0bsn0ge83qfv7za/102/102_sd_platforms_state_of_the_union.mp4",
      "duration": 6346
    },
    "related": {
      "activities": ["wwdc2018-102", "wwdc2016-101", "wwdc2016-203", "wwdc2016-205", "wwdc2016-206", "wwdc2016-208"]
    }
  }, {
    "id": "wwdc2016-105",
    "staticContentId": 265,
    "eventContentId": 105,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/105",
    "description": "Wildlife populations across the globe face innumerable threats that have resulted in dwindling numbers of many species. Ginette Hemley, SVP of Wildlife Conservation at World Wildlife Fund, will take us through many of the bold new approaches to conservation that organizations like WWF are taking to tackle these challenges. One of the most promising and potentially game-changing ideas for solving conservation problems around the world is by applying technology in creative new ways. From examining polar bear DNA to utilizing devices such as thermal imaging cameras and gunshot detectors to drawing upon the power of social networks and apps, learn about the surprising ways that WWF and its partners are harnessing the power of technology to keep up with the planet's most urgent wildlife conservation challenges.",
    "title": "Tapping into Innovative Solutions to Save the World's Wildlife",
    "originalPublishingDate": "2016-06-15T12:20:00-07:00",
    "publishingExpiryDate": "2021-06-15T12:20:00-07:00",
    "topicIds": [2],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/105o1y9n857rpjpmu27/105/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/105o1y9n857rpjpmu27/105/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/105o1y9n857rpjpmu27/105/105_hd_tapping_into_innovative_solutions_to_save_the_worlds_wildlife.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/105o1y9n857rpjpmu27/105/105_sd_tapping_into_innovative_solutions_to_save_the_worlds_wildlife.mp4",
      "duration": 2739
    }
  }, {
    "id": "wwdc2016-412",
    "staticContentId": 90,
    "eventContentId": 412,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/412",
    "description": "Xcode 8 makes it easier to find several new categories of bugs with improvements in Runtime Sanitization and the Clang Static Analyzer. The Thread Sanitizer will help you find data races and other concurrency bugs. The static analyzer has been extended to search for localizability issues, check nullability, and find memory leaks in MRR code.",
    "title": "Thread Sanitizer and Static Analysis",
    "originalPublishingDate": "2016-06-16T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["address sanitizer", "analysis", "analyze", "analyzer", "asan", "atomics", "clang", "concurrency", "data race", "dealloc", "gcd", "leak", "leaks", "localizability", "localize", "mrr", "nullability", "race", "races", "runtime", "static", "static analysis", "static analyzer", "thread", "threading", "threads", "tsan"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/412_thread_sanitizer_and_static_analysis.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/subtitles/eng/412_sd_thread_sanitizer_and_static_analysis.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/412_hd_thread_sanitizer_and_static_analysis.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/412jzguxz4h8hykgjlm/412/412_sd_thread_sanitizer_and_static_analysis.mp4",
      "duration": 2000
    },
    "related": {
      "activities": ["wwdc2018-414", "wwdc2017-401", "wwdc2017-406", "wwdc2017-407", "wwdc2016-201", "wwdc2016-405", "wwdc2016-410", "wwdc2016-413", "wwdc2016-417", "wwdc2016-418", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-106",
    "staticContentId": 266,
    "eventContentId": 106,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/106",
    "description": "When Ajit Narayanan began working on technologies for children with disabilities in India in 2008, it was the beginning of an incredible journey down a rabbit hole — one that took him and his team on a wild ride across the worlds of electrical engineering, autism, cross-cultural communication and the mathematics of language. His journey led him to build Avaz, a wheelchair-mounted tablet to help people with disabilities communicate, then even more ambitiously, to invent FreeSpeech, an entirely new visual language that could break down language barriers altogether. Ajit will talk about the series of events that led to the creation of the Avaz and FreeSpeech apps, their impact in India and around the world (earning him the National Award for Empowerment of People with Disabilities from the President of India) and his ideas on the transformative role that apps can play in education.",
    "title": "Talking In Pictures: Reconstructing the Building Blocks of Language",
    "originalPublishingDate": "2016-06-16T12:20:00-07:00",
    "publishingExpiryDate": "2021-06-16T12:20:00-07:00",
    "topicIds": [2],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/106r1nsdtsnrih7t6id/106/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/106r1nsdtsnrih7t6id/106/atv_vod_mvp.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/106r1nsdtsnrih7t6id/106/106_hd_talking_in_pictures_reconstructing_the_building_blocks_of_language.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/106r1nsdtsnrih7t6id/106/106_sd_talking_in_pictures_reconstructing_the_building_blocks_of_language.mp4",
      "duration": 3098
    }
  }, {
    "id": "wwdc2016-605",
    "staticContentId": 137,
    "eventContentId": 605,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/605",
    "description": "Discover enhancements to the Metal shading language and how to use function specialization to improve performance while reducing the number of shader configurations in your app. Take advantage of resource read-writes to enable amazing new rendering techniques, understand how to support wide color, and accelerate your deep learning algorithms using the Metal Performance Shaders framework.",
    "title": "What's New in Metal, Part 2",
    "originalPublishingDate": "2016-06-15T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-15T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["3d", "3d graphics", "cnn", "computational neural networks", "compute", "deep learning", "gpgpu", "gpu", "metl", "mtl", "mtldevice", "neural", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [25, 26, 27, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/605_whats_new_in_metal_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/subtitles/eng/605_sd_whats_new_in_metal_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/605_hd_whats_new_in_metal_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/605ooaey8tbzegv8fth/605/605_sd_whats_new_in_metal_part_2.mp4",
      "duration": 3701
    },
    "related": {
      "activities": ["wwdc2017-601", "wwdc2016-602", "wwdc2016-603", "wwdc2016-604", "wwdc2016-606", "wwdc2016-712", "wwdc2016-715"]
    }
  }, {
    "id": "wwdc2016-402",
    "staticContentId": 74,
    "eventContentId": 402,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/402",
    "description": "Hear about the newest features in Swift 3, the third major release of the safe, fast, and expressive language, and the first major release built with the open source community. Gain insight into the latest changes in Xcode including enhanced migration support to help move your code to Swift 3. Learn how you can get involved in the open source community at Swift.org.",
    "title": "What's New in Swift",
    "originalPublishingDate": "2016-06-14T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/402_whats_new_in_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/subtitles/eng/402_sd_whats_new_in_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/402_hd_whats_new_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/402_sd_whats_new_in_swift.mp4",
      "duration": 2474
    },
    "related": {
      "activities": ["wwdc2016-207", "wwdc2016-213", "wwdc2016-242", "wwdc2016-403", "wwdc2016-404", "wwdc2016-405", "wwdc2016-408", "wwdc2016-415", "wwdc2016-416", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-404",
    "staticContentId": 82,
    "eventContentId": 404,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/404",
    "description": "Updated to include the latest features, syntax and best practices for Swift 3, this session introduces the basics of the Swift programming language. Learn the recommended manner in which to declare variables, define functions, work with fundamental value types, protocols, generics, and more. Explore some of the great features that make Swift a safe, fast, and expressive language.",
    "title": "Getting Started with Swift",
    "originalPublishingDate": "2016-06-14T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-14T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/404_getting_started_with_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/subtitles/eng/404_sd_getting_started_with_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/404_hd_getting_started_with_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/404hskg1ijeev16mdej/404/404_sd_getting_started_with_swift.mp4",
      "duration": 3107
    },
    "related": {
      "activities": ["wwdc2016-207", "wwdc2016-402", "wwdc2016-403", "wwdc2016-408", "wwdc2016-415", "wwdc2016-419"]
    }
  }, {
    "id": "wwdc2016-211",
    "staticContentId": 62,
    "eventContentId": 211,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/211",
    "description": "Quick interactions are essential for creating a compelling Apple Watch app. Gain insights into new gesture, Digital Crown, navigation, and notification APIs, and see how to use these API alongside SceneKit and SpriteKit to create rich, glanceable interfaces. Explore how this expanded toolbox can help make your watch apps quick and responsive.",
    "title": "Quick Interaction Techniques for watchOS",
    "originalPublishingDate": "2016-06-15T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T11:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "dock"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/211_quick_interaction_techniques_for_watchos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/subtitles/eng/211_sd_quick_interaction_techniques_for_watchos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/211_hd_quick_interaction_techniques_for_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/211m4cro5y3rrsfzfdj/211/211_sd_quick_interaction_techniques_for_watchos.mp4",
      "duration": 2062
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-218", "wwdc2016-227", "wwdc2016-612", "wwdc2016-707", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-205",
    "staticContentId": 110,
    "eventContentId": 205,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/205",
    "description": "The UIKit framework provides the crucial infrastructure needed to construct and manage iOS apps, and UIKit continues to advance the state of the art for app design with many new features. Dive straight into new features across the iOS frameworks that allow your apps to take advantage of many new system services, as well as to offer services to other apps. This is your first stop to discover the many sessions to see about harnessing the power of iOS 10.",
    "title": "What's New in Cocoa Touch",
    "originalPublishingDate": "2016-06-14T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-14T13:40:00-07:00",
    "platforms": ["iOS", "tvOS", "watchOS"],
    "keywords": ["frameworks", "ipad", "iphone", "new", "tv", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/205n2okotvilcayc8rc/205/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/205n2okotvilcayc8rc/205/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/205n2okotvilcayc8rc/205/205_whats_new_in_cocoa_touch.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/205n2okotvilcayc8rc/205/205_hd_whats_new_in_cocoa_touch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/205n2okotvilcayc8rc/205/205_sd_whats_new_in_cocoa_touch.mp4",
      "duration": 3399
    },
    "related": {
      "activities": ["wwdc2016-102", "wwdc2016-204", "wwdc2016-213", "wwdc2016-216", "wwdc2016-219", "wwdc2016-224", "wwdc2016-228", "wwdc2016-232", "wwdc2016-509", "wwdc2016-712", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-224",
    "staticContentId": 140,
    "eventContentId": 224,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/224",
    "description": "Messages apps allow people to collaborate by using your app. Learn how people can work together to accomplish a task within the conversation. Customize the appearance of the messages your app can send. Learn about how to manage your app state in one-to-one and group conversations to provide an engaging and collaborative experience.",
    "title": "iMessage Apps and Stickers, Part 2",
    "originalPublishingDate": "2016-06-16T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-16T13:40:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["bubble", "chat", "ckmessage"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/224_imessage_apps_and_stickers_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/subtitles/eng/224_sd_imessage_apps_and_stickers_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/224_hd_imessage_apps_and_stickers_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/224g9mui5qb06o6ukpf/224/224_sd_imessage_apps_and_stickers_part_2.mp4",
      "duration": 2727
    },
    "related": {
      "activities": ["wwdc2018-232", "wwdc2017-240", "wwdc2016-204", "wwdc2016-205", "wwdc2016-305"]
    }
  }, {
    "id": "wwdc2016-304",
    "staticContentId": 146,
    "eventContentId": 304,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/304",
    "description": "Even consumer-focused apps are used by people in business and education. See how minor changes can fine tune your app to meet the needs of these large organizations. Learn best practices for synching user-specific content on Shared iPad and how to add deep-link support for Classroom app, authentication integration via Touch ID, AppConfig driven customization, and much more.",
    "title": "Best Practices for Building Apps Used in Business and Education",
    "originalPublishingDate": "2016-06-15T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-15T13:40:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["education"],
    "topicIds": [40, 44],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/304_best_practices_for_building_apps_used_in_business_and_education.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/subtitles/eng/304_sd_best_practices_for_building_apps_used_in_business_and_education.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/304_hd_best_practices_for_building_apps_used_in_business_and_education.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/304heg1mrvxxz5lhd4h/304/304_sd_best_practices_for_building_apps_used_in_business_and_education.mp4",
      "duration": 2809
    },
    "related": {
      "activities": ["wwdc2016-213", "wwdc2016-221", "wwdc2016-226", "wwdc2016-231", "wwdc2016-303"]
    }
  }, {
    "id": "wwdc2016-201",
    "staticContentId": 154,
    "eventContentId": 201,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/201",
    "description": "Following some simple practices when writing your app can help make it world-ready. Learn about what's new, how to take greater advantage of existing frameworks, and review some common pitfalls and how to avoid them. Hear some ideas for going one step further and optimizing your app for different countries.",
    "title": "Internationalization Best Practices",
    "originalPublishingDate": "2016-06-14T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["i18n", "international", "localization"],
    "topicIds": [42, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/201_internationalization_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/subtitles/eng/201_sd_internationalization_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/201_hd_internationalization_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/201h1g4asm31ti2l9n1/201/201_sd_internationalization_best_practices.mp4",
      "duration": 1934
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2017-202", "wwdc2017-401", "wwdc2017-410", "wwdc2016-203", "wwdc2016-232", "wwdc2016-236", "wwdc2016-238", "wwdc2016-412", "wwdc2016-714", "wwdc2016-801", "wwdc2016-803"]
    }
  }, {
    "id": "wwdc2016-216",
    "staticContentId": 111,
    "eventContentId": 216,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/216",
    "description": "Direct onscreen manipulation is the cornerstone of the user experience on iOS. iOS 10 includes new support for making onscreen interactions even more immersive and interactive. Dive straight into the philosophy and techniques of building completely interactive, interruptible animations in your apps.",
    "title": "Advances in UIKit Animations and Transitions",
    "originalPublishingDate": "2016-06-15T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T17:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["animations", "dynamics", "navigation", "uikit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/216_advances_in_uikit_animations_and_transitions.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/subtitles/eng/216_sd_advances_in_uikit_animations_and_transitions.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/216_hd_advances_in_uikit_animations_and_transitions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/216v55u6zpxizxkml6k/216/216_sd_advances_in_uikit_animations_and_transitions.mp4",
      "duration": 2776
    },
    "related": {
      "activities": ["wwdc2016-205", "wwdc2016-219", "wwdc2016-228", "wwdc2015-229", "wwdc2014-236", "wwdc2013-218", "wwdc2013-221"]
    }
  }, {
    "id": "wwdc2016-233",
    "staticContentId": 112,
    "eventContentId": 233,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/233",
    "description": "In this second part of a two part series, go beyond the basics in understanding how to make your apps adaptive. Learn through practical examples how to extend your application interfaces using UIKit. Get introduced to best practices for structuring your app for flexible interface designs. Learn from the experts what to keep in mind as you build apps for the future, today.",
    "title": "Making Apps Adaptive, Part 2",
    "originalPublishingDate": "2016-06-17T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T09:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["adaptive", "ipad", "slide", "split", "splitview"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/233_making_apps_adaptive_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/subtitles/eng/233_sd_making_apps_adaptive_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/233_hd_making_apps_adaptive_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/233c3uhytv8cxwoanja/233/233_sd_making_apps_adaptive_part_2.mp4",
      "duration": 2260
    },
    "related": {
      "activities": ["wwdc2016-219", "wwdc2016-222", "wwdc2016-236", "wwdc2016-801", "wwdc2016-803", "wwdc2014-216"]
    }
  }, {
    "id": "wwdc2016-707",
    "staticContentId": 53,
    "eventContentId": 707,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/707",
    "description": "Push and locally scheduled notifications can provide people with timely information and provide them with the ability to take appropriate actions in response. Hear about the new APIs to schedule, respond to, and manage delivery of notifications. Learn how to write an extension to decrypt and augment push notifications before they are displayed.",
    "title": "Introduction to Notifications",
    "originalPublishingDate": "2016-06-15T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["apns", "notifications"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/707_introduction_to_notifications.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/subtitles/eng/707_sd_introduction_to_notifications.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/707_hd_introduction_to_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/707s77u9e6pv0dy9ggm/707/707_sd_introduction_to_notifications.mp4",
      "duration": 2280
    },
    "related": {
      "activities": ["wwdc2017-243", "wwdc2016-211", "wwdc2016-708", "wwdc2016-716", "wwdc2016-724"]
    }
  }, {
    "id": "wwdc2016-219",
    "staticContentId": 36,
    "eventContentId": 219,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/219",
    "description": "UICollectionView is a powerful class allowing your app to manage and customize the layout of views. iOS 10 brings enhancements for better performance, easier layout and brings features you've been looking for. Learn how to make your apps richer and faster by using new features in UICollectionView and its sibling, UITableView.",
    "title": "What's New in UICollectionView in iOS 10",
    "originalPublishingDate": "2016-06-16T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T09:00:00-07:00",
    "platforms": ["iOS", "tvOS"],
    "keywords": ["collection", "ios", "performance", "scrolling", "table", "uicollectionview", "uikit", "uitableview"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/219_whats_new_in_uicollectionview_in_ios_10.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/subtitles/eng/219_sd_whats_new_in_uicollectionview_in_ios_10.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/219_hd_whats_new_in_uicollectionview_in_ios_10.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/219g66mxt0n74iogsgp/219/219_sd_whats_new_in_uicollectionview_in_ios_10.mp4",
      "duration": 2142
    },
    "related": {
      "activities": ["wwdc2018-219", "wwdc2018-225", "wwdc2018-233", "wwdc2016-205", "wwdc2016-216", "wwdc2016-233", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-609",
    "staticContentId": 95,
    "eventContentId": 609,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/609",
    "description": "SceneKit is a fully featured high-level graphics framework enabling your apps and games to create 3D animated scenes and effects. Witness the biggest leap forward in SceneKit yet with the introduction of its new Physically-Based Renderer (PBR). Dive into new APIs for accurate materials, physically-based lights, HDR effects, and enhancements in Model I/O. Walk through an example game using PBR and see how to integrate its workflow into your development.",
    "title": "Advances in SceneKit Rendering",
    "originalPublishingDate": "2016-06-16T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["3d", "collada", "dae", "graph", "graphics", "inverse kinematics", "opengl", "opensubdiv", "pbr", "physically based renderer", "physics", "pixar", "renderer", "rendering", "scene", "scnlayer", "scnnode", "scnview", "usd"],
    "topicIds": [25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/609_advances_in_scenekit_rendering.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/subtitles/eng/609_sd_advances_in_scenekit_rendering.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/609_hd_advances_in_scenekit_rendering.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/609pxdzx9vsps1l0qdh/609/609_sd_advances_in_scenekit_rendering.mp4",
      "duration": 3154
    },
    "related": {
      "activities": ["wwdc2017-604", "wwdc2016-410", "wwdc2016-608", "wwdc2016-610", "wwdc2016-612", "wwdc2016-712"]
    }
  }, {
    "id": "wwdc2016-714",
    "staticContentId": 49,
    "eventContentId": 714,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/714",
    "description": "The next wave of the Internet's evolution is happening now. You'll learn best practices for supporting IPv6, restricting cellular usage, and using Quality of Service to create a fast lane for your iOS apps. Discover how to support a multilingual Internet by using UTF-8, and how new internationalized domain names and email addresses affect you.",
    "title": "Networking for the Modern Internet",
    "originalPublishingDate": "2016-06-16T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["internet", "ipv6", "nsurlsession", "qos"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/714_networking_for_the_modern_internet.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/subtitles/eng/714_sd_networking_for_the_modern_internet.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/714_hd_networking_for_the_modern_internet.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/714urluxe140lardrb7/714/714_sd_networking_for_the_modern_internet.mp4",
      "duration": 2366
    },
    "related": {
      "activities": ["wwdc2017-707", "wwdc2017-709", "wwdc2016-201", "wwdc2016-230", "wwdc2016-232", "wwdc2016-234", "wwdc2016-504", "wwdc2016-710", "wwdc2016-711"]
    }
  }, {
    "id": "wwdc2016-303",
    "staticContentId": 25,
    "eventContentId": 303,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/303",
    "description": "Learn about the latest developments in managing Apple devices in large organizations including Classroom and Shared iPad for Education. Learn the latest techniques to wirelessly configure settings, monitor compliance with policies, install apps and bulk configure devices with ease.",
    "title": "What's New in Apple Device Management",
    "originalPublishingDate": "2016-06-15T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [44],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/303_whats_new_in_apple_device_management.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/subtitles/eng/303_sd_whats_new_in_apple_device_management.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/303_hd_whats_new_in_apple_device_management.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/303g7ecrjttz4lpqd7y/303/303_sd_whats_new_in_apple_device_management.mp4",
      "duration": 3117
    },
    "related": {
      "activities": ["wwdc2016-304", "wwdc2016-725"]
    }
  }, {
    "id": "wwdc2016-231",
    "staticContentId": 38,
    "eventContentId": 231,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/231",
    "description": "CloudKit keeps app data updated across iOS, macOS, watchOS, tvOS, and the web so you can focus on building your app. Hear best practices from the CloudKit engineering team about how to take advantage of the APIs and push notifications in order to provide your users with the best experience. Learn about the ways Apple apps use CloudKit and how you can apply the same approaches in your app.",
    "title": "CloudKit Best Practices",
    "originalPublishingDate": "2016-06-17T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["☁️", "ckoperation", "key value store", "kvs", "nsoperation", "ubiquitous"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/231_cloudkit_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/subtitles/eng/231_sd_cloudkit_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/231_hd_cloudkit_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/231bhrh1z1fzrejhbz7/231/231_sd_cloudkit_best_practices.mp4",
      "duration": 2568
    },
    "related": {
      "activities": ["wwdc2017-226", "wwdc2016-226", "wwdc2016-304"]
    }
  }, {
    "id": "wwdc2016-804",
    "staticContentId": 71,
    "eventContentId": 804,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/804",
    "description": "watchOS 3 represents a big leap forward for Apple Watch and the apps that run on it. Performance improvements, powerful graphics and animation capabilities, deeper access to device capabilities, and a refined navigation model lay the foundation for designing useful and stunning Apple Watch apps. Learn best practices and techniques for making complications, notifications and apps that are highly actionable, glanceable and responsive.",
    "title": "Designing Great Apple Watch Experiences",
    "originalPublishingDate": "2016-06-15T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-15T13:40:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["animation", "apple watch", "clockkit", "complications", "design", "experience", "interface", "notifications", "scenekit", "spritekit", "ui", "user", "ux", "watch", "watchos", "watch os", "wearable"],
    "topicIds": [3, 5, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/804_designing_great_apple_watch_experiences.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/subtitles/eng/804_sd_designing_great_apple_watch_experiences.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/804_hd_designing_great_apple_watch_experiences.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/804zpr8et6qv87n8j1z/804/804_sd_designing_great_apple_watch_experiences.mp4",
      "duration": 3366
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-211", "wwdc2016-218", "wwdc2016-227", "wwdc2016-235", "wwdc2016-610", "wwdc2016-704", "wwdc2016-801", "wwdc2016-803", "wwdc2016-805"]
    }
  }, {
    "id": "wwdc2016-702",
    "staticContentId": 52,
    "eventContentId": 702,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/702",
    "description": "The StoreKit API allows apps to request payment for additional functionality or content. Hear about the latest changes to StoreKit including Swift 3.0 APIs, updates to Subscriptions and using StoreKit with iMessage apps. Learn best practices for receipt management and Sandbox testing.",
    "title": "Using Store Kit for In-App Purchases with Swift 3",
    "originalPublishingDate": "2016-06-14T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["iap", "itc", "receipts", "subscriptions"],
    "topicIds": [69],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/702_using_store_kit_for_inapp_purchases_with_swift_3.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/subtitles/eng/702_sd_using_store_kit_for_inapp_purchases_with_swift_3.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/702_hd_using_store_kit_for_inapp_purchases_with_swift_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/702rhpkb0ux7uuzixps/702/702_sd_using_store_kit_for_inapp_purchases_with_swift_3.mp4",
      "duration": 3247
    },
    "related": {
      "activities": ["wwdc2016-221", "wwdc2016-301", "wwdc2016-305"]
    }
  }, {
    "id": "wwdc2016-226",
    "staticContentId": 37,
    "eventContentId": 226,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/226",
    "description": "CloudKit is the framework that powers iCloud services on all of Apple's platforms. Learn about the new features that have been added over the past year, and dive deep into the new sharing APIs that lets you share private data between iCloud users.",
    "title": "What's New with CloudKit",
    "originalPublishingDate": "2016-06-16T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["☁️", "ckoperation", "key value store", "kvs", "nsoperation", "ubiquitous"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/226_whats_new_with_cloudkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/subtitles/eng/226_sd_whats_new_with_cloudkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/226_hd_whats_new_with_cloudkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/226aey4ryxex6rvqvn1/226/226_sd_whats_new_with_cloudkit.mp4",
      "duration": 2645
    },
    "related": {
      "activities": ["wwdc2017-226", "wwdc2016-208", "wwdc2016-231", "wwdc2016-304"]
    }
  }, {
    "id": "wwdc2016-223",
    "staticContentId": 42,
    "eventContentId": 223,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/223",
    "description": "Search APIs make it easy for users to discover information in your app and the app itself. New features expand the search capabilities allowing users to search directly in your app and enable you to search your own app index. Learn about the latest API updates and the new privacy-friendly method for improving the ranking of your app content.",
    "title": "Making the Most of Search APIs",
    "originalPublishingDate": "2016-06-16T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["corespotlight", "markup", "nsuseractivity", "schema", "spotlight", "web"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/223j90dqr7q1xyld1mv/223/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/223j90dqr7q1xyld1mv/223/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/223j90dqr7q1xyld1mv/223/223_making_the_most_of_search_apis.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/223j90dqr7q1xyld1mv/223/223_hd_making_the_most_of_search_apis.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/223j90dqr7q1xyld1mv/223/223_sd_making_the_most_of_search_apis.mp4",
      "duration": 3271
    },
    "related": {
      "activities": ["wwdc2017-231", "wwdc2016-217", "wwdc2016-240", "wwdc2016-709"]
    }
  }, {
    "id": "wwdc2016-403",
    "staticContentId": 76,
    "eventContentId": 403,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/403",
    "description": "Swift 3 introduces new API Design Guidelines specifically crafted to the unique character of Swift for clear, concise code. This talk will explore the philosophy behind the Swift API Design Guidelines and their application throughout the Swift Standard Library and the Cocoa and Cocoa Touch APIs. See how this API transformation will affect your Swift code and learn how to ensure a smooth transition to Swift 3. Learn how Swift 3 imports Objective-C APIs and how to expose rich Swift interfaces for existing Objective-C libraries.",
    "title": "Swift API Design Guidelines",
    "originalPublishingDate": "2016-06-14T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 67, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/403_swift_api_design_guidelines.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/subtitles/eng/403_sd_swift_api_design_guidelines.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/403_hd_swift_api_design_guidelines.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/403hb0ie2m86hvs7yyn/403/403_sd_swift_api_design_guidelines.mp4",
      "duration": 2476
    },
    "related": {
      "activities": ["wwdc2016-203", "wwdc2016-207", "wwdc2016-402", "wwdc2016-404", "wwdc2016-415", "wwdc2016-416", "wwdc2016-720"]
    }
  }, {
    "id": "wwdc2016-608",
    "staticContentId": 102,
    "eventContentId": 608,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/608",
    "description": "GameplayKit provides developers a collection of essential tools and techniques used to implement modern gameplay algorithms. Learn what's new in GameplayKit and check out advances in pathfinding, autonomous agents, and game AI, as well as many enhancements supporting GameplayKit in Xcode. Tap into new capabilities for 2D and 3D spatial partitioning, and explore noise-based procedural data generation useful for height maps, natural textures, and more.",
    "title": "What's New in GameplayKit",
    "originalPublishingDate": "2016-06-16T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["ai", "behavior", "component", "game", "gpagent", "gprandomdistribution", "gpstate", "gpstatemachine", "logic", "path", "pathfinding", "random", "rule", "state machine", "strategist", "strategy"],
    "topicIds": [26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/608_whats_new_in_gameplaykit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/subtitles/eng/608_sd_whats_new_in_gameplaykit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/608_hd_whats_new_in_gameplaykit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/608p3mqohp4bat0id7s/608/608_sd_whats_new_in_gameplaykit.mp4",
      "duration": 2472
    },
    "related": {
      "activities": ["wwdc2016-601", "wwdc2016-609", "wwdc2016-610", "wwdc2016-611", "wwdc2016-612"]
    }
  }, {
    "id": "wwdc2016-235",
    "staticContentId": 3,
    "eventContentId": 235,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/235",
    "description": "HealthKit provides robust tools for building great workout apps for Apple Watch. Learn how your workout app can collect data from Watch sensors, run and analyze data in real-time in the background, and contribute to Activity rings. Gain insights into creating a great standalone Watch experience and see how to display your workouts within the Health app and the Activity app on iOS.",
    "title": "Building Great Workout Apps",
    "originalPublishingDate": "2016-06-17T11:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T11:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["🏃", "🚴", "⌚️", "🏃🏻", "🏃🏼", "🏃🏽", "🏃🏾", "🏃🏿", "🚴🏻", "🚴🏼", "🚴🏽", "🚴🏾", "🚴🏿", "accelerometer", "gyroscope", "healthkit"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/235_building_great_workout_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/subtitles/eng/235_sd_building_great_workout_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/235_hd_building_great_workout_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/235dk9q4a4mflq2dbms/235/235_sd_building_great_workout_apps.mp4",
      "duration": 3176
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-209", "wwdc2016-713", "wwdc2016-716", "wwdc2016-804", "wwdc2015-203", "wwdc2014-203", "wwdc2014-701"]
    }
  }, {
    "id": "wwdc2016-218",
    "staticContentId": 9,
    "eventContentId": 218,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/218",
    "description": "Keeping your Apple Watch app up to date is key to creating a great experience on watchOS 3. Learn how to use the new background tasks to keep your complications and the new watchOS 3 Dock snapshots consistent with your app's underlying model. Discover how to get the most from NSURLSessions and Watch Connectivity to keep data fresh and glanceable.",
    "title": "Keeping Your Watch App Up to Date",
    "originalPublishingDate": "2016-06-16T09:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T09:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "clockkit", "complication", "refresh", "schedule"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/218_keeping_your_watch_app_up_to_date.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/subtitles/eng/218_sd_keeping_your_watch_app_up_to_date.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/218_hd_keeping_your_watch_app_up_to_date.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/218e59uvbkp1smncrss/218/218_sd_keeping_your_watch_app_up_to_date.mp4",
      "duration": 2347
    },
    "related": {
      "activities": ["wwdc2016-208", "wwdc2016-211", "wwdc2016-227", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-229",
    "staticContentId": 130,
    "eventContentId": 229,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/229",
    "description": "Learn about advanced techniques in TVML based apps, such as bridging between native and javascript code, creating your own custom views for use inside of templates, creating your own custom templates, how to introduce UIKit view controllers alongside TVMLKit based templates, and additional best practices you can apply to your apps.",
    "title": "Developing tvOS Apps Using TVMLKit: Part 2",
    "originalPublishingDate": "2016-06-16T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T16:00:00-07:00",
    "platforms": ["tvOS"],
    "keywords": ["layout", "media", "streaming", "template", "tvjs", "tvml", "uikit"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/229_developing_tvos_apps_using_tvmlkit_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/subtitles/eng/229_sd_developing_tvos_apps_using_tvmlkit_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/229_hd_developing_tvos_apps_using_tvmlkit_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/229b09xkrv3t6tdzwsu/229/229_sd_developing_tvos_apps_using_tvmlkit_part_2.mp4",
      "duration": 2506
    },
    "related": {
      "activities": ["wwdc2017-202", "wwdc2016-206", "wwdc2016-210", "wwdc2016-212", "wwdc2016-215", "wwdc2016-420", "wwdc2016-506", "wwdc2016-802"]
    }
  }, {
    "id": "wwdc2016-711",
    "staticContentId": 48,
    "eventContentId": 711,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/711",
    "description": "NSURLSession provides a rich set of methods to support uploading and downloading content via HTTP and newer HTTP-based protocols, authentication with web servers, local caching of resources, and transfers that occur in the background while your app isn't running — simplifying the complexities of modern day networking. Learn about new enhancements in HTTP/2, introspection capabilities with networking metrics, and security and privacy enhancements for you and your customers.",
    "title": "NSURLSession: New Features and Best Practices",
    "originalPublishingDate": "2016-06-16T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["ats", "http", "nsurlconnection", "nsurlsession"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/711_nsurlsession_new_features_and_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/subtitles/eng/711_sd_nsurlsession_new_features_and_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/711_hd_nsurlsession_new_features_and_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/711tlraheg74mofg3uq/711/711_sd_nsurlsession_new_features_and_best_practices.mp4",
      "duration": 2523
    },
    "related": {
      "activities": ["wwdc2017-707", "wwdc2017-709", "wwdc2016-207", "wwdc2016-706", "wwdc2016-709", "wwdc2016-714"]
    }
  }, {
    "id": "wwdc2016-715",
    "staticContentId": 54,
    "eventContentId": 715,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/715",
    "description": "The Accelerate framework gives you fast, energy efficient signal and image processing and linear algebra libraries. Learn about new libraries dedicated to high performance neural networks and numerical integration.",
    "title": "Neural Networks and Accelerate",
    "originalPublishingDate": "2016-06-16T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T16:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["accelerate", "compression", "numerics", "vector"],
    "topicIds": [30, 35, 16],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/715_neural_networks_and_accelerate.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/subtitles/eng/715_sd_neural_networks_and_accelerate.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/715_hd_neural_networks_and_accelerate.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/715v2nxofqo5an4q79a/715/715_sd_neural_networks_and_accelerate.mp4",
      "duration": 1919
    },
    "related": {
      "activities": ["wwdc2018-701", "wwdc2016-240", "wwdc2016-605", "wwdc2016-606"]
    }
  }, {
    "id": "wwdc2016-230",
    "staticContentId": 41,
    "eventContentId": 230,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/230",
    "description": "CallKit is a new framework that lets your VoIP app integrate tightly with the native Phone UI. Learn how you can have your incoming calls displayed fully on the lock screen. Get details on how people can choose to use your app when making calls from the native Phone app's contacts, favorites, and recents. See how adopting CallKit lets your app coexist seamlessly with other active calls, and allow your calls to interact with CarPlay and Bluetooth accessories.",
    "title": "Enhancing VoIP Apps with CallKit",
    "originalPublishingDate": "2016-06-16T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T17:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["apns", "ckcall", "ckprovider", "pushkit"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/230_enhancing_voip_apps_with_callkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/subtitles/eng/230_sd_enhancing_voip_apps_with_callkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/230_hd_enhancing_voip_apps_with_callkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/230b83wfxc7m69dm90q/230/230_sd_enhancing_voip_apps_with_callkit.mp4",
      "duration": 2153
    },
    "related": {
      "activities": ["wwdc2016-217", "wwdc2016-225", "wwdc2016-507", "wwdc2016-714"]
    }
  }, {
    "id": "wwdc2016-220",
    "staticContentId": 167,
    "eventContentId": 220,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/220",
    "description": "Learn essential best practices for using event input from Apple Pencil in your drawing apps. Gain a practical understanding of the concepts behind efficient and accurate touch event processing. Get details about the touch input pipeline on iOS and how to take advantage of it in all your apps.",
    "title": "Leveraging Touch Input on iOS",
    "originalPublishingDate": "2016-06-16T10:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T10:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["coalesce", "draw", "event", "pencil", "predict", "touch"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/220_leveraging_touch_input_on_ios.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/subtitles/eng/220_sd_leveraging_touch_input_on_ios.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/220_hd_leveraging_touch_input_on_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/220c6lnr7wkcjewnj1g/220/220_sd_leveraging_touch_input_on_ios.mp4",
      "duration": 2097
    },
    "related": {
      "activities": ["wwdc2019-221", "wwdc2016-228", "wwdc2016-607", "wwdc2015-233"]
    }
  }, {
    "id": "wwdc2016-236",
    "staticContentId": 116,
    "eventContentId": 236,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/236",
    "description": "Get details about new features of Auto Layout in Xcode, Cocoa and Cocoa Touch. Explore the new NSGridView, allowing your Cocoa app to easily build grid interfaces. Dive deeper into new tools that enable you to quickly diagnose layout issues in your interface. Learn about the new features in Xcode to quickly build adaptive interfaces.",
    "title": "What's New in Auto Layout",
    "originalPublishingDate": "2016-06-17T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T15:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["builder", "cycle", "debug", "debugging", "grid", "gridview", "interface", "layout", "xcode"],
    "topicIds": [38, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/236_whats_new_in_auto_layout.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/subtitles/eng/236_sd_whats_new_in_auto_layout.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/236_hd_whats_new_in_auto_layout.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/236dnxhy85jkit108dh/236/236_sd_whats_new_in_auto_layout.mp4",
      "duration": 2419
    },
    "related": {
      "activities": ["wwdc2018-201", "wwdc2017-218", "wwdc2016-201", "wwdc2016-203", "wwdc2016-222", "wwdc2016-232", "wwdc2016-233", "wwdc2016-239", "wwdc2016-721", "wwdc2016-803", "wwdc2015-218", "wwdc2015-219"]
    }
  }, {
    "id": "wwdc2016-208",
    "staticContentId": 6,
    "eventContentId": 208,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/208",
    "description": "watchOS 3 brings together notifications, complications, and the new Dock to keep your apps glanceable and responsive. Find out about the new additions to watchOS to create stunning visuals and learn about new snapshotting APIs to ensure your app is up to date when people glance at their wrist. Take a tour of watchOS 3 enhancements with us and find out which sessions you won't want to miss throughout the week.",
    "title": "What's New in watchOS 3",
    "originalPublishingDate": "2016-06-14T17:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T17:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["🏃", "🚴", "⌚️", "🏃🏻", "🏃🏼", "🏃🏽", "🏃🏾", "🏃🏿", "🚴🏻", "🚴🏼", "🚴🏽", "🚴🏾", "🚴🏿", "clockkit", "complications", "fitness", "health"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/208_whats_new_in_watchos_3.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/subtitles/eng/208_sd_whats_new_in_watchos_3.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/208_hd_whats_new_in_watchos_3.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/208j30f4v1a1i9i5fg9/208/208_sd_whats_new_in_watchos_3.mp4",
      "duration": 2696
    },
    "related": {
      "activities": ["wwdc2016-102", "wwdc2016-211", "wwdc2016-213", "wwdc2016-218", "wwdc2016-226", "wwdc2016-227", "wwdc2016-235", "wwdc2016-612", "wwdc2016-704", "wwdc2016-713", "wwdc2016-716", "wwdc2016-804"]
    }
  }, {
    "id": "wwdc2016-214",
    "staticContentId": 18,
    "eventContentId": 214,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/214",
    "description": "Learn how to bring your Content Blocker App Extensions to macOS and how to expose your application's abilities through Safari with Safari App Extensions. Safari App Extensions let you take full advantage of web technologies, Cocoa, and other system frameworks that you already use in your app on macOS.",
    "title": "Extending your App with Safari App Extensions",
    "originalPublishingDate": "2016-06-15T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-15T16:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/214_extending_your_app_with_safari_app_extensions.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/subtitles/eng/214_sd_extending_your_app_with_safari_app_extensions.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/214_hd_extending_your_app_with_safari_app_extensions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/214b51jlndqja1bpptt/214/214_sd_extending_your_app_with_safari_app_extensions.mp4",
      "duration": 2148
    },
    "related": {
      "activities": ["wwdc2019-720", "wwdc2016-420", "wwdc2015-224", "wwdc2014-205", "wwdc2014-217"]
    }
  }, {
    "id": "wwdc2016-713",
    "staticContentId": 189,
    "eventContentId": 713,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/713",
    "description": "Core Motion enables your applications to access a wide array of sensors on iOS and watchOS devices. Discover how steps and activity detection can be used with user elevation changes to develop fitness apps. Explore ways to observe wrist rotation and effort and translate them to immersive health and fitness experiences.",
    "title": "Health and Fitness with Core Motion",
    "originalPublishingDate": "2016-06-16T15:00:00-07:00",
    "publishingExpiryDate": "2021-06-16T15:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["accel", "accelerometer", "altimeter", "altitude", "bicycle", "climbing", "cmdevice", "cmmotion", "coremotion", "cycling", "driving", "elevation", "fitness", "flights", "floor", "floors", "gyro", "gyroscope", "health", "healthkit", "m7", "m8", "motion", "pedometer", "rotation", "run", "running", "sensor", "sensors", "slope", "stairs", "step", "steps", "walk", "walking", "watchkit"],
    "topicIds": [26, 14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/713_health_and_fitness_with_core_motion.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/subtitles/eng/713_sd_health_and_fitness_with_core_motion.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/713_hd_health_and_fitness_with_core_motion.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/713uqrvfj3uo0xewc37/713/713_sd_health_and_fitness_with_core_motion.mp4",
      "duration": 2176
    },
    "related": {
      "activities": ["wwdc2017-704", "wwdc2016-208", "wwdc2016-209", "wwdc2016-235", "wwdc2016-716"]
    }
  }, {
    "id": "wwdc2016-712",
    "staticContentId": 114,
    "eventContentId": 712,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/712",
    "description": "Discover the fascinating details behind the display of color on Apple platforms. Go beyond the basics and learn how your apps can take advantage of a wider and deeper representation of color on iOS and macOS. Gain specific insights from the experts on optimizing your artwork asset pipeline and explore new API to develop more vivd, true to life experiences.",
    "title": "Working with Wide Color",
    "originalPublishingDate": "2016-06-16T13:40:00-07:00",
    "publishingExpiryDate": "2021-06-16T13:40:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS"],
    "keywords": ["color", "deep", "history", "profile", "wide"],
    "topicIds": [24, 30],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/712_working_with_wide_color.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/subtitles/eng/712_sd_working_with_wide_color.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/712_hd_working_with_wide_color.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/712ugi7vg8jznn3pc3u/712/712_sd_working_with_wide_color.mp4",
      "duration": 3177
    },
    "related": {
      "activities": ["wwdc2018-219", "wwdc2018-227", "wwdc2016-203", "wwdc2016-205", "wwdc2016-239", "wwdc2016-501", "wwdc2016-503", "wwdc2016-505", "wwdc2016-605", "wwdc2016-609"]
    }
  }, {
    "id": "wwdc2016-104",
    "staticContentId": 264,
    "eventContentId": 104,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/104",
    "description": "White House Champion of Change, Forbes 30 under 30 leader, and BBC Women of Africa Hero, Haben Girma is an acclaimed accessibility and inclusion advocate. The first deaf blind person to graduate from Harvard Law School, Haben champions equal access to information for people with disabilities, earning her recognition from both President Obama and President Clinton. Through this presentation, Haben will share how designing with accessibility in mind benefits not just users with disabilities, but developers, too. Throughout history, disability has sparked innovation, leading to breakthroughs in wide-ranging inventions from keyboards to telephones. Hear Haben's remarkable story and learn how incorporating universal access principles into product development can increase access for people with disabilities while simultaneously improving the overall usability of your app.",
    "title": "Disability and Innovation: The Universal Benefits of Accessible Design",
    "originalPublishingDate": "2016-06-14T12:20:00-07:00",
    "publishingExpiryDate": "2021-06-14T12:20:00-07:00",
    "platforms": ["watchOS"],
    "topicIds": [8, 2],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/104b1061nbty638w2cd/104/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/104b1061nbty638w2cd/104/atv_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/104b1061nbty638w2cd/104/subtitles/eng/104_sd_disability_and_innovation_the_universal_benefits_of_accessible_design.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/104b1061nbty638w2cd/104/104_hd_disability_and_innovation_the_universal_benefits_of_accessible_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/104b1061nbty638w2cd/104/104_sd_disability_and_innovation_the_universal_benefits_of_accessible_design.mp4",
      "duration": 1567
    },
    "related": {
      "activities": ["wwdc2016-202", "wwdc2016-407", "wwdc2016-710", "wwdc2016-801"]
    }
  }, {
    "id": "wwdc2016-207",
    "staticContentId": 123,
    "eventContentId": 207,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/207",
    "description": "Underlying nearly every iOS, macOS, watchOS, and tvOS application sits the Foundation framework. See how improvements to the fundamental set of API in Foundation will improve the experience of using Swift for the entire Cocoa and Cocoa Touch SDK. Learn how Foundation framework's new value types, adoption of standard library protocols, additional type safety, better generics, and custom operators will also make your own Swift code safer, faster, and more expressive.",
    "title": "What's New in Foundation for Swift",
    "originalPublishingDate": "2016-06-14T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-14T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "topicIds": [36, 67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/207_whats_new_in_foundation_for_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/subtitles/eng/207_sd_whats_new_in_foundation_for_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/207_hd_whats_new_in_foundation_for_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/207i37356qcyyh2yxos/207/207_sd_whats_new_in_foundation_for_swift.mp4",
      "duration": 2207
    },
    "related": {
      "activities": ["wwdc2016-203", "wwdc2016-238", "wwdc2016-402", "wwdc2016-403", "wwdc2016-404", "wwdc2016-415", "wwdc2016-416", "wwdc2016-711"]
    }
  }, {
    "id": "wwdc2016-419",
    "staticContentId": 80,
    "eventContentId": 419,
    "eventId": "wwdc2016",
    "webPermalink": "https://developer.apple.com/wwdc16/419",
    "description": "Building on last year's Protocol-Oriented Programming and Building Better Apps with Value Types sessions, this year's session will highlight tips and tricks for building better Swift apps. See how you can incorporate these design approaches into a real MVC-based Cocoa Touch app, especially in the view and controller layers, where you might not have thought of using these techniques before.",
    "title": "Protocol and Value Oriented Programming in UIKit Apps",
    "originalPublishingDate": "2016-06-17T16:00:00-07:00",
    "publishingExpiryDate": "2021-06-17T16:00:00-07:00",
    "platforms": ["iOS", "macOS", "tvOS", "watchOS"],
    "keywords": ["🦄", "swift in practice"],
    "topicIds": [36, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/hls_vod_mvp.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/atv_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/419_protocol_and_value_oriented_programming_in_uikit_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/subtitles/eng/419_sd_protocol_and_value_oriented_programming_in_uikit_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/419_hd_protocol_and_value_oriented_programming_in_uikit_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2016/419lgbsyhjrmqtmq0qh/419/419_sd_protocol_and_value_oriented_programming_in_uikit_apps.mp4",
      "duration": 2391
    },
    "related": {
      "activities": ["wwdc2016-404", "wwdc2016-416", "wwdc2015-408", "wwdc2015-414"]
    }
  }, {
    "id": "wwdc2015-304",
    "staticContentId": 459,
    "eventContentId": 304,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/304",
    "description": "Get more acquainted with iTunes Connect, your gateway to the App Store. Dive into unique services like TestFlight for beta testing and Transporter to help automate metadata setup for your apps. Discover the power of adding rich media to your app store page, the benefits of broadening your distribution path globally, and the abundance of help resources.",
    "title": "iTunes Connect: Development to Distribution",
    "originalPublishingDate": "2015-06-10T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T15:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [71, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/304ywrr62d/304/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/304ywrr62d/304/304_itunes_connect_development_to_distribution.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/304ywrr62d/304/subtitles/eng/304_sd_itunes_connect_development_to_distribution.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/304ywrr62d/304/304_hd_itunes_connect_development_to_distribution.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/304ywrr62d/304/304_sd_itunes_connect_development_to_distribution.mp4",
      "duration": 2192
    }
  }, {
    "id": "wwdc2015-229",
    "staticContentId": 612,
    "eventContentId": 229,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/229",
    "description": "Dynamic interfaces create fluid and rich interactions. Hear about new dynamic behaviors that have been added in UIKit and how to take advantage of them in your applications. Gain a practical understanding of how to integrate dynamics with AutoLayout. Learn about enhancements to UI Kit Visual Effects.",
    "title": "What's New in UIKit Dynamics and Visual Effects",
    "originalPublishingDate": "2015-06-12T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T10:00:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [24, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/229fksrj39nd/229/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/229fksrj39nd/229/229_whats_new_in_uikit_dynamics_and_visual_effects.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/229fksrj39nd/229/subtitles/eng/229_sd_whats_new_in_uikit_dynamics_and_visual_effects.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/229fksrj39nd/229/229_hd_whats_new_in_uikit_dynamics_and_visual_effects.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/229fksrj39nd/229/229_sd_whats_new_in_uikit_dynamics_and_visual_effects.mp4",
      "duration": 2231
    },
    "related": {
      "activities": ["wwdc2016-216"]
    }
  }, {
    "id": "wwdc2015-412",
    "staticContentId": 688,
    "eventContentId": 412,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/412",
    "description": "Learn about time profiling down to the disassembly level to help you investigate the minute details of your application that affect its performance and responsiveness.",
    "title": "Profiling in Depth",
    "originalPublishingDate": "2015-06-11T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T15:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["debug", "dtrace", "instruments", "performance", "time profiler"],
    "topicIds": [35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/412rhea5amj6iaf/412/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/412rhea5amj6iaf/412/412_profiling_in_depth.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/412rhea5amj6iaf/412/subtitles/eng/412_sd_profiling_in_depth.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/412rhea5amj6iaf/412/412_hd_profiling_in_depth.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/412rhea5amj6iaf/412/412_sd_profiling_in_depth.mp4",
      "duration": 2370
    },
    "related": {
      "activities": ["wwdc2018-233"]
    }
  }, {
    "id": "wwdc2015-408",
    "staticContentId": 699,
    "eventContentId": 408,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/408",
    "description": "At the heart of Swift's design are two incredibly powerful ideas: protocol-oriented programming and first class value semantics. Each of these concepts benefit predictability, performance, and productivity, but together they can change the way we think about programming. Find out how you can apply these ideas to improve the code you write.",
    "title": "Protocol-Oriented Programming in Swift",
    "originalPublishingDate": "2015-06-10T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["architecture", "collection", "copy on write", "protocol extensions", "protocols", "reference type", "sequence", "value semantics", "value type"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/408509vyudbqvts/408/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/408509vyudbqvts/408/408_protocoloriented_programming_in_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/408509vyudbqvts/408/subtitles/eng/408_sd_protocoloriented_programming_in_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/408509vyudbqvts/408/408_hd_protocoloriented_programming_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/408509vyudbqvts/408/408_sd_protocoloriented_programming_in_swift.mp4",
      "duration": 2752
    },
    "related": {
      "activities": ["wwdc2016-419"]
    }
  }, {
    "id": "wwdc2015-510",
    "staticContentId": 641,
    "eventContentId": 510,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/510",
    "description": "The newly-unified architecture of Core Image gives iOS and OS X apps access to even more image processing power. Learn about new CIFilters and enhancements to the CIKernel language. See how to use Core Image with AV Foundation and Metal to expand the capabilities of your app.",
    "title": "What's New in Core Image",
    "originalPublishingDate": "2015-06-12T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["cikernel", "detector", "detectors", "filter", "filters"],
    "topicIds": [24, 30, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/510jiccqsz/510/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/510jiccqsz/510/510_whats_new_in_core_image.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/510jiccqsz/510/subtitles/eng/510_sd_whats_new_in_core_image.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/510jiccqsz/510/510_hd_whats_new_in_core_image.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/510jiccqsz/510/510_sd_whats_new_in_core_image.mp4",
      "duration": 2339
    },
    "related": {
      "activities": ["wwdc2018-719"]
    }
  }, {
    "id": "wwdc2015-218",
    "staticContentId": 635,
    "eventContentId": 218,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/218",
    "description": "Auto Layout is a powerful constraint-based layout engine that can drive complex and dynamic interfaces on both iOS and OS X.   Learn about the new UIStackView, now your first stop for interfaces built with Auto Layout. See how to build self-sizing views using Auto Layout, and gain critical insights into the inner workings of Auto Layout.",
    "title": "Mysteries of Auto Layout, Part 1",
    "originalPublishingDate": "2015-06-11T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["adaptive", "adaptivity", "autolayout", "cells", "constraint", "estimated height", "guide", "guides", "intrinsiccontentsize", "nssplitview", "nsview", "priorities", "priority", "self-sizing", "sidebar", "size", "storyboard", "uiview", "visual format", "xcode"],
    "topicIds": [34, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2187le7kpyhdff/218/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2187le7kpyhdff/218/218_mysteries_of_auto_layout_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2187le7kpyhdff/218/subtitles/eng/218_sd_mysteries_of_auto_layout_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2187le7kpyhdff/218/218_hd_mysteries_of_auto_layout_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2187le7kpyhdff/218/218_sd_mysteries_of_auto_layout_part_1.mp4",
      "duration": 2404
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-220", "wwdc2017-218", "wwdc2016-236"]
    }
  }, {
    "id": "wwdc2015-213",
    "staticContentId": 654,
    "eventContentId": 213,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/213",
    "description": "ResearchKit is an open source framework introduced by Apple that allows researchers and developers to create powerful apps for medical research. Learn how to easily create visual consent flows, real-time dynamic active tasks, and surveys using a variety of customizable modules that you can build upon and share with the community.",
    "title": "Building Apps with ResearchKit",
    "originalPublishingDate": "2015-06-10T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T16:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["💉", "💊", "🔬", "github", "open source", "step", "task"],
    "topicIds": [14, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/213w6grumlfm0q/213/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/213w6grumlfm0q/213/213_building_apps_with_researchkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/213w6grumlfm0q/213/subtitles/eng/213_sd_building_apps_with_researchkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/213w6grumlfm0q/213/213_hd_building_apps_with_researchkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/213w6grumlfm0q/213/213_sd_building_apps_with_researchkit.mp4",
      "duration": 3499
    }
  }, {
    "id": "wwdc2015-718",
    "staticContentId": 588,
    "eventContentId": 718,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/718",
    "description": "watchOS and iOS Multitasking place increased demands on your application's efficiency and responsiveness.  With expert guidance from the GCD team, learn about threads, queues, runloops and best practices for their use in a modern app.  Take a deep dive into QoS, its propagation and advanced techniques for debugging your GCD-enabled app.",
    "title": "Building Responsive and Efficient Apps with GCD",
    "originalPublishingDate": "2015-06-12T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["dispatch", "gcd", "qos", "queue", "runloop", "thread"],
    "topicIds": [32, 33, 35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/718b7aw9tq/718/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/718b7aw9tq/718/718_building_responsive_and_efficient_apps_with_gcd.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/718b7aw9tq/718/subtitles/eng/718_sd_building_responsive_and_efficient_apps_with_gcd.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/718b7aw9tq/718/718_hd_building_responsive_and_efficient_apps_with_gcd.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/718b7aw9tq/718/718_sd_building_responsive_and_efficient_apps_with_gcd.mp4",
      "duration": 2640
    }
  }, {
    "id": "wwdc2015-407",
    "staticContentId": 694,
    "eventContentId": 407,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/407",
    "description": "Apps that stand out must be attractive, intuitive, and easy to use. Interface Builder experts will give you the skills to turn your idea into a world class app. Learn to use the new stacks feature, create adaptable interfaces, employ asset catalogs, and design custom UI to build an outstanding app for Mac, iPhone, iPad and Apple Watch.",
    "title": "Implementing UI Designs in Interface Builder",
    "originalPublishingDate": "2015-06-10T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T13:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["size classes", "storyboard", "xib"],
    "topicIds": [34],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4072909wwb9o9j3/407/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4072909wwb9o9j3/407/407_implementing_ui_designs_in_interface_builder.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4072909wwb9o9j3/407/subtitles/eng/407_sd_implementing_ui_designs_in_interface_builder.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4072909wwb9o9j3/407/407_hd_implementing_ui_designs_in_interface_builder.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4072909wwb9o9j3/407/407_sd_implementing_ui_designs_in_interface_builder.mp4",
      "duration": 2263
    }
  }, {
    "id": "wwdc2015-801",
    "staticContentId": 639,
    "eventContentId": 801,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/801",
    "description": "Design for tomorrow's products today. See examples of how Apple and partners designed software for Apple Watch and other products before they even existed. Learn techniques for designing and prototyping so you can create great apps for hardware accessories and new products before they are available.",
    "title": "Designing for Future Hardware",
    "originalPublishingDate": "2015-06-10T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["animation", "design", "interaction", "layout", "prototype", "prototyping", "ui", "user interface", "watch"],
    "topicIds": [3, 4, 9],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/801auxyvb1pgtkufjk/801/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/801auxyvb1pgtkufjk/801/801_designing_for_future_hardware.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/801auxyvb1pgtkufjk/801/subtitles/eng/801_sd_designing_for_future_hardware.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/801auxyvb1pgtkufjk/801/801_hd_designing_for_future_hardware.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/801auxyvb1pgtkufjk/801/801_sd_designing_for_future_hardware.mp4",
      "duration": 2335
    },
    "related": {
      "activities": ["wwdc2017-712"]
    }
  }, {
    "id": "wwdc2015-711",
    "staticContentId": 678,
    "eventContentId": 711,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/711",
    "description": "Learn about App Transport Security, HTTP/2 protocol support, new NSURLSession API, and best practices for networking in apps, extensions, and WatchKit apps.",
    "title": "Networking with NSURLSession",
    "originalPublishingDate": "2015-06-11T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["ats", "http", "networking", "nsurlconnection", "nsurlsession"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/711y6zlz0ll/711/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/711y6zlz0ll/711/711_networking_with_nsurlsession.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/711y6zlz0ll/711/subtitles/eng/711_sd_networking_with_nsurlsession.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/711y6zlz0ll/711/711_hd_networking_with_nsurlsession.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/711y6zlz0ll/711/711_sd_networking_with_nsurlsession.mp4",
      "duration": 2447
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2017-707", "wwdc2017-709"]
    }
  }, {
    "id": "wwdc2015-508",
    "staticContentId": 648,
    "eventContentId": 508,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/508",
    "description": "Learn about using Audio Unit Extensions to provide your App with sophisticated audio manipulation and processing capabilities. Explore the architecture and  fundamentals of an App that uses Audio Unit Extensions, and how your app can benefit from their power.",
    "title": "Audio Unit Extensions",
    "originalPublishingDate": "2015-06-11T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [28, 13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/508691kyzp/508/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/508691kyzp/508/508_audio_unit_extensions.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/508691kyzp/508/subtitles/eng/508_sd_audio_unit_extensions.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/508691kyzp/508/508_hd_audio_unit_extensions.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/508691kyzp/508/508_sd_audio_unit_extensions.mp4",
      "duration": 3530
    },
    "related": {
      "activities": ["wwdc2017-501", "wwdc2016-507"]
    }
  }, {
    "id": "wwdc2015-504",
    "staticContentId": 686,
    "eventContentId": 504,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/504",
    "description": "The new SFSafariViewController class enables you to deliver interactive web content in your app just like Safari, including the key Safari UI elements already familiar to your users. See how to easily bring Safari features like Reader and AutoFill into your app, and provide a great web viewing experience with fewer lines of code.",
    "title": "Introducing Safari View Controller",
    "originalPublishingDate": "2015-06-09T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["autofill", "css", "javascript", "passwords", "reader", "safari", "web"],
    "topicIds": [20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5048tyhotl6/504/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5048tyhotl6/504/504_introducing_safari_view_controller.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5048tyhotl6/504/subtitles/eng/504_sd_introducing_safari_view_controller.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5048tyhotl6/504/504_hd_introducing_safari_view_controller.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5048tyhotl6/504/504_sd_introducing_safari_view_controller.mp4",
      "duration": 1884
    },
    "related": {
      "activities": ["wwdc2016-420"]
    }
  }, {
    "id": "wwdc2015-108",
    "staticContentId": 622,
    "eventContentId": 108,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/108",
    "description": "Building Watch apps with Xcode 7 is easy and straight-forward. Learn how to build and debug a Watch app for watchOS 2 from the ground up. Walk through adding a Watch app to an existing application, building the user interface, debugging and profiling with Instruments, and discover how to efficiently communicate between iPhone and Apple Watch.",
    "title": "Building Watch Apps",
    "originalPublishingDate": "2015-06-09T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T16:30:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "complication", "connectivity", "extension", "ib", "interface builder", "layout", "wkinterface", "xcode"],
    "topicIds": [13, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1086gvs7f4vryixs49s6/108/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1086gvs7f4vryixs49s6/108/108_building_watch_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1086gvs7f4vryixs49s6/108/subtitles/eng/108_sd_building_watch_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1086gvs7f4vryixs49s6/108/108_hd_building_watch_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1086gvs7f4vryixs49s6/108/108_sd_building_watch_apps.mp4",
      "duration": 2356
    }
  }, {
    "id": "wwdc2015-233",
    "staticContentId": 586,
    "eventContentId": 233,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/233",
    "description": "Learn about the touch input and drawing pipelines. Gain specific insights in how best to design your app to minimize latency in receiving touches and maximizing the performance of drawing content on the screen. Explore new API in UIKit and learn best practices for faster and smoother input.",
    "title": "Advanced Touch Input on iOS",
    "originalPublishingDate": "2015-06-12T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T15:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [24, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/233l9q8hj9mw/233/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/233l9q8hj9mw/233/233_advanced_touch_input_on_ios.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/233l9q8hj9mw/233/subtitles/eng/233_sd_advanced_touch_input_on_ios.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/233l9q8hj9mw/233/233_hd_advanced_touch_input_on_ios.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/233l9q8hj9mw/233/233_sd_advanced_touch_input_on_ios.mp4",
      "duration": 2302
    },
    "related": {
      "activities": ["wwdc2016-220"]
    }
  }, {
    "id": "wwdc2015-228",
    "staticContentId": 618,
    "eventContentId": 228,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/228",
    "description": "Apple Watch apps should load quickly and be responsive to users. Learn tips and tricks for optimizing your existing apps and gain insights specific to communicating between Apple Watch and iPhone, creating responsive layouts, decreasing loading times, and more.",
    "title": "WatchKit Tips and Tricks",
    "originalPublishingDate": "2015-06-12T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T10:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "connectivity", "extension", "layout", "wkinterface"],
    "topicIds": [35, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/228eahxjbaops/228/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/228eahxjbaops/228/228_watchkit_tips_and_tricks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/228eahxjbaops/228/subtitles/eng/228_sd_watchkit_tips_and_tricks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/228eahxjbaops/228/228_hd_watchkit_tips_and_tricks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/228eahxjbaops/228/228_sd_watchkit_tips_and_tricks.mp4",
      "duration": 2392
    }
  }, {
    "id": "wwdc2015-703",
    "staticContentId": 608,
    "eventContentId": 703,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/703",
    "description": "Learn about new developments in Privacy in iOS, OS X, and watchOS that impact your apps. Hear about best practices for delivering great features and respecting your customers' privacy.",
    "title": "Privacy and Your App",
    "originalPublishingDate": "2015-06-09T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["consent", "privacy", "security"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/703kp2dwbwkr/703/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/703kp2dwbwkr/703/703_privacy_and_your_app.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/703kp2dwbwkr/703/subtitles/eng/703_sd_privacy_and_your_app.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/703kp2dwbwkr/703/703_hd_privacy_and_your_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/703kp2dwbwkr/703/703_sd_privacy_and_your_app.mp4",
      "duration": 2480
    }
  }, {
    "id": "wwdc2015-215",
    "staticContentId": 616,
    "eventContentId": 215,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/215",
    "description": "Storyboards are a great way to build the user interface and flow of your application on iOS and OS X. Gain an understanding of how to effectively organize your storyboards, define segues for your interface, and easily unwind transitions. Dive into a detailed discussion of the new APIs, and hear tips on how to create great user interfaces.",
    "title": "What's New in Storyboards",
    "originalPublishingDate": "2015-06-11T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [34, 38, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/215972d0hjjcfx/215/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/215972d0hjjcfx/215/215_whats_new_in_storyboards.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/215972d0hjjcfx/215/subtitles/eng/215_sd_whats_new_in_storyboards.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/215972d0hjjcfx/215/215_hd_whats_new_in_storyboards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/215972d0hjjcfx/215/215_sd_whats_new_in_storyboards.mp4",
      "duration": 2598
    }
  }, {
    "id": "wwdc2015-202",
    "staticContentId": 637,
    "eventContentId": 202,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/202",
    "description": "Cocoa is a powerful set of frameworks on which OS X is built. Gain an overview of the advances in AppKit, Foundation, and related frameworks. Find out what technologies you need to focus on and what techniques you should adopt to develop state of the art apps for OS X. Start here for a high level view of what's changed, and get pointers to relevant sessions for more depth.",
    "title": "What's New in Cocoa",
    "originalPublishingDate": "2015-06-09T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T13:30:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [67, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2023wpov1sxpnf9/202/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2023wpov1sxpnf9/202/202_whats_new_in_cocoa.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2023wpov1sxpnf9/202/subtitles/eng/202_sd_whats_new_in_cocoa.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2023wpov1sxpnf9/202/202_hd_whats_new_in_cocoa.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2023wpov1sxpnf9/202/202_sd_whats_new_in_cocoa.mp4",
      "duration": 2381
    }
  }, {
    "id": "wwdc2015-714",
    "staticContentId": 591,
    "eventContentId": 714,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/714",
    "description": "Learn what's new in Core Location. Discover how to use Core Location with Apple Watch, and how to make the best use of location services to develop powerful and compelling apps.",
    "title": "What's New in Core Location",
    "originalPublishingDate": "2015-06-11T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T13:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["approval", "authorization", "beacon", "clvisit", "corelocation", "core location", "fence", "fencing", "floor", "geo-fence", "geo-fencing", "gps", "heading", "ibeacon", "ibeacons", "indoor", "indoor positioning", "journal", "journaling", "location", "navigation", "position", "proximity", "ranging", "region", "region monitoring", "regions", "significant location change", "slc", "triangulation", "trilateration", "visit", "visit api", "visit monitor", "visit monitoring", "wheninuse", "whileinuse"],
    "topicIds": [17],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/714tqy593v/714/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/714tqy593v/714/714_whats_new_in_core_location.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/714tqy593v/714/subtitles/eng/714_sd_whats_new_in_core_location.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/714tqy593v/714/714_hd_whats_new_in_core_location.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/714tqy593v/714/714_sd_whats_new_in_core_location.mp4",
      "duration": 2390
    }
  }, {
    "id": "wwdc2015-708",
    "staticContentId": 603,
    "eventContentId": 708,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/708",
    "description": "Learn how to debug energy issues in your app. See the energy debugging tools on iOS and walk through debugging common energy issues in a sample app.",
    "title": "Debugging Energy Issues",
    "originalPublishingDate": "2015-06-10T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["battery", "instruments", "performance", "power"],
    "topicIds": [33, 35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/708xzs0dtwx/708/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/708xzs0dtwx/708/708_debugging_energy_issues.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/708xzs0dtwx/708/subtitles/eng/708_sd_debugging_energy_issues.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/708xzs0dtwx/708/708_hd_debugging_energy_issues.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/708xzs0dtwx/708/708_sd_debugging_energy_issues.mp4",
      "duration": 2535
    }
  }, {
    "id": "wwdc2015-302",
    "staticContentId": 705,
    "eventContentId": 302,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/302",
    "description": "iTunes Connect is the gateway to sharing your creativity on the App Store. Learn about new opportunities to get your products out on Apple Watch. See how the latest improvements to TestFlight as well as other new upcoming features on the iTunes Connect, will help you make the most of Apple's digital storefront.",
    "title": "What's New in iTunes Connect",
    "originalPublishingDate": "2015-06-10T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [40, 69, 71, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/302sxabxp0/302/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/302sxabxp0/302/302_whats_new_in_itunes_connect.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/302sxabxp0/302/subtitles/eng/302_sd_whats_new_in_itunes_connect.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/302sxabxp0/302/302_hd_whats_new_in_itunes_connect.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/302sxabxp0/302/302_sd_whats_new_in_itunes_connect.mp4",
      "duration": 2190
    }
  }, {
    "id": "wwdc2015-201",
    "staticContentId": 636,
    "eventContentId": 201,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/201",
    "description": "iOS has transformed the lives of many users with a range of physical and learning disabilities. Learn how to create apps that leverage the power and simplicity of Apple's assistive technologies to make them accessible to the broadest audience possible. Hear about the latest advancements in iOS accessibility and how you can take advantage of them today.",
    "title": "iOS Accessibility",
    "originalPublishingDate": "2015-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T09:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["blind", "braille", "caption", "color blindness", "deaf", "disabled", "dynamic type", "guided access", "hearing aid", "motion", "speech", "subtitle", "uifont", "vision", "voiceover", "zoom"],
    "topicIds": [8],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/201pps6n6g0nsnz/201/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/201pps6n6g0nsnz/201/201_ios_accessibility.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/201pps6n6g0nsnz/201/subtitles/eng/201_sd_ios_accessibility.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/201pps6n6g0nsnz/201/201_hd_ios_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/201pps6n6g0nsnz/201/201_sd_ios_accessibility.mp4",
      "duration": 1942
    },
    "related": {
      "activities": ["wwdc2019-238"]
    }
  }, {
    "id": "wwdc2015-715",
    "staticContentId": 679,
    "eventContentId": 715,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/715",
    "description": "CloudKit makes it easy to store and retrieve any kind of data from iCloud. Dive into the API with the CloudKit framework team as they explore some of its lesser-known features, explore best practices around subscriptions and queries, and reveal its hidden gems.",
    "title": "CloudKit Tips and Tricks",
    "originalPublishingDate": "2015-06-11T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T16:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["☁︎", "☁️", "ckcontainer", "ckdatabase", "ckquery", "cksubscription", "javascript", "rest"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7153rwmu2r/715/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7153rwmu2r/715/715_cloudkit_tips_and_tricks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7153rwmu2r/715/subtitles/eng/715_sd_cloudkit_tips_and_tricks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7153rwmu2r/715/715_hd_cloudkit_tips_and_tricks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7153rwmu2r/715/715_sd_cloudkit_tips_and_tricks.mp4",
      "duration": 3251
    },
    "related": {
      "activities": ["wwdc2017-226"]
    }
  }, {
    "id": "wwdc2015-210",
    "staticContentId": 653,
    "eventContentId": 210,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/210",
    "description": "HomeKit is Apple's framework that enables apps to easily and securely interact with HomeKit enabled accessories such as lights, locks, thermostats and more. Learn about the improvements to HomeKit, including support for new accessory types, easy ways to setup and remotely manage accessories.",
    "title": "What's New in HomeKit",
    "originalPublishingDate": "2015-06-10T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T13:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🏠", "🏡", "bluetooth", "hmaccessory", "hmcharacteristic", "hmhomemanager", "hmroom", "hmservice", "hmtrigger", "hmzone", "mfi", "notification"],
    "topicIds": [9, 15],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/210oyq5peqlavb/210/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/210oyq5peqlavb/210/210_whats_new_in_homekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/210oyq5peqlavb/210/subtitles/eng/210_sd_whats_new_in_homekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/210oyq5peqlavb/210/210_hd_whats_new_in_homekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/210oyq5peqlavb/210/210_sd_whats_new_in_homekit.mp4",
      "duration": 2482
    },
    "related": {
      "activities": ["wwdc2017-705"]
    }
  }, {
    "id": "wwdc2015-303",
    "staticContentId": 704,
    "eventContentId": 303,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/303",
    "description": "App Analytics is the powerful new tool inside iTunes Connect. Get a walk through of the metrics related to user engagement, marketing campaigns, monetization and more. Gain valuable insights from data that only Apple provides, so you can build better iOS apps and a more informed app business.",
    "title": "Getting the Most out of App Analytics",
    "originalPublishingDate": "2015-06-10T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T13:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [40, 71, 39],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/303qzm09e7/303/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/303qzm09e7/303/303_getting_the_most_out_of_app_analytics.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/303qzm09e7/303/subtitles/eng/303_sd_getting_the_most_out_of_app_analytics.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/303qzm09e7/303/303_hd_getting_the_most_out_of_app_analytics.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/303qzm09e7/303/303_sd_getting_the_most_out_of_app_analytics.mp4",
      "duration": 2131
    }
  }, {
    "id": "wwdc2015-413",
    "staticContentId": 691,
    "eventContentId": 413,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/413",
    "description": "Discover UI debugging and how to use advanced breakpoint actions to quickly explore and fix your app. Learn how the new Address Sanitizer feature finds buffer overflows, use-after-free errors, and other memory corruption bugs at run time.",
    "title": "Advanced Debugging and the Address Sanitizer",
    "originalPublishingDate": "2015-06-12T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["auto layout", "backtrace", "breakpoint", "constraints", "crash", "debug", "debugger", "exception", "frame", "guard malloc", "hierarchy", "lldb", "queue", "stack", "thread", "view", "view debugger"],
    "topicIds": [33, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/413eflf3lrh1tyo/413/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/413eflf3lrh1tyo/413/413_advanced_debugging_and_the_address_sanitizer.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/413eflf3lrh1tyo/413/subtitles/eng/413_sd_advanced_debugging_and_the_address_sanitizer.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/413eflf3lrh1tyo/413/413_hd_advanced_debugging_and_the_address_sanitizer.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/413eflf3lrh1tyo/413/413_sd_advanced_debugging_and_the_address_sanitizer.mp4",
      "duration": 2032
    },
    "related": {
      "activities": ["wwdc2017-406", "wwdc2017-407"]
    }
  }, {
    "id": "wwdc2015-502",
    "staticContentId": 596,
    "eventContentId": 502,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/502",
    "description": "FairPlay streaming provides industrial-grade protection for audio and video content. Learn how to implement and deploy FairPlay streaming to protect content when using HTTP Live Streaming.",
    "title": "Content Protection for HTTP Live Streaming",
    "originalPublishingDate": "2015-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["fps", "hls"],
    "topicIds": [28, 31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/502sufwcpog/502/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/502sufwcpog/502/502_content_protection_for_http_live_streaming.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/502sufwcpog/502/subtitles/eng/502_sd_content_protection_for_http_live_streaming.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/502sufwcpog/502/502_hd_content_protection_for_http_live_streaming.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/502sufwcpog/502/502_sd_content_protection_for_http_live_streaming.mp4",
      "duration": 1701
    }
  }, {
    "id": "wwdc2015-410",
    "staticContentId": 689,
    "eventContentId": 410,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/410",
    "description": "Xcode 7 includes new code coverage features to help you design a powerful test harness for your app. Learn all about coverage along with integration and improvements with Xcode Server.",
    "title": "Continuous Integration and Code Coverage in Xcode",
    "originalPublishingDate": "2015-06-11T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["bots", "build", "check out", "ci", "commit", "git", "host", "repository", "scm", "server", "swift", "unit test", "xcode server", "xctest"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/41097fby32x3opk/410/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/41097fby32x3opk/410/410_continuous_integration_and_code_coverage_in_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/41097fby32x3opk/410/subtitles/eng/410_sd_continuous_integration_and_code_coverage_in_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/41097fby32x3opk/410/410_hd_continuous_integration_and_code_coverage_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/41097fby32x3opk/410/410_sd_continuous_integration_and_code_coverage_in_xcode.mp4",
      "duration": 2425
    },
    "related": {
      "activities": ["wwdc2017-406"]
    }
  }, {
    "id": "wwdc2015-106",
    "staticContentId": 703,
    "eventContentId": 106,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/106",
    "description": "Swift continues its rapid advancement with version 2. New optimizations make your app run even faster, and new syntax makes your code more expressive. Learn about powerful new features like error handling, testability, and availability checking. This session will help you write even better apps by moving to Swift 2.",
    "title": "What's New in Swift",
    "originalPublishingDate": "2015-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["availability", "case", "compile time", "diagnostics", "do", "error handling", "guard", "migrator", "nested functions", "option sets", "pattern matching", "performance", "protocol", "protocol extensions", "repeat", "sdk", "standard lib", "std lib", "switch", "testable", "while"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/106z3yjwpfymnauri96m/106/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/106z3yjwpfymnauri96m/106/106_whats_new_in_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/106z3yjwpfymnauri96m/106/subtitles/eng/106_sd_whats_new_in_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/106z3yjwpfymnauri96m/106/106_hd_whats_new_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/106z3yjwpfymnauri96m/106/106_sd_whats_new_in_swift.mp4",
      "duration": 3019
    }
  }, {
    "id": "wwdc2015-511",
    "staticContentId": 683,
    "eventContentId": 511,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/511",
    "description": "Safari in iOS 9 and OS X El Capitan delivers new ways for your app to extend Safari's behavior. Learn how to create Shared Links and Content Blocking extensions for iOS and OS X, and about changes to the Safari Extension development process.",
    "title": "Safari Extensibility: Content Blocking and Shared Links",
    "originalPublishingDate": "2015-06-12T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T11:00:00-07:00",
    "platforms": ["macOS"],
    "topicIds": [13, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/511kmynuza/511/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/511kmynuza/511/511_safari_extensibility_content_blocking_and_shared_links.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/511kmynuza/511/subtitles/eng/511_sd_safari_extensibility_content_blocking_and_shared_links.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/511kmynuza/511/511_hd_safari_extensibility_content_blocking_and_shared_links.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/511kmynuza/511/511_sd_safari_extensibility_content_blocking_and_shared_links.mp4",
      "duration": 2260
    },
    "related": {
      "activities": ["wwdc2019-720"]
    }
  }, {
    "id": "wwdc2015-223",
    "staticContentId": 632,
    "eventContentId": 223,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/223",
    "description": "Whether it's getting contact information, managing a social graph, or adding a new friend, Contacts are a critical piece of many apps. OS X El Capitan and iOS 9 now share a new Contacts API. Understand the design, goals, and benefits of this new framework. Gain critical insights into how to make a smooth transition for your app to this new framework.",
    "title": "Introducing the Contacts Framework for iOS and OS X",
    "originalPublishingDate": "2015-06-11T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T15:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["addressbook", "address book", "addressbookui", "contactsui", "people picker"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/223rmo6dv9hxh/223/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/223rmo6dv9hxh/223/223_introducing_the_contacts_framework_for_ios_and_os_x.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/223rmo6dv9hxh/223/subtitles/eng/223_sd_introducing_the_contacts_framework_for_ios_and_os_x.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/223rmo6dv9hxh/223/223_hd_introducing_the_contacts_framework_for_ios_and_os_x.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/223rmo6dv9hxh/223/223_sd_introducing_the_contacts_framework_for_ios_and_os_x.mp4",
      "duration": 2261
    }
  }, {
    "id": "wwdc2015-107",
    "staticContentId": 611,
    "eventContentId": 107,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/107",
    "description": "iOS 9 expands on adaptivity with Multitasking. Learn about additions to UIKit to support truly universal layout sizes and types. Get introduced to all-new frameworks and APIs for Cocoa Touch such as a new Contacts framework, text-editing gestures, enhancements to dynamics and visual effects, and much more. Come find out which sessions you won't want to miss throughout the week.",
    "title": "What's New in Cocoa Touch",
    "originalPublishingDate": "2015-06-09T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T14:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["auto layout", "size classes"],
    "topicIds": [24, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1075hpxmc54818sn59su/107/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1075hpxmc54818sn59su/107/107_whats_new_in_cocoa_touch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1075hpxmc54818sn59su/107/subtitles/eng/107_sd_whats_new_in_cocoa_touch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1075hpxmc54818sn59su/107/107_hd_whats_new_in_cocoa_touch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1075hpxmc54818sn59su/107/107_sd_whats_new_in_cocoa_touch.mp4",
      "duration": 1907
    }
  }, {
    "id": "wwdc2015-402",
    "staticContentId": 687,
    "eventContentId": 402,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/402",
    "description": "Enhancements to LLDB simplify life for Swift and Objective-C developers alike. Experienced developers will find new powers within the debugging console, and learn more about the connection between the debugger and Swift REPL. Newcomers will get insight into the range of possibilities hidden behind the LLDB prompt.",
    "title": "What's New in LLDB",
    "originalPublishingDate": "2015-06-09T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["breakpoints", "clang", "debugging", "expressions", "llvm", "runtime", "swift"],
    "topicIds": [33],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/402c0mhxbs8tt52t/402/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/402c0mhxbs8tt52t/402/402_whats_new_in_lldb.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/402c0mhxbs8tt52t/402/subtitles/eng/402_sd_whats_new_in_lldb.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/402c0mhxbs8tt52t/402/402_hd_whats_new_in_lldb.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/402c0mhxbs8tt52t/402/402_sd_whats_new_in_lldb.mp4",
      "duration": 2317
    }
  }, {
    "id": "wwdc2015-604",
    "staticContentId": 643,
    "eventContentId": 604,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/604",
    "description": "SpriteKit provides everything you'll need to build 2D games with high-performance graphics and engaging gameplay. Check out new APIs for managing a virtual camera and delivering spatial audio. See the all-new timeline-based Actions editor built right into Xcode, and learn about deep integration with Metal, SceneKit, GameplayKit, and more.",
    "title": "What's New in SpriteKit",
    "originalPublishingDate": "2015-06-10T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["2d", "action", "animation", "audio", "camera", "collision", "collisions", "constraint", "gpu", "graphics", "inverse kinematics", "lighting", "metal", "opengl", "physics", "physics", "platformer", "puzzle", "render", "shaders", "shading", "shading", "skaction", "skaudionode", "skcameranode", "sknode", "skreferencenode", "spatial", "sprite"],
    "topicIds": [24, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/604gq12qghmv39znb/604/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/604gq12qghmv39znb/604/604_whats_new_in_spritekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/604gq12qghmv39znb/604/subtitles/eng/604_sd_whats_new_in_spritekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/604gq12qghmv39znb/604/604_hd_whats_new_in_spritekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/604gq12qghmv39znb/604/604_sd_whats_new_in_spritekit.mp4",
      "duration": 2506
    }
  }, {
    "id": "wwdc2015-102",
    "staticContentId": 572,
    "eventContentId": 102,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/102",
    "description": "WWDC 2015 Platforms State of the Union",
    "title": "Platforms State of the Union",
    "originalPublishingDate": "2015-06-08T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-08T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [1],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1026npwuy2crj2xyuq11/102/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1026npwuy2crj2xyuq11/102/102_platforms_state_of_the_union.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1026npwuy2crj2xyuq11/102/subtitles/eng/102_sd_platforms_state_of_the_union.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1026npwuy2crj2xyuq11/102/102_hd_platforms_state_of_the_union.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1026npwuy2crj2xyuq11/102/102_sd_platforms_state_of_the_union.mp4",
      "duration": 6494
    },
    "related": {
      "activities": ["wwdc2018-102"]
    }
  }, {
    "id": "wwdc2015-507",
    "staticContentId": 649,
    "eventContentId": 507,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/507",
    "description": "See what's new in Core Audio. Learn about enhancements to AVAudioEngine such as Compressed audio format support, more flexible node connections and new Sequencer functionality. Learn how to take advantage of digital audio between your OS X and iOS devices via Lightning. Learn best practices and what's new in AVAudioSession.",
    "title": "What's New in Core Audio",
    "originalPublishingDate": "2015-06-10T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T16:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["avaudioengine", "avfoundation", "av foundation", "coreaudio", "core audio"],
    "topicIds": [28, 9],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/507pq8rldk/507/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/507pq8rldk/507/507_whats_new_in_core_audio.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/507pq8rldk/507/subtitles/eng/507_sd_whats_new_in_core_audio.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/507pq8rldk/507/507_hd_whats_new_in_core_audio.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/507pq8rldk/507/507_sd_whats_new_in_core_audio.mp4",
      "duration": 3212
    },
    "related": {
      "activities": ["wwdc2017-501", "wwdc2016-507"]
    }
  }, {
    "id": "wwdc2015-217",
    "staticContentId": 633,
    "eventContentId": 217,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/217",
    "description": "The new Force Touch trackpad adds a whole new dimension to user interactions. OS X 10.11 introduces system controls that support pressure behaviors. Understand how to integrate with these behaviors and support them in custom controls. See how to use the Taptic Engine to provide subtle physical feedback based on trackpad input. Hear best practices for adopting new swiping gestures.",
    "title": "Adopting New Trackpad Features",
    "originalPublishingDate": "2015-06-11T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T10:00:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["appkit", "configuration", "haptic", "pressure"],
    "topicIds": [5, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/217wu453thu1r1/217/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/217wu453thu1r1/217/217_adopting_new_trackpad_features.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/217wu453thu1r1/217/subtitles/eng/217_sd_adopting_new_trackpad_features.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/217wu453thu1r1/217/217_hd_adopting_new_trackpad_features.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/217wu453thu1r1/217/217_sd_adopting_new_trackpad_features.mp4",
      "duration": 2555
    }
  }, {
    "id": "wwdc2015-214",
    "staticContentId": 628,
    "eventContentId": 214,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/214",
    "description": "iOS 9 introduces On Demand Resources, enabling the efficient delivery of rich games and full featured applications using dynamically loaded content. Significantly reduce the time between purchasing and running an app from the App Store, while also decreasing the required storage space by downloading and retaining only content that is necessary. Dive into the latest enhancements in app packaging and learn the APIs to allow your app to acquire only its essential resources.",
    "title": "Introducing On Demand Resources",
    "originalPublishingDate": "2015-06-10T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T16:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [26, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/214dh5q5d0kswh/214/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/214dh5q5d0kswh/214/214_introducing_on_demand_resources.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/214dh5q5d0kswh/214/subtitles/eng/214_sd_introducing_on_demand_resources.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/214dh5q5d0kswh/214/214_hd_introducing_on_demand_resources.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/214dh5q5d0kswh/214/214_sd_introducing_on_demand_resources.mp4",
      "duration": 2650
    }
  }, {
    "id": "wwdc2015-509",
    "staticContentId": 682,
    "eventContentId": 509,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/509",
    "description": "Learn how to increase app engagement by using universal links to lead users directly to your App when they tap links to your website. Discover how Smart App Banners and Shared Web Credentials give your users the most integrated mobile experience possible.",
    "title": "Seamless Linking to Your App",
    "originalPublishingDate": "2015-06-11T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T15:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["download", "link", "password", "safari", "scheme"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5091mxk00t/509/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5091mxk00t/509/509_seamless_linking_to_your_app.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5091mxk00t/509/subtitles/eng/509_sd_seamless_linking_to_your_app.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5091mxk00t/509/509_hd_seamless_linking_to_your_app.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5091mxk00t/509/509_sd_seamless_linking_to_your_app.mp4",
      "duration": 2282
    }
  }, {
    "id": "wwdc2015-709",
    "staticContentId": 581,
    "eventContentId": 709,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/709",
    "description": "Making your app more discoverable leads to more downloads and generates revenue. iOS 9 adds a variety of ways to surface the rich content in your app making search results more relevant.  Understand how you can enhance search results with App History and CoreSpotlight.  See how small changes on your website can produce better Safari suggestions.  Gain insights into how deep app links can bring people directly where they want to go in your app, making your app's content even more discoverable and searchable than content on the traditional web.",
    "title": "Introducing Search APIs",
    "originalPublishingDate": "2015-06-10T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["continuity", "distribution", "handoff", "marketing", "markup", "nsuseractivity", "siri", "spotlight"],
    "topicIds": [67, 20, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/709jcaer6su/709/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/709jcaer6su/709/709_introducing_search_apis.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/709jcaer6su/709/subtitles/eng/709_sd_introducing_search_apis.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/709jcaer6su/709/709_hd_introducing_search_apis.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/709jcaer6su/709/709_sd_introducing_search_apis.mp4",
      "duration": 3319
    },
    "related": {
      "activities": ["wwdc2018-233", "wwdc2016-240"]
    }
  }, {
    "id": "wwdc2015-705",
    "staticContentId": 640,
    "eventContentId": 705,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/705",
    "description": "See what's new in Core Motion. Learn how your application can take advantage of the motion sensors on iOS devices. Walk through new features of the pedometer and learn how to use the altimeter to take your app to the next level. Get personal with motion APIs and sensor data on the Apple Watch. Run through a demo that uses motion-context awareness to make an application feel smarter!",
    "title": "What's New in Core Motion",
    "originalPublishingDate": "2015-06-09T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T15:30:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["accelerometer", "altimeter", "cmmotion", "coremotion", "cycling", "driving", "fitness", "floors", "gyroscope", "m7", "m8", "motion", "pedometer", "pedometer", "step", "steps", "walking", "watchkit"],
    "topicIds": [26, 14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/705qrxhfxo0/705/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/705qrxhfxo0/705/705_whats_new_in_core_motion.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/705qrxhfxo0/705/subtitles/eng/705_sd_whats_new_in_core_motion.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/705qrxhfxo0/705/705_hd_whats_new_in_core_motion.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/705qrxhfxo0/705/705_sd_whats_new_in_core_motion.mp4",
      "duration": 2388
    },
    "related": {
      "activities": ["wwdc2017-704"]
    }
  }, {
    "id": "wwdc2015-105",
    "staticContentId": 626,
    "eventContentId": 105,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/105",
    "description": "WatchKit for watchOS 2 introduces many new capabilities for creating responsive Watch experiences. Beyond a faster architecture, learn about all new support for the Digital Crown, fluid animations, and media playback and recording. Find out how to make use of accelerometer and heart rate data, as well as providing physical feedback via the Taptic Engine.",
    "title": "Introducing WatchKit for watchOS 2",
    "originalPublishingDate": "2015-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T10:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "alert", "audio", "clockkit", "complication", "connectivity", "corelocation", "coremotion", "extension", "foreground", "haptic", "healthkit", "heart rate", "layout", "mapkit", "microphone", "passbook", "passkit", "persistent", "picker", "security", "sensor", "vibration", "video", "wkinterface"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/105ncyldc6ofunvsgtan/105/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/105ncyldc6ofunvsgtan/105/105_introducing_watchkit_for_watchos_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/105ncyldc6ofunvsgtan/105/subtitles/eng/105_sd_introducing_watchkit_for_watchos_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/105ncyldc6ofunvsgtan/105/105_hd_introducing_watchkit_for_watchos_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/105ncyldc6ofunvsgtan/105/105_sd_introducing_watchkit_for_watchos_2.mp4",
      "duration": 1913
    }
  }, {
    "id": "wwdc2015-720",
    "staticContentId": 607,
    "eventContentId": 720,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/720",
    "description": "Remote notifications are sent by your server to the Apple Push Notification service, which pushes the notifications to each device. Your app may take different actions, such as displaying a message to the user or downloading new data. Find out about important changes to the provider protocol. Learn about enhancements to the way your app can respond to notifications.",
    "title": "What's New in Notifications",
    "originalPublishingDate": "2015-06-12T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["apns", "local", "notifications", "remote"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/720xwbi9nl/720/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/720xwbi9nl/720/720_whats_new_in_notifications.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/720xwbi9nl/720/subtitles/eng/720_sd_whats_new_in_notifications.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/720xwbi9nl/720/720_hd_whats_new_in_notifications.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/720xwbi9nl/720/720_sd_whats_new_in_notifications.mp4",
      "duration": 2084
    }
  }, {
    "id": "wwdc2015-209",
    "staticContentId": 623,
    "eventContentId": 209,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/209",
    "description": "Making your app's information available to users on Apple Watch is even easier in watchOS 2. Learn how to create custom complications for Watch faces using the new ClockKit framework and see how to provide data through numerous templates using text and images.",
    "title": "Creating Complications with ClockKit",
    "originalPublishingDate": "2015-06-10T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T11:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "complication", "connectivity", "digital", "extension", "face", "modular", "utilitarian", "wkinterface"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/209c9277tttlt9/209/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/209c9277tttlt9/209/209_creating_complications_with_clockkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/209c9277tttlt9/209/subtitles/eng/209_sd_creating_complications_with_clockkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/209c9277tttlt9/209/209_hd_creating_complications_with_clockkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/209c9277tttlt9/209/209_sd_creating_complications_with_clockkit.mp4",
      "duration": 3362
    },
    "related": {
      "activities": ["wwdc2019-253", "tech-talks-208"]
    }
  }, {
    "id": "wwdc2015-712",
    "staticContentId": 601,
    "eventContentId": 712,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/712",
    "description": "The Accelerate framework gives you fast, energy efficient signal and image processing and linear algebra libraries. Learn about a new library, dedicated to high performance compression. simd.h, introduced in iOS 8 and OS X 10.10, is the unified 2d and 3d math library for graphics and games. Find out how you can use simd.h and what's new in iOS 9 and OS X 10.11.",
    "title": "Low Energy, High Performance: Compression and Accelerate",
    "originalPublishingDate": "2015-06-11T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["accelerate", "compression", "numerics", "vector"],
    "topicIds": [30, 35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7125ovmdf36/712/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7125ovmdf36/712/712_low_energy_high_performance_compression_and_accelerate.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7125ovmdf36/712/subtitles/eng/712_sd_low_energy_high_performance_compression_and_accelerate.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7125ovmdf36/712/712_hd_low_energy_high_performance_compression_and_accelerate.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/7125ovmdf36/712/712_sd_low_energy_high_performance_compression_and_accelerate.mp4",
      "duration": 2133
    },
    "related": {
      "activities": ["wwdc2018-701"]
    }
  }, {
    "id": "wwdc2015-306",
    "staticContentId": 560,
    "eventContentId": 306,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/306",
    "description": "Automation is the life blood of any organization, providing speed, accuracy, and the ability to efficiently scale in-house processes. See how the automation technologies in OS X can easily and quickly configure shared-use iOS devices, generate, update, and distribute company documents and provide reliable desktop solutions for the back-office. With tools like Automator, AppleScript, and the new JavaScript for Automation (JXA), creating problem-solving solutions has become even easier and even more interesting.",
    "title": "Supporting the Enterprise with OS X Automation",
    "originalPublishingDate": "2015-06-11T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["applescript", "javascript", "javascriptcore", "jxa", "scriptable"],
    "topicIds": [70, 37],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/306vjwcqnm/306/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/306vjwcqnm/306/306_supporting_the_enterprise_with_os_x_automation.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/306vjwcqnm/306/subtitles/eng/306_sd_supporting_the_enterprise_with_os_x_automation.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/306vjwcqnm/306/306_hd_supporting_the_enterprise_with_os_x_automation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/306vjwcqnm/306/306_sd_supporting_the_enterprise_with_os_x_automation.mp4",
      "duration": 2937
    }
  }, {
    "id": "wwdc2015-804",
    "staticContentId": 595,
    "eventContentId": 804,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/804",
    "description": "Fonts lay at the intersection of design and engineering. Get introduced to typographic principles and how they apply to the San Francisco fonts. Hear what makes this family of fonts unique and how to effectively take advantage of their advanced features. Learn best practices when designing and implementing interfaces with text.",
    "title": "Introducing the New System Fonts",
    "originalPublishingDate": "2015-06-12T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T14:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [8, 6, 7, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/804eub264zh3x4j9yb/804/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/804eub264zh3x4j9yb/804/804_introducing_the_new_system_fonts.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/804eub264zh3x4j9yb/804/subtitles/eng/804_sd_introducing_the_new_system_fonts.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/804eub264zh3x4j9yb/804/804_hd_introducing_the_new_system_fonts.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/804eub264zh3x4j9yb/804/804_sd_introducing_the_new_system_fonts.mp4",
      "duration": 1946
    },
    "related": {
      "activities": ["wwdc2017-245"]
    }
  }, {
    "id": "wwdc2015-206",
    "staticContentId": 593,
    "eventContentId": 206,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/206",
    "description": "See what's new in MapKit. Learn about improvements to existing APIs and new ways of incorporating transit ETAs and Flyover map views in your app.",
    "title": "What's New in MapKit",
    "originalPublishingDate": "2015-06-09T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T16:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["annotation", "current location", "direction", "flyover", "geo", "hybrid", "imagery", "location", "map", "mapkit", "mapview", "mk", "mk", "overlay", "pin", "route", "satellite", "search", "standard", "tile", "transit"],
    "topicIds": [17],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/206v5ce46maax7s/206/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/206v5ce46maax7s/206/206_whats_new_in_mapkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/206v5ce46maax7s/206/subtitles/eng/206_sd_whats_new_in_mapkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/206v5ce46maax7s/206/206_hd_whats_new_in_mapkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/206v5ce46maax7s/206/206_sd_whats_new_in_mapkit.mp4",
      "duration": 2072
    }
  }, {
    "id": "wwdc2015-501",
    "staticContentId": 684,
    "eventContentId": 501,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/501",
    "description": "Learn about exciting new features in WebKit and Safari that will help you make your content feel alive. See compelling new interactions made possible by the Force Touch trackpad and enhanced scrolling support. Expand your design toolkit with high performance filters for stunning image and backdrop effects, and embrace the connected living room with updated AirPlay support.",
    "title": "What's New in Web Development in WebKit and Safari",
    "originalPublishingDate": "2015-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["css", "javascript", "performance", "safari"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/501g8vwlgg2/501/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/501g8vwlgg2/501/501_whats_new_in_web_development_in_webkit_and_safari.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/501g8vwlgg2/501/subtitles/eng/501_sd_whats_new_in_web_development_in_webkit_and_safari.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/501g8vwlgg2/501/501_hd_whats_new_in_web_development_in_webkit_and_safari.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/501g8vwlgg2/501/501_sd_whats_new_in_web_development_in_webkit_and_safari.mp4",
      "duration": 2570
    }
  }, {
    "id": "wwdc2015-505",
    "staticContentId": 685,
    "eventContentId": 505,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/505",
    "description": "Safari has a powerful new interface for designing responsive web experiences. Explore this great new feature and other new capabilities and improvements to the Web Inspector—WebKit's built-in development tool. Discover how you can use Safari and Web Inspector to powerfully and efficiently design, debug, and optimize for the web.",
    "title": "Using Safari to Deliver and Debug a Responsive Web Design",
    "originalPublishingDate": "2015-06-10T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["debugging", "design", "responsive"],
    "topicIds": [20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5059xl75l59/505/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5059xl75l59/505/505_using_safari_to_deliver_and_debug_a_responsive_web_design.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5059xl75l59/505/subtitles/eng/505_sd_using_safari_to_deliver_and_debug_a_responsive_web_design.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5059xl75l59/505/505_hd_using_safari_to_deliver_and_debug_a_responsive_web_design.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5059xl75l59/505/505_sd_using_safari_to_deliver_and_debug_a_responsive_web_design.mp4",
      "duration": 2285
    },
    "related": {
      "activities": ["wwdc2016-420"]
    }
  }, {
    "id": "wwdc2015-707",
    "staticContentId": 604,
    "eventContentId": 707,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/707",
    "description": "Learn why efficient software is the key to long battery life for both OS X and iOS devices. We'll explore where the energy in our batteries goes, how Apple hardware and software efficiently manage energy, and how you can make your code most efficient to ensure long battery life.",
    "title": "Achieving All-day Battery Life",
    "originalPublishingDate": "2015-06-10T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["battery", "instruments", "performance", "power"],
    "topicIds": [33, 35, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/707ysegpumy/707/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/707ysegpumy/707/707_achieving_allday_battery_life.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/707ysegpumy/707/subtitles/eng/707_sd_achieving_allday_battery_life.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/707ysegpumy/707/707_hd_achieving_allday_battery_life.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/707ysegpumy/707/707_sd_achieving_allday_battery_life.mp4",
      "duration": 2549
    }
  }, {
    "id": "wwdc2015-301",
    "staticContentId": 582,
    "eventContentId": 301,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/301",
    "description": "Learn about the latest developments in managing Apple devices in large organizations. Learn the latest techniques to wirelessly configure settings, monitor compliance with policies, install apps and bulk configure devices with ease.",
    "title": "What's New in Managing Apple Devices",
    "originalPublishingDate": "2015-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [44],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/301tcfp66f/301/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/301tcfp66f/301/301_whats_new_in_managing_apple_devices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/301tcfp66f/301/subtitles/eng/301_sd_whats_new_in_managing_apple_devices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/301tcfp66f/301/301_hd_whats_new_in_managing_apple_devices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/301tcfp66f/301/301_sd_whats_new_in_managing_apple_devices.mp4",
      "duration": 3143
    }
  }, {
    "id": "wwdc2015-710",
    "staticContentId": 680,
    "eventContentId": 710,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/710",
    "description": "CloudKit.js is the new library that provides web access to your app data stored in iCloud. Explore the new web service APIs and learn how to extend your iOS or OS X apps to the web using CloudKit.",
    "title": "CloudKit JS and Web Services",
    "originalPublishingDate": "2015-06-10T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T15:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["☁︎", "☁️", "ckcontainer", "ckdatabase", "ckquery", "cksubscription", "javascript", "rest"],
    "topicIds": [11, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/710jle9eakx/710/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/710jle9eakx/710/710_cloudkit_js_and_web_services.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/710jle9eakx/710/subtitles/eng/710_sd_cloudkit_js_and_web_services.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/710jle9eakx/710/710_hd_cloudkit_js_and_web_services.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/710jle9eakx/710/710_sd_cloudkit_js_and_web_services.mp4",
      "duration": 1941
    },
    "related": {
      "activities": ["wwdc2017-226"]
    }
  }, {
    "id": "wwdc2015-203",
    "staticContentId": 655,
    "eventContentId": 203,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/203",
    "description": "HealthKit is Apple's framework to centralize the data storage of personal health information. Hear about the latest enhancements to the framework, supporting new types of data, efficiently deleting objects, and integrating HealthKit into your Apple Watch app.",
    "title": "What's New in HealthKit",
    "originalPublishingDate": "2015-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T11:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["🎣", "🎾", "🎿", "🏀", "🏂", "🏃", "🏄", "🏆", "🏇", "🏈", "🏉", "🏊", "💃", "🚣", "🚲", "🚴", "🚵", "🚶", "⚽️", "⚾️", "⛳️", "fertility", "fitness", "hkhealthstore", "hkquery", "hksample", "menstruation", "ovulation", "period", "reproductive", "sexual activity", "track", "woman", "womens", "workout"],
    "topicIds": [14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/203bxvbtrom9t1t/203/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/203bxvbtrom9t1t/203/203_whats_new_in_healthkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/203bxvbtrom9t1t/203/subtitles/eng/203_sd_whats_new_in_healthkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/203bxvbtrom9t1t/203/203_hd_whats_new_in_healthkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/203bxvbtrom9t1t/203/203_sd_whats_new_in_healthkit.mp4",
      "duration": 2240
    },
    "related": {
      "activities": ["wwdc2016-209", "wwdc2016-235"]
    }
  }, {
    "id": "wwdc2015-207",
    "staticContentId": 625,
    "eventContentId": 207,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/207",
    "description": "watchOS 2 provides a new architecture that runs your WatchKit extension directly on Apple Watch. Take an in-depth look at how this new architecture works. Learn how to migrate existing WatchKit apps to watchOS 2, how to support both versions of watchOS, and hear about updates to Glances and Notifications.",
    "title": "WatchKit In-Depth, Part 1",
    "originalPublishingDate": "2015-06-10T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T09:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "alert", "extension", "wkinterface"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/207id8oiaxrt6lh/207/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/207id8oiaxrt6lh/207/207_watchkit_indepth_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/207id8oiaxrt6lh/207/subtitles/eng/207_sd_watchkit_indepth_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/207id8oiaxrt6lh/207/207_hd_watchkit_indepth_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/207id8oiaxrt6lh/207/207_sd_watchkit_indepth_part_1.mp4",
      "duration": 1821
    }
  }, {
    "id": "wwdc2015-414",
    "staticContentId": 696,
    "eventContentId": 414,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/414",
    "description": "Swift supports rich first-class value types in the form of powerful structs, which provide new ways to architect your apps. Learn about the differences between reference and value types, how value types help you elegantly solve common problems around mutability and thread safety, and discover how Swift's unique capabilities might change the way you think about abstraction.",
    "title": "Building Better Apps with Value Types in Swift",
    "originalPublishingDate": "2015-06-12T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["architecture", "copy on write", "design patterns", "extensions", "foundation", "protocols", "reference types", "uikit", "value semantics", "value types"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/414sklk5h2k3ki3/414/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/414sklk5h2k3ki3/414/414_building_better_apps_with_value_types_in_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/414sklk5h2k3ki3/414/subtitles/eng/414_sd_building_better_apps_with_value_types_in_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/414sklk5h2k3ki3/414/414_hd_building_better_apps_with_value_types_in_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/414sklk5h2k3ki3/414/414_sd_building_better_apps_with_value_types_in_swift.mp4",
      "duration": 2383
    },
    "related": {
      "activities": ["wwdc2016-419"]
    }
  }, {
    "id": "wwdc2015-805",
    "staticContentId": 484,
    "eventContentId": 805,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/805",
    "description": "Get essential design guidance for creating Apple Watch apps that support quick and efficient interaction, make accessing features and information more convenient, and compliment their companion iOS apps. Learn key tips about information architecture, layout, typography, color and app icon design that will make your app easy to use, beautiful and delightful.",
    "title": "Apple Watch Design Tips and Tricks",
    "originalPublishingDate": "2015-06-12T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T15:30:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "design", "digital crown", "experience", "icon", "interface", "layout", "typography", "ui", "watchkit", "wkinterface"],
    "topicIds": [3, 5, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/805yjy11epjkgmnn11/805/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/805yjy11epjkgmnn11/805/805_apple_watch_design_tips_and_tricks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/805yjy11epjkgmnn11/805/subtitles/eng/805_sd_apple_watch_design_tips_and_tricks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/805yjy11epjkgmnn11/805/805_hd_apple_watch_design_tips_and_tricks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/805yjy11epjkgmnn11/805/805_sd_apple_watch_design_tips_and_tricks.mp4",
      "duration": 3114
    }
  }, {
    "id": "wwdc2015-212",
    "staticContentId": 613,
    "eventContentId": 212,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/212",
    "description": "Multitasking in iOS 9 allows two side-by-side apps and the Picture-in-Picture window to simultaneously run onscreen at the same time. Discover essential techniques for designing efficient, responsive apps to give your users a fluid, immersive experience with Slide Over, Split View, and Picture-in-Picture.",
    "title": "Optimizing Your App for Multitasking on iPad in iOS 9",
    "originalPublishingDate": "2015-06-10T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T15:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [31, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/212mm5ra3oau66/212/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/212mm5ra3oau66/212/212_optimizing_your_app_for_multitasking_on_ipad_in_ios_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/212mm5ra3oau66/212/subtitles/eng/212_sd_optimizing_your_app_for_multitasking_on_ipad_in_ios_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/212mm5ra3oau66/212/212_hd_optimizing_your_app_for_multitasking_on_ipad_in_ios_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/212mm5ra3oau66/212/212_sd_optimizing_your_app_for_multitasking_on_ipad_in_ios_9.mp4",
      "duration": 2358
    }
  }, {
    "id": "wwdc2015-216",
    "staticContentId": 621,
    "eventContentId": 216,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/216",
    "description": "Advanced layouts and animations are essential to your app's interface. Gain insights into group layout mechanics and the new element animation APIs introduced in WatchKit for watchOS 2. Understand how to create layouts that work well with animations and learn other techniques to add liveliness to your apps.",
    "title": "Layout and Animation Techniques for WatchKit",
    "originalPublishingDate": "2015-06-11T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T10:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "extension", "layout", "wkinterface"],
    "topicIds": [24, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/216isrjt4ku9w4/216/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/216isrjt4ku9w4/216/216_layout_and_animation_techniques_for_watchkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/216isrjt4ku9w4/216/subtitles/eng/216_sd_layout_and_animation_techniques_for_watchkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/216isrjt4ku9w4/216/216_hd_layout_and_animation_techniques_for_watchkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/216isrjt4ku9w4/216/216_sd_layout_and_animation_techniques_for_watchkit.mp4",
      "duration": 2189
    }
  }, {
    "id": "wwdc2015-231",
    "staticContentId": 610,
    "eventContentId": 231,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/231",
    "description": "Small improvements can make a big impact on your iOS app's performance and launch time. Learn best practices to optimize your UIKit-based applications. See how to future-proof your app for what may be next, and walk through numerous real world examples for more responsive and dynamic collection and table views.",
    "title": "Cocoa Touch Best Practices",
    "originalPublishingDate": "2015-06-12T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T13:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2313dt427pmq/231/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2313dt427pmq/231/231_cocoa_touch_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2313dt427pmq/231/subtitles/eng/231_sd_cocoa_touch_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2313dt427pmq/231/231_hd_cocoa_touch_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2313dt427pmq/231/231_sd_cocoa_touch_best_practices.mp4",
      "duration": 2198
    }
  }, {
    "id": "wwdc2015-609",
    "staticContentId": 479,
    "eventContentId": 609,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/609",
    "description": "Dive into the tools and technologies used to construct the DemoBots developer sample. Gain a practical understanding of how DemoBots implements its gameplay logic with GameplayKit and visuals using SpriteKit.  See how the sample integrates On Demand Resources and other system services.",
    "title": "Deeper into GameplayKit with DemoBots",
    "originalPublishingDate": "2015-06-11T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T13:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["gameplaykit", "spritekit"],
    "topicIds": [24, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/609pzlyunriyjupp/609/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/609pzlyunriyjupp/609/609_deeper_into_gameplaykit_with_demobots.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/609pzlyunriyjupp/609/subtitles/eng/609_sd_deeper_into_gameplaykit_with_demobots.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/609pzlyunriyjupp/609/609_hd_deeper_into_gameplaykit_with_demobots.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/609pzlyunriyjupp/609/609_sd_deeper_into_gameplaykit_with_demobots.mp4",
      "duration": 2402
    }
  }, {
    "id": "wwdc2015-101",
    "staticContentId": 552,
    "eventContentId": 101,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/101",
    "description": "WWDC 2015 Keynote",
    "title": "Keynote",
    "originalPublishingDate": "2015-06-08T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-08T10:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1014o78qhj07pbfxt9g7/101/hls_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1014o78qhj07pbfxt9g7/101/subtitles/eng/101_sd_keynote.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1014o78qhj07pbfxt9g7/101/101_hd_keynote.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/1014o78qhj07pbfxt9g7/101/101_sd_keynote.mp4",
      "duration": 8409
    },
    "related": {
      "activities": ["wwdc2018-101"]
    }
  }, {
    "id": "wwdc2015-204",
    "staticContentId": 627,
    "eventContentId": 204,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/204",
    "description": "Building on the strong accessibility support in iOS, Apple Watch offers assistive features like VoiceOver and Zoom.  Gain insights into how these accessibility features work on Apple Watch, and how to make sure your app can be accessible to all users.",
    "title": "Apple Watch Accessibility",
    "originalPublishingDate": "2015-06-09T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T13:30:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["blind", "braille", "caption", "color blindness", "deaf", "disabled", "dynamic type", "guided access", "hearing aid", "motion", "speech", "subtitle", "uifont", "vision", "voiceover", "zoom"],
    "topicIds": [8],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2048w4vdjhe1i1m/204/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2048w4vdjhe1i1m/204/204_apple_watch_accessibility.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2048w4vdjhe1i1m/204/subtitles/eng/204_sd_apple_watch_accessibility.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2048w4vdjhe1i1m/204/204_hd_apple_watch_accessibility.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2048w4vdjhe1i1m/204/204_sd_apple_watch_accessibility.mp4",
      "duration": 1841
    }
  }, {
    "id": "wwdc2015-226",
    "staticContentId": 594,
    "eventContentId": 226,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/226",
    "description": "Operations are a flexible way to model your app's business logic, but they can do so much more. See how NSOperation forms the heart of the WWDC app, and how using features like dependencies, readiness, and composition allow you to quickly and easily build dynamic and complex apps.",
    "title": "Advanced NSOperations",
    "originalPublishingDate": "2015-06-12T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["asynchronous", "condition", "gcd", "grand central dispatch", "nsoperationqueue"],
    "topicIds": [32, 67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2267p2ni281ba/226/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2267p2ni281ba/226/226_advanced_nsoperations.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2267p2ni281ba/226/subtitles/eng/226_sd_advanced_nsoperations.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2267p2ni281ba/226/226_hd_advanced_nsoperations.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2267p2ni281ba/226/226_sd_advanced_nsoperations.mp4",
      "duration": 2655
    },
    "related": {
      "activities": ["wwdc2016-227"]
    }
  }, {
    "id": "wwdc2015-605",
    "staticContentId": 644,
    "eventContentId": 605,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/605",
    "description": "ReplayKit provides an easy-to-use framework that lets players record their gameplay — amazing plays, great victories, or solutions to tough challenges — and share video with other players and viewers online. Get introduced to the ReplayKit framework and see how to enable its capability for sharing game video and audio in your games and other apps. Then get the latest news about Game Center, Apple's social gaming network. Learn about the new model for pre-release testing with Game Center and enhancements for multiplayer games.",
    "title": "Going Social with ReplayKit and Game Center",
    "originalPublishingDate": "2015-06-10T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["capture", "game center", "guest", "multiplayer", "narrate", "production", "record", "replay", "sandbox", "screen", "share", "share sheet", "sheet", "video"],
    "topicIds": [26, 13, 18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6053hq2fz0ebo0lm/605/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6053hq2fz0ebo0lm/605/605_going_social_with_replaykit_and_game_center.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6053hq2fz0ebo0lm/605/subtitles/eng/605_sd_going_social_with_replaykit_and_game_center.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6053hq2fz0ebo0lm/605/605_hd_going_social_with_replaykit_and_game_center.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6053hq2fz0ebo0lm/605/605_sd_going_social_with_replaykit_and_game_center.mp4",
      "duration": 2096
    }
  }, {
    "id": "wwdc2015-610",
    "staticContentId": 651,
    "eventContentId": 610,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/610",
    "description": "Learn best practices to maximize the efficiency of your Metal based apps and attain high frame rates. Gain insight into powerful tools for analyzing and optimizing performance for both the CPU and GPU. Discover how to identify bottlenecks, tune performance hot-spots, and overcome any hurdles that could keep your app from reaching its potential.",
    "title": "Metal Performance Optimization Techniques",
    "originalPublishingDate": "2015-06-12T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "capture", "compute", "drawable", "encoder", "frame", "frame debugger", "gpgpu", "gpu", "metl", "mtl", "opengl", "opengl es", "optimize", "render", "renderer", "shader", "simd", "xcode"],
    "topicIds": [33, 35, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/610kn68riy9ms89m/610/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/610kn68riy9ms89m/610/610_metal_performance_optimization_techniques.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/610kn68riy9ms89m/610/subtitles/eng/610_sd_metal_performance_optimization_techniques.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/610kn68riy9ms89m/610/610_hd_metal_performance_optimization_techniques.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/610kn68riy9ms89m/610/610_sd_metal_performance_optimization_techniques.mp4",
      "duration": 3473
    },
    "related": {
      "activities": ["wwdc2019-221"]
    }
  }, {
    "id": "wwdc2015-803",
    "staticContentId": 638,
    "eventContentId": 803,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/803",
    "description": "Animation is a powerful tool for creating a delightful and intuitive app experience. We will show you how to get started with animations, how to make them effective for your user interface, and how to save time coding by building animations into interactive prototypes.",
    "title": "Designing with Animation",
    "originalPublishingDate": "2015-06-11T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T15:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["animation", "design", "interaction", "layout", "prototype", "prototyping", "ui", "user interface"],
    "topicIds": [3, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/803q4kw6eqia7ssp17/803/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/803q4kw6eqia7ssp17/803/803_designing_with_animation.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/803q4kw6eqia7ssp17/803/subtitles/eng/803_sd_designing_with_animation.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/803q4kw6eqia7ssp17/803/803_hd_designing_with_animation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/803q4kw6eqia7ssp17/803/803_sd_designing_with_animation.mp4",
      "duration": 2402
    }
  }, {
    "id": "wwdc2015-220",
    "staticContentId": 656,
    "eventContentId": 220,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/220",
    "description": "Learn about the latest enhancements to the Core Data framework. Hear how to efficiently delete objects, ensure uniqueness, and easily migrate your persistent stores to new locations.",
    "title": "What's New in Core Data",
    "originalPublishingDate": "2015-06-11T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T14:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["batch", "database", "delete", "model", "nsfetchrequest", "nsmanagedobjectcontext", "query", "sqlite", "update"],
    "topicIds": [11],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/220lgx5lvphj2/220/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/220lgx5lvphj2/220/220_whats_new_in_core_data.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/220lgx5lvphj2/220/subtitles/eng/220_sd_whats_new_in_core_data.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/220lgx5lvphj2/220/220_hd_whats_new_in_core_data.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/220lgx5lvphj2/220/220_sd_whats_new_in_core_data.mp4",
      "duration": 1785
    }
  }, {
    "id": "wwdc2015-205",
    "staticContentId": 615,
    "eventContentId": 205,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/205",
    "description": "iOS 9 on iPad introduces the ability to view and interact with more than one app at a time. Discover how to update your code to take advantage of enhancements to multitasking and how to participate in Slide Over and Split View. Learn specifics about how to architect your app and understand best practices for adapting to a dynamically sized interface.",
    "title": "Getting Started with Multitasking on iPad in iOS 9",
    "originalPublishingDate": "2015-06-09T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T16:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2058z3fx76huw93/205/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2058z3fx76huw93/205/205_getting_started_with_multitasking_on_ipad_in_ios_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2058z3fx76huw93/205/subtitles/eng/205_sd_getting_started_with_multitasking_on_ipad_in_ios_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2058z3fx76huw93/205/205_hd_getting_started_with_multitasking_on_ipad_in_ios_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/2058z3fx76huw93/205/205_sd_getting_started_with_multitasking_on_ipad_in_ios_9.mp4",
      "duration": 3350
    }
  }, {
    "id": "wwdc2015-702",
    "staticContentId": 606,
    "eventContentId": 702,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/702",
    "description": "Apple Pay is the easy, secure, and private way to pay for physical goods and services within apps on iPhone 6, iPad Air 2, and iPad mini 3. Find out how you can increase conversion rates in your checkout experience by integrating with Apple Pay APIs. And learn more about what's new with Apple Pay within apps in iOS 9.",
    "title": "Apple Pay Within Apps",
    "originalPublishingDate": "2015-06-09T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T11:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["apple pay", "design", "passbook"],
    "topicIds": [10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/702lp563ezbr/702/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/702lp563ezbr/702/702_apple_pay_within_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/702lp563ezbr/702/subtitles/eng/702_sd_apple_pay_within_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/702lp563ezbr/702/702_hd_apple_pay_within_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/702lp563ezbr/702/702_sd_apple_pay_within_apps.mp4",
      "duration": 3215
    }
  }, {
    "id": "wwdc2015-409",
    "staticContentId": 698,
    "eventContentId": 409,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/409",
    "description": "Hear from the experts about how you can write faster Swift code and use Instruments to identify performance bottlenecks. Dive deep into specific techniques that will help you produce the most efficient code possible.",
    "title": "Optimizing Swift Performance",
    "originalPublishingDate": "2015-06-11T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["accelerate", "arc", "compiler", "final", "generics", "instruments", "optimizer", "private", "profiling", "retain count", "time profiler", "whole module optimization"],
    "topicIds": [35, 36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4097c25o0qhs6g5/409/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4097c25o0qhs6g5/409/409_optimizing_swift_performance.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4097c25o0qhs6g5/409/subtitles/eng/409_sd_optimizing_swift_performance.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4097c25o0qhs6g5/409/409_hd_optimizing_swift_performance.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4097c25o0qhs6g5/409/409_sd_optimizing_swift_performance.mp4",
      "duration": 2520
    },
    "related": {
      "activities": ["wwdc2018-407"]
    }
  }, {
    "id": "wwdc2015-230",
    "staticContentId": 587,
    "eventContentId": 230,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/230",
    "description": "Great performance is a prerequisite for delivering a compelling and immersive app experience that keeps users engaged. Learn best practices and strategies for characterizing and improving the performance of your code for iPhone, iPad, and Apple Watch.",
    "title": "Performance on iOS and watchOS",
    "originalPublishingDate": "2015-06-12T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T11:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "topicIds": [35],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/230wt8hs0wt8/230/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/230wt8hs0wt8/230/230_performance_on_ios_and_watchos.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/230wt8hs0wt8/230/subtitles/eng/230_sd_performance_on_ios_and_watchos.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/230wt8hs0wt8/230/230_hd_performance_on_ios_and_watchos.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/230wt8hs0wt8/230/230_sd_performance_on_ios_and_watchos.mp4",
      "duration": 2225
    }
  }, {
    "id": "wwdc2015-706",
    "staticContentId": 602,
    "eventContentId": 706,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/706",
    "description": "Your reputation depends on protecting your users' data. Do this by taking advantage of the Security frameworks built into iOS, OS X and watchOS. Find out about new developments in Security and learn the best practices to develop secure apps and protect your users' data.",
    "title": "Security and Your Apps",
    "originalPublishingDate": "2015-06-09T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T16:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["ats", "gatekeeper", "kext", "keychain", "rootless", "sandbox", "security", "signing", "system"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/706nu20qkag/706/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/706nu20qkag/706/706_security_and_your_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/706nu20qkag/706/subtitles/eng/706_sd_security_and_your_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/706nu20qkag/706/706_hd_security_and_your_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/706nu20qkag/706/706_sd_security_and_your_apps.mp4",
      "duration": 3082
    }
  }, {
    "id": "wwdc2015-224",
    "staticContentId": 617,
    "eventContentId": 224,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/224",
    "description": "App extensions allow powerful ways to expose your application's abilities throughout iOS and other apps. Discover best practices for various extension types and see how to effectively communicate between your extension and its parent application or the network. Learn techniques for using the shared keychain and see how to improve discovery of your share and action extensions.",
    "title": "App Extension Best Practices",
    "originalPublishingDate": "2015-06-11T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T16:30:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["action", "extension", "networking", "security", "share", "snapshotting", "today", "widget"],
    "topicIds": [13],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/224o6pqmtb4ik/224/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/224o6pqmtb4ik/224/224_app_extension_best_practices.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/224o6pqmtb4ik/224/subtitles/eng/224_sd_app_extension_best_practices.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/224o6pqmtb4ik/224/224_hd_app_extension_best_practices.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/224o6pqmtb4ik/224/224_sd_app_extension_best_practices.mp4",
      "duration": 2724
    },
    "related": {
      "activities": ["wwdc2016-214", "wwdc2016-225"]
    }
  }, {
    "id": "wwdc2015-401",
    "staticContentId": 701,
    "eventContentId": 401,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/401",
    "description": "Discover new features that make it easier than ever to craft Objective-C APIs that work beautifully in Swift, as well as new Swift language features that provide even better interoperability. Apple engineers will also discuss enhancements to Apple's SDKs that improve the Swift experience.",
    "title": "Swift and Objective-C Interoperability",
    "originalPublishingDate": "2015-06-09T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T13:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["enums", "frameworks", "function pointers", "generics", "kindof", "lightweight generics", "macros", "modernizations", "nullability", "objc", "obj-c", "objective-c", "sdk", "typed collections"],
    "topicIds": [32, 36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/401gee20yy5v2men/401/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/401gee20yy5v2men/401/401_swift_and_objectivec_interoperability.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/401gee20yy5v2men/401/subtitles/eng/401_sd_swift_and_objectivec_interoperability.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/401gee20yy5v2men/401/401_hd_swift_and_objectivec_interoperability.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/401gee20yy5v2men/401/401_sd_swift_and_objectivec_interoperability.mp4",
      "duration": 2140
    }
  }, {
    "id": "wwdc2015-232",
    "staticContentId": 629,
    "eventContentId": 232,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/232",
    "description": "NSProgress lets you easily and accurately report the progress of work in your app. Understand the concepts behind progress reporting and how to design code that accurately and efficiently reports its progress. Gain specific insights on how to receive progress updates from framework APIs, fold that into your own progress reporting, and show that progress in your app. Hear from the experts about best practices and how to master the NSProgress APIs.",
    "title": "Best Practices for Progress Reporting",
    "originalPublishingDate": "2015-06-12T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "topicIds": [67],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/232f1zopzycv/232/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/232f1zopzycv/232/232_best_practices_for_progress_reporting.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/232f1zopzycv/232/subtitles/eng/232_sd_best_practices_for_progress_reporting.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/232f1zopzycv/232/232_hd_best_practices_for_progress_reporting.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/232f1zopzycv/232/232_sd_best_practices_for_progress_reporting.mp4",
      "duration": 2257
    }
  }, {
    "id": "wwdc2015-234",
    "staticContentId": 609,
    "eventContentId": 234,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/234",
    "description": "UIDocument is a robust way to model user-generated content in your app. See how to easily integrate your app's documents with iCloud, file extensions, and document browsers. Learn how to build a document-based app from the ground up.",
    "title": "Building Document Based Apps",
    "originalPublishingDate": "2015-06-12T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-12T14:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["📃", "📄", "📈", "📉", "📊", "📑", "📝", "document browser", "file provider", "nsfilecoordination", "nsfilewrapper"],
    "topicIds": [11, 13, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/234reaz1byqc/234/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/234reaz1byqc/234/234_building_document_based_apps.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/234reaz1byqc/234/subtitles/eng/234_sd_building_document_based_apps.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/234reaz1byqc/234/234_hd_building_document_based_apps.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/234reaz1byqc/234/234_sd_building_document_based_apps.mp4",
      "duration": 2357
    },
    "related": {
      "activities": ["wwdc2017-231", "wwdc2017-243"]
    }
  }, {
    "id": "wwdc2015-506",
    "staticContentId": 650,
    "eventContentId": 506,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/506",
    "description": "Learn how to use the new AVMutableMovie class to modify media files and simplify your editing workflows. See how to support segment-based editing and discover the power of sample reference movies.",
    "title": "Editing Movies in AV Foundation",
    "originalPublishingDate": "2015-06-10T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T15:30:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["av foundation", "avmovie", "moov", "mov", "quicktime", "video"],
    "topicIds": [31],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5062qehwhs/506/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5062qehwhs/506/506_editing_movies_in_av_foundation.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5062qehwhs/506/subtitles/eng/506_sd_editing_movies_in_av_foundation.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5062qehwhs/506/506_hd_editing_movies_in_av_foundation.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/5062qehwhs/506/506_sd_editing_movies_in_av_foundation.mp4",
      "duration": 2151
    }
  }, {
    "id": "wwdc2015-103",
    "staticContentId": 571,
    "eventContentId": 103,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/103",
    "description": "Join us for an unforgettable award ceremony celebrating developers and their outstanding work. The 2015 Apple Design Awards recognize state of the art iOS, OS X, and Apple Watch apps that reflect excellence in design and innovation.",
    "title": "Apple Design Awards",
    "originalPublishingDate": "2015-06-08T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-08T16:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "topicIds": [1],
    "type": "Special Event",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/103ot7lzkdri2fvn1iyh/103/hls_vod_mvp.m3u8",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/103ot7lzkdri2fvn1iyh/103/subtitles/eng/103_sd_apple_design_awards.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/103ot7lzkdri2fvn1iyh/103/103_hd_apple_design_awards.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/103ot7lzkdri2fvn1iyh/103/103_sd_apple_design_awards.mp4",
      "duration": 3437
    },
    "related": {
      "activities": ["wwdc2018-103"]
    }
  }, {
    "id": "wwdc2015-701",
    "staticContentId": 598,
    "eventContentId": 701,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/701",
    "description": "Passbook is now Wallet.  Wallet stores your coupons, boarding passes, event tickets, and even the credit and debit cards you use with Apple Pay. In iOS 9, Wallet makes the Apple Pay experience even better and integrates more with Apple Watch.  Learn about the Wallet app, new kinds of passes, and how your app can integrate and interact with Wallet.",
    "title": "Wallet - The home for Apple Pay and more",
    "originalPublishingDate": "2015-06-09T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T10:00:00-07:00",
    "platforms": ["iOS", "watchOS"],
    "keywords": ["pass", "passbook", "pay", "wallet"],
    "topicIds": [10],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/701i2qis0reg/701/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/701i2qis0reg/701/701_wallet__the_home_for_apple_pay_and_more.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/701i2qis0reg/701/subtitles/eng/701_sd_wallet__the_home_for_apple_pay_and_more.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/701i2qis0reg/701/701_hd_wallet__the_home_for_apple_pay_and_more.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/701i2qis0reg/701/701_sd_wallet__the_home_for_apple_pay_and_more.mp4",
      "duration": 1863
    }
  }, {
    "id": "wwdc2015-104",
    "staticContentId": 695,
    "eventContentId": 104,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/104",
    "description": "Xcode is the development environment for creating great apps for Apple's platforms. Start the week by watching the Xcode team demonstrate the latest features and improved workflows in Xcode 7. This session also provides a complete overview of the in-depth developer tools topics covered at WWDC 2015.",
    "title": "What's New in Xcode",
    "originalPublishingDate": "2015-06-09T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-09T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["address sanitizer", "asset catalogs", "assets", "automation", "buffer overflow", "ci", "code coverage", "continuous integration", "crash", "crash logs", "debugging", "distribution", "ib", "interface builder", "memory", "odr", "on demand resources", "recording", "resources", "slimming", "storyboards", "testing", "thinning", "ui automation", "ui testing", "watch", "watch kit", "xcode server", "xctest"],
    "topicIds": [38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/104usewvb5m0qbwafx8p/104/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/104usewvb5m0qbwafx8p/104/104_whats_new_in_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/104usewvb5m0qbwafx8p/104/subtitles/eng/104_sd_whats_new_in_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/104usewvb5m0qbwafx8p/104/104_hd_whats_new_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/104usewvb5m0qbwafx8p/104/104_sd_whats_new_in_xcode.mp4",
      "duration": 2244
    }
  }, {
    "id": "wwdc2015-603",
    "staticContentId": 652,
    "eventContentId": 603,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/603",
    "description": "Metal provides extremely efficient access to the GPU through its streamlined API and high-performance architecture. Check out what's new in Metal and dive into support for Metal on OS X. Understand enhancements to the Metal memory model and learn how to prepare assets for delivery in Metal-based apps and games.",
    "title": "What's New in Metal, Part 1",
    "originalPublishingDate": "2015-06-09T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T15:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "compute", "discrete", "frame debugger", "gpgpu", "gpu", "metl", "mtl", "opengl", "opengl es", "renderer", "shader", "simd", "thinning", "xcode"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6037pi9rxl6tfss8w/603/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6037pi9rxl6tfss8w/603/603_whats_new_in_metal_part_1.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6037pi9rxl6tfss8w/603/subtitles/eng/603_sd_whats_new_in_metal_part_1.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6037pi9rxl6tfss8w/603/603_hd_whats_new_in_metal_part_1.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/6037pi9rxl6tfss8w/603/603_sd_whats_new_in_metal_part_1.mp4",
      "duration": 2199
    }
  }, {
    "id": "wwdc2015-404",
    "staticContentId": 589,
    "eventContentId": 404,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/404",
    "description": "The app distribution pipeline is becoming more powerful and flexible. Learn to create full featured apps that are delivered to users devices with new App Thinning features such as slicing and ODR. See how to integrate these new features into your continuous integration and testing processes, and discover workflows for creating on-demand, tailored content.",
    "title": "App Thinning in Xcode",
    "originalPublishingDate": "2015-06-10T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["app store", "distribution", "odr", "on-demand resources", "slicing", "slimming", "xcode", "xcode-build", "xcode server"],
    "topicIds": [35, 37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/404l17yio30l549x/404/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/404l17yio30l549x/404/404_app_thinning_in_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/404l17yio30l549x/404/subtitles/eng/404_sd_app_thinning_in_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/404l17yio30l549x/404/404_hd_app_thinning_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/404l17yio30l549x/404/404_sd_app_thinning_in_xcode.mp4",
      "duration": 2427
    }
  }, {
    "id": "wwdc2015-219",
    "staticContentId": 693,
    "eventContentId": 219,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/219",
    "description": "Continue your pursuit of Auto Layout mastery. Gain high level insight into how Auto Layout works, and strategies for debugging layout issues. Learn how to use new APIs for constraint creation and layout guides to build more complex layouts.",
    "title": "Mysteries of Auto Layout, Part 2",
    "originalPublishingDate": "2015-06-11T13:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T13:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["adaptive", "adaptivity", "alignment", "ambiguity", "ambiguous", "autolayout", "constraint", "debug", "debugging", "guide", "logs", "nssplitview", "nsview", "sidebar", "storyboard", "uiview", "unsatisfiable constraints", "visual format", "xcode"],
    "topicIds": [33, 34, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/219u3bqgvsz2g/219/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/219u3bqgvsz2g/219/219_mysteries_of_auto_layout_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/219u3bqgvsz2g/219/subtitles/eng/219_sd_mysteries_of_auto_layout_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/219u3bqgvsz2g/219/219_hd_mysteries_of_auto_layout_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/219u3bqgvsz2g/219/219_sd_mysteries_of_auto_layout_part_2.mp4",
      "duration": 2234
    },
    "related": {
      "activities": ["wwdc2018-203", "wwdc2018-220", "wwdc2016-236"]
    }
  }, {
    "id": "wwdc2015-713",
    "staticContentId": 619,
    "eventContentId": 713,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/713",
    "description": "Getting information to your Watch app is crucial. Learn how to leverage NSURLSession to get your data from the Internet. Tap into the new WatchConnectivity framework for device to device communication and transferring of data. See real-world examples and learn best practices to understand when to use your WatchKit extension and when to leverage your iPhone app.",
    "title": "Introducing Watch Connectivity",
    "originalPublishingDate": "2015-06-11T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T11:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "clockkit", "complication", "connectivity", "extension", "networking", "wkinterface"],
    "topicIds": [13, 18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/713gc2tqvvb/713/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/713gc2tqvvb/713/713_introducing_watch_connectivity.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/713gc2tqvvb/713/subtitles/eng/713_sd_introducing_watch_connectivity.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/713gc2tqvvb/713/713_hd_introducing_watch_connectivity.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/713gc2tqvvb/713/713_sd_introducing_watch_connectivity.mp4",
      "duration": 3444
    }
  }, {
    "id": "wwdc2015-602",
    "staticContentId": 646,
    "eventContentId": 602,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/602",
    "description": "Model I/O provides a seamless infrastructure for accessing and managing 3D models. Its high-performance architecture supports reading and writing popular mesh and model formats, textures, and materials. Get introduced to the Model I/O framework and learn key details about its integration with SceneKit, MetalKit, and GLKit.",
    "title": "Managing 3D Assets with Model I/O",
    "originalPublishingDate": "2015-06-09T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T14:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["abc", "ambient", "camera", "dome", "light", "mesh", "mkasset", "modelio", "modelkit", "obj", "occlusion", "opensubdiv", "sky", "skybox", "stl", "subdivide", "texture"],
    "topicIds": [25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/602868pb0ow6idb3w/602/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/602868pb0ow6idb3w/602/602_managing_3d_assets_with_model_io.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/602868pb0ow6idb3w/602/subtitles/eng/602_sd_managing_3d_assets_with_model_io.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/602868pb0ow6idb3w/602/602_hd_managing_3d_assets_with_model_io.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/602868pb0ow6idb3w/602/602_sd_managing_3d_assets_with_model_io.mp4",
      "duration": 2566
    }
  }, {
    "id": "wwdc2015-606",
    "staticContentId": 642,
    "eventContentId": 606,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/606",
    "description": "SceneKit is a high-level graphics framework that helps you create 3D animated scenes and effects in your apps. See how to take advantage of the new capabilities and performance gains enabled by SceneKit's new Metal-based renderer. Check out the innovative Scene Editor, enabling you to build game levels and other scenes directly within Xcode. Learn about new features for realistic shading, enhancements for physics, and dynamic spatial audio.",
    "title": "Enhancements to SceneKit",
    "originalPublishingDate": "2015-06-10T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T14:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "bananas", "collada", "dae", "graph", "graphics", "inverse kinematics", "opengl", "opengl", "opensubdiv", "physics", "rendering", "scene", "scnlayer", "scnnode", "scnview"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/606ui2ppsvalj4nn/606/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/606ui2ppsvalj4nn/606/606_enhancements_to_scenekit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/606ui2ppsvalj4nn/606/subtitles/eng/606_sd_enhancements_to_scenekit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/606ui2ppsvalj4nn/606/606_hd_enhancements_to_scenekit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/606ui2ppsvalj4nn/606/606_sd_enhancements_to_scenekit.mp4",
      "duration": 2000
    }
  }, {
    "id": "wwdc2015-208",
    "staticContentId": 624,
    "eventContentId": 208,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/208",
    "description": "Move beyond architecture changes for Watch apps and explore the different ways you can use the Digital Crown to enhance your apps. Find out how to create persistent app experiences to keep your Watch app at the ready for users and learn how to use the playback and recording APIs to add audio and video to your Watch apps.",
    "title": "WatchKit In-Depth, Part 2",
    "originalPublishingDate": "2015-06-10T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T10:00:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "audio", "extension", "foreground", "healthkit", "heart rate", "microphone", "persistent", "picker", "security", "sensor", "video", "wkinterface"],
    "topicIds": [28, 35, 31, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/208wc2mdvock1md/208/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/208wc2mdvock1md/208/208_watchkit_indepth_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/208wc2mdvock1md/208/subtitles/eng/208_sd_watchkit_indepth_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/208wc2mdvock1md/208/208_hd_watchkit_indepth_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/208wc2mdvock1md/208/208_sd_watchkit_indepth_part_2.mp4",
      "duration": 2244
    }
  }, {
    "id": "wwdc2015-704",
    "staticContentId": 681,
    "eventContentId": 704,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/704",
    "description": "CloudKit is the framework that powers iCloud on iOS, OS X, and now iCloud on the web. Hear how we've been working to make CloudKit more accessible to all your users with the web services API and Javascript library. Learn about reporting available in the updated Dashboard and the new, more flexible public database storage pricing.",
    "title": "What's New in CloudKit",
    "originalPublishingDate": "2015-06-09T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T15:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["☁︎", "☁️", "ckcontainer", "ckdatabase", "ckquery", "cksubscription", "javascript", "rest"],
    "topicIds": [11, 20],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/704ci202euy/704/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/704ci202euy/704/704_whats_new_in_cloudkit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/704ci202euy/704/subtitles/eng/704_sd_whats_new_in_cloudkit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/704ci202euy/704/704_hd_whats_new_in_cloudkit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/704ci202euy/704/704_sd_whats_new_in_cloudkit.mp4",
      "duration": 1571
    },
    "related": {
      "activities": ["wwdc2017-226"]
    }
  }, {
    "id": "wwdc2015-405",
    "staticContentId": 692,
    "eventContentId": 405,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/405",
    "description": "Learn about the new features in Xcode playgrounds such as inline results, auxiliary sources and resources, multiple pages, and markup for formatted text. Find out how to explore programming problems in a playground, and create engaging experiences for teaching and learning.",
    "title": "Authoring Rich Playgrounds",
    "originalPublishingDate": "2015-06-10T10:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T10:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["education", "educators", "markdown", "mirrors", "swift", "teacher", "textbooks"],
    "topicIds": [36, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/405t69ymgwkmfzc9/405/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/405t69ymgwkmfzc9/405/405_authoring_rich_playgrounds.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/405t69ymgwkmfzc9/405/subtitles/eng/405_sd_authoring_rich_playgrounds.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/405t69ymgwkmfzc9/405/405_hd_authoring_rich_playgrounds.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/405t69ymgwkmfzc9/405/405_sd_authoring_rich_playgrounds.mp4",
      "duration": 2060
    }
  }, {
    "id": "wwdc2015-211",
    "staticContentId": 614,
    "eventContentId": 211,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/211",
    "description": "iOS 9 on iPad introduces the ability to view and interact with more than one app at a time. Learn advanced techniques for efficiently sharing resources and presenting media while other apps are in the foreground. Tap into the potential of Picture in Picture to allow your video content to play above other apps, and explore multitasking best practices for creating great experiences in this environment.",
    "title": "Multitasking Essentials for Media-Based Apps on iPad in iOS 9",
    "originalPublishingDate": "2015-06-10T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T14:30:00-07:00",
    "platforms": ["iOS"],
    "topicIds": [31, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/211dseo3cn0bnw/211/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/211dseo3cn0bnw/211/211_multitasking_essentials_for_mediabased_apps_on_ipad_in_ios_9.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/211dseo3cn0bnw/211/subtitles/eng/211_sd_multitasking_essentials_for_mediabased_apps_on_ipad_in_ios_9.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/211dseo3cn0bnw/211/211_hd_multitasking_essentials_for_mediabased_apps_on_ipad_in_ios_9.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/211dseo3cn0bnw/211/211_sd_multitasking_essentials_for_mediabased_apps_on_ipad_in_ios_9.mp4",
      "duration": 2118
    }
  }, {
    "id": "wwdc2015-225",
    "staticContentId": 599,
    "eventContentId": 225,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/225",
    "description": "NSCollectionView has been displaying grids of views for many years.  OS X 10.11 brings a major update to the capabilities of NSCollectionView.  Much of the design of UICollectionView in iOS is now available for OS X apps.  Understand the details of the enhancements and how you can harness them in your apps.",
    "title": "What's New in NSCollectionView",
    "originalPublishingDate": "2015-06-11T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T16:30:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["appkit", "autolayout", "auto layout", "custom control", "dynamic", "layout", "nsview"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/225629tzulwe0/225/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/225629tzulwe0/225/225_whats_new_in_nscollectionview.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/225629tzulwe0/225/subtitles/eng/225_sd_whats_new_in_nscollectionview.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/225629tzulwe0/225/225_hd_whats_new_in_nscollectionview.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/225629tzulwe0/225/225_sd_whats_new_in_nscollectionview.mp4",
      "duration": 3589
    },
    "related": {
      "activities": ["wwdc2018-225", "wwdc2017-218"]
    }
  }, {
    "id": "wwdc2015-608",
    "staticContentId": 645,
    "eventContentId": 608,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/608",
    "description": "GameplayKit provides a collection of essential tools and techniques used to implement gameplay logic. Get introduced to the GameplayKit framework and see how to put its capabilities to work in your own titles. Learn about managing state machines, controlling game entities, and implementing rule systems. Dive into its built-in tools for randomization, pathfinding, and advanced simulation.",
    "title": "Introducing GameplayKit",
    "originalPublishingDate": "2015-06-11T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["ai", "behavior", "component", "game", "gpagent", "gprandomdistribution", "gpstate", "gpstatemachine", "logic", "path", "random", "rule", "state machine", "strategist", "strategy"],
    "topicIds": [26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/608rpwq1ltvg5nmk/608/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/608rpwq1ltvg5nmk/608/608_introducing_gameplaykit.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/608rpwq1ltvg5nmk/608/subtitles/eng/608_sd_introducing_gameplaykit.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/608rpwq1ltvg5nmk/608/608_hd_introducing_gameplaykit.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/608rpwq1ltvg5nmk/608/608_sd_introducing_gameplaykit.mp4",
      "duration": 3152
    }
  }, {
    "id": "wwdc2015-227",
    "staticContentId": 630,
    "eventContentId": 227,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/227",
    "description": "With the majority of Apple's market outside of the US, it's critical to learn about the latest advancements in Internationalization support to make your app truly localized. Gain insight into best practices for using formatters to display information correctly, how to easily handle pluralization in any language, how to avoid the most common localization pitfalls, and much more. Whether you are looking to significantly expand your market or want to take advantage of powerful new features for all languages, you don't want to miss this session.",
    "title": "What's New in Internationalization",
    "originalPublishingDate": "2015-06-12T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T09:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["dynamic type", "formatter", "nscalendar", "nsdateformatter", "nsformatter", "nsstring", "nstextview", "text system", "uifont", "uilabel", "uitextview"],
    "topicIds": [42],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/227s0ti458qgg/227/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/227s0ti458qgg/227/227_whats_new_in_internationalization.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/227s0ti458qgg/227/subtitles/eng/227_sd_whats_new_in_internationalization.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/227s0ti458qgg/227/227_hd_whats_new_in_internationalization.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/227s0ti458qgg/227/227_sd_whats_new_in_internationalization.mp4",
      "duration": 2222
    }
  }, {
    "id": "wwdc2015-222",
    "staticContentId": 631,
    "eventContentId": 222,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/222",
    "description": "iOS 9 brings complete right-to-left support for Arabic, Hebrew, and other languages.  Going beyond basic text, your app's entire interface can now flip to provide a native right-to-left experience. Learn what behavior you get for free from UIKit, and hear details about adding right-to-left support in custom interfaces.  Hear from experts about how to evaluate the readiness of your app for these languages.  Understand best practices to avoid common pitfalls and to create a seamless bi-directional app.",
    "title": "New UIKit Support for International User Interfaces",
    "originalPublishingDate": "2015-06-11T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T14:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["dynamic type", "farsi", "formatter", "international", "internationalization", "locale", "localization", "nscalendar", "nsdateformatter", "nsformatter", "nslocale", "nsstring", "nstextview", "text system", "uifont", "uilabel", "uitextview", "urdu"],
    "topicIds": [42, 22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/222ngkqh58b52/222/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/222ngkqh58b52/222/222_new_uikit_support_for_international_user_interfaces.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/222ngkqh58b52/222/subtitles/eng/222_sd_new_uikit_support_for_international_user_interfaces.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/222ngkqh58b52/222/222_hd_new_uikit_support_for_international_user_interfaces.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/222ngkqh58b52/222/222_sd_new_uikit_support_for_international_user_interfaces.mp4",
      "duration": 2350
    }
  }, {
    "id": "wwdc2015-717",
    "staticContentId": 580,
    "eventContentId": 717,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/717",
    "description": "The Network Extension framework allows apps to customize and extend the core networking features of iOS and OS X. Learn how to use new VPN features and NetworkExtension API to create network security solutions for education and enterprise.",
    "title": "What's New in Network Extension and VPN",
    "originalPublishingDate": "2015-06-12T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T09:00:00-07:00",
    "keywords": ["airport", "business", "education", "enterprise", "network", "security", "vpn", "wifi"],
    "topicIds": [13, 18, 19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/717yq4y85w/717/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/717yq4y85w/717/717_whats_new_in_network_extension_and_vpn.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/717yq4y85w/717/subtitles/eng/717_sd_whats_new_in_network_extension_and_vpn.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/717yq4y85w/717/717_hd_whats_new_in_network_extension_and_vpn.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/717yq4y85w/717/717_sd_whats_new_in_network_extension_and_vpn.mp4",
      "duration": 2422
    },
    "related": {
      "activities": ["wwdc2019-714", "wwdc2017-707", "wwdc2017-709"]
    }
  }, {
    "id": "wwdc2015-607",
    "staticContentId": 647,
    "eventContentId": 607,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/607",
    "description": "Your app can be ready to harness the power of Metal starting with just a few lines of code. Get introduced to the new MetalKit framework and learn its simple API for model and texture loading, animation control, and other common tasks. Plug into Metal Performance Shaders and access a powerful library of image-processing operations tuned for Apple hardware.",
    "title": "What's New in Metal, Part 2",
    "originalPublishingDate": "2015-06-11T09:00:00-07:00",
    "publishingExpiryDate": "2020-06-11T09:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "capture", "compute", "convolution", "drawable", "encoder", "filter", "frame", "frame debugger", "gpgpu", "gpu", "median", "metl", "morphology", "mtk", "mtkmodel", "mtktextureloader", "mtkview", "mtl", "opengl", "opengl es", "optimize", "render", "renderer", "shader", "simd", "threshold", "xcode"],
    "topicIds": [25, 30, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/607g5z16fpl7pzgi/607/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/607g5z16fpl7pzgi/607/607_whats_new_in_metal_part_2.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/607g5z16fpl7pzgi/607/subtitles/eng/607_sd_whats_new_in_metal_part_2.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/607g5z16fpl7pzgi/607/607_hd_whats_new_in_metal_part_2.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/607g5z16fpl7pzgi/607/607_sd_whats_new_in_metal_part_2.mp4",
      "duration": 2639
    }
  }, {
    "id": "wwdc2015-221",
    "staticContentId": 634,
    "eventContentId": 221,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/221",
    "description": "Full screen windows enable people to focus on the task at hand by removing extra system UI and deferring to more of the content they care about. OS X 10.11 adds new flexibility to how these full screen windows can be configured and controlled. Hear from the experts how to get your Mac app ready to take advantage of this new functionality. Learn key strategies to making your window content be adaptive depending on the space available.",
    "title": "Improving the Full Screen Window Experience",
    "originalPublishingDate": "2015-06-11T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T14:30:00-07:00",
    "platforms": ["macOS"],
    "keywords": ["adaptive", "adaptivity", "nssplitview", "nswindow", "sidebar", "spaces", "tiling"],
    "topicIds": [22],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/22160ycymy0qg/221/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/22160ycymy0qg/221/221_improving_the_full_screen_window_experience.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/22160ycymy0qg/221/subtitles/eng/221_sd_improving_the_full_screen_window_experience.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/22160ycymy0qg/221/221_hd_improving_the_full_screen_window_experience.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/22160ycymy0qg/221/221_sd_improving_the_full_screen_window_experience.mp4",
      "duration": 2193
    }
  }, {
    "id": "wwdc2015-719",
    "staticContentId": 600,
    "eventContentId": 719,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/719",
    "description": "IPv6 is growing exponentially and carriers worldwide are moving to pure IPv6 APNs. Learn about new tools to test your apps for compatibility and get expert advice on making sure your apps work in all network environments.  iOS 9 and OS X 10.11 now support the latest TCP standards. Hear from the experts on TCP Fast Open and Explicit Congestion Notification, and find out how it benefits your apps.",
    "title": "Your App and Next Generation Networks",
    "originalPublishingDate": "2015-06-12T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-12T11:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["ipv6", "tcp"],
    "topicIds": [18],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/719ui2k57m/719/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/719ui2k57m/719/719_your_app_and_next_generation_networks.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/719ui2k57m/719/subtitles/eng/719_sd_your_app_and_next_generation_networks.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/719ui2k57m/719/719_hd_your_app_and_next_generation_networks.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/719ui2k57m/719/719_sd_your_app_and_next_generation_networks.mp4",
      "duration": 3161
    },
    "related": {
      "activities": ["wwdc2017-707"]
    }
  }, {
    "id": "wwdc2015-411",
    "staticContentId": 697,
    "eventContentId": 411,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/411",
    "description": "Learn how Swift can help you define away some common pitfalls in app development, allowing your apps to benefit from safer runtime behavior while enjoying strong guarantees provided by Swift at compile-time. Hear about how API availability checking in Swift allows you to easily take advantage of new APIs while guaranteeing safe deployment to earlier OS releases. See how enumerations and protocols can help not only maintain compile-time invariants between your app's code and assets but also reduce boilerplate.",
    "title": "Swift in Practice",
    "originalPublishingDate": "2015-06-11T14:30:00-07:00",
    "publishingExpiryDate": "2020-06-11T14:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["api", "architecture", "availability", "compiler", "compile time", "design patterns", "enum", "invariants", "protocol extension", "protocols", "runtime", "strongly typed", "type safety"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4119flfsnsgmlfy/411/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4119flfsnsgmlfy/411/411_swift_in_practice.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4119flfsnsgmlfy/411/subtitles/eng/411_sd_swift_in_practice.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4119flfsnsgmlfy/411/411_hd_swift_in_practice.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/4119flfsnsgmlfy/411/411_sd_swift_in_practice.mp4",
      "duration": 2297
    },
    "related": {
      "activities": ["wwdc2017-407"]
    }
  }, {
    "id": "wwdc2015-403",
    "staticContentId": 700,
    "eventContentId": 403,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/403",
    "description": "See how you can incrementally add Swift into your existing Objective-C codebase and app development workflow. Learn how to leverage Swift's powerful language features to develop robust applications that are faster to write and easier to maintain.",
    "title": "Improving Your Existing Apps with Swift",
    "originalPublishingDate": "2015-06-09T15:30:00-07:00",
    "publishingExpiryDate": "2020-06-09T15:30:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["bridging header", "extensions", "objc", "obj-c", "objective-c", "playgrounds", "prototyping"],
    "topicIds": [36],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/403l7ohdidhmnkgx/403/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/403l7ohdidhmnkgx/403/403_improving_your_existing_apps_with_swift.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/403l7ohdidhmnkgx/403/subtitles/eng/403_sd_improving_your_existing_apps_with_swift.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/403l7ohdidhmnkgx/403/403_hd_improving_your_existing_apps_with_swift.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/403l7ohdidhmnkgx/403/403_sd_improving_your_existing_apps_with_swift.mp4",
      "duration": 2326
    }
  }, {
    "id": "wwdc2015-802",
    "staticContentId": 620,
    "eventContentId": 802,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/802",
    "description": "Apple Watch represents a new chapter in the way people relate to technology. It's the most personal device Apple has ever designed, and it enables new ways to receive information and to interact with apps. Learn about the foundations on which Apple Watch was designed and how they lead to Apple Watch apps that complement the iPhone, support lightweight interaction and deliver timely and relevant information to the wrist. Discover how to create usable and beautiful apps, notifications and glances through effective use of typography, information design, layout, animation, and color.",
    "title": "Designing for Apple Watch",
    "originalPublishingDate": "2015-06-10T16:30:00-07:00",
    "publishingExpiryDate": "2020-06-10T16:30:00-07:00",
    "platforms": ["watchOS"],
    "keywords": ["⌚️", "clockkit", "complication", "digital crown", "experience", "foreground", "haptic", "interface", "layout", "persistent", "picker", "taptic", "ui", "watchkit", "wkinterface"],
    "topicIds": [3, 5, 6],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/802mpzd3nzovlygpbg/802/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/802mpzd3nzovlygpbg/802/802_designing_for_apple_watch.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/802mpzd3nzovlygpbg/802/subtitles/eng/802_sd_designing_for_apple_watch.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/802mpzd3nzovlygpbg/802/802_hd_designing_for_apple_watch.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/802mpzd3nzovlygpbg/802/802_sd_designing_for_apple_watch.mp4",
      "duration": 3288
    }
  }, {
    "id": "wwdc2015-406",
    "staticContentId": 690,
    "eventContentId": 406,
    "eventId": "wwdc2015",
    "webPermalink": "https://developer.apple.com/wwdc15/406",
    "description": "Xcode 7 introduces new UI testing features fully integrated into the IDE. Learn about the new APIs and how UI testing fits in with existing testing features in Xcode. See how to get started by recording your app, and how to efficiently craft and maintain UI tests.",
    "title": "UI Testing in Xcode",
    "originalPublishingDate": "2015-06-10T11:00:00-07:00",
    "publishingExpiryDate": "2020-06-10T11:00:00-07:00",
    "platforms": ["iOS", "macOS", "watchOS"],
    "keywords": ["accessibility", "automated testing", "ax", "code coverage", "continuous integration", "long", "test", "ui automation", "xcode server", "xctest"],
    "topicIds": [37, 38],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/406o0doszwo8r15m/406/hls_vod_mvp.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/406o0doszwo8r15m/406/406_ui_testing_in_xcode.pdf",
      "subtitles": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/406o0doszwo8r15m/406/subtitles/eng/406_sd_ui_testing_in_xcode.vtt",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/406o0doszwo8r15m/406/406_hd_ui_testing_in_xcode.mp4",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2015/406o0doszwo8r15m/406/406_sd_ui_testing_in_xcode.mp4",
      "duration": 2966
    },
    "related": {
      "activities": ["wwdc2018-417", "wwdc2017-409", "wwdc2017-414"]
    }
  }, {
    "id": "wwdc2014-605",
    "staticContentId": 939,
    "eventContentId": 605,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/605",
    "description": "Building on the fundamentals, learn how to create advanced games and graphics applications with Metal. See how to construct your rendering pipeline, understand how to use compute and graphics together, and discover how to optimize your Metal-based app.",
    "title": "Working with Metal: Advanced",
    "originalPublishingDate": "2014-06-04T11:30:00-07:00",
    "publishingExpiryDate": "2024-06-04T11:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "compute", "frame debugger", "gpgpu", "gpu", "metal tools", "metl", "mtl", "opengl", "opengl es", "renderer", "shader", "simd", "xcode"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/605xxygcz4pd0h6/605/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/605xxygcz4pd0h6/605/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/605xxygcz4pd0h6/605/605_working_with_metal_advanced.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/605xxygcz4pd0h6/605/605_hd_working_with_metal_advanced.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/605xxygcz4pd0h6/605/605_sd_working_with_metal_advanced.mov",
      "duration": 3198
    }
  }, {
    "id": "wwdc2014-602",
    "staticContentId": 936,
    "eventContentId": 602,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/602",
    "description": "Kick off the game development sessions of WWDC 2014 by gaining insight into the key ingredients needed to create a great game for iOS. Understand the importance of harnessing the full capabilities of the platform to create a richer gameplay experience. Get practical guidance about game production and distribution, and learn the design and platform conventions that will make your game even more engaging.",
    "title": "Ingredients of Great Games",
    "originalPublishingDate": "2014-06-03T15:15:00-07:00",
    "publishingExpiryDate": "2024-06-03T15:15:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["2d", "3d", "engagement", "friction", "game", "graphics", "metal", "nsurlsession", "opengl", "scenekit", "spritekit"],
    "topicIds": [3, 25, 35, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/602xx0qpmdkc2ki/602/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/602xx0qpmdkc2ki/602/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/602xx0qpmdkc2ki/602/602_ingredients_of_great_games.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/602xx0qpmdkc2ki/602/602_hd_ingredients_of_great_games.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/602xx0qpmdkc2ki/602/602_sd_ingredients_of_great_games.mov",
      "duration": 3393
    }
  }, {
    "id": "wwdc2014-609",
    "staticContentId": 943,
    "eventContentId": 609,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/609",
    "description": "Now available for iOS and OS X, SceneKit is an inventive high-level graphics framework enabling your apps to efficiently load, manipulate, and render 3D scenes. Get reintroduced to SceneKit and check out how your apps can take advantage of its latest capabilities. Learn about advanced capabilities for physics and animation, support for subdivision surfaces, new rendering effects, integration with SpriteKit, and much more.",
    "title": "What's New in SceneKit",
    "originalPublishingDate": "2014-06-05T10:15:00-07:00",
    "publishingExpiryDate": "2021-06-05T10:15:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "bananas", "collada", "dae", "graph", "graphics", "inverse kinematics", "opengl", "opensubdiv", "physics", "rendering", "scnlayer", "scnnode", "scnview", "shader"],
    "topicIds": [25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/609xxkxq1v95fju/609/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/609xxkxq1v95fju/609/atv.m3u8",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/609xxkxq1v95fju/609/609_hd_whats_new_in_scenekit.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/609xxkxq1v95fju/609/609_sd_whats_new_in_scenekit.mov",
      "duration": 2689
    }
  }, {
    "id": "wwdc2014-612",
    "staticContentId": 937,
    "eventContentId": 612,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/612",
    "description": "Core Motion leverages the M7 motion coprocessor and other built-in sensors to provide support for step counting and motion tracking. See examples of Core Motion based apps in action. Learn how health and fitness apps use pedometer information to give users performance and workout results, and how journaling apps use motion classification to tag the day's activities.",
    "title": "Motion Tracking with the Core Motion Framework",
    "originalPublishingDate": "2014-06-06T11:30:00-07:00",
    "publishingExpiryDate": "2021-06-06T11:30:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["accelerometer", "cmmotion", "cycling", "driving", "gyroscope", "motion", "pedometer", "step", "walking"],
    "topicIds": [26, 14],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/612xxnsoq5fis79/612/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/612xxnsoq5fis79/612/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/612xxnsoq5fis79/612/612_motion_tracking_with_the_core_motion_framework.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/612xxnsoq5fis79/612/612_hd_motion_tracking_with_the_core_motion_framework.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/612xxnsoq5fis79/612/612_sd_motion_tracking_with_the_core_motion_framework.mov",
      "duration": 3213
    }
  }, {
    "id": "wwdc2014-604",
    "staticContentId": 940,
    "eventContentId": 604,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/604",
    "description": "Start learning how to code with Metal in this step-by-step walkthrough of basic scene rendering. See the code you need to get your first Metal-based application up and running. Explore how to create graphics and compute shaders and efficiently animate scenes.",
    "title": "Working with Metal: Fundamentals",
    "originalPublishingDate": "2014-06-04T10:15:00-07:00",
    "publishingExpiryDate": "2024-06-04T10:15:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "compute", "gpgpu", "gpu", "metl", "mtl", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/604xxg7crkljcr8/604/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/604xxg7crkljcr8/604/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/604xxg7crkljcr8/604/604_working_with_metal_fundamentals.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/604xxg7crkljcr8/604/604_hd_working_with_metal_fundamentals.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/604xxg7crkljcr8/604/604_sd_working_with_metal_fundamentals.mov",
      "duration": 3223
    }
  }, {
    "id": "wwdc2014-711",
    "staticContentId": 905,
    "eventContentId": 711,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/711",
    "description": "The Keychain has always been the most secure place to store passwords and other sensitive data. iOS 8 introduces significant new security features. Discover how to integrate Touch ID into your apps using the Keychain and the new LocalAuthentication framework. Learn about other Keychain enhancements, including how to tie data to the user's passcode.",
    "title": "Keychain and Authentication with Touch ID",
    "originalPublishingDate": "2014-06-04T10:15:00-07:00",
    "publishingExpiryDate": "2020-06-04T10:15:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["acl", "localauthentication", "passcode", "password", "secattr", "secitem", "security"],
    "topicIds": [19],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/711xx6j5wzufu78/711/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/711xx6j5wzufu78/711/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/711xx6j5wzufu78/711/711_keychain_and_authentication_with_touch_id.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/711xx6j5wzufu78/711/711_hd_keychain_and_authentication_with_touch_id.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/711xx6j5wzufu78/711/711_sd_keychain_and_authentication_with_touch_id.mov",
      "duration": 2730
    }
  }, {
    "id": "wwdc2014-608",
    "staticContentId": 944,
    "eventContentId": 608,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/608",
    "description": "Gain a deeper understanding of the best practices to follow when building a SpriteKit based game. Get tips about game construction and see how to map the logical elements of your game into SpriteKit. Learn how data driven techniques can speed your development cycle, and discover how to achieve maximum performance for rendering, physics, and animation.",
    "title": "Best Practices for Building SpriteKit Games",
    "originalPublishingDate": "2014-06-04T15:15:00-07:00",
    "publishingExpiryDate": "2021-06-04T15:15:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["2d", "animation", "collisions", "constraint", "graphics", "inverse kinematics", "lighting", "opengl", "physics", "rendering", "shaders", "shading", "sprite"],
    "topicIds": [24, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/608xx0tzmkcqkrn/608/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/608xx0tzmkcqkrn/608/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/608xx0tzmkcqkrn/608/608_best_practices_for_building_spritekit_games.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/608xx0tzmkcqkrn/608/608_hd_best_practices_for_building_spritekit_games.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/608xx0tzmkcqkrn/608/608_sd_best_practices_for_building_spritekit_games.mov",
      "duration": 3098
    }
  }, {
    "id": "wwdc2014-603",
    "staticContentId": 941,
    "eventContentId": 603,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/603",
    "description": "Metal provides extremely efficient access to the graphics and compute power of the A7 chip. Get introduced to the essential concepts behind Metal, its low-overhead architecture, streamlined API, and unified shading language. See how Metal lets you take your iOS game or app to the next level of performance and capability.",
    "title": "Working with Metal: Overview",
    "originalPublishingDate": "2014-06-04T09:00:00-07:00",
    "publishingExpiryDate": "2024-06-04T09:00:00-07:00",
    "platforms": ["iOS"],
    "keywords": ["3d", "3d graphics", "accelerate", "compute", "gpgpu", "gpu", "metl", "mtl", "opengl", "opengl es", "renderer", "shader", "simd"],
    "topicIds": [25, 26, 27],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/603xx33n8igr5n1/603/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/603xx33n8igr5n1/603/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/603xx33n8igr5n1/603/603_working_with_metal_overview.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/603xx33n8igr5n1/603/603_hd_working_with_metal_overview.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/603xx33n8igr5n1/603/603_sd_working_with_metal_overview.mov",
      "duration": 2783
    }
  }, {
    "id": "wwdc2014-610",
    "staticContentId": 942,
    "eventContentId": 610,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/610",
    "description": "Dive into the practical workflow of developing a 3D side-scrolling game using SceneKit. See how to get started, and learn about tools for managing game assets, creating particle systems, and editing nodes. Understand how SceneKit integrates with your art pipeline and learn how to implement lighting, shadows, and other visual effects. Come away from the session with a demo game in-hand and ready to play.",
    "title": "Building a Game with SceneKit",
    "originalPublishingDate": "2014-06-05T11:30:00-07:00",
    "publishingExpiryDate": "2021-06-05T11:30:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["3d", "bananas", "collada", "dae", "graph", "graphics", "inverse kinematics", "opengl", "opengl", "opensubdiv", "physics", "rendering", "scnlayer", "scnnode", "scnview"],
    "topicIds": [25, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/610xxc04fgmv80x/610/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/610xxc04fgmv80x/610/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/610xxc04fgmv80x/610/610_building_a_game_with_scenekit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/610xxc04fgmv80x/610/610_hd_building_a_game_with_scenekit.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/610xxc04fgmv80x/610/610_sd_building_a_game_with_scenekit.mov",
      "duration": 2606
    }
  }, {
    "id": "wwdc2014-606",
    "staticContentId": 945,
    "eventContentId": 606,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/606",
    "description": "SpriteKit provides everything you need for high-performance 2D games to animate sprites, simulate physics, and create stunning graphics effects. Check out new APIs for enhanced shading and lighting, advances in physics and collisions, constraints and inverse kinematics, integration with SceneKit, and powerful editing tools built right into Xcode 6.",
    "title": "What's New in SpriteKit",
    "originalPublishingDate": "2014-06-04T14:00:00-07:00",
    "publishingExpiryDate": "2021-06-04T14:00:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["2d", "animation", "collisions", "constraint", "graphics", "inverse kinematics", "lighting", "opengl", "physics", "rendering", "shaders", "shading", "sprite"],
    "topicIds": [24, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/606xxql3qoibema/606/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/606xxql3qoibema/606/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/606xxql3qoibema/606/606_whats_new_in_sprite_kit.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/606xxql3qoibema/606/606_hd_whats_new_in_sprite_kit.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/606xxql3qoibema/606/606_sd_whats_new_in_sprite_kit.mov",
      "duration": 3327
    }
  }, {
    "id": "wwdc2014-611",
    "staticContentId": 946,
    "eventContentId": 611,
    "eventId": "wwdc2014",
    "webPermalink": "https://developer.apple.com/wwdc14/611",
    "description": "The Game Controller framework enables games to integrate with MFi game controllers and take advantage of exciting new modes of input. Check out the latest additions and get expert advice about best practices to follow when adding game controller support to your titles. Understand how to avoid common pitfalls and gain key insights into what it takes to create an experience that's intuitive and fun.",
    "title": "Designing for Game Controllers",
    "originalPublishingDate": "2014-06-06T10:15:00-07:00",
    "publishingExpiryDate": "2021-06-06T10:15:00-07:00",
    "platforms": ["iOS", "macOS"],
    "keywords": ["button", "controller", "dpad", "game", "gccontroller", "input", "joystick", "mfi", "physical", "shoulder"],
    "topicIds": [9, 26],
    "type": "Session",
    "images": ["square", "wide"],
    "media": {
      "hls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/611xxblieag1z2a/611/ipad_c.m3u8",
      "tvOShls": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/611xxblieag1z2a/611/atv.m3u8",
      "slides": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/611xxblieag1z2a/611/611_designing_for_game_controllers.pdf",
      "downloadHD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/611xxblieag1z2a/611/611_hd_designing_for_game_controllers.mov",
      "downloadSD": "https://devstreaming-cdn.apple.com/videos/wwdc/2014/611xxblieag1z2a/611/611_sd_designing_for_game_controllers.mov",
      "duration": 2524
    }
  }],
  "rooms": [{
    "name": "Hall 2",
    "ordinal": 0,
    "id": 62,
    "regionId": 404
  }, {
    "name": "Hall 3",
    "ordinal": 1,
    "id": 63,
    "regionId": 356
  }, {
    "name": "Hall 1",
    "ordinal": 2,
    "id": 61,
    "regionId": 355
  }, {
    "name": "Executive Ballroom",
    "ordinal": 3,
    "id": 66,
    "regionId": 358
  }, {
    "name": "Technology Lab 1",
    "ordinal": 4,
    "id": 67,
    "regionId": 349
  }, {
    "name": "Technology Lab 2",
    "ordinal": 5,
    "id": 68,
    "regionId": 348
  }, {
    "name": "Technology Lab 3",
    "ordinal": 6,
    "id": 69,
    "regionId": 347
  }, {
    "name": "Technology Lab 4",
    "ordinal": 7,
    "id": 70,
    "regionId": 346
  }, {
    "name": "Technology Lab 5",
    "ordinal": 8,
    "id": 71,
    "regionId": 345
  }, {
    "name": "Technology Lab 6",
    "ordinal": 9,
    "id": 72,
    "regionId": 343
  }, {
    "name": "Technology Lab 7",
    "ordinal": 10,
    "id": 73,
    "regionId": 342
  }, {
    "name": "Technology Lab 8",
    "ordinal": 11,
    "id": 74,
    "regionId": 341
  }, {
    "name": "Technology Lab 9",
    "ordinal": 12,
    "id": 75,
    "regionId": 340
  }, {
    "name": "Technology Lab 10",
    "ordinal": 13,
    "id": 76,
    "regionId": 339
  }, {
    "name": "Technology Lab 11",
    "ordinal": 14,
    "id": 77,
    "regionId": 338
  }, {
    "name": "User Interface Design Lab 1",
    "ordinal": 15,
    "id": 7,
    "regionId": 336
  }, {
    "name": "User Interface Design Lab 2",
    "ordinal": 16,
    "id": 27,
    "regionId": 336
  }, {
    "name": "App Store Lab 1",
    "ordinal": 17,
    "id": 8,
    "regionId": 337
  }, {
    "name": "App Store Lab 2",
    "ordinal": 18,
    "id": 24,
    "regionId": 337
  }, {
    "name": "App Store Lab 3",
    "ordinal": 19,
    "id": 25,
    "regionId": 337
  }, {
    "name": "App Store Lab 4",
    "ordinal": 20,
    "id": 26,
    "regionId": 337
  }, {
    "name": "App Store Lab 5",
    "ordinal": 21,
    "id": 28,
    "regionId": 337
  }, {
    "name": "App Store Lab 6",
    "ordinal": 22,
    "id": 29,
    "regionId": 337
  }, {
    "name": "App Store Lab 7",
    "ordinal": 23,
    "id": 127,
    "regionId": 337
  }, {
    "name": "App Store Lab 8",
    "ordinal": 24,
    "id": 128,
    "regionId": 337
  }, {
    "name": "App Store Lab 9",
    "ordinal": 25,
    "id": 129,
    "regionId": 337
  }, {
    "name": "App Store Lab 10",
    "ordinal": 26,
    "id": 131,
    "regionId": 337
  }, {
    "name": "Market Terrace",
    "ordinal": 28,
    "id": 79,
    "regionId": 350
  }, {
    "name": "Discovery Meadow",
    "ordinal": 30,
    "id": 81,
    "regionId": 287
  }, {
    "name": "Plaza",
    "ordinal": 31,
    "id": 84,
    "regionId": 469
  }, {
    "name": "Apple Podcasts Studio",
    "ordinal": 34,
    "id": 60,
    "regionId": 478
  }, {
    "name": "Hilton, Almaden Room",
    "ordinal": 36,
    "id": 132
  }, {
    "name": "Activity Studio",
    "ordinal": 38,
    "id": 130,
    "regionId": 485
  }],
  "topicCategories": [{
    "title": "Featured",
    "id": 1,
    "ordinal": 0,
    "topicIds": [1, 2]
  }, {
    "title": "Design",
    "id": 2,
    "ordinal": 1,
    "topicIds": [3, 4, 5, 6, 7]
  }, {
    "title": "Frameworks",
    "id": 3,
    "ordinal": 2,
    "topicIds": [8, 9, 10, 70, 68, 11, 12, 13, 67, 14, 15, 42, 16, 17, 18, 19, 20, 21, 22]
  }, {
    "title": "Graphics and Games",
    "id": 4,
    "ordinal": 3,
    "topicIds": [23, 24, 25, 26, 27]
  }, {
    "title": "Media",
    "id": 5,
    "ordinal": 4,
    "topicIds": [28, 29, 30, 31]
  }, {
    "title": "Developer Tools",
    "id": 6,
    "ordinal": 5,
    "topicIds": [32, 33, 34, 35, 36, 37, 38]
  }, {
    "title": "App Store and Distribution",
    "id": 8,
    "ordinal": 7,
    "topicIds": [40, 43, 41, 44, 69, 71, 39]
  }],
  "topics": [{
    "title": "Accessibility",
    "id": 8,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-Accessibility.pdf"
  }, {
    "title": "Audio",
    "id": 28,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Media-Audio.pdf"
  }, {
    "title": "AR / VR",
    "id": 23,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/GraphicsAndGames-ARVR.pdf"
  }, {
    "title": "Interaction Design",
    "id": 3,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Design-InteractionDesign.pdf"
  }, {
    "title": "Business Models",
    "id": 40,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-BusinessModels.pdf"
  }, {
    "title": "Compiler and LLVM",
    "id": 32,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-CompilerAndLLVM.pdf"
  }, {
    "title": "Special Events",
    "id": 1,
    "ordinal": 0,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Featured-SpecialEvents.pdf"
  }, {
    "title": "Accessories",
    "id": 9,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-Accessories.pdf"
  }, {
    "title": "Prototyping",
    "id": 4,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Design-Prototyping.pdf"
  }, {
    "title": "Lunchtime Sessions",
    "id": 2,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Featured-Lunchtime.pdf"
  }, {
    "title": "Debugging",
    "id": 33,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-Debugging.pdf"
  }, {
    "title": "Camera",
    "id": 29,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Media-Camera.pdf"
  }, {
    "title": "2D Graphics",
    "id": 24,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/GraphicsAndGames-2DGraphics.pdf"
  }, {
    "title": "Certificates and Signing",
    "id": 43,
    "ordinal": 1,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Distribution-Certificates.pdf"
  }, {
    "title": "Photos and Imaging",
    "id": 30,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Media-PhotosAndImaging.pdf"
  }, {
    "title": "Community Management",
    "id": 41,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-CommunityManagement.pdf"
  }, {
    "title": "3D Graphics",
    "id": 25,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/GraphicsAndGames-3DGraphics.pdf"
  }, {
    "title": "Interface Builder",
    "id": 34,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-InterfaceBuilder.pdf"
  }, {
    "title": "Sound and Haptics",
    "id": 5,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Design-SoundAndHaptics.pdf"
  }, {
    "title": "Apple Pay and Wallet",
    "id": 10,
    "ordinal": 2,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-ApplePayAndWallet.pdf"
  }, {
    "title": "Games",
    "id": 26,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/GraphicsAndGames-Games.pdf"
  }, {
    "title": "Video",
    "id": 31,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Media-Video.pdf"
  }, {
    "title": "Device Management",
    "id": 44,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Distribution-DeviceManagement.pdf"
  }, {
    "title": "Visual Design",
    "id": 6,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Design-VisualDesign.pdf"
  }, {
    "title": "Business and Enterprise",
    "id": 70,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-BusinessAndEnterprise.pdf"
  }, {
    "title": "Performance",
    "id": 35,
    "ordinal": 3,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-Performance.pdf"
  }, {
    "title": "Metal",
    "id": 27,
    "ordinal": 4,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/GraphicsAndGames-Metal.pdf"
  }, {
    "title": "In-App Purchase and Subscriptions",
    "id": 69,
    "ordinal": 4,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-SubsAndIAP.pdf"
  }, {
    "title": "CarPlay",
    "id": 68,
    "ordinal": 4,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-CarPlay.pdf"
  }, {
    "title": "Typography",
    "id": 7,
    "ordinal": 4,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Design-Typography.pdf"
  }, {
    "title": "Swift",
    "id": 36,
    "ordinal": 4,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-Swift.pdf"
  }, {
    "title": "Testing",
    "id": 37,
    "ordinal": 5,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-Testing.pdf"
  }, {
    "title": "App Store Connect",
    "id": 71,
    "ordinal": 5,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-AppStoreConnect.pdf"
  }, {
    "title": "Cloud and Local Storage",
    "id": 11,
    "ordinal": 5,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-CloudAndLocalStorage.pdf"
  }, {
    "title": "Education and Kids",
    "id": 12,
    "ordinal": 6,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-EducationAndKids.pdf"
  }, {
    "title": "Xcode",
    "id": 38,
    "ordinal": 6,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/DeveloperTools-Xcode.pdf"
  }, {
    "title": "Marketing",
    "id": 39,
    "ordinal": 6,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-Marketing.pdf"
  }, {
    "title": "Extensions",
    "id": 13,
    "ordinal": 7,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-Extensions.pdf"
  }, {
    "title": "Foundation",
    "id": 67,
    "ordinal": 8,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-Foundation.pdf"
  }, {
    "title": "Health and Fitness",
    "id": 14,
    "ordinal": 9,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-HealthAndFitness.pdf"
  }, {
    "title": "HomeKit",
    "id": 15,
    "ordinal": 10,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-HomeKit.pdf"
  }, {
    "title": "Internationalization and Localization",
    "id": 42,
    "ordinal": 11,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/AppStore-LocalizationAndCulturalization.pdf"
  }, {
    "title": "Machine Learning and Vision",
    "id": 16,
    "ordinal": 12,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-MLAndVision.pdf"
  }, {
    "title": "Maps and Location",
    "id": 17,
    "ordinal": 13,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-MapsAndLocation.pdf"
  }, {
    "title": "Networking",
    "id": 18,
    "ordinal": 14,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-Networking.pdf"
  }, {
    "title": "Privacy and Security",
    "id": 19,
    "ordinal": 15,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-PrivacyAndSecurity.pdf"
  }, {
    "title": "Safari and Web",
    "id": 20,
    "ordinal": 16,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-SafariAndWeb.pdf"
  }, {
    "title": "Siri and Voice",
    "id": 21,
    "ordinal": 17,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-SiriAndVoice.pdf"
  }, {
    "title": "UI Frameworks",
    "id": 22,
    "ordinal": 18,
    "imageURL": "https://devimages-cdn.apple.com/wwdc-services/images/topic-glyphs/Frameworks-UIFrameworks.pdf"
  }],
  "resources": [{
    "title": "Playing Collision-Based Haptic Patterns",
    "id": 594,
    "url": "https://developer.apple.com/documentation/corehaptics/playing_collision-based_haptic_patterns",
    "resource_type": "samplecode",
    "description": "Play a custom haptic pattern whose strength depends on an object’s collision speed."
  }, {
    "title": "Core Haptics",
    "id": 593,
    "url": "https://developer.apple.com/documentation/corehaptics",
    "resource_type": "documentation",
    "description": "Compose and play haptic patterns to customize your iOS app's haptic feedback."
  }, {
    "title": "Capturing Body Motion in 3D",
    "id": 592,
    "url": "https://developer.apple.com/documentation/arkit/capturing_body_motion_in_3d",
    "resource_type": "documentation",
    "description": "Track a person in the physical environment and visualize their motion by applying the same body movements to a virtual puppet."
  }, {
    "title": "Human Interface Guidelines - Haptics",
    "id": 591,
    "url": "https://developer.apple.com/design/human-interface-guidelines/ios/user-interaction/haptics/",
    "resource_type": "guide"
  }, {
    "title": "Creating Custom Modelers for Intelligent Instruments",
    "id": 590,
    "url": "https://developer.apple.com/documentation/metrickit/improving_your_app_s_performance/creating_custom_modelers_for_intelligent_instruments",
    "resource_type": "documentation",
    "description": "Create Custom Modelers with the CLIPS language and learn how the embedded rules engine works."
  }, {
    "title": "Maps Web Snapshots",
    "id": 589,
    "url": "https://developer.apple.com/documentation/snapshots",
    "resource_type": "documentation",
    "description": "Create a static image of a map from a URL."
  }, {
    "title": "Displaying an Indoor Map",
    "id": 588,
    "url": "https://developer.apple.com/documentation/mapkit/displaying_an_indoor_map",
    "resource_type": "samplecode",
    "description": "Use the Indoor Mapping Data Format (IMDF) to show an indoor map with custom overlays and points of interest."
  }, {
    "title": "Protocol Extension for Low-Latency HLS (Preliminary Specification)",
    "id": 587,
    "url": "https://developer.apple.com/documentation/http_live_streaming/protocol_extension_for_low-latency_hls_preliminary_specification",
    "resource_type": "documentation",
    "description": "This is the preliminary specification and implementation guide for adding Low-Latency HLS to your streams."
  }, {
    "title": "Apple Configurator 2 User Guide",
    "id": 586,
    "url": "https://support.apple.com/guide/apple-configurator-2/",
    "resource_type": "guide",
    "description": "Apple Configurator 2 User Guide"
  }, {
    "title": "Classroom for iPad User Guide",
    "id": 585,
    "url": "https://support.apple.com/guide/classroom/welcome/ios",
    "resource_type": "guide",
    "description": "Classroom for iPad User Guide"
  }, {
    "title": "Apple Remote Desktop Help",
    "id": 583,
    "url": "https://help.apple.com/remotedesktop/mac/",
    "resource_type": "guide",
    "description": "Apple Remote Desktop Help"
  }, {
    "title": "Classroom for Mac User Guide",
    "id": 582,
    "url": "https://support.apple.com/guide/classroom/welcome/mac",
    "resource_type": "guide",
    "description": "Classroom for Mac User Guide"
  }, {
    "title": "Device Management",
    "id": 581,
    "url": "https://developer.apple.com/documentation/devicemanagement",
    "resource_type": "documentation",
    "description": "Remotely manage devices within your organization."
  }, {
    "title": "SFSafariServicesAvailable(_:)",
    "id": 580,
    "url": "https://developer.apple.com/documentation/safariservices/2850318-sfsafariservicesavailable",
    "resource_type": "documentation",
    "description": "Indicates whether a given version of Safari services is available."
  }, {
    "title": "System Extensions and DriverKit",
    "id": 579,
    "url": "https://developer.apple.com/system-extensions/",
    "resource_type": "documentation"
  }, {
    "title": "Sign In with Apple",
    "id": 578,
    "url": "https://developer.apple.com/sign-in-with-apple/",
    "resource_type": "documentation"
  }, {
    "title": "Learn to Make Apps with SwiftUI",
    "id": 576,
    "url": "https://developer.apple.com/tutorials/swiftui/tutorials",
    "resource_type": "documentation",
    "description": "Follow a series of guided tutorials to learn to make apps using SwiftUI and Xcode."
  }, {
    "title": "Core Media",
    "id": 574,
    "url": "https://developer.apple.com/documentation/coremedia",
    "resource_type": "documentation",
    "description": "Represent time-based audio-visual assets with essential data types."
  }, {
    "title": "WKExtendedRuntimeSession",
    "id": 573,
    "url": "https://developer.apple.com/documentation/watchkit/wkextendedruntimesession",
    "resource_type": "documentation",
    "description": "A session that gives your app additional time to run."
  }, {
    "title": "Building watchOS App Interfaces with SwiftUI",
    "id": 572,
    "url": "https://developer.apple.com/documentation/watchkit/building_watchos_app_interfaces_with_swiftui",
    "resource_type": "documentation",
    "description": "Create your app’s user interface by programmatically composing single-responsibility views."
  }, {
    "title": "SwiftUI",
    "id": 571,
    "url": "https://developer.apple.com/documentation/swiftui",
    "resource_type": "documentation",
    "description": "Declare the user interface and behavior for your app on every platform."
  }, {
    "title": "Creating Independent watchOS Apps",
    "id": 570,
    "url": "https://developer.apple.com/documentation/watchkit/creating_independent_watchos_apps",
    "resource_type": "documentation",
    "description": "Set up a watchOS app that can install and run without an iOS companion app."
  }, {
    "title": "Creating Accessible Views",
    "id": 569,
    "url": "https://developer.apple.com/documentation/swiftui/view/creating_accessible_views",
    "resource_type": "samplecode",
    "description": "Make your app accessible to everyone by applying accessibility modifiers to your SwiftUI views."
  }, {
    "title": "RealityKit",
    "id": 568,
    "url": "https://developer.apple.com/documentation/realitykit",
    "resource_type": "documentation",
    "description": "Simulate and render 3D content for use in your augmented reality apps."
  }, {
    "title": "Highlighting Areas of Interest in an Image Using Saliency",
    "id": 567,
    "url": "https://developer.apple.com/documentation/vision/highlighting_areas_of_interest_in_an_image_using_saliency",
    "resource_type": "samplecode",
    "description": "Quantify and visualize where people are likely to look in an image."
  }, {
    "title": "Displaying Indoor Maps with MapKit JS",
    "id": 566,
    "url": "https://developer.apple.com/documentation/mapkitjs/mapkit/displaying_indoor_maps_with_mapkit_js",
    "resource_type": "samplecode",
    "description": "Use the Indoor Mapping Data Format (IMDF) to show an indoor map with custom overlays and points of interest in your browser."
  }, {
    "title": "Building a Signal Generator",
    "id": 565,
    "url": "https://developer.apple.com/documentation/avfoundation/audio_track_engineering/building_a_signal_generator",
    "resource_type": "samplecode",
    "description": "Use AVAudioSourceNode and a custom render callback to generate audio signals."
  }, {
    "title": "Using Voice Processing",
    "id": 564,
    "url": "https://developer.apple.com/documentation/avfoundation/audio_track_engineering/using_voice_processing",
    "resource_type": "samplecode",
    "description": "Add voice processing capabilities to your app by using AVAudioEngine."
  }, {
    "title": "Structuring Recognized Text on a Document",
    "id": 563,
    "url": "https://developer.apple.com/documentation/vision/structuring_recognized_text_on_a_document",
    "resource_type": "samplecode",
    "description": "Detect, recognize, and structure text on a business card or receipt using Vision and VisionKit."
  }, {
    "title": "Reading Phone Numbers in Real Time",
    "id": 562,
    "url": "https://developer.apple.com/documentation/vision/reading_phone_numbers_in_real_time",
    "resource_type": "samplecode",
    "description": "Analyze and filter phone numbers from text recognized in live capture, building evidence over time."
  }, {
    "title": "Locating and Displaying Recognized Text on a Document",
    "id": 561,
    "url": "https://developer.apple.com/documentation/vision/locating_and_displaying_recognized_text_on_a_document",
    "resource_type": "samplecode",
    "description": "Overlay text recognition output from the document scanner onto an image, reporting progress throughout."
  }, {
    "title": "Creating a Game with Reality Composer",
    "id": 560,
    "url": "https://developer.apple.com/documentation/realitykit/creating_a_game_with_reality_composer",
    "resource_type": "samplecode",
    "description": "Design your app’s visual look and behaviors in Reality Composer, and complete the gameplay experience by using custom RealityKit code."
  }, {
    "title": "Using HEVC Video with Alpha",
    "id": 559,
    "url": "https://developer.apple.com/documentation/avfoundation/media_assets_playback_and_editing/using_hevc_video_with_alpha",
    "resource_type": "samplecode",
    "description": "Play, write, and export HEVC video with an alpha channel to add overlay effects to your video processing."
  }, {
    "title": "Ranging for Beacons",
    "id": 558,
    "url": "https://developer.apple.com/documentation/corelocation/ranging_for_beacons",
    "resource_type": "samplecode",
    "description": "Detect that the device is in a beacon region, then use ranging to find the beacons within the region."
  }, {
    "title": "Refreshing and Maintaining Your App Using Background Tasks",
    "id": 557,
    "url": "https://developer.apple.com/documentation/backgroundtasks/refreshing_and_maintaining_your_app_using_background_tasks",
    "resource_type": "samplecode",
    "description": "Use scheduled background tasks for refreshing your app content and for performing maintenance."
  }, {
    "title": "Viewing Desktop or Mobile Web Content Using a Web View",
    "id": 556,
    "url": "https://developer.apple.com/documentation/webkit/viewing_desktop_or_mobile_web_content_using_a_web_view",
    "resource_type": "samplecode",
    "description": "Implement a simple iPad web browser that can view either the desktop or mobile version of a website."
  }, {
    "title": "Using Core Bluetooth Classic",
    "id": 555,
    "url": "https://developer.apple.com/documentation/corebluetooth/using_core_bluetooth_classic",
    "resource_type": "samplecode",
    "description": "Use Core Bluetooth APIs to discover and communicate with a Bluetooth Classic device."
  }, {
    "title": "Adopting iOS Dark Mode",
    "id": 554,
    "url": "https://developer.apple.com/documentation/uikit/appearance_customization/adopting_ios_dark_mode",
    "resource_type": "samplecode",
    "description": "Adopt Dark Mode in your iOS app by using dynamic colors and visual effects."
  }, {
    "title": "Integrating AirPlay for Long-Form Video Apps",
    "id": 553,
    "url": "https://developer.apple.com/documentation/avfoundation/airplay_2/integrating_airplay_for_long-form_video_apps",
    "resource_type": "samplecode",
    "description": "Integrate AirPlay features and implement a dedicated external playback experience by preparing the routing system for long-form video playback."
  }, {
    "title": "Creating Immersive Experiences Using a Fullscreen Layout",
    "id": 552,
    "url": "https://developer.apple.com/documentation/tvuikit/creating_immersive_experiences_using_a_fullscreen_layout",
    "resource_type": "samplecode",
    "description": "FullScreenLayout is a great new way to build and deliver and immersive content for tvOS apps."
  }, {
    "title": "Creating hybrid applications with Document Service based View Controllers",
    "id": 551,
    "url": "https://developer.apple.com/documentation/tvmlkit/creating_hybrid_applications_with_document_service_based_view_controllers",
    "resource_type": "samplecode",
    "description": "Create view controllers that show TVMLKit content in a native application through the use of Document view controllers that are fulfilled through a Javascript based service."
  }, {
    "title": "Using the productUberTemplate with scrollable regions",
    "id": 550,
    "url": "https://developer.apple.com/documentation/tvml/using_the_productubertemplate_with_scrollable_regions",
    "resource_type": "samplecode",
    "description": "Specify regions in a page that are scrollable and not scrollable to use the the new product uber template"
  }, {
    "title": "Controlling Audio with SiriKit",
    "id": 549,
    "url": "https://developer.apple.com/documentation/sirikit/media/controlling_audio_with_sirikit",
    "resource_type": "samplecode",
    "description": "Control audio playback and handle add media requests using SiriKit Media Intents"
  }, {
    "title": "Integrating with Siri Event Suggestions",
    "id": 548,
    "url": "https://developer.apple.com/documentation/sirikit/siri_event_suggestions/integrating_with_siri_event_suggestions",
    "resource_type": "samplecode",
    "description": "Provide deep system integration by sharing reservation details with Siri"
  }, {
    "title": "Building a Full Screen Top Shelf Extension",
    "id": 547,
    "url": "https://developer.apple.com/documentation/tvservices/building_a_full_screen_top_shelf_extension",
    "resource_type": "samplecode",
    "description": "Highlight content from your Apple TV application by building a full screen Top Shelf extension."
  }, {
    "title": "Building Custom Views in SwiftUI",
    "id": 546,
    "url": "https://developer.apple.com/documentation/swiftui/drawing_and_animation/building_custom_views_in_swiftui",
    "resource_type": "samplecode",
    "description": "Create a custom view with data driven transitions and animations in SwiftUI."
  }, {
    "title": "AVMultiCamPiP: Capturing from Multiple Cameras",
    "id": 545,
    "url": "https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/avmulticampip_capturing_from_multiple_cameras",
    "resource_type": "samplecode",
    "description": "Simultaneously record the output from the front and back cameras into a single movie file by using a multi-camera capture session."
  }, {
    "title": "Effecting People Occlusion in Custom Renderers",
    "id": 544,
    "url": "https://developer.apple.com/documentation/arkit/effecting_people_occlusion_in_custom_renderers",
    "resource_type": "samplecode",
    "description": "Occlude your app’s virtual content where ARKit recognizes people in the camera feed by using matte generator."
  }, {
    "title": "Generating a Subscription Offer Signature Using Node.js",
    "id": 543,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase/generating_a_subscription_offer_signature_using_node_js",
    "resource_type": "samplecode",
    "description": "Generate a signature using your private key and lightweight cryptography libraries."
  }, {
    "title": "Disabling Pulling Down a Sheet",
    "id": 542,
    "url": "https://developer.apple.com/documentation/uikit/view_controllers/disabling_pulling_down_a_sheet",
    "resource_type": "samplecode",
    "description": "Disable the sheet pull-down gesture when dismissal would be destructive."
  }, {
    "title": "Becoming a Now Playable App",
    "id": 541,
    "url": "https://developer.apple.com/documentation/mediaplayer/becoming_a_now_playable_app",
    "resource_type": "samplecode",
    "description": "Ensure your app is eligible to become the “Now Playing” app by adopting best practices for providing Now Playing Info and registering for Remote Command Center actions."
  }, {
    "title": "Reading and Writing HealthKit Series Data",
    "id": 540,
    "url": "https://developer.apple.com/documentation/healthkit/samples/reading_and_writing_healthkit_series_data",
    "resource_type": "samplecode",
    "description": "Share and read heartbeat and quantity series data using series builders and queries."
  }, {
    "title": "Analyzing Image Similarity with Feature Print",
    "id": 539,
    "url": "https://developer.apple.com/documentation/vision/analyzing_image_similarity_with_feature_print",
    "resource_type": "samplecode",
    "description": "Generate a feature print to compute distance between images."
  }, {
    "title": "Classifying Images for Categorization and Search",
    "id": 538,
    "url": "https://developer.apple.com/documentation/vision/classifying_images_for_categorization_and_search",
    "resource_type": "samplecode",
    "description": "Analyze and label images using a Vision classification request."
  }, {
    "title": "Selecting a Selfie Based on Capture Quality",
    "id": 537,
    "url": "https://developer.apple.com/documentation/vision/selecting_a_selfie_based_on_capture_quality",
    "resource_type": "samplecode",
    "description": "Compare face capture quality in a set of images using Vision."
  }, {
    "title": "Performing Common Cryptographic Operations",
    "id": 536,
    "url": "https://developer.apple.com/documentation/cryptokit/performing_common_cryptographic_operations",
    "resource_type": "samplecode",
    "description": "Use CryptoKit to carry out operations like hashing, key generation, and encryption."
  }, {
    "title": "Creating NFC Tags from Your iPhone",
    "id": 535,
    "url": "https://developer.apple.com/documentation/corenfc/creating_nfc_tags_from_your_iphone",
    "resource_type": "samplecode",
    "description": "Save data to tags, and interact with them using native tag protocols."
  }, {
    "title": "Drawing With PencilKit",
    "id": 534,
    "url": "https://developer.apple.com/documentation/pencilkit/drawing_with_pencilkit",
    "resource_type": "samplecode",
    "description": "Add expressive, low-latency drawing to your application with PencilKit."
  }, {
    "title": "Training a Neural Network with Metal Performance Shaders",
    "id": 533,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/training_a_neural_network_with_metal_performance_shaders",
    "resource_type": "samplecode",
    "description": "Use an MPS neural network graph to train a simple neural network digit classifier."
  }, {
    "title": "Supporting Simulator in a Metal App",
    "id": 532,
    "url": "https://developer.apple.com/documentation/metal/supporting_simulator_in_a_metal_app",
    "resource_type": "samplecode",
    "description": "Modify Metal Apps to Run in Simulator."
  }, {
    "title": "Optimizing Map Views with Filtering and Camera Constraints",
    "id": 531,
    "url": "https://developer.apple.com/documentation/mapkit/optimizing_map_views_with_filtering_and_camera_constraints",
    "resource_type": "samplecode",
    "description": "Display a map that is relevant to the user by filtering points of interest and search results, and constraining the visible region."
  }, {
    "title": "Using Collection View Compositional Layouts and Diffable Data Sources",
    "id": 530,
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/using_collection_view_compositional_layouts_and_diffable_data_sources",
    "resource_type": "samplecode",
    "description": "Learn how to bring complex, high-performance layouts to your app, and simplify updating and managing your UI."
  }, {
    "title": "Occluding Virtual Content with People",
    "id": 529,
    "url": "https://developer.apple.com/documentation/arkit/occluding_virtual_content_with_people",
    "resource_type": "samplecode",
    "description": "Enable people to cover your app’s virtual content where ARKit recognizes people in the camera feed."
  }, {
    "title": "Understanding a Dice Roll with Vision and Object Detection",
    "id": 528,
    "url": "https://developer.apple.com/documentation/vision/understanding_a_dice_roll_with_vision_and_object_detection",
    "resource_type": "samplecode",
    "description": "Use a dice detection model to detect the position and values of dice in a camera frame."
  }, {
    "title": "Adding the Sign In with Apple Flow to Your App",
    "id": 527,
    "url": "https://developer.apple.com/documentation/authenticationservices/adding_the_sign_in_with_apple_flow_to_your_app",
    "resource_type": "samplecode",
    "description": "Provide a fast, secure, and privacy-friendly way for users to set up an account and start using your services."
  }, {
    "title": "Mapping Apple TV Users to App Profiles",
    "id": 526,
    "url": "https://developer.apple.com/documentation/tvservices/mapping_apple_tv_users_to_app_profiles",
    "resource_type": "samplecode",
    "description": "Adapt the content of your app for the current viewer by using TV user manager."
  }, {
    "title": "Animating and Denoising a Raytraced Scene",
    "id": 525,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/animating_and_denoising_a_raytraced_scene",
    "resource_type": "samplecode",
    "description": "Support dynamic scenes and denoising by extending your ray tracer with Metal Performance Shaders."
  }, {
    "title": "Recognizing Speech in Live Audio",
    "id": 524,
    "url": "https://developer.apple.com/documentation/speech/recognizing_speech_in_live_audio",
    "resource_type": "samplecode",
    "description": "Perform speech recognition on audio coming from the microphone of an iOS device."
  }, {
    "title": "BackgroundTasks",
    "id": 523,
    "url": "https://developer.apple.com/documentation/backgroundtasks",
    "resource_type": "documentation",
    "description": "Request the system to launch your app in the background to run tasks."
  }, {
    "title": "Xcode Help: Override environment system settings in the debugger",
    "id": 521,
    "url": "https://help.apple.com/xcode/mac/current/#/dev04113b16d",
    "resource_type": "documentation",
    "description": "Describes the environment overrides."
  }, {
    "title": "Setting Up an App’s Associated Domains",
    "id": 517,
    "url": "https://developer.apple.com/documentation/security/password_autofill/setting_up_an_app_s_associated_domains",
    "resource_type": "documentation",
    "description": "Set up associated domains to share credentials with a website related to your app."
  }, {
    "title": "Associated Domains Entitlement",
    "id": 516,
    "url": "https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_associated-domains",
    "resource_type": "documentation",
    "description": "The associated domains for specific services, such as shared web credentials and universal links."
  }, {
    "title": "Allowing Apps and Websites to Link to Your Content",
    "id": 515,
    "url": "https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content",
    "resource_type": "documentation",
    "description": "Use universal links to link to content within your app and share data securely."
  }, {
    "title": "Converting a Legacy Safari Extension to a Safari App Extension",
    "id": 514,
    "url": "https://developer.apple.com/documentation/safariservices/safari_app_extensions/converting_a_legacy_safari_extension_to_a_safari_app_extension",
    "resource_type": "documentation",
    "description": "Convert a Legacy Safari Extension to a Safari App Extension, automatically with keys or manually."
  }, {
    "title": "Instruments Developer Help",
    "id": 513,
    "url": "https://help.apple.com/instruments/developer/mac/current/",
    "resource_type": "documentation",
    "description": "Describes how to create custom instruments."
  }, {
    "title": "Xcode Help: What is localization?",
    "id": 512,
    "url": "https://help.apple.com/xcode/mac/current/#/deve2bc11fab",
    "resource_type": "documentation",
    "description": "Describes how to localize your app using Xcode."
  }, {
    "title": "FairPlay Streaming",
    "id": 511,
    "url": "https://developer.apple.com/streaming/fps/",
    "resource_type": "guide"
  }, {
    "title": "Incorporating Ads into a Playlist",
    "id": 510,
    "url": "https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/incorporating_ads_into_a_playlist",
    "resource_type": "documentation",
    "description": "Add branding or ads to a playlist."
  }, {
    "title": "Apple CarPlay site",
    "id": 509,
    "url": "https://developer.apple.com/carplay",
    "resource_type": "guide",
    "description": "Guide to CarPlay development"
  }, {
    "title": "AR Quick Look Gallery",
    "id": 508,
    "url": "https://developer.apple.com/arkit/gallery",
    "resource_type": "download",
    "description": "AR Quick Look Gallery Page"
  }, {
    "title": "ResearchKit Repository",
    "id": 507,
    "url": "https://github.com/researchkit/researchkit",
    "resource_type": "guide",
    "description": "ResearchKit Repository"
  }, {
    "title": "CareKit Overview",
    "id": 506,
    "url": "http://carekit.org/docs/docs/Overview/Overview.html",
    "resource_type": "guide",
    "description": "CareKit Overview"
  }, {
    "title": "ResearchKit Overview",
    "id": 505,
    "url": "http://researchkit.org/docs/docs/Overview/GuideOverview.html",
    "resource_type": "guide",
    "description": "ResearchKit Overview"
  }, {
    "title": "Filtering Network Traffic",
    "id": 504,
    "url": "https://developer.apple.com/documentation/networkextension/filtering_network_traffic",
    "resource_type": "samplecode",
    "description": "Use the Network Extension framework to allow or deny network connections."
  }, {
    "title": "HEVC Video with Alpha Interoperability Profile",
    "id": 503,
    "url": "https://developer.apple.com/av-foundation/HEVC-Video-with-Alpha-Interoperability-Profile.pdf",
    "resource_type": "guide"
  }, {
    "title": "Collecting Network Connection Metrics",
    "id": 502,
    "url": "https://developer.apple.com/documentation/network/nwconnection/collecting_network_connection_metrics",
    "resource_type": "samplecode",
    "description": "Use reports to understand how DNS and protocol handshakes impact connection establishment."
  }, {
    "title": "Building a Custom Peer-to-Peer Protocol",
    "id": 501,
    "url": "https://developer.apple.com/documentation/network/building_a_custom_peer-to-peer_protocol",
    "resource_type": "samplecode",
    "description": "Use Bonjour and TLS to establish secure connections between devices, and define a protocol for sending messages to play a simple game of Tic-Tac-Toe."
  }, {
    "title": "Network",
    "id": 498,
    "url": "https://developer.apple.com/documentation/network",
    "resource_type": "documentation",
    "description": "Create network connections to send and receive data using transport and security protocols."
  }, {
    "title": "Generating a Signature for Subscription Offers",
    "id": 496,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase/generating_a_signature_for_subscription_offers",
    "resource_type": "documentation",
    "description": "Create a signature to validate a subscription offer using your private key."
  }, {
    "title": "Promote Your Subscriptions with New Offers",
    "id": 495,
    "url": "https://developer.apple.com/app-store-connect/whats-new/?id=02222019",
    "resource_type": "documentation"
  }, {
    "title": "Setting Up Subscription Offers",
    "id": 494,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase/setting_up_subscription_offers",
    "resource_type": "documentation",
    "description": "Generate a key and configure offers for auto-renewable subscriptions in App Store Connect."
  }, {
    "title": "Implementing Subscription Offers in Your App",
    "id": 493,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase/implementing_subscription_offers_in_your_app",
    "resource_type": "documentation",
    "description": "Offer discounted pricing for auto-renewable subscription products to eligible subscribers."
  }, {
    "title": "Enabling Status Update Notifications",
    "id": 491,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase/enabling_status_update_notifications",
    "resource_type": "documentation",
    "description": "Use server notifications from the App Store to monitor and respond to users' subscription status changes."
  }, {
    "title": "SKStorefront",
    "id": 490,
    "url": "https://developer.apple.com/documentation/storekit/skstorefront",
    "resource_type": "documentation",
    "description": "An object containing the location and unique identifier for an Apple App Store storefront."
  }, {
    "title": "pushRegistry(_:didReceiveIncomingPushWith:for:completion:)",
    "id": 488,
    "url": "https://developer.apple.com/documentation/pushkit/pkpushregistrydelegate/2875784-pushregistry",
    "resource_type": "documentation",
    "description": "Notifies the delegate that a remote push has been received."
  }, {
    "title": "HTTP Live Streaming",
    "id": 487,
    "url": "https://developer.apple.com/documentation/http_live_streaming",
    "resource_type": "documentation",
    "description": "Send audio and video to iOS, tvOS, and macOS devices."
  }, {
    "title": "HTTP Live Streaming - Overview",
    "id": 486,
    "url": "https://developer.apple.com/streaming/",
    "resource_type": "guide"
  }, {
    "title": "HTTP Live Streaming Tools",
    "id": 485,
    "url": "https://developer.apple.com/download/more/?=hls",
    "resource_type": "download"
  }, {
    "title": "Xcode Help: Test under adverse device conditions",
    "id": 484,
    "url": "https://help.apple.com/xcode/mac/current/#/dev308429d42",
    "resource_type": "documentation"
  }, {
    "title": "Swift API Guidelines",
    "id": 483,
    "url": "https://swift.org/documentation/api-design-guidelines/",
    "resource_type": "guide"
  }, {
    "title": "About Apple File System",
    "id": 481,
    "url": "https://developer.apple.com/documentation/foundation/file_system/about_apple_file_system",
    "resource_type": "documentation",
    "description": "Use high-level APIs to get the most out of Apple File System."
  }, {
    "title": "Apple CryptoKit",
    "id": 480,
    "url": "https://developer.apple.com/documentation/cryptokit",
    "resource_type": "documentation",
    "description": "Perform cryptographic operations securely and efficiently."
  }, {
    "title": "In-App Purchase",
    "id": 479,
    "url": "https://developer.apple.com/documentation/storekit/in-app_purchase",
    "resource_type": "documentation",
    "description": "Offer users additional content and services through purchases made within your app."
  }, {
    "title": "Turi Create on GitHub",
    "id": 478,
    "url": "https://github.com/apple/turicreate",
    "resource_type": "download",
    "description": "Turi Create simplifies the development of custom machine learning models. You don't have to be a machine learning expert to add recommendations, object detection, image classification, image similarity or activity classification to your app."
  }, {
    "title": "Incorporating Audio Effects and Instruments",
    "id": 477,
    "url": "https://developer.apple.com/documentation/audiotoolbox/incorporating_audio_effects_and_instruments",
    "resource_type": "samplecode",
    "description": "Add custom audio processing and MIDI instruments to your app by hosting Audio Unit (AU) plug-ins."
  }, {
    "title": "Creating Custom Audio Effects",
    "id": 476,
    "url": "https://developer.apple.com/documentation/audiotoolbox/creating_custom_audio_effects",
    "resource_type": "samplecode",
    "description": "Add custom audio effect processing to apps like Logic Pro X and GarageBand by creating Audio Unit (AU) plug-ins."
  }, {
    "title": "Protecting the User’s Privacy",
    "id": 475,
    "url": "https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy",
    "resource_type": "documentation",
    "description": "Secure personal data, and respect user preferences for how data is used."
  }, {
    "title": "Xcode Help: Upload a macOS app to be notarized",
    "id": 474,
    "url": "https://help.apple.com/xcode/mac/current/#/dev88332a81e",
    "resource_type": "documentation"
  }, {
    "title": "Notarizing Your App Before Distribution",
    "id": 473,
    "url": "https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution",
    "resource_type": "documentation",
    "description": "Give users even more confidence in your software by submitting it to Apple for notarization."
  }, {
    "title": "Resolving Common Notarization Issues",
    "id": 472,
    "url": "https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/resolving_common_notarization_issues",
    "resource_type": "documentation",
    "description": "Handle common problems reported in the notarization log file, or that arise during ticket stapling."
  }, {
    "title": "Signing Your Apps for Gatekeeper",
    "id": 471,
    "url": "https://developer.apple.com/developer-id/",
    "resource_type": "documentation"
  }, {
    "title": "Using Apple Set Top Box APIs",
    "id": 470,
    "url": "https://help.apple.com/itc/tvpsso/#/itc1b8f4f78d",
    "resource_type": "guide"
  }, {
    "title": "Integrate Your App With the VideoSubscriberAccount Framework",
    "id": 469,
    "url": "https://help.apple.com/itc/tvpsso/#/itcdf71ebe3e",
    "resource_type": "guide"
  }, {
    "title": "Single Sign-On - Create an Authentication Context",
    "id": 468,
    "url": "https://help.apple.com/itc/tvpsso/#/itc072f6129a",
    "resource_type": "guide"
  }, {
    "title": "Supporting Set Top Box and Zero Sign-On for TV Providers",
    "id": 467,
    "url": "https://help.apple.com/itc/tvpsso/#/itc6ffb4353e",
    "resource_type": "guide"
  }, {
    "title": "Human Interface Guidelines - Subscriptions",
    "id": 466,
    "url": "https://developer.apple.com/design/human-interface-guidelines/subscriptions/overview/",
    "resource_type": "guide"
  }, {
    "title": "Training a Create ML Model to Classify Flowers",
    "id": 465,
    "url": "https://developer.apple.com/documentation/vision/training_a_create_ml_model_to_classify_flowers",
    "resource_type": "documentation",
    "description": "Train a flower classifier using Create ML in Swift Playgrounds, and apply the resulting model to real-time image classification using Vision."
  }, {
    "title": "Recognizing Objects in Live Capture",
    "id": 464,
    "url": "https://developer.apple.com/documentation/vision/recognizing_objects_in_live_capture",
    "resource_type": "documentation",
    "description": "Apply Vision algorithms to identify objects in real-time video."
  }, {
    "title": "App Store Connect API Resources",
    "id": 463,
    "url": "https://developer.apple.com/app-store-connect/api/",
    "resource_type": "guide",
    "description": "Gain the flexibility to customize your workflows so you can focus on creating great apps. This REST API lets you automate tasks on App Store Connect for increased efficiency. Use it for development, testing, and reporting within your team’s internal workflow."
  }, {
    "title": "App Store Connect API",
    "id": 462,
    "url": "https://developer.apple.com/documentation/appstoreconnectapi",
    "resource_type": "documentation",
    "description": "Automate tasks on the Apple Developer website and App Store Connect."
  }, {
    "title": "LoopHealth: Using health documents and Activity rings in HealthKit and HealthKitUI",
    "id": 460,
    "url": "https://developer.apple.com/library/archive/samplecode/LoopHealth/Introduction/Intro.html",
    "resource_type": "samplecode",
    "description": "This sample demonstrates how to use HKActivityRingView to display a user’s Apple Watch Activity rings in your own app. This sample also illustrates how apps from healthcare organizations can use the health documents APIs introduced in iOS 10 to share and retrieve a user’s health records."
  }, {
    "title": "Mac Deployment Overview",
    "id": 452,
    "url": "https://www.apple.com/business/resources/docs/Mac_Deployment_Overview.pdf",
    "resource_type": "guide",
    "description": "This document provides guidance on everything you need to deploy macOS at scale, from understanding your existing infrastructure to device management and streamlined provisioning."
  }, {
    "title": "macOS Security Overview",
    "id": 450,
    "url": "https://www.apple.com/business/resources/docs/macOS_Security_Overview.pdf",
    "resource_type": "guide",
    "description": "Apple designed the macOS platform with an integrated approach to hardware, software, and services that provides security by design and makes it simple to configure, deploy, and manage. macOS includes the key security technologies that an IT professional needs to protect corporate data and integrate within secure enterprise networking environments."
  }, {
    "title": "Offering Subscriptions",
    "id": 448,
    "url": "https://developer.apple.com/app-store/subscriptions/",
    "resource_type": "documentation"
  }, {
    "title": "CloudKit & GDPR",
    "id": 447,
    "url": "https://developer.apple.com/support/allowing-users-to-manage-data/",
    "resource_type": "documentation"
  }, {
    "title": "Universal Links",
    "id": 446,
    "url": "https://developer.apple.com/ios/universal-links/",
    "resource_type": "documentation"
  }, {
    "title": "NFC Forum",
    "id": 445,
    "url": "https://nfc-forum.org/",
    "resource_type": "documentation",
    "description": "NFC Standards"
  }, {
    "title": "2017 Introducing CoreNFC",
    "id": 444,
    "url": "https://developer.apple.com/videos/play/wwdc2017/718/",
    "resource_type": "documentation",
    "description": "Intro to CoreNFC video"
  }, {
    "title": "Create ML",
    "id": 443,
    "url": "https://developer.apple.com/documentation/createml",
    "resource_type": "documentation",
    "description": "Create machine learning models for use in your app."
  }, {
    "title": "Apple Podcasts - What's New in iOS 12",
    "id": 442,
    "url": "https://podcasts.apple.com/resources/spec/ApplePodcastsSpecUpdatesiOS12.pdf",
    "resource_type": "guide"
  }, {
    "title": "Swift Playgrounds Author Template",
    "id": 441,
    "url": "https://developer.apple.com/download/more/?=Swift%20Playgrounds%20Author%20Template",
    "resource_type": "download"
  }, {
    "title": "Mac OS X Debugging Magic",
    "id": 440,
    "url": "https://developer.apple.com/library/archive/technotes/tn2124/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "iOS Debugging Magic",
    "id": 439,
    "url": "https://developer.apple.com/library/archive/technotes/tn2239/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "Understanding and Analyzing Application Crash Reports",
    "id": 438,
    "url": "https://developer.apple.com/library/archive/technotes/tn2151/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "Thread Sanitizer",
    "id": 437,
    "url": "https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer",
    "resource_type": "documentation",
    "description": "Audit threading issues in your code."
  }, {
    "title": "Introducing Storage Access API",
    "id": 436,
    "url": "https://webkit.org/blog/8124/introducing-storage-access-api/",
    "resource_type": "documentation",
    "description": "Learn about Storage Access API and Intelligent Tracking Prevention."
  }, {
    "title": "Clipboard API Improvements",
    "id": 435,
    "url": "https://webkit.org/blog/8170/clipboard-api-improvements/",
    "resource_type": "documentation",
    "description": "Learn about updates to drag and drop features this year."
  }, {
    "title": "Service Worker API",
    "id": 434,
    "url": "https://webkit.org/blog/8090/workers-at-your-service/",
    "resource_type": "documentation",
    "description": "Learn to use the Service Worker API."
  }, {
    "title": "Payment Request API for Apple Pay",
    "id": 433,
    "url": "https://webkit.org/blog/8182/introducing-the-payment-request-api-for-apple-pay/",
    "resource_type": "documentation",
    "description": "Support Apple Pay using the Payment Request API"
  }, {
    "title": "Password AutoFill",
    "id": 432,
    "url": "https://developer.apple.com/documentation/security/password_autofill",
    "resource_type": "documentation",
    "description": "Streamline your app’s login and onboarding procedures."
  }, {
    "title": "Safari App Extensions",
    "id": 431,
    "url": "https://developer.apple.com/documentation/safariservices/safari_app_extensions",
    "resource_type": "documentation",
    "description": "Learn how Safari app extensions extend the web-browsing experience in Safari by leveraging web technologies and native code."
  }, {
    "title": "iOS Design Resources",
    "id": 430,
    "url": "https://developer.apple.com/design/resources/",
    "resource_type": "download"
  }, {
    "title": "TextEdit Sample Code",
    "id": 429,
    "url": "https://developer.apple.com/library/archive/samplecode/TextEdit/",
    "resource_type": "samplecode"
  }, {
    "title": "MusicKit",
    "id": 428,
    "url": "https://developer.apple.com/musickit/",
    "resource_type": "documentation",
    "description": "MusicKit lets users play Apple Music and their local music library natively from your apps and now websites. When a user provides permission to their Apple Music account, your app can create playlists, add songs to their library, and play any of the millions of songs in the Apple Music catalog."
  }, {
    "title": "Use Scripts to Add Custom Commands to LLDB",
    "id": 427,
    "url": "https://developer.apple.com/sample-code/wwdc/2018/UseScriptsToAddCustomCommandsToLLDB.zip",
    "resource_type": "documentation",
    "description": "An example Python script that adds a custom nudge command to modify the position of views while paused in the debugger. Use it as a basis for your own LLDB scripts."
  }, {
    "title": "AuthenticationServices",
    "id": 426,
    "url": "https://developer.apple.com/documentation/authenticationservices",
    "resource_type": "documentation",
    "description": "Make it easy for users to log into apps and services."
  }, {
    "title": "Downloads for Apple Developers",
    "id": 425,
    "url": "https://developer.apple.com/download/more/",
    "resource_type": "documentation"
  }, {
    "title": "Logging",
    "id": 424,
    "url": "https://developer.apple.com/documentation/os/logging",
    "resource_type": "documentation",
    "description": "Efficiently capture log messages to memory and disk. Manage logging behavior and persistence."
  }, {
    "title": "Particles Sample App",
    "id": 423,
    "url": "https://developer.apple.com/documentation/scenekit/particles_building_a_uidocumentbrowserviewcontroller_based_application?language=objc",
    "resource_type": "samplecode"
  }, {
    "title": "Accessing Health Records",
    "id": 422,
    "url": "https://developer.apple.com/documentation/healthkit/samples/accessing_health_records",
    "resource_type": "documentation",
    "description": "Read clinical record data from the HealthKit store."
  }, {
    "title": "Distribute Outside the Mac App Store (macOS)",
    "id": 421,
    "url": "https://help.apple.com/xcode/mac/current/#/dev033e997ca",
    "resource_type": "documentation"
  }, {
    "title": "Develop and Distribute Enterprise Apps",
    "id": 420,
    "url": "https://help.apple.com/xcode/mac/current/#/devba5e7054d",
    "resource_type": "documentation"
  }, {
    "title": "Business Chat Sandbox",
    "id": 419,
    "url": "https://developer.apple.com/support/business-chat-sandbox/",
    "resource_type": "samplecode"
  }, {
    "title": "Apple Business Register",
    "id": 418,
    "url": "https://register.apple.com/",
    "resource_type": "documentation"
  }, {
    "title": "Business Chat\u2028 Policies and Best Practices",
    "id": 417,
    "url": "https://register.apple.com/resources/business-chat/BC-Policies_and_Best_Practices.pdf",
    "resource_type": "guide"
  }, {
    "title": "Business Chat\u2028 Getting Started Guide",
    "id": 416,
    "url": "https://register.apple.com/resources/business-chat/BC-GettingStarted.pdf",
    "resource_type": "guide"
  }, {
    "title": "Business Chat Feature Guide",
    "id": 415,
    "url": "https://register.apple.com/resources/business-chat/BC-Features.pdf",
    "resource_type": "guide"
  }, {
    "title": "Apple Developer: MapKit JS",
    "id": 414,
    "url": "https://developer.apple.com/maps/mapkitjs/",
    "resource_type": "documentation"
  }, {
    "title": "FHIR specification (DSTU2, 1.0.2)",
    "id": 413,
    "url": "http://hl7.org/fhir/DSTU2/index.html",
    "resource_type": "documentation"
  }, {
    "title": "Password Rules Validation Tool",
    "id": 412,
    "url": "https://developer.apple.com/password-rules",
    "resource_type": "documentation"
  }, {
    "title": "Submitting iOS apps to the App Store",
    "id": 411,
    "url": "https://developer.apple.com/ios/submit/",
    "resource_type": "documentation"
  }, {
    "title": "App Store Review Guidelines",
    "id": 410,
    "url": "https://developer.apple.com/app-store/review/guidelines/",
    "resource_type": "documentation"
  }, {
    "title": "Apple Developer Program",
    "id": 409,
    "url": "https://developer.apple.com/programs/",
    "resource_type": "documentation"
  }, {
    "title": "Human Interface Guidelines- App Icon",
    "id": 408,
    "url": "https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/app-icon/",
    "resource_type": "documentation"
  }, {
    "title": "About Testing with Xcode",
    "id": 407,
    "url": "https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html",
    "resource_type": "documentation"
  }, {
    "title": "HL7 FHIR Foundation",
    "id": 406,
    "url": "http://www.fhir.org",
    "resource_type": "documentation"
  }, {
    "title": "Argonaut Data Query Implementation Guide",
    "id": 405,
    "url": "http://www.fhir.org/guides/argonaut/r2/index.html",
    "resource_type": "documentation"
  }, {
    "title": "Using AVFoundation to Play and Persist HTTP Live Streams",
    "id": 404,
    "url": "https://developer.apple.com/documentation/avfoundation/media_assets_playback_and_editing/using_avfoundation_to_play_and_persist_http_live_streams",
    "resource_type": "samplecode",
    "description": "Play HTTP Live Streams and preserve streams on disk for offline play back."
  }, {
    "title": "Building an App Based on the Document Browser View Controller",
    "id": 403,
    "url": "https://developer.apple.com/documentation/uikit/view_controllers/building_an_app_based_on_the_document_browser_view_controller",
    "resource_type": "samplecode",
    "description": "Implement a custom document file format to manage user interactions with files on different cloud storage providers."
  }, {
    "title": "Attributed String Programming Guide",
    "id": 402,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/AttributedStrings/AttributedStrings.html",
    "resource_type": "guide"
  }, {
    "title": "Ruler and Paragraph Style Programming Topics",
    "id": 401,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Rulers/Rulers.html",
    "resource_type": "documentation"
  }, {
    "title": "Text Attribute Programming Topics",
    "id": 400,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TextAttributes/TextAttributes.html",
    "resource_type": "documentation"
  }, {
    "title": "Text System User Interface Layer Programming Guide",
    "id": 399,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TextUILayer/TextUILayer.html",
    "resource_type": "guide"
  }, {
    "title": "Text Layout Programming Guide",
    "id": 398,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TextLayout/TextLayout.html",
    "resource_type": "guide"
  }, {
    "title": "Text System Storage Layer Overview",
    "id": 397,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TextStorageLayer/TextStorageLayer.html",
    "resource_type": "guide"
  }, {
    "title": "Cocoa Text Architecture Guide",
    "id": 396,
    "url": "https://developer.apple.com/library/content/documentation/TextFonts/Conceptual/CocoaTextArchitecture/Introduction/Introduction.html",
    "resource_type": "guide"
  }, {
    "title": "Text Programming Guide for iOS",
    "id": 395,
    "url": "https://developer.apple.com/library/content/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html",
    "resource_type": "guide"
  }, {
    "title": "Communicating with APNs",
    "id": 394,
    "url": "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html",
    "resource_type": "documentation"
  }, {
    "title": "SwiftShot: Creating a Game for Augmented Reality",
    "id": 393,
    "url": "https://developer.apple.com/documentation/arkit/swiftshot_creating_a_game_for_augmented_reality",
    "resource_type": "samplecode",
    "description": "See how Apple built the featured demo for WWDC18, and get tips for making your own multiplayer games using ARKit, SceneKit, and Swift."
  }, {
    "title": "Implementing netcat with Network Framework",
    "id": 392,
    "url": "https://developer.apple.com/documentation/network/implementing_netcat_with_network_framework",
    "resource_type": "samplecode",
    "description": "Build a simple netcat tool that establishes network connections and transfers data."
  }, {
    "title": "Delivering an Exceptional Accessibility Experience",
    "id": 391,
    "url": "https://developer.apple.com/documentation/uikit/accessibility/delivering_an_exceptional_accessibility_experience",
    "resource_type": "samplecode",
    "description": "Make improvements to your app’s interaction model to support assistive technologies such as VoiceOver."
  }, {
    "title": "Using Watch Connectivity to Communicate Between Your Apple Watch App and iPhone App",
    "id": 390,
    "url": "https://developer.apple.com/documentation/watchconnectivity/using_watch_connectivity_to_communicate_between_your_apple_watch_app_and_iphone_app",
    "resource_type": "samplecode",
    "description": "Implement two-way communication between your Apple Watch app and the paired iPhone app with the Watch Connectivity framework."
  }, {
    "title": "Human Interface Guidelines",
    "id": 389,
    "url": "https://developer.apple.com/design/human-interface-guidelines/",
    "resource_type": "documentation"
  }, {
    "title": "Human Interface Guidelines - Augmented Reality",
    "id": 388,
    "url": "https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/augmented-reality/",
    "resource_type": "documentation",
    "description": "Guidelines for designing augmented reality apps."
  }, {
    "title": "Security",
    "id": 387,
    "url": "https://developer.apple.com/documentation/security",
    "resource_type": "documentation",
    "description": "Secure the data your app manages, and control access to your app."
  }, {
    "title": "Incorporating ClassKit into an Educational App",
    "id": 386,
    "url": "https://developer.apple.com/documentation/classkit/incorporating_classkit_into_an_educational_app",
    "resource_type": "samplecode",
    "description": "Walk through the process of setting up assignments and recording student progress."
  }, {
    "title": "ClassKit",
    "id": 385,
    "url": "https://developer.apple.com/documentation/classkit",
    "resource_type": "documentation",
    "description": "Enable teachers to assign activities from your app’s content and to view student progress."
  }, {
    "title": "Tracking the User’s Face in Real Time",
    "id": 384,
    "url": "https://developer.apple.com/documentation/vision/tracking_the_user_s_face_in_real_time",
    "resource_type": "samplecode",
    "description": "Detect and track faces from the selfie cam feed in real time."
  }, {
    "title": "Tracking Multiple Objects or Rectangles in Video",
    "id": 383,
    "url": "https://developer.apple.com/documentation/vision/tracking_multiple_objects_or_rectangles_in_video",
    "resource_type": "samplecode",
    "description": "Apply Vision algorithms to track objects or rectangles throughout a video."
  }, {
    "title": "Capturing Photos with Depth",
    "id": 382,
    "url": "https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/capturing_photos_with_depth",
    "resource_type": "documentation",
    "description": "Get a depth map with a photo to create effects like the system camera’s Portrait mode (on compatible devices)."
  }, {
    "title": "Streaming Depth Data from the TrueDepth Camera",
    "id": 381,
    "url": "https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/streaming_depth_data_from_the_truedepth_camera",
    "resource_type": "documentation",
    "description": "Visualize depth data in 2D and 3D from the TrueDepth camera."
  }, {
    "title": "Enhancing Live Video by Leveraging TrueDepth Camera Data",
    "id": 380,
    "url": "https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/enhancing_live_video_by_leveraging_truedepth_camera_data",
    "resource_type": "documentation",
    "description": "Apply your own background to a live capture feed streamed from the front-facing TrueDepth camera."
  }, {
    "title": "Detecting Objects in Still Images",
    "id": 379,
    "url": "https://developer.apple.com/documentation/vision/detecting_objects_in_still_images",
    "resource_type": "documentation",
    "description": "Locate and demarcate rectangles, faces, barcodes, and text in images using the Vision framework."
  }, {
    "title": "Classifying Images with Vision and Core ML",
    "id": 378,
    "url": "https://developer.apple.com/documentation/vision/classifying_images_with_vision_and_core_ml",
    "resource_type": "documentation",
    "description": "Preprocess photos using the Vision framework and classify them with a Core ML model."
  }, {
    "title": "NSFilePromiseProvider",
    "id": 377,
    "url": "https://developer.apple.com/documentation/appkit/nsfilepromiseprovider",
    "resource_type": "documentation",
    "description": "An object that provides a promise for the pasteboard."
  }, {
    "title": "NSFilePromiseReceiver",
    "id": 376,
    "url": "https://developer.apple.com/documentation/appkit/nsfilepromisereceiver",
    "resource_type": "documentation",
    "description": "An object that receives a file promise from the pasteboard."
  }, {
    "title": "NSFilePromiseProviderDelegate",
    "id": 375,
    "url": "https://developer.apple.com/documentation/appkit/nsfilepromiseproviderdelegate",
    "resource_type": "documentation",
    "description": "A set of methods that provides the name of the promised file and writes the file to the destination directory when the file promise is fulfilled."
  }, {
    "title": "PhotoKit",
    "id": 374,
    "url": "https://developer.apple.com/documentation/photokit",
    "resource_type": "documentation",
    "description": "Work with image and video assets managed by the Photos app, including those from iCloud Photos and Live Photos."
  }, {
    "title": "Real-Time Video Effects with vImage",
    "id": 373,
    "url": "https://developer.apple.com/documentation/accelerate/vimage/real-time_video_effects_with_vimage",
    "resource_type": "documentation",
    "description": "Use vImage to apply effects to a video feed in real time."
  }, {
    "title": "Rotating a Cube by Transforming Its Vertices",
    "id": 372,
    "url": "https://developer.apple.com/documentation/accelerate/simd/rotating_a_cube_by_transforming_its_vertices",
    "resource_type": "documentation",
    "description": "Rotate a cube through a series of keyframes using quaternion interpolation to transition between them."
  }, {
    "title": "Halftone Descreening with 2D Fast Fourier Transform",
    "id": 371,
    "url": "https://developer.apple.com/documentation/accelerate/vdsp/fast_fourier_transforms/halftone_descreening_with_2d_fast_fourier_transform",
    "resource_type": "documentation",
    "description": "Reduce or remove periodic artifacts from images."
  }, {
    "title": "Signal Extraction from Noise",
    "id": 370,
    "url": "https://developer.apple.com/documentation/accelerate/vdsp/discrete_cosine_transforms/signal_extraction_from_noise",
    "resource_type": "documentation",
    "description": "Use Accelerate’s discrete cosine transform to remove noise from a signal."
  }, {
    "title": "vImage",
    "id": 369,
    "url": "https://developer.apple.com/documentation/accelerate/vimage",
    "resource_type": "documentation",
    "description": "Manipulate large images using the CPU’s vector processor."
  }, {
    "title": "simd",
    "id": 368,
    "url": "https://developer.apple.com/documentation/accelerate/simd",
    "resource_type": "documentation",
    "description": "Perform computations on small vectors and matrices."
  }, {
    "title": "vDSP",
    "id": 367,
    "url": "https://developer.apple.com/documentation/accelerate/vdsp",
    "resource_type": "documentation",
    "description": "Perform basic arithmetic operations and common digital signal processing routines on large vectors."
  }, {
    "title": "Accelerate",
    "id": 366,
    "url": "https://developer.apple.com/documentation/accelerate",
    "resource_type": "documentation",
    "description": "Make large-scale mathematical computations and image calculations, optimized for high performance."
  }, {
    "title": "Metal for Accelerating Ray Tracing",
    "id": 365,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/metal_for_accelerating_ray_tracing",
    "resource_type": "documentation",
    "description": "Use the Metal Performance Shaders ray intersector to perform ray-traced rendering."
  }, {
    "title": "Argument Buffers with GPU Encoding",
    "id": 364,
    "url": "https://developer.apple.com/documentation/metal/buffers/argument_buffers_with_gpu_encoding",
    "resource_type": "documentation",
    "description": "Demonstrates how to encode an argument buffer with a compute pass and then access its arguments in a subsequent render pass."
  }, {
    "title": "Argument Buffers with Arrays and Resource Heaps",
    "id": 363,
    "url": "https://developer.apple.com/documentation/metal/buffers/argument_buffers_with_arrays_and_resource_heaps",
    "resource_type": "documentation",
    "description": "Demonstrates how to define an argument buffer with arrays and reduce CPU overhead by combining argument buffers with resource heaps."
  }, {
    "title": "Basic Argument Buffers",
    "id": 362,
    "url": "https://developer.apple.com/documentation/metal/buffers/basic_argument_buffers",
    "resource_type": "documentation",
    "description": "Demonstrates how to manage groups of resources with an argument buffer."
  }, {
    "title": "Encoding Indirect Command Buffers on the CPU",
    "id": 361,
    "url": "https://developer.apple.com/documentation/metal/advanced_command_setup/encoding_indirect_command_buffers_on_the_cpu",
    "resource_type": "documentation",
    "description": "Reduce CPU overhead and simplify your command execution by reusing commands."
  }, {
    "title": "Image Filter Graph with Heaps and Events",
    "id": 360,
    "url": "https://developer.apple.com/documentation/metal/synchronization/image_filter_graph_with_heaps_and_events",
    "resource_type": "documentation",
    "description": "Demonstrates how to use heaps and events to optimize a multistage image filter."
  }, {
    "title": "Image Filter Graph with Heaps and Fences",
    "id": 359,
    "url": "https://developer.apple.com/documentation/metal/heaps/image_filter_graph_with_heaps_and_fences",
    "resource_type": "documentation",
    "description": "Demonstrates how to use heaps and fences to optimize a multistage image filter."
  }, {
    "title": "Optimizing Performance with the Shader Profiler",
    "id": 358,
    "url": "https://developer.apple.com/documentation/metal/shader_authoring/optimizing_performance_with_the_shader_profiler",
    "resource_type": "documentation",
    "description": "Discover which lines of shader code take the longest to complete, identify their primary GPU activities, and tune your shaders accordingly."
  }, {
    "title": "Developing and Debugging Metal Shaders",
    "id": 357,
    "url": "https://developer.apple.com/documentation/metal/shader_authoring/developing_and_debugging_metal_shaders",
    "resource_type": "documentation",
    "description": "Step through your app's shaders to inspect their variables during execution, and use a live preview to enhance development."
  }, {
    "title": "Viewing Your Frame Graph",
    "id": 356,
    "url": "https://developer.apple.com/documentation/metal/render_pass/viewing_your_frame_graph",
    "resource_type": "documentation",
    "description": "View your render passes as a flow chart to inspect resource dependencies and understand which commands wait on others to complete."
  }, {
    "title": "Mixing Metal and OpenGL Rendering in a View",
    "id": 355,
    "url": "https://developer.apple.com/documentation/metal/mixing_metal_and_opengl_rendering_in_a_view",
    "resource_type": "documentation",
    "description": "Draw with Metal and OpenGL in the same view using an interoperable texture."
  }, {
    "title": "Positioning Content Relative to the Safe Area",
    "id": 354,
    "url": "https://developer.apple.com/documentation/uikit/uiview/positioning_content_relative_to_the_safe_area",
    "resource_type": "documentation",
    "description": "Position views so that they are not obstructed by other content."
  }, {
    "title": "UIView",
    "id": 353,
    "url": "https://developer.apple.com/documentation/uikit/uiview",
    "resource_type": "documentation",
    "description": "An object that manages the content for a rectangular area on the screen."
  }, {
    "title": "UIButton",
    "id": 352,
    "url": "https://developer.apple.com/documentation/uikit/uibutton",
    "resource_type": "documentation",
    "description": "A control that executes your custom code in response to user interactions."
  }, {
    "title": "Defining Relevant Shortcuts for Your App",
    "id": 351,
    "url": "https://developer.apple.com/documentation/sirikit/relevant_shortcuts/defining_relevant_shortcuts_for_your_app",
    "resource_type": "documentation",
    "description": "Provide Siri relevant shortcuts to display on the Siri watch face."
  }, {
    "title": "Soup Chef: Accelerating App Interactions with Shortcuts",
    "id": 350,
    "url": "https://developer.apple.com/documentation/sirikit/soup_chef_accelerating_app_interactions_with_shortcuts",
    "resource_type": "samplecode",
    "description": "Make it easy for people to use Siri with your app by providing shortcuts to your app’s actions."
  }, {
    "title": "Deleting Donated Shortcuts",
    "id": 349,
    "url": "https://developer.apple.com/documentation/sirikit/deleting_donated_shortcuts",
    "resource_type": "documentation",
    "description": "Remove your donations from Siri."
  }, {
    "title": "Donating Shortcuts",
    "id": 348,
    "url": "https://developer.apple.com/documentation/sirikit/donating_shortcuts",
    "resource_type": "documentation",
    "description": "Tell Siri about shortcuts to actions that the user performed in your app."
  }, {
    "title": "CarPlay",
    "id": 347,
    "url": "https://developer.apple.com/documentation/carplay",
    "resource_type": "documentation",
    "description": "Add CarPlay support to your navigation app."
  }, {
    "title": "QLPreviewController",
    "id": 346,
    "url": "https://developer.apple.com/documentation/quicklook/qlpreviewcontroller",
    "resource_type": "documentation",
    "description": "A specialized view for previewing an item."
  }, {
    "title": "ARReferenceObject",
    "id": 345,
    "url": "https://developer.apple.com/documentation/arkit/arreferenceobject",
    "resource_type": "documentation",
    "description": "The description of a real-world object you want ARKit to look for in the physical environment during an AR session."
  }, {
    "title": "Managing Session Lifecycle and Tracking Quality",
    "id": 344,
    "url": "https://developer.apple.com/documentation/arkit/managing_session_lifecycle_and_tracking_quality",
    "resource_type": "documentation",
    "description": "Keep the user informed on the current session state and recover from interruptions."
  }, {
    "title": "Creating a Multiuser AR Experience",
    "id": 343,
    "url": "https://developer.apple.com/documentation/arkit/creating_a_multiuser_ar_experience",
    "resource_type": "documentation",
    "description": "Transmit ARKit world-mapping data between nearby devices with the MultipeerConnectivity framework to create a shared basis for AR experiences."
  }, {
    "title": "Scanning and Detecting 3D Objects",
    "id": 342,
    "url": "https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects",
    "resource_type": "documentation",
    "description": "Record spatial features of real-world objects, then use the results to find those objects in the user’s environment and trigger AR content."
  }, {
    "title": "ARWorldMap",
    "id": 341,
    "url": "https://developer.apple.com/documentation/arkit/arworldmap",
    "resource_type": "documentation",
    "description": "The space-mapping state and set of anchors from a world-tracking AR session."
  }, {
    "title": "AREnvironmentProbeAnchor",
    "id": 340,
    "url": "https://developer.apple.com/documentation/arkit/arenvironmentprobeanchor",
    "resource_type": "documentation",
    "description": "An object that provides environmental lighting information for a specific area of space in a world-tracking AR session."
  }, {
    "title": "WebKit",
    "id": 338,
    "url": "https://developer.apple.com/documentation/webkit",
    "resource_type": "documentation",
    "description": "Display web content in windows. Implement browser features such as following user-activated links, managing a back-forward list, and managing a history of recently visited pages."
  }, {
    "title": "Uniform Type Identifiers Reference",
    "id": 337,
    "url": "https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1",
    "resource_type": "documentation"
  }, {
    "title": "Stream Programming Guide",
    "id": 336,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Streams/Streams.html",
    "resource_type": "documentation"
  }, {
    "title": "App Development with Swift",
    "id": 335,
    "url": "https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11",
    "resource_type": "documentation"
  }, {
    "title": "View Controller Catalog for iOS",
    "id": 334,
    "url": "https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/ViewControllerCatalog/Chapters/NavigationControllers.html",
    "resource_type": "documentation"
  }, {
    "title": "Table View Programming Guide for iOS",
    "id": 333,
    "url": "https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/TableView_iPhone/AboutTableViewsiPhone/AboutTableViewsiPhone.html",
    "resource_type": "documentation"
  }, {
    "title": "UserDefaults",
    "id": 332,
    "url": "https://developer.apple.com/documentation/foundation/userdefaults",
    "resource_type": "documentation",
    "description": "An interface to the user’s defaults database, where you store key-value pairs persistently across launches of your app."
  }, {
    "title": "View Controller Programming Guide for iOS",
    "id": 331,
    "url": "https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/",
    "resource_type": "documentation"
  }, {
    "title": "Apple Business Manager User Guide",
    "id": 330,
    "url": "https://support.apple.com/guide/apple-business-manager/",
    "resource_type": "guide",
    "description": "Apple Business Manager User Guide"
  }, {
    "title": "MDM settings for IT",
    "id": 329,
    "url": "https://support.apple.com/guide/mdm/",
    "resource_type": "documentation"
  }, {
    "title": "Cisco DevNet: iOS App Developers",
    "id": 328,
    "url": "https://developer.cisco.com/site/apple/",
    "resource_type": "documentation"
  }, {
    "title": "Predix SDK for iOS",
    "id": 327,
    "url": "https://www.ge.com/digital/partner/apple",
    "resource_type": "documentation"
  }, {
    "title": "SAP Cloud Platform SDK for iOS",
    "id": 326,
    "url": "https://www.sap.com/developer/topics/cloud-platform-sdk-for-ios.html",
    "resource_type": "documentation"
  }, {
    "title": "Watson Services for Core ML",
    "id": 325,
    "url": "https://developer.ibm.com/code/patterns/deploy-a-core-ml-model-with-watson-visual-recognition/",
    "resource_type": "documentation"
  }, {
    "title": "IBM Cloud Developer Console for Apple",
    "id": 324,
    "url": "https://www.ibm.com/cloud/apple-developer",
    "resource_type": "documentation"
  }, {
    "title": "Profiles and Logs",
    "id": 323,
    "url": "https://developer.apple.com/bug-reporting/profiles-and-logs/",
    "resource_type": "documentation"
  }, {
    "title": "Intro to App Development with Swift",
    "id": 322,
    "url": "https://itunes.apple.com/us/book/intro-to-app-development-with-swift/id1118575552?mt=11",
    "resource_type": "download",
    "description": "This course is designed to help you build a solid foundation in programming fundamentals using Swift as the language. You’ll get practical experience with the tools, techniques, and concepts needed to build a basic iOS app from scratch. You’ll also learn user interface design principles, which are fundamental to programming and making great apps. Prior programming experience is not required for this course. If you have programming experience, you can move through the early lessons quickly as you continue to learn about software development tools, concepts, and best practices that go beyond programming fundamentals."
  }, {
    "title": "Releasing App Updates",
    "id": 321,
    "url": "https://developer.apple.com/app-store/smule/",
    "resource_type": "guide",
    "description": "Innovative feature updates have helped Smule build a thriving community of loyal users. Today, more than 186 million people have used its signature apps including Sing! Karaoke, AutoRap, and Magic Piano."
  }, {
    "title": "Localizing Evernote for Japan",
    "id": 320,
    "url": "https://developer.apple.com/app-store/evernote/",
    "resource_type": "guide",
    "description": "Evernote is a productivity app that delivers on its motto to help users “Remember Everything.” Evernote users can capture notes, files, and photos in one place, and sync content between iPhone, iPad, Mac, and Apple Watch for convenient access.\r\nWith an approach attuned to the needs of users across markets, Evernote has grown into one of the most recognizable productivity apps in the world."
  }, {
    "title": "Bringing CARROT Weather to Apple Watch",
    "id": 319,
    "url": "https://developer.apple.com/app-store/grailr/",
    "resource_type": "guide",
    "description": "The company behind the CARROT apps — which feature a snarky AI construct “with a heart of weapons-grade plutonium” — is actually just one self-taught man, Brian Mueller.\r\nMueller shares how CARROT Weather evolved for Apple Watch, and the effect the transition had on the app’s business model."
  }, {
    "title": "Building a Brand on Social Media",
    "id": 318,
    "url": "https://developer.apple.com/app-store/seriously/",
    "resource_type": "guide",
    "description": "Seriously’s first game, Best Fiends, surpassed 1.5 million daily users and a million social media followers in its first year, thanks to a focus on community building and a creative approach to marketing."
  }, {
    "title": "Using the Paid Business Model",
    "id": 317,
    "url": "https://developer.apple.com/app-store/three-minute-games/",
    "resource_type": "guide",
    "description": "Prior to launching the first Lifeline game on the App Store, 3 Minute Games’ expertise lay in releasing freemium games. The Big Fish studio shares why the paid business model made sense for the Lifeline series, and how the team keeps players engaged between releases."
  }, {
    "title": "Creating A Great Commerce Experience",
    "id": 316,
    "url": "https://developer.apple.com/app-store/houzz/",
    "resource_type": "guide",
    "description": "With a focus on providing the best experience for home renovation and interior design through technology, Houzz has grown into a thriving home improvement destination.\r\nHouzz shares its unique approach to e‑commerce, and how the experience evolved from a side project for co‑founders Alon Cohen and Adi Tatarko as they renovated their home to a multi-platform app with tens of millions of users monthly."
  }, {
    "title": "Marketing a Game at Launch",
    "id": 315,
    "url": "https://developer.apple.com/app-store/wrkshp/",
    "resource_type": "guide",
    "description": "WRKSHP’s first game, Battle Camp, continues to engage players years after its 2013 debut on the App Store. The indie developer shares how it built an audience in the lead-up to the game’s worldwide launch, and how it scaled from zero to hundreds of thousands of players by winning over its most passionate users."
  }, {
    "title": "Managing a Community",
    "id": 314,
    "url": "https://developer.apple.com/app-store/super-evil-megacorp/",
    "resource_type": "guide",
    "description": "Super Evil Megacorp is the team behind Vainglory, an immersive, mobile-first, multiplayer online battle arena (MOBA). The company shares why community is at the heart of the Vainglory experience, and how it stays connected to its players to ensure the game continues to evolve in the right direction."
  }, {
    "title": "Building a Business in the Kids Category",
    "id": 313,
    "url": "https://developer.apple.com/app-store/originator/",
    "resource_type": "guide",
    "description": "Originator was formed by five parents passionate about creating quality educational apps for young children. Founders Joe Ghazal and Rex Ishibashi share their approach to building a sustainable business in the Kids category, and the unexpected challenges and rewards they encountered along the way."
  }, {
    "title": "Shared Web Credentials",
    "id": 310,
    "url": "https://developer.apple.com/documentation/security/shared_web_credentials",
    "resource_type": "documentation",
    "description": "Share credentials between iOS apps and their website counterparts."
  }, {
    "title": "App Store Connect Resources and Help",
    "id": 309,
    "url": "https://itunespartner.apple.com/en/apps/videos",
    "resource_type": "guide"
  }, {
    "title": "AVPlayerViewController",
    "id": 276,
    "url": "https://developer.apple.com/documentation/avkit/avplayerviewcontroller",
    "resource_type": "documentation",
    "description": "An object that displays the video content from a player object along with system-supplied playback controls."
  }, {
    "title": "Placing Objects and Handling 3D Interaction",
    "id": 275,
    "url": "https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction",
    "resource_type": "samplecode",
    "description": "Place virtual content on real-world surfaces, and enable the user to interact with virtual content by using gestures."
  }, {
    "title": "Tracking and Visualizing Planes",
    "id": 274,
    "url": "https://developer.apple.com/documentation/arkit/tracking_and_visualizing_planes",
    "resource_type": "samplecode",
    "description": "Detect surfaces in the physical environment and visualize their shape and location in 3D space."
  }, {
    "title": "About Enhanced MSAA and Imageblock Sample Coverage Control",
    "id": 272,
    "url": "https://developer.apple.com/documentation/metal/mtldevice/ios_and_tvos_devices/about_gpu_family_4/about_enhanced_msaa_and_imageblock_sample_coverage_control",
    "resource_type": "documentation",
    "description": "Learn about accessing multisample tracking data within a tile shader, enabling development of custom MSAA resolve algorithms, and more."
  }, {
    "title": "About Raster Order Groups",
    "id": 271,
    "url": "https://developer.apple.com/documentation/metal/mtldevice/ios_and_tvos_devices/about_gpu_family_4/about_raster_order_groups",
    "resource_type": "documentation",
    "description": "Learn about precisely controlling the order of parallel fragment shader threads accessing the same pixel coordinates."
  }, {
    "title": "About Tile Shading",
    "id": 270,
    "url": "https://developer.apple.com/documentation/metal/mtldevice/ios_and_tvos_devices/about_gpu_family_4/about_tile_shading",
    "resource_type": "documentation",
    "description": "Learn about combining rendering and compute operations into a single render pass while sharing local memory."
  }, {
    "title": "About Imageblocks",
    "id": 269,
    "url": "https://developer.apple.com/documentation/metal/mtldevice/ios_and_tvos_devices/about_gpu_family_4/about_imageblocks",
    "resource_type": "documentation",
    "description": "Learn how imageblocks allow you to define and manipulate custom per-pixel data structures in high-bandwidth tile memory."
  }, {
    "title": "About GPU Family 4",
    "id": 268,
    "url": "https://developer.apple.com/documentation/metal/mtldevice/ios_and_tvos_devices/about_gpu_family_4",
    "resource_type": "documentation",
    "description": "Learn about A11 features, including raster order groups, tile shaders, and imageblocks."
  }, {
    "title": "Deferred Lighting",
    "id": 266,
    "url": "https://developer.apple.com/documentation/metal/deferred_lighting",
    "resource_type": "samplecode",
    "description": "Demonstrates how to implement a deferred lighting renderer that takes advantage of unique Metal features."
  }, {
    "title": "Forward Plus with Tile Shading",
    "id": 265,
    "url": "https://developer.apple.com/sample-code/metal/Forward-Plus-with-Tile-Shading.zip",
    "resource_type": "samplecode",
    "description": "This sample implements a forward plus renderer optimized using tile shading and the SIMD quad groups APIs available in Metal with A11+ GPUs."
  }, {
    "title": "Order Independent Transparency with Imageblocks",
    "id": 264,
    "url": "https://developer.apple.com/sample-code/metal/Order-Independent-Transparency-with-Imageblocks.zip",
    "resource_type": "samplecode",
    "description": "This sample demonstrates and implementation of multi layered alpha blending, an algorithm to achieve order independent transparency."
  }, {
    "title": "Metal Feature Set Tables",
    "id": 263,
    "url": "https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf",
    "resource_type": "guide",
    "description": "Features, limits, and capabilities of Metal."
  }, {
    "title": "Tracking and Visualizing Faces",
    "id": 262,
    "url": "https://developer.apple.com/documentation/arkit/tracking_and_visualizing_faces",
    "resource_type": "samplecode",
    "description": "Detect faces in a camera feed, overlay matching virtual content, and animate facial expressions in real-time."
  }, {
    "title": "UIViewController",
    "id": 261,
    "url": "https://developer.apple.com/documentation/uikit/uiviewcontroller",
    "resource_type": "documentation",
    "description": "An object that manages a view hierarchy for your UIKit app."
  }, {
    "title": "File System Programming Guide",
    "id": 260,
    "url": "https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672",
    "resource_type": "guide"
  }, {
    "title": "Make App Backups More Efficient",
    "id": 259,
    "url": "https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/PerformanceTips/PerformanceTips.html#//apple_ref/doc/uid/TP40007072-CH7-SW16",
    "resource_type": "documentation"
  }, {
    "title": "Preventing Files From Being Backed Up",
    "id": 258,
    "url": "https://developer.apple.com/library/content/qa/qa1719/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "iOS Data Storage Guidelines",
    "id": 257,
    "url": "https://developer.apple.com/icloud/documentation/data-storage/index.html",
    "resource_type": "guide"
  }, {
    "title": "App Programming Guide for tvOS",
    "id": 256,
    "url": "https://developer.apple.com/library/content/documentation/General/Conceptual/AppleTV_PG/",
    "resource_type": "guide"
  }, {
    "title": "Swift Ownership Manifesto",
    "id": 255,
    "url": "https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md",
    "resource_type": "guide"
  }, {
    "title": "The Elements of Typographic Style, Version 4.0 by Robert Bringhurst",
    "id": 254,
    "url": "http://typographica.org/typography-books/the-elements-of-typographic-style-4th-edition/",
    "resource_type": "guide"
  }, {
    "title": "Typographica: My Favorite Font Sources: A Shortlist of Trusted Foundries and Retailers",
    "id": 253,
    "url": "http://typographica.org/on-typography/my-favorite-font-sources-a-shortlist-of-trusted-foundries-and-retailers/",
    "resource_type": "documentation",
    "description": "My Favorite Font Sources: A Shortlist of Trusted Foundries and Retailers"
  }, {
    "title": "Typographica - Type Reviews, Books, Commentary",
    "id": 252,
    "url": "http://typographica.org",
    "resource_type": "guide"
  }, {
    "title": "Thinking with Type by Ellen Lupton",
    "id": 251,
    "url": "http://thinkingwithtype.com",
    "resource_type": "guide"
  }, {
    "title": "Inside Paragraphs",
    "id": 250,
    "url": "http://insideparagraphs.com/",
    "resource_type": "guide"
  }, {
    "title": "Type at Cooper West",
    "id": 249,
    "url": "http://coopertype.org/lectures/west",
    "resource_type": "guide"
  }, {
    "title": "Intelligent Tracking Prevention",
    "id": 247,
    "url": "https://webkit.org/blog/7675/intelligent-tracking-prevention/",
    "resource_type": "documentation"
  }, {
    "title": "Beta Testing Made Simple",
    "id": 246,
    "url": "https://developer.apple.com/testflight/",
    "resource_type": "documentation",
    "description": "Beta Testing Made Simple"
  }, {
    "title": "Introduction to Safari Content-Blocking Rules",
    "id": 245,
    "url": "https://developer.apple.com/library/content/documentation/Extensions/Conceptual/ContentBlockingRules/Introduction/Introduction.html",
    "resource_type": "documentation",
    "description": "Introduction to Safari Content-Blocking Rules"
  }, {
    "title": "Clang Documentation for Undefined Behavior Sanitizer",
    "id": 244,
    "url": "https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html",
    "resource_type": "documentation",
    "description": "Additional documentation for Undefined Behavior Sanitizer provided by the Clang project."
  }, {
    "title": "Clang Documentation for Thread Sanitizer",
    "id": 243,
    "url": "https://clang.llvm.org/docs/ThreadSanitizer.html",
    "resource_type": "documentation",
    "description": "Additional documentation for Thread Sanitizer provided by the Clang project."
  }, {
    "title": "Clang Documentation for Address Sanitizer",
    "id": 242,
    "url": "https://clang.llvm.org/docs/AddressSanitizer.html",
    "resource_type": "documentation",
    "description": "Additional documentation for Address Sanitizer provided by the Clang project."
  }, {
    "title": "Threading Programming Guide",
    "id": 241,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1",
    "resource_type": "guide",
    "description": "An introduction to the technologies provided to support threading and the synchronization of multithreaded code inside your app."
  }, {
    "title": "Enabling Malloc Debugging Features",
    "id": 240,
    "url": "https://developer.apple.com/library/content/documentation/Performance/Conceptual/ManagingMemory/Articles/MallocDebug.html",
    "resource_type": "guide",
    "description": "Instructions for how to enable Guard Malloc and configure Malloc environmental variables."
  }, {
    "title": "Touch Bar Human Interface Guidelines",
    "id": 239,
    "url": "https://developer.apple.com/design/human-interface-guidelines/macos/touch-bar/touch-bar-overview/",
    "resource_type": "documentation"
  }, {
    "title": "Podcast Resources and Help",
    "id": 238,
    "url": "https://itunespartner.apple.com/podcasts",
    "resource_type": "guide"
  }, {
    "title": "iOS HIG - Notifications",
    "id": 237,
    "url": "https://developer.apple.com/ios/human-interface-guidelines/features/notifications/",
    "resource_type": "guide"
  }, {
    "title": "Cloudmine Integration Documentation",
    "id": 236,
    "url": "https://cloudmine.io/docs/#/researchkit_and_carekit",
    "resource_type": "documentation",
    "description": "Cloudmine Integration Documentation"
  }, {
    "title": "Cloudmine Website",
    "id": 235,
    "url": "https://cloudmineinc.com/product/build/",
    "resource_type": "documentation",
    "description": "Cloudmine Website"
  }, {
    "title": "Medable CareKit Cloud Bridge",
    "id": 234,
    "url": "http://www.medable.com/synapse",
    "resource_type": "documentation",
    "description": "Medable CareKit Cloud Bridge"
  }, {
    "title": "CareKit Repository",
    "id": 233,
    "url": "https://github.com/carekit-apple/CareKit",
    "resource_type": "guide",
    "description": "CareKit Source Repository"
  }, {
    "title": "ResearchKit Open Source Website",
    "id": 232,
    "url": "http://researchkit.org",
    "resource_type": "guide",
    "description": "ResearchKit Open Source Website"
  }, {
    "title": "CareKit Open Source Website",
    "id": 231,
    "url": "http://carekit.org",
    "resource_type": "guide",
    "description": "CareKit Open Source Website"
  }, {
    "title": "UsingPhotosFramework",
    "id": 230,
    "url": "https://developer.apple.com/library/content/samplecode/UsingPhotosFramework",
    "resource_type": "samplecode",
    "description": "A basic Photos-like app to demonstrate the Photos framework."
  }, {
    "title": "SpeedySloth",
    "id": 229,
    "url": "https://developer.apple.com/library/content/samplecode/SpeedySloth",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use HealthKit to build a workout app for Apple Watch."
  }, {
    "title": "AVCamPhotoFilter",
    "id": 228,
    "url": "https://developer.apple.com/library/content/samplecode/AVCamPhotoFilter",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use AV Foundation to capture photos with image processing."
  }, {
    "title": "AVCam",
    "id": 227,
    "url": "https://developer.apple.com/library/content/samplecode/AVCam",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use the AVFoundation capture API to record movies and capture photos."
  }, {
    "title": "TVMLGuide",
    "id": 226,
    "url": "https://developer.apple.com/library/content/samplecode/TVMLGuide",
    "resource_type": "samplecode",
    "description": "A collection of sample code projects to teach TVMLKit."
  }, {
    "title": "TVMLCatalog",
    "id": 225,
    "url": "https://developer.apple.com/library/content/samplecode/TVMLCatalog",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use the TVMLKit framework to display TVML content in a tvOS application."
  }, {
    "title": "AudioUnitV3",
    "id": 224,
    "url": "https://developer.apple.com/library/content/samplecode/AudioUnitV3Example",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use the Audio Unit Extensions API unified implementation between iOS and macOS."
  }, {
    "title": "Lists of available trusted root certificates in iOS",
    "id": 223,
    "url": "https://support.apple.com/en-us/HT204132",
    "resource_type": "documentation"
  }, {
    "title": "Core Location with iPhone and Apple Watch",
    "id": 222,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/CoreLocation-with-iPhone-and-Apple-Watch.zip",
    "resource_type": "samplecode",
    "description": "This sample demonstrates what you can do with CoreLocation, Apple Watch, and iPhone in iOS 11.0 and watchOS 4.0."
  }, {
    "title": "Using Motion Controls",
    "id": 221,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Using-Motion-Controls.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to add motion based controls to an existing game."
  }, {
    "title": "Using Depth Data",
    "id": 220,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Using-Depth-Data.zip",
    "resource_type": "samplecode",
    "description": "WiggleMe demonstrates the use of depth data embedded in images taken with dual-camera iOS devices."
  }, {
    "title": "tvOS Deep Linking Demo",
    "id": 219,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/tvOS-Deep-Linking-Demo.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates best practices for handling deep links in your tvOS application."
  }, {
    "title": "SIMDCulling Sample",
    "id": 218,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/SIMDCullingSample.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates usage of simd metal shading language functions to perform stream compaction during frustum culling process."
  }, {
    "title": "Resolving Car Command Intents",
    "id": 217,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Resolving-Car-Command-Intents.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates resolving Car Command intents using a simple intent handler that lets users manage their car using Siri."
  }, {
    "title": "PDFAnnotationWidgetsAdvanced",
    "id": 215,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/PDFAnnotationWidgetsAdvanced.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use PDFKit to add widgets (interactive form elements) to your own PDF document."
  }, {
    "title": "NLP Whisk",
    "id": 214,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/NLP-Whisk.zip",
    "resource_type": "samplecode"
  }, {
    "title": "Multiplying Two Matrices",
    "id": 213,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Multiplying-Two-Matrices.zip",
    "resource_type": "samplecode",
    "description": "Example of how to call cblas_sgemm()."
  }, {
    "title": "Multiple Synchronized live HLS Streams",
    "id": 212,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/MultipleSynchronizedliveHLSStreams.zip",
    "resource_type": "samplecode",
    "description": "Shows how to synchronize playback of two live HLS streams."
  }, {
    "title": "ModelIO from MDLAsset to Game Engine",
    "id": 211,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/ModelIO-from-MDLAsset-to-Game-Engine.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how a developer can utilize Model IO to create baked data for use in a real time renderer."
  }, {
    "title": "Metal Device Selection and Fallback",
    "id": 210,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/MetalDeviceSelectionandFallback.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates smooth switching between multiple Metal devices."
  }, {
    "title": "MessagingIntent Sample Code",
    "id": 209,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/MessagingIntent-Sample-Code.zip",
    "resource_type": "samplecode",
    "description": "A simple messaging app integrated with Siri, allowing users to send and search for MessagingIntents messages using Siri."
  }, {
    "title": "Mastering Drag and Drop",
    "id": 208,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Mastering-Drag-and-Drop.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use the more advanced UIDragInteraction and UIDropInteraction APIs to customize drag and drop."
  }, {
    "title": "Decluttering a Map with MapKit Annotation Clustering",
    "id": 207,
    "url": "https://developer.apple.com/documentation/mapkit/mkannotationview/decluttering_a_map_with_mapkit_annotation_clustering",
    "resource_type": "samplecode",
    "description": "Enhance the readability of a map by replacing overlapping annotations with a clustering annotation view."
  }, {
    "title": "Making Apps Accessible",
    "id": 206,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/making-apps-accessible.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates app accessibility techniques through a social networking app."
  }, {
    "title": "Localized Swift Playground Book",
    "id": 205,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Localized-Swift-Playground-Book.zip",
    "resource_type": "samplecode",
    "description": "Demonstrated the structure of a localized playground book."
  }, {
    "title": "Interacting with Apple Music Content",
    "id": 204,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Interacting-with-Apple-Music-Content.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to add content from the Apple Music catalog to the iCloud Music Library."
  }, {
    "title": "Argument Buffers",
    "id": 203,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/IndirectArgumentBuffers.zip",
    "resource_type": "samplecode",
    "description": "This sample is a simple example of Metal's Indirect Argument Buffers feature, newly available in iOS 11 and macOS 10.13."
  }, {
    "title": "Implementing Advanced Text Input Features",
    "id": 202,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Implementing-Advanced-Text-Input-Features.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to implement many common user interface patterns surrounding the iOS keyboard, as well as how to create a custom keyboard extension."
  }, {
    "title": "iMessage Business Chat",
    "id": 201,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/iMessage-Business-Chat.zip",
    "resource_type": "samplecode",
    "description": "Illustrates how to build an app extension that interacts with Business Chat."
  }, {
    "title": "Image Classification with Vision and CoreML",
    "id": 200,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/ImageClassificationwithVisionandCoreML.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates using Vision with Core ML to preprocess images and perform image classification."
  }, {
    "title": "Fox2",
    "id": 199,
    "url": "https://developer.apple.com/library/content/samplecode/scenekit-2017/Fox2SceneKitWWDC2017samplecode.zip",
    "resource_type": "samplecode",
    "description": "SceneKit sample code demonstrated at WWDC 2017."
  }, {
    "title": "Enhancing App Experiences with NLP",
    "id": 198,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Enhancing-App-Experiences-with-NLP.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates the use of NSLinguisticTagger to process text for searching."
  }, {
    "title": "Data Delivery with Drag and Drop",
    "id": 197,
    "url": "https://developer.apple.com/documentation/uikit/drag_and_drop/data_delivery_with_drag_and_drop",
    "resource_type": "samplecode",
    "description": "Share data between iPad apps during a drag and drop operation using an item provider."
  }, {
    "title": "Drag and Drop in UICollectionView and UITableView",
    "id": 196,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Drag-and-Drop-in-UICollectionView-and-UITableView.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to adopt the drag and drop APIs of UICollectionView and UITableView in an application."
  }, {
    "title": "Drag and Drop Demo App",
    "id": 195,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Drag-and-Drop-Demo-App.zip",
    "resource_type": "samplecode",
    "description": "This application introduces the basic concepts of drag and drop and shows how to customize some aspects of its visual appearance."
  }, {
    "title": "Document Watermark",
    "id": 194,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Document-Watermark.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use custom graphics drawing of a PDFPage, which affects both the containing PDFView and the saved file."
  }, {
    "title": "Using, Managing, and Customizing Notifications",
    "id": 193,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Customizing-UserNotifications.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to schedule notifications, modify push notifications through a service extension, and customize rich notifications through a content extension."
  }, {
    "title": "Creating Large Photo Libraries for Testing",
    "id": 192,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Creating-Large-Photo-Libraries-for-Testing.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to work with and optimize large photo libraries."
  }, {
    "title": "CoreNFC Tag Reading",
    "id": 191,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/CoreNFC-Tag-Reading.zip",
    "resource_type": "samplecode",
    "description": "Shows how to integrate Core NFC Framework into your application to enable NFC tag reading."
  }, {
    "title": "Core Spotlight Drag and Drop",
    "id": 190,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Core-Spotlight-Drag-and-Drop.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to implement Core Spotlight extensions, and how to support previews and drag and drop for them."
  }, {
    "title": "Building Apps with Dynamic Type",
    "id": 189,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Building-Apps-with-Dynamic-Type.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates several common tips and tricks for supporting Dynamic Type."
  }, {
    "title": "AVAE Manual Rendering",
    "id": 188,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/AVAE-Manual-Rendering.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates AVAudioEngine's API to manually render a processing change"
  }, {
    "title": "Automatic Assessment Configuration Sample Code",
    "id": 187,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Automatic-Assessment-Configuration-Sample-Code.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to request a Guided Access session to lock the device into a single app."
  }, {
    "title": "Advanced Visual Effects Playground Sample Code",
    "id": 186,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/Advanced-Visual-Effects-Playground-Sample-Code.zip",
    "resource_type": "samplecode",
    "description": "This sample demonstrates a number of frameworks that can be used to enhance the user experience of your app."
  }, {
    "title": "Accelerate Sparse",
    "id": 185,
    "url": "https://developer.apple.com/sample-code/wwdc/2017/AccelerateSparse.zip",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use the new Sparse Solvers in the Accelerate framework."
  }, {
    "title": "NSTouchBar",
    "id": 184,
    "url": "https://developer.apple.com/documentation/appkit/nstouchbar",
    "resource_type": "documentation",
    "description": "An object that provides dynamic contextual controls in the Touch Bar of supported models of MacBook Pro."
  }, {
    "title": "NSScrubber",
    "id": 183,
    "url": "https://developer.apple.com/documentation/appkit/nsscrubber",
    "resource_type": "documentation",
    "description": "A customizable item picker control for the Touch Bar."
  }, {
    "title": "Information Property List Key Reference",
    "id": 182,
    "url": "https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html",
    "resource_type": "documentation"
  }, {
    "title": "Supporting User Privacy",
    "id": 181,
    "url": "https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/ExpectedAppBehaviors/ExpectedAppBehaviors.html#//apple_ref/doc/uid/TP40007072-CH3-SW6",
    "resource_type": "documentation"
  }, {
    "title": "NSItemProviderReading",
    "id": 180,
    "url": "https://developer.apple.com/documentation/foundation/nsitemproviderreading",
    "resource_type": "documentation",
    "description": "The protocol you implement on a class to allow an item provider to create an instance of the class."
  }, {
    "title": "NSItemProviderWriting",
    "id": 179,
    "url": "https://developer.apple.com/documentation/foundation/nsitemproviderwriting",
    "resource_type": "documentation",
    "description": "The protocol you implement on a class to allow an item provider to retrieve data from an instance of the class."
  }, {
    "title": "NSItemProvider",
    "id": 178,
    "url": "https://developer.apple.com/documentation/foundation/nsitemprovider",
    "resource_type": "documentation",
    "description": "An item provider for conveying data or a file between processes during drag and drop or copy/paste activities, or from a host app to an app extension."
  }, {
    "title": "Human Interface Guidelines - Alerts",
    "id": 176,
    "url": "https://developer.apple.com/design/human-interface-guidelines/ios/views/alerts/",
    "resource_type": "documentation"
  }, {
    "title": "HLS Authoring Specification for Apple Devices",
    "id": 175,
    "url": "https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices",
    "resource_type": "documentation",
    "description": "Describes the requirements for live and VOD audio-video content delivery using HTTP Live Streaming (HLS) to Apple devices."
  }, {
    "title": "SiriKit Resources",
    "id": 174,
    "url": "https://developer.apple.com/sirikit/",
    "resource_type": "documentation"
  }, {
    "title": "Maps for Developers",
    "id": 173,
    "url": "https://developer.apple.com/maps/",
    "resource_type": "documentation"
  }, {
    "title": "Core Bluetooth",
    "id": 172,
    "url": "https://developer.apple.com/documentation/corebluetooth",
    "resource_type": "documentation",
    "description": "Communicate with Bluetooth 4.0 low-energy devices."
  }, {
    "title": "HomeKit",
    "id": 171,
    "url": "https://developer.apple.com/homekit/",
    "resource_type": "documentation"
  }, {
    "title": "WKWebView",
    "id": 170,
    "url": "https://developer.apple.com/documentation/webkit/wkwebview",
    "resource_type": "documentation",
    "description": "An object that displays interactive web content, such as for an in-app browser."
  }, {
    "title": "Supporting Drag and Drop in Table Views",
    "id": 169,
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/table_views/supporting_drag_and_drop_in_table_views",
    "resource_type": "documentation",
    "description": "Initiate drags and handle drops from a table view."
  }, {
    "title": "Supporting Drag and Drop in Collection Views",
    "id": 168,
    "url": "https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/supporting_drag_and_drop_in_collection_views",
    "resource_type": "documentation",
    "description": "Initiate drags and handle drops from a collection view."
  }, {
    "title": "Touch Bar",
    "id": 167,
    "url": "https://developer.apple.com/documentation/appkit/touch_bar",
    "resource_type": "documentation",
    "description": "Display interactive content and controls in the Touch Bar."
  }, {
    "title": "Assessment with iPad",
    "id": 166,
    "url": "https://images.apple.com/education/docs/Assessment_with_iPad.pdf",
    "resource_type": "documentation"
  }, {
    "title": "iPad and Student Assessment",
    "id": 165,
    "url": "https://images.apple.com/education/docs/Assessment_Overview.pdf",
    "resource_type": "documentation"
  }, {
    "title": "Set up your iPad to give tests and assessments",
    "id": 164,
    "url": "https://support.apple.com/en-us/HT204775",
    "resource_type": "documentation"
  }, {
    "title": "Mobile Device Management Protocol Reference",
    "id": 163,
    "url": "https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/MobileDeviceManagementProtocolRef/3-MDM_Protocol/MDM_Protocol.html",
    "resource_type": "documentation"
  }, {
    "title": "Configuration Profile Reference",
    "id": 162,
    "url": "https://developer.apple.com/library/content/featuredarticles/iPhoneConfigurationProfileRef/Introduction/Introduction.html",
    "resource_type": "documentation"
  }, {
    "title": "Core Data",
    "id": 161,
    "url": "https://developer.apple.com/documentation/coredata",
    "resource_type": "documentation",
    "description": "Persist or cache data and support undo on a single device."
  }, {
    "title": "IdentityLookup",
    "id": 158,
    "url": "https://developer.apple.com/documentation/identitylookup",
    "resource_type": "documentation",
    "description": "Create an app extension that identifies and filters unwanted SMS and MMS messages while preserving user privacy."
  }, {
    "title": "Apple Pay",
    "id": 157,
    "url": "https://developer.apple.com/apple-pay/",
    "resource_type": "documentation"
  }, {
    "title": "URLSessionConfiguration",
    "id": 156,
    "url": "https://developer.apple.com/documentation/foundation/urlsessionconfiguration",
    "resource_type": "documentation",
    "description": "A configuration object that defines behavior and policies for a URL session."
  }, {
    "title": "Network Service Type Settings",
    "id": 155,
    "url": "https://developer.apple.com/library/content/qa/qa1934/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "Business and Education Support",
    "id": 154,
    "url": "https://support.apple.com/business-education/",
    "resource_type": "documentation"
  }, {
    "title": "Education Deployment Guide",
    "id": 153,
    "url": "https://help.apple.com/deployment/education/",
    "resource_type": "documentation"
  }, {
    "title": "Classroom for iPad Help",
    "id": 152,
    "url": "https://help.apple.com/classroom/ipad/",
    "resource_type": "documentation"
  }, {
    "title": "Profile Manager Help",
    "id": 151,
    "url": "https://help.apple.com/profilemanager/mac/",
    "resource_type": "documentation"
  }, {
    "title": "Apple Configurator 2 Help",
    "id": 150,
    "url": "https://help.apple.com/configurator/mac/",
    "resource_type": "documentation"
  }, {
    "title": "Apple Deployment Programs Help",
    "id": 149,
    "url": "https://help.apple.com/deployment/business/",
    "resource_type": "documentation"
  }, {
    "title": "Apple School Manager Help",
    "id": 148,
    "url": "https://help.apple.com/schoolmanager/",
    "resource_type": "documentation"
  }, {
    "title": "WWDC2015 - Networking with NSURLSession",
    "id": 147,
    "url": "https://developer.apple.com/videos/play/wwdc2015/711/",
    "resource_type": "documentation"
  }, {
    "title": "macOS Deployment Reference",
    "id": 146,
    "url": "https://help.apple.com/deployment/macos/",
    "resource_type": "documentation"
  }, {
    "title": "WWDC2014 - What's New in Foundation Networking",
    "id": 145,
    "url": "https://developer.apple.com/videos/play/wwdc2014/707/",
    "resource_type": "documentation"
  }, {
    "title": "WWDC2013 - What's New in Foundation Networking",
    "id": 144,
    "url": "https://developer.apple.com/videos/play/wwdc2013/705/",
    "resource_type": "documentation"
  }, {
    "title": "iOS Deployment Reference",
    "id": 143,
    "url": "https://help.apple.com/deployment/ios/",
    "resource_type": "documentation"
  }, {
    "title": "PDFView",
    "id": 142,
    "url": "https://developer.apple.com/documentation/pdfkit/pdfview",
    "resource_type": "documentation",
    "description": "An object that encapsulates the functionality of PDF Kit into a single widget that you can add to your application using Interface Builder."
  }, {
    "title": "Quartz",
    "id": 141,
    "url": "https://developer.apple.com/documentation/quartz",
    "resource_type": "documentation",
    "description": "Allow users to browse, edit, and save images, using slideshows and Core Image filters."
  }, {
    "title": "PDF Kit Programming Guide",
    "id": 140,
    "url": "https://developer.apple.com/library/content/documentation/GraphicsImaging/Conceptual/PDFKitGuide/PDFKit_Prog_Intro/PDFKit_Prog_Intro.html",
    "resource_type": "documentation"
  }, {
    "title": "Technical Q&A QA1941",
    "id": 139,
    "url": "https://developer.apple.com/library/content/qa/qa1941/_index.html",
    "resource_type": "documentation"
  }, {
    "title": "URLSession Programming Guide",
    "id": 138,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html",
    "resource_type": "documentation"
  }, {
    "title": "URLSession",
    "id": 137,
    "url": "https://developer.apple.com/documentation/foundation/urlsession",
    "resource_type": "documentation",
    "description": "An object that coordinates a group of related network data transfer tasks."
  }, {
    "title": "NetworkExtension",
    "id": 136,
    "url": "https://developer.apple.com/documentation/networkextension",
    "resource_type": "documentation",
    "description": "Customize and extend core networking features."
  }, {
    "title": "Supporting IPv6 DNS64/NAT64 Networks",
    "id": 135,
    "url": "https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1",
    "resource_type": "documentation"
  }, {
    "title": "Vision",
    "id": 134,
    "url": "https://developer.apple.com/documentation/vision",
    "resource_type": "documentation",
    "description": "Apply computer vision algorithms to perform a variety of tasks on input images and  video."
  }, {
    "title": "CloudKit Catalog",
    "id": 133,
    "url": "https://cdn.apple-cloudkit.com/cloudkit-catalog/",
    "resource_type": "samplecode"
  }, {
    "title": "CloudKit",
    "id": 132,
    "url": "https://developer.apple.com/documentation/cloudkit",
    "resource_type": "documentation",
    "description": "Store structured app and user data in iCloud containers that can be shared by all users of your app."
  }, {
    "title": "CloudKit JS",
    "id": 131,
    "url": "https://developer.apple.com/documentation/cloudkitjs",
    "resource_type": "documentation",
    "description": "Provide access from your web app to your CloudKit app’s containers and databases."
  }, {
    "title": "iCloud and CloudKit for Developers",
    "id": 130,
    "url": "https://developer.apple.com/icloud/",
    "resource_type": "documentation"
  }, {
    "title": "Maintaining a Local Cache of CloudKit Records",
    "id": 129,
    "url": "https://developer.apple.com/library/content/documentation/DataManagement/Conceptual/CloudKitQuickStart/MaintainingaLocalCacheofCloudKitRecords/MaintainingaLocalCacheofCloudKitRecords.html",
    "resource_type": "documentation"
  }, {
    "title": "App Review",
    "id": 128,
    "url": "https://developer.apple.com/app-store/review/",
    "resource_type": "documentation"
  }, {
    "title": "AppKit Release Notes for macOS 10.13",
    "id": 127,
    "url": "https://developer.apple.com/library/content/releasenotes/AppKit/RN-AppKit/",
    "resource_type": "documentation",
    "description": "Describes new features and known issues for the AppKit framework in macOS."
  }, {
    "title": "Main Thread Checker",
    "id": 126,
    "url": "https://developer.apple.com/documentation/code_diagnostics/main_thread_checker",
    "resource_type": "documentation",
    "description": "Detect invalid use of AppKit, UIKit, and other APIs from a background thread."
  }, {
    "title": "Search Ads",
    "id": 125,
    "url": "https://searchads.apple.com",
    "resource_type": "documentation",
    "description": "Use Search Ads to help customers discover your app on the App Store"
  }, {
    "title": "The All-New App Store",
    "id": 124,
    "url": "https://developer.apple.com/app-store/whats-new/",
    "resource_type": "documentation",
    "description": "Describes the features of the new App Store."
  }, {
    "title": "App Store Product Page",
    "id": 123,
    "url": "https://developer.apple.com/app-store/product-page/",
    "resource_type": "documentation",
    "description": "Help users find and engage with your app on the App Store through thoughtfully crafted app metadata."
  }, {
    "title": "Rating, Reviews, and Responses",
    "id": 121,
    "url": "https://developer.apple.com/app-store/responding-to-reviews/",
    "resource_type": "documentation",
    "description": "Guidelines on responding to customer reviews on the App Store."
  }, {
    "title": "NSAppTransportSecurity Reference",
    "id": 120,
    "url": "https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33",
    "resource_type": "documentation"
  }, {
    "title": "NSCollectionViewLayout",
    "id": 119,
    "url": "https://developer.apple.com/documentation/appkit/nscollectionviewlayout",
    "resource_type": "documentation",
    "description": "An abstract base class that you subclass and use to generate layout information for a collection view."
  }, {
    "title": "NSCollectionView",
    "id": 118,
    "url": "https://developer.apple.com/documentation/appkit/nscollectionview",
    "resource_type": "documentation",
    "description": "An ordered collection of data items displayed in a customizable layout."
  }, {
    "title": "CocoaSlideCollection: Using NSCollectionView on OS X 10.11",
    "id": 117,
    "url": "https://developer.apple.com/library/content/samplecode/CocoaSlideCollection/Introduction/Intro.html#//apple_ref/doc/uid/TP40016149",
    "resource_type": "samplecode"
  }, {
    "title": "TableViewPlayground: Using View-Based NSTableView and NSOutlineView",
    "id": 116,
    "url": "https://developer.apple.com/library/content/samplecode/TableViewPlayground/Introduction/Intro.html#//apple_ref/doc/uid/DTS40010727",
    "resource_type": "samplecode"
  }, {
    "title": "ComplexBrowser: Using NSBrowser class",
    "id": 115,
    "url": "https://developer.apple.com/library/content/samplecode/ComplexBrowser/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008829",
    "resource_type": "samplecode"
  }, {
    "title": "SimpleCocoaBrowser: Using NSBrowser class",
    "id": 114,
    "url": "https://developer.apple.com/library/content/samplecode/SimpleCocoaBrowser/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008872",
    "resource_type": "samplecode"
  }, {
    "title": "Browser Programming Topics",
    "id": 113,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Browser/Browser.html#//apple_ref/doc/uid/10000018i",
    "resource_type": "documentation"
  }, {
    "title": "Outline View Programming Topics",
    "id": 112,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/OutlineView/OutlineView.html#//apple_ref/doc/uid/10000023i",
    "resource_type": "documentation"
  }, {
    "title": "Exhibition: An Adaptive OS X App",
    "id": 111,
    "url": "https://developer.apple.com/library/content/samplecode/Exhibition/Introduction/Intro.html#//apple_ref/doc/uid/TP40016178",
    "resource_type": "samplecode",
    "description": "The Exhibition sample demonstrates techniques for making windows more adaptive. You’ll see how to use the NSSplitViewController class to create system-standard adaptive sidebars. The sample also shows how to use the NSCollectionView class API introduced in OS X 10.11 to create more flexible layouts using constraint priorities and the automatic detaching behavior of the NSStackView class."
  }, {
    "title": "Scoreboard: A demonstration of RTL support on macOS using NSStackView and localizedStringWithFormat",
    "id": 110,
    "url": "https://developer.apple.com/library/content/samplecode/Scoreboard/Introduction/Intro.html",
    "resource_type": "samplecode",
    "description": "Illustrates supporting right-to-left languages using Appkit controls and Auto Layout constraints in a MacOS project."
  }, {
    "title": "Internationalization and Localization Guide",
    "id": 109,
    "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/Introduction/Introduction.html",
    "resource_type": "guide",
    "description": "Explains how to create a user interface and write code that can be localized into multiple languages."
  }, {
    "title": "InfoBarStackView",
    "id": 108,
    "url": "https://developer.apple.com/library/content/samplecode/InfoBarStackView/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013589",
    "resource_type": "samplecode",
    "description": "Demonstrates how to use NSStackView, to show how to stack arbitrary views together. Each view in the stack can be hidden or shown independently."
  }, {
    "title": "Table View Programming Guide for Mac",
    "id": 107,
    "url": "https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TableView/Introduction/Introduction.html",
    "resource_type": "guide"
  }, {
    "title": "Dispatch",
    "id": 106,
    "url": "https://developer.apple.com/documentation/dispatch",
    "resource_type": "documentation",
    "description": "Execute code concurrently on multicore hardware by submitting work to dispatch queues managed by the system."
  }, {
    "title": "In-App Purchase Programming Guide",
    "id": 105,
    "url": "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide",
    "resource_type": "guide",
    "description": "Describes how to use the Store Kit API to embed a store inside an app."
  }, {
    "title": "PassKit",
    "id": 104,
    "url": "https://developer.apple.com/documentation/passkit",
    "resource_type": "documentation",
    "description": "Request and process Apple Pay payments in your app. Create, distribute, and update passes for the Wallet app."
  }, {
    "title": "Wallet",
    "id": 103,
    "url": "https://developer.apple.com/documentation/passkit/wallet",
    "resource_type": "documentation",
    "description": "Manage payment cards, boarding passes, tickets, gift cards, and other passes in the Wallet app."
  }, {
    "title": "Apple Pay",
    "id": 102,
    "url": "https://developer.apple.com/documentation/passkit/apple_pay",
    "resource_type": "documentation",
    "description": "Request and process Apple Pay payments in your app."
  }, {
    "title": "Apple Pay JS",
    "id": 101,
    "url": "https://developer.apple.com/documentation/applepayjs",
    "resource_type": "documentation",
    "description": "Use JavaScript to incorporate Apple Pay into your websites."
  }, {
    "title": "MapKit",
    "id": 100,
    "url": "https://developer.apple.com/documentation/mapkit",
    "resource_type": "documentation",
    "description": "Display map or satellite imagery from your app's interface, call out points of interest, and determine placemark information for map coordinates."
  }, {
    "title": "Core Location",
    "id": 99,
    "url": "https://developer.apple.com/documentation/corelocation",
    "resource_type": "documentation",
    "description": "Obtain the geographic location and orientation of a device."
  }, {
    "title": "AppKit",
    "id": 98,
    "url": "https://developer.apple.com/documentation/appkit",
    "resource_type": "documentation",
    "description": "Construct and manage a graphical, event-driven user interface for your macOS app."
  }, {
    "title": "Views and Controls",
    "id": 97,
    "url": "https://developer.apple.com/documentation/appkit/views_and_controls",
    "resource_type": "documentation",
    "description": "Present and define the interactions for your content onscreen."
  }, {
    "title": "Foundation",
    "id": 96,
    "url": "https://developer.apple.com/documentation/foundation",
    "resource_type": "documentation",
    "description": "Access essential data types, collections, and operating-system services to define the base layer of functionality for your app."
  }, {
    "title": "Markup Formatting Reference",
    "id": 95,
    "url": "https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html",
    "resource_type": "documentation",
    "description": "Use markup to create playgrounds that show formatted text in rendered documentation mode and to show Quick Help for your Swift code symbols."
  }, {
    "title": "Using JSON with Custom Types",
    "id": 94,
    "url": "https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types",
    "resource_type": "samplecode",
    "description": "Demonstrates approaches for encoding and decoding different kinds of JSON in Swift."
  }, {
    "title": "Encoding and Decoding Custom Types",
    "id": 93,
    "url": "https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types",
    "resource_type": "documentation",
    "description": "Make your data types encodable and decodable for compatibility with external representations such as JSON."
  }, {
    "title": "Archives and Serialization",
    "id": 92,
    "url": "https://developer.apple.com/documentation/foundation/archives_and_serialization",
    "resource_type": "documentation",
    "description": "Convert objects and values to and from property list, JSON, and other flat binary representations."
  }, {
    "title": "Human Interface Guidelines - Accessibility",
    "id": 90,
    "url": "https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/",
    "resource_type": "guide",
    "description": "Guidelines for designing Accessible iOS apps."
  }, {
    "title": "Accessibility for Developers",
    "id": 89,
    "url": "https://developer.apple.com/accessibility/",
    "resource_type": "guide",
    "description": "Collection of Accessibility resources for macOS, iOS, watchOS, and tvOS."
  }, {
    "title": "Integrating a Core ML Model into Your App",
    "id": 88,
    "url": "https://developer.apple.com/documentation/coreml/integrating_a_core_ml_model_into_your_app",
    "resource_type": "samplecode",
    "description": "Add a simple model to an app, pass input data to the model, and process the model’s predictions."
  }, {
    "title": "HealthKit",
    "id": 87,
    "url": "https://developer.apple.com/documentation/healthkit",
    "resource_type": "documentation",
    "description": "Share health and fitness data with other apps, while maintaining the user’s privacy and control over their data."
  }, {
    "title": "Adding a Document Browser to Your App",
    "id": 86,
    "url": "https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app",
    "resource_type": "documentation",
    "description": "Give users access to their local or remote documents from within your app."
  }, {
    "title": "FileProviderUI",
    "id": 85,
    "url": "https://developer.apple.com/documentation/fileproviderui",
    "resource_type": "documentation",
    "description": "Add actions to the document browser's context menu."
  }, {
    "title": "FileProvider",
    "id": 84,
    "url": "https://developer.apple.com/documentation/fileprovider",
    "resource_type": "documentation",
    "description": "Implement a File Provider extension so that other apps can access the documents and directories stored and managed by your containing app."
  }, {
    "title": "App Programming Guide for watchOS",
    "id": 83,
    "url": "https://developer.apple.com/library/content/documentation/General/Conceptual/WatchKitProgrammingGuide/",
    "resource_type": "documentation",
    "description": "Develop apps that let users access information in a way that is both distinctly personal and unobtrusive. With just a raise of the wrist, users can receive and respond to notifications, see essential information in a complication, and access important information in an immediate and convenient way."
  }, {
    "title": "Auto Layout Guide",
    "id": 82,
    "url": "https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/",
    "resource_type": "guide",
    "description": "Dynamically calculate the size and position of all the views in your view hierarchy, based on constraints placed on those views."
  }, {
    "title": "Swift Standard Library",
    "id": 81,
    "url": "https://developer.apple.com/documentation/swift",
    "resource_type": "documentation",
    "description": "Solve complex problems and write high-performance, readable code."
  }, {
    "title": "Getting Raw Gyroscope Events",
    "id": 80,
    "url": "https://developer.apple.com/documentation/coremotion/getting_raw_gyroscope_events",
    "resource_type": "documentation",
    "description": "Retrieve data from the onboard gyroscopes."
  }, {
    "title": "Getting Raw Accelerometer Events",
    "id": 79,
    "url": "https://developer.apple.com/documentation/coremotion/getting_raw_accelerometer_events",
    "resource_type": "documentation",
    "description": "Retrieve data from the onboard accelerometers."
  }, {
    "title": "Getting Processed Device-Motion Data",
    "id": 78,
    "url": "https://developer.apple.com/documentation/coremotion/getting_processed_device-motion_data",
    "resource_type": "documentation",
    "description": "Retrieve data that has already been processed to remove environmental bias, such as the effects of gravity."
  }, {
    "title": "Core Motion",
    "id": 77,
    "url": "https://developer.apple.com/documentation/coremotion",
    "resource_type": "documentation",
    "description": "Process accelerometer, gyroscope, pedometer, and environment-related events."
  }, {
    "title": "Apple Privacy",
    "id": 76,
    "url": "https://www.apple.com/privacy/",
    "resource_type": "documentation"
  }, {
    "title": "Security Overview",
    "id": 75,
    "url": "https://developer.apple.com/security/",
    "resource_type": "documentation"
  }, {
    "title": "iOS Security White Paper",
    "id": 74,
    "url": "https://www.apple.com/business/docs/iOS_Security_Guide.pdf",
    "resource_type": "documentation",
    "description": "Apple designed the iOS platform with security at its core. This document provides details about how security technology and features are implemented within the iOS platform. It will also help organizations combine iOS platform security technology and features with their own policies and procedures to meet their specific security needs."
  }, {
    "title": "SpriteKit",
    "id": 73,
    "url": "https://developer.apple.com/documentation/spritekit",
    "resource_type": "documentation",
    "description": "Add high-performance 2D content with smooth animations to your app, or create a game with a high-level set of 2D game-based tools."
  }, {
    "title": "XCTest",
    "id": 72,
    "url": "https://developer.apple.com/documentation/xctest",
    "resource_type": "documentation",
    "description": "Create and run unit tests, performance tests, and UI tests for your Xcode project."
  }, {
    "title": "Recurrent Neural Networks",
    "id": 71,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/recurrent_neural_networks",
    "resource_type": "documentation",
    "description": "Create recurrent neural networks."
  }, {
    "title": "Convolutional Neural Network Kernels",
    "id": 70,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/convolutional_neural_network_kernels",
    "resource_type": "documentation",
    "description": "Build neural networks with layers."
  }, {
    "title": "Matrices and Vectors",
    "id": 69,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/matrices_and_vectors",
    "resource_type": "documentation",
    "description": "Solve systems of equations, factorize matrices and multiply matrices and vectors."
  }, {
    "title": "Image Filters",
    "id": 68,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders/image_filters",
    "resource_type": "documentation",
    "description": "Apply high-performance filters to, and extract statistical and histogram data from images."
  }, {
    "title": "Human Interface Guidelines - Apple Pay",
    "id": 66,
    "url": "https://developer.apple.com/design/human-interface-guidelines/apple-pay/",
    "resource_type": "guide",
    "description": "Design guidance for apps that support Apple Pay."
  }, {
    "title": "Apple TV Markup Language Reference",
    "id": 64,
    "url": "https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/ATV_Template_Guide/index.html",
    "resource_type": "guide",
    "description": "Describes the available templates and elements for apps utilizing TVML."
  }, {
    "title": "TVML Programming Guide",
    "id": 63,
    "url": "https://developer.apple.com/library/content/documentation/TVMLKitJS/Conceptual/TVMLProgrammingGuide/index.html",
    "resource_type": "guide",
    "description": "Describes how to create TVML apps for Apple TV."
  }, {
    "title": "TVMLKit JS",
    "id": 62,
    "url": "https://developer.apple.com/documentation/tvmljs",
    "resource_type": "documentation",
    "description": "Create tvOS client-server apps using web technologies to stream media and respond to events."
  }, {
    "title": "TVMLKit",
    "id": 61,
    "url": "https://developer.apple.com/documentation/tvmlkit",
    "resource_type": "documentation",
    "description": "Create client-server apps by incorporating JavaScript and TVML files in your binary app."
  }, {
    "title": "ReplayKit",
    "id": 60,
    "url": "https://developer.apple.com/documentation/replaykit",
    "resource_type": "documentation",
    "description": "Record or stream video from the screen, and audio from the app and microphone."
  }, {
    "title": "Core NFC",
    "id": 59,
    "url": "https://developer.apple.com/documentation/corenfc",
    "resource_type": "documentation",
    "description": "Detect NFC tags and read messages that contain NDEF data."
  }, {
    "title": "Metal Performance Shaders",
    "id": 56,
    "url": "https://developer.apple.com/documentation/metalperformanceshaders",
    "resource_type": "documentation",
    "description": "Optimize graphics and compute performance with kernels that are fine-tuned for the unique characteristics of each Metal GPU family."
  }, {
    "title": "Sparse Solvers",
    "id": 55,
    "url": "https://developer.apple.com/documentation/accelerate/sparse_solvers",
    "resource_type": "documentation",
    "description": "Solve systems of equations where the coefficient matrix is sparse."
  }, {
    "title": "Media Player",
    "id": 54,
    "url": "https://developer.apple.com/documentation/mediaplayer",
    "resource_type": "documentation",
    "description": "Find and play songs, audio podcasts, audio books, and more from within your app."
  }, {
    "title": "StoreKit",
    "id": 53,
    "url": "https://developer.apple.com/documentation/storekit",
    "resource_type": "documentation",
    "description": "Support in-app purchases and interactions with the App Store."
  }, {
    "title": "AVFoundation",
    "id": 52,
    "url": "https://developer.apple.com/documentation/avfoundation",
    "resource_type": "documentation",
    "description": "Work with audiovisual assets, control device cameras, process audio, and configure system audio interactions."
  }, {
    "title": "HKWorkoutSession",
    "id": 49,
    "url": "https://developer.apple.com/documentation/healthkit/hkworkoutsession",
    "resource_type": "documentation",
    "description": "A workout session that tracks the user’s workout on Apple Watch."
  }, {
    "title": "Xcode Help",
    "id": 48,
    "url": "https://help.apple.com/xcode/mac/current/",
    "resource_type": "documentation",
    "description": "Xcode provides tools to manage your entire development workflow—from creating your app to testing, optimizing, and submitting it to the App Store."
  }, {
    "title": "Apple Music API Reference",
    "id": 47,
    "url": "https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/AppleMusicWebServicesReference",
    "resource_type": "documentation",
    "description": "A reference book describing the authorization process and the available endpoints for the Apple Music API."
  }, {
    "title": "Using Swift with Cocoa and Objective-C (Swift 4)",
    "id": 46,
    "url": "https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps",
    "resource_type": "guide",
    "description": "Describes various aspects of Swift's compatibility with the Objective-C language and Cocoa/Cocoa Touch frameworks."
  }, {
    "title": "The Swift Programming Language",
    "id": 45,
    "url": "https://docs.swift.org/swift-book/",
    "resource_type": "guide",
    "description": "The definitive guide to Swift, Apple’s programming language for building iOS, macOS, watchOS, and tvOS apps."
  }, {
    "title": "App Store Connect Help",
    "id": 44,
    "url": "https://help.apple.com/itunes-connect/developer/",
    "resource_type": "documentation",
    "description": "You use App Store Connect to submit and manage your apps for sale on the App Store, and to distribute beta versions of your app using TestFlight."
  }, {
    "title": "Frame Capture Debugging Tools",
    "id": 42,
    "url": "https://developer.apple.com/documentation/metal/frame_capture_debugging_tools",
    "resource_type": "documentation",
    "description": "Analyze and optimize your app performance at runtime."
  }, {
    "title": "setViewports:count:",
    "id": 41,
    "url": "https://developer.apple.com/documentation/metal/mtlrendercommandencoder/2869738-setviewports",
    "resource_type": "documentation",
    "description": "Sets an array of viewports."
  }, {
    "title": "dispatchThreads(_:threadsPerThreadgroup:)",
    "id": 40,
    "url": "https://developer.apple.com/documentation/metal/mtlcomputecommandencoder/2866532-dispatchthreads",
    "resource_type": "documentation",
    "description": "Encodes a compute command using an arbitrarily sized grid."
  }, {
    "title": "MTLPixelFormat.bgr10a2Unorm",
    "id": 39,
    "url": "https://developer.apple.com/documentation/metal/mtlpixelformat/bgr10a2unorm",
    "resource_type": "documentation",
    "description": "A 32-bit packed pixel format with four normalized unsigned integer components: 10-bit blue, 10-bit green, 10-bit red, and 2-bit alpha."
  }, {
    "title": "Metal",
    "id": 38,
    "url": "https://developer.apple.com/documentation/metal",
    "resource_type": "documentation",
    "description": "Render advanced 3D graphics and perform data-parallel computations using graphics processors."
  }, {
    "title": "MTLDrawable",
    "id": 37,
    "url": "https://developer.apple.com/documentation/metal/mtldrawable",
    "resource_type": "documentation",
    "description": "A displayable resource that can be rendered or written to."
  }, {
    "title": "Using Programmable Sample Positions",
    "id": 36,
    "url": "https://developer.apple.com/documentation/metal/render_pass/using_programmable_sample_positions",
    "resource_type": "documentation",
    "description": "Configure the position of samples when rendering to a multisampled render target."
  }, {
    "title": "MTLDeviceNotificationHandler",
    "id": 35,
    "url": "https://developer.apple.com/documentation/metal/mtldevicenotificationhandler",
    "resource_type": "documentation",
    "description": "A block of code invoked when a device observer receives a notification."
  }, {
    "title": "About Argument Buffers",
    "id": 34,
    "url": "https://developer.apple.com/documentation/metal/buffers/about_argument_buffers",
    "resource_type": "documentation",
    "description": "Improve your app’s performance by grouping your resources into an argument buffer."
  }, {
    "title": "Model I/O",
    "id": 33,
    "url": "https://developer.apple.com/documentation/modelio",
    "resource_type": "documentation",
    "description": "Import, export, and manipulate 3D models using a common infrastructure that integrates MetalKit, GLKit, and SceneKit."
  }, {
    "title": "Metal Shading Language Specification",
    "id": 31,
    "url": "https://developer.apple.com/metal/metal-shading-language-specification.pdf",
    "resource_type": "guide",
    "description": "The Metal shading language is used to write graphics and compute functions that are executed on the GPU. Version 2.0 of the Metal shading language adds new features such as Raster Order Groups, Indirect Argument Buffers, Arrays of Samplers, Uniform Types, and much more."
  }, {
    "title": "PhotosUI",
    "id": 30,
    "url": "https://developer.apple.com/documentation/photosui",
    "resource_type": "documentation",
    "description": "Create custom extensions for editing photo, video, and Live Photos content in the Photos app. Add views to your app to display Live Photos content interactively."
  }, {
    "title": "Photos",
    "id": 29,
    "url": "https://developer.apple.com/documentation/photos",
    "resource_type": "documentation",
    "description": "Work with image and video assets managed by the Photos app, including those from iCloud Photo Library and Live Photos. Fetch and cache full-sized assets or thumbnails asynchronously, revise content, and sync revisions to multiple devices."
  }, {
    "title": "Cameras and Media Capture",
    "id": 28,
    "url": "https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture",
    "resource_type": "documentation",
    "description": "Capture photos and record video and audio; configure built-in cameras and microphones or external capture devices."
  }, {
    "title": "Core ML",
    "id": 27,
    "url": "https://developer.apple.com/documentation/coreml",
    "resource_type": "documentation",
    "description": "Integrate machine learning models into your app."
  }, {
    "title": "SceneKit",
    "id": 26,
    "url": "https://developer.apple.com/documentation/scenekit",
    "resource_type": "documentation",
    "description": "Create 3D games and add 3D content to apps using high-level scene descriptions. Easily add animations, physics simulation, particle effects, and realistic physically based rendering."
  }, {
    "title": "ARKit",
    "id": 25,
    "url": "https://developer.apple.com/documentation/arkit",
    "resource_type": "documentation",
    "description": "Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game."
  }, {
    "title": "Apple File System Guide",
    "id": 24,
    "url": "https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/APFS_Guide/",
    "resource_type": "guide",
    "description": "Apple File System is a new, modern file system for iOS, macOS, tvOS, and watchOS. It is optimized for Flash/SSD storage and features strong encryption, copy-on-write metadata, space sharing, cloning for files and directories, snapshots, fast directory sizing, atomic safe-save primitives, and improved file system fundamentals."
  }, {
    "title": "Undefined Behavior Sanitizer",
    "id": 23,
    "url": "https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer",
    "resource_type": "documentation",
    "description": "Discover and fix undefined behavior in your code."
  }, {
    "title": "Code Diagnostics",
    "id": 22,
    "url": "https://developer.apple.com/documentation/code_diagnostics",
    "resource_type": "documentation",
    "description": "Enable runtime checks to detect and avoid bugs in your code."
  }, {
    "title": "NSLinguisticTagger",
    "id": 21,
    "url": "https://developer.apple.com/documentation/foundation/nslinguistictagger",
    "resource_type": "documentation",
    "description": "Analyze natural language text to tag part of speech and lexical class, identify names, perform lemmatization, and determine the language and script."
  }, {
    "title": "WatchConnectivity",
    "id": 20,
    "url": "https://developer.apple.com/documentation/watchconnectivity",
    "resource_type": "documentation",
    "description": "Implement two-way communication between an iOS app and its paired watchOS app."
  }, {
    "title": "Drag and Drop",
    "id": 19,
    "url": "https://developer.apple.com/documentation/uikit/drag_and_drop",
    "resource_type": "documentation",
    "description": "Bring drag and drop to your app by using interaction APIs with your views."
  }, {
    "title": "Apple Design Site",
    "id": 17,
    "url": "https://developer.apple.com/design/",
    "resource_type": "guide",
    "description": "Guidelines for designing great apps."
  }, {
    "title": "UserNotifications",
    "id": 16,
    "url": "https://developer.apple.com/documentation/usernotifications",
    "resource_type": "documentation",
    "description": "Push user-facing notifications to the user's device from a server, or generate them locally from your app."
  }, {
    "title": "Human Interface Guidelines for CarPlay Apps",
    "id": 15,
    "url": "https://developer.apple.com/design/human-interface-guidelines/carplay/",
    "resource_type": "guide",
    "description": "Guidelines for designing great CarPlay apps."
  }, {
    "title": "Human Interface Guidelines for watchOS",
    "id": 14,
    "url": "https://developer.apple.com/design/human-interface-guidelines/watchos/",
    "resource_type": "guide",
    "description": "Guidelines for designing great watchOS apps."
  }, {
    "title": "Human Interface Guidelines for tvOS",
    "id": 13,
    "url": "https://developer.apple.com/design/human-interface-guidelines/tvos/",
    "resource_type": "guide",
    "description": "Guidelines for designing great tvOS apps."
  }, {
    "title": "SiriKit",
    "id": 12,
    "url": "https://developer.apple.com/documentation/sirikit",
    "resource_type": "documentation",
    "description": "Handle user requests for your app’s services that originate from Siri or Maps."
  }, {
    "title": "Human Interface Guidelines for macOS",
    "id": 11,
    "url": "https://developer.apple.com/design/human-interface-guidelines/macos/",
    "resource_type": "guide",
    "description": "Guidelines for designing great macOS apps."
  }, {
    "title": "Human Interface Guidelines for iOS",
    "id": 10,
    "url": "https://developer.apple.com/design/human-interface-guidelines/ios/",
    "resource_type": "guide",
    "description": "Guidance for designing great iOS apps."
  }, {
    "title": "WatchKit",
    "id": 9,
    "url": "https://developer.apple.com/documentation/watchkit",
    "resource_type": "documentation",
    "description": "Build apps that leverage watchOS features like background tasks, extended runtime sessions, and access to the Digital Crown."
  }, {
    "title": "ClockKit",
    "id": 5,
    "url": "https://developer.apple.com/documentation/clockkit",
    "resource_type": "documentation",
    "description": "Display app-specific data in the complications on the clock face."
  }, {
    "title": "UserNotificationsUI",
    "id": 4,
    "url": "https://developer.apple.com/documentation/usernotificationsui",
    "resource_type": "documentation",
    "description": "Customize the interface that displays local and remote notifications."
  }, {
    "title": "UIKit",
    "id": 3,
    "url": "https://developer.apple.com/documentation/uikit",
    "resource_type": "documentation",
    "description": "Construct and manage a graphical, event-driven user interface for your iOS or tvOS app."
  }, {
    "title": "Fonts In Use",
    "id": 1,
    "url": "https://fontsinuse.com",
    "resource_type": "documentation",
    "description": "A great resource and source of inspiration for style matching with a wide variety of styles, origins and medias."
  }],
  "imageTypes": [{
    "name": "square",
    "variants": [{
      "width": 162,
      "height": 162
    }]
  }, {
    "name": "wide",
    "variants": [{
      "width": 85,
      "height": 48
    }, {
      "width": 162,
      "height": 91
    }, {
      "width": 217,
      "height": 122
    }, {
      "width": 250,
      "height": 141
    }, {
      "width": 304,
      "height": 171
    }, {
      "width": 375,
      "height": 211
    }, {
      "width": 414,
      "height": 233
    }, {
      "width": 466,
      "height": 262
    }, {
      "width": 900,
      "height": 506
    }]
  }]
};
},{}],"docs.json":[function(require,module,exports) {
module.exports = [{
  "name": "wwdc2019-237",
  "body": "Dave Abraham & John Harper\n\nLayout System\n- “Layout is about determining the bounds of what you see on the screen”\n- Root View -> Content View -> Text, root view is already minus the safe area insets\n- Modifier: `.edgesIgnoreingSafeArea(true)`\n- Parent proposes size for a child, but child chooses its own size\n- Modifiers: `.aspectRatio(1)`, `.frame(width: height:)`\n- SwiftUI rounds to nearest pixel\n- `.padding()` uses adaptive padding, automatically resizes padding depending on environment\n- By default, Image’s are fixed size\n- Adaptive Spacing & Edge to Edge spacing adheres to Human Interface Design Guidelines\n- How Stacks work: walkthrough about how the child sizes are calculated\n- `.layoutPriority(1)`, default priority is 0. Children are examined in layout priority order.\n- Alignments include `.lastTextBaseline` which align all text baselines to the bottom (ict `.bottom`)\n- `aligmentGuide(<.alignment>) { d in d[.bottom] * 0.98 }`\n- Custom ‘AlignmentID’ for deep nested subview alignment.\n\nCustom Views\n- Demo code of creating a colorwheel\n- Custom Shapes: adhere to `Shape { func path(in rect: CGRect) -> Path, optional var animatableData: AnimatableData }`\n- Modifier: `.tapAction { … }`\n- Custom Transisitions (scaleAndFade shown in demo)\n- Uses `ViewModifier { func body(content: Content) -> some View }`\n- `let transition = AnyTransition.modifier(active: modifier identity: modifier)`\n- `.drawingGroup()` draws everything with Metal on GPU in CALayer\n"
}];
},{}],"src/app.tsx":[function(require,module,exports) {
var global = arguments[3];
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

exports.__esModule = true;

var react_1 = __importDefault(require("react"));

var react_dom_1 = __importDefault(require("react-dom"));

var Controls_1 = __importDefault(require("./Controls"));

var Video_1 = __importDefault(require("./Video"));

var review_json_1 = require("../review.json");

var data = __importStar(require("../contents.json"));

var docs = __importStar(require("../docs.json"));

global.React = react_1["default"];
global.data = data;
global.videos = data.contents.filter(function (c) {
  return c.id.startsWith("wwdc2019");
}).filter(function (c) {
  return c.type === "Session";
});
global.docs = docs;
var docsById = Object.keys(docs).map(function (key) {
  return docs[key];
}).reduce(function (prev, next) {
  var _a;

  return __assign({}, prev, (_a = {}, _a[next.name] = next.body, _a));
}, {});
var videos = global.videos;

var App =
/** @class */
function (_super) {
  __extends(App, _super);

  function App() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var _this = _super.apply(this, args) || this;

    _this.state = {
      filters: [],
      bookmarks: [],
      showBookmarkedOnly: false
    };

    if (localStorage) {
      var stored = localStorage.getItem("data");

      if (stored) {
        _this.state = JSON.parse(stored);
      }
    }

    return _this;
  }

  App.prototype.toggleFilter = function (name, selected) {
    if (name === "all") {
      if (selected) {
        this.setState({
          filters: []
        });
      }
    } else {
      if (!selected) {
        // remove
        this.setState({
          filters: this.state.filters.filter(function (s) {
            return s !== name;
          })
        });
      } else {
        // add
        this.setState({
          filters: this.state.filters.concat([name])
        });
      }
    }
  };

  App.prototype.toggleBookmark = function (name, selected) {
    if (!selected) {
      // remove
      this.setState({
        bookmarks: this.state.bookmarks.filter(function (s) {
          return s !== name;
        })
      });
    } else {
      // add
      this.setState({
        bookmarks: this.state.bookmarks.concat([name])
      });
    }
  };

  App.prototype.render = function () {
    var _this = this; // Save shown state for later


    localStorage.setItem("data", JSON.stringify(this.state)); // Calculated filter view data

    var tagObjects = Object.keys(review_json_1.tags).map(function (tagName) {
      return __assign({
        id: tagName,
        selected: _this.state.filters.indexOf(tagName) >= 0
      }, review_json_1.tags[tagName]);
    }); // Add non-data bookmark filter

    tagObjects.push({
      id: "bookmark",
      type: "state",
      selected: this.state.filters.indexOf("bookmark") >= 0,
      name: "Bookmarks"
    }); // Add 'all' negative filter

    var showAll = this.state.filters.length === 0 || tagObjects.length === this.state.filters.length;
    tagObjects.unshift({
      id: "all",
      name: "All",
      selected: showAll,
      type: "all"
    });
    var filteredVideos = videos;

    if (!showAll) {
      filteredVideos = videos.filter(function (video) {
        return _this.matchesFilters(video.id);
      });
    }

    return React.createElement("div", null, React.createElement("div", {
      className: "controls"
    }, React.createElement("div", {
      className: "filters"
    }, Controls_1["default"](tagObjects.filter(function (t) {
      return t.type === "all";
    }), this.toggleFilter.bind(this))), React.createElement("div", {
      className: "filters"
    }, "Filters: ", Controls_1["default"](tagObjects.filter(function (t) {
      return t.type === "state";
    }), this.toggleFilter.bind(this))), React.createElement("div", {
      className: "tracks"
    }, "Tracks:  ", Controls_1["default"](tagObjects.filter(function (t) {
      return t.type === "track";
    }), this.toggleFilter.bind(this)))), React.createElement("div", {
      className: "videos"
    }, filteredVideos.map(function (video) {
      return Video_1["default"](__assign({}, video, {
        bookmarked: _this.state.bookmarks.indexOf(video.id) >= 0,
        summary: docsById[video.id]
      }), _this.toggleBookmark.bind(_this));
    })));
  };

  App.prototype.matchesFilters = function (videoId) {
    var _this = this;

    return this.state.filters.some(function (filterId) {
      switch (filterId) {
        // if the video is bookmarked
        case "bookmark":
          return _this.state.bookmarks.indexOf(videoId) >= 0;
        // if the video list of the tag contains this video 

        case "summarized":
          return docsById[videoId] ? true : false;

        default:
          return review_json_1.tags[filterId].videos.indexOf(videoId) >= 0;
      }
    });
  };

  return App;
}(react_1["default"].Component);

react_dom_1["default"].render(React.createElement(App, null), document.getElementById('root'));
},{"react":"node_modules/react/index.js","react-dom":"node_modules/react-dom/index.js","./Controls":"src/Controls.tsx","./Video":"src/Video.tsx","../review.json":"review.json","../contents.json":"contents.json","../docs.json":"docs.json"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "50804" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/app.tsx"], null)
//# sourceMappingURL=/app.686bda2c.js.map